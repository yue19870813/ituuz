{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/uploads/wechat-qcode.jpg","path":"uploads/wechat-qcode.jpg","modified":0,"renderable":0},{"_id":"source/uploads/wechat_charge.jpg","path":"uploads/wechat_charge.jpg","modified":0,"renderable":0},{"_id":"source/uploads/alipay_charge.jpg","path":"uploads/alipay_charge.jpg","modified":0,"renderable":0},{"_id":"source/images/111.png","path":"images/111.png","modified":0,"renderable":0},{"_id":"source/images/design_1_commond.png","path":"images/design_1_commond.png","modified":0,"renderable":0},{"_id":"source/images/design_3_single.png","path":"images/design_3_single.png","modified":0,"renderable":0},{"_id":"source/images/pomodoro_data.png","path":"images/pomodoro_data.png","modified":0,"renderable":0},{"_id":"source/images/pomodoro_technique.png","path":"images/pomodoro_technique.png","modified":0,"renderable":0},{"_id":"source/images/tree_2_sql.png","path":"images/tree_2_sql.png","modified":0,"renderable":0},{"_id":"source/images/12132.png","path":"images/12132.png","modified":0,"renderable":0},{"_id":"source/images/2222.jpg","path":"images/2222.jpg","modified":0,"renderable":0},{"_id":"source/images/design_2_observer.png","path":"images/design_2_observer.png","modified":0,"renderable":0},{"_id":"source/images/code.png","path":"images/code.png","modified":0,"renderable":0},{"_id":"source/images/files.png","path":"images/files.png","modified":0,"renderable":0},{"_id":"source/images/ineditor.png","path":"images/ineditor.png","modified":0,"renderable":0},{"_id":"source/images/mvc.png","path":"images/mvc.png","modified":0,"renderable":0},{"_id":"themes/next-reloaded/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/affix.js","path":"js/affix.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/exturl.js","path":"js/exturl.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/js.cookie.js","path":"js/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/post-details.js","path":"js/post-details.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/scroll-cookie.js","path":"js/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/scrollspy.js","path":"js/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next-reloaded/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"source/images/cats.gif","path":"images/cats.gif","modified":0,"renderable":0},{"_id":"source/uploads/avatar.png","path":"uploads/avatar.png","modified":0,"renderable":0},{"_id":"source/images/shader-transfer-1.gif","path":"images/shader-transfer-1.gif","modified":0,"renderable":0},{"_id":"source/images/shader-transfer-2.gif","path":"images/shader-transfer-2.gif","modified":0,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"f3ec92164503113069ecd096360a8b82c1c7cde5","modified":1561984547379},{"_id":"source/.DS_Store","hash":"92a98281b2b198460e24cdc8cba15acb530024ee","modified":1563204528555},{"_id":"themes/next-reloaded/.all-contributorsrc","hash":"a861e51d8b604bd98c4aac9f4338fa4fb2084a32","modified":1563684104103},{"_id":"themes/next-reloaded/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1563684104103},{"_id":"themes/next-reloaded/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1563684104104},{"_id":"themes/next-reloaded/.gitignore","hash":"b80cec1d5e6a73d1cec382aad8046d1352a1e963","modified":1563684104107},{"_id":"themes/next-reloaded/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1563684104104},{"_id":"themes/next-reloaded/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1563684104107},{"_id":"themes/next-reloaded/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1563684104104},{"_id":"themes/next-reloaded/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1563684104107},{"_id":"themes/next-reloaded/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1563684104108},{"_id":"themes/next-reloaded/README.md","hash":"2fcc7621e898732ef7976b89ca2511f84c577c35","modified":1563684104108},{"_id":"themes/next-reloaded/bower.json","hash":"e6a80b9ed2d618d1cca5781952c67167a7cfac07","modified":1563684104108},{"_id":"themes/next-reloaded/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1563684104109},{"_id":"themes/next-reloaded/gulpfile.coffee","hash":"899001c864f975082ca1bc6b3fe3c614007baf8a","modified":1563684104112},{"_id":"themes/next-reloaded/_config.yml","hash":"2aae7fbd23efd258fa6ce3c314598dc8791c6528","modified":1563689215587},{"_id":"themes/next-reloaded/package.json","hash":"abefbba4150026ec8b3d8e79c7e874964bd3dc76","modified":1563684104131},{"_id":"source/_posts/20171122_项目架构和管理.md","hash":"0368cf7cdcdfcff8d6b17b4e4f1a878a5fbd7288","modified":1561984547379},{"_id":"source/_posts/20171123_项目架构和管理_引擎选择.md","hash":"c2e120ed152fc2a33ae5cf48654331fc7fe966b5","modified":1561984547379},{"_id":"source/_posts/20171214_项目架构和管理_网络通信.md","hash":"d54960e554ccb62de7416aa61af94100d365e718","modified":1561984547379},{"_id":"source/_posts/20171219_项目架构和管理_项目结构及编程规范.md","hash":"8c7806187c79a349b2d8cdace34c36e13f5ef4b1","modified":1561984547380},{"_id":"source/_posts/Grid-1.md","hash":"b7b955ca89c5de85a42fe81f30a84b40ce1ad325","modified":1561984547380},{"_id":"source/_posts/Grid-2.md","hash":"266ce458643aad13fe62fe7e7859626d5ea03b67","modified":1561984547380},{"_id":"source/_posts/QtNotes.md","hash":"740be2e4a47257a5e3381397d1a750a1f4dd9210","modified":1561984547381},{"_id":"source/_posts/Tree-1.md","hash":"4d506074e4b3a541ea2587177dbf2843849da8da","modified":1561984547381},{"_id":"source/_posts/Tree-2.md","hash":"4074f0bff3c8609e7d8bee66e5e235b8ba298f37","modified":1561984547381},{"_id":"source/_posts/Java多线程实现生产者与消费者.md","hash":"f15523eb88d4ce08d2c31f103c025c39f670ffb4","modified":1561984547380},{"_id":"source/_posts/Tree-3.md","hash":"197d1b17cb240bb9d4d605a7d618b205d45b9068","modified":1561984547381},{"_id":"source/_posts/WebService复杂类型数据传输-dom4j方式.md","hash":"5c34a4996a7437b3df07199523010571cae8ff6a","modified":1561984547381},{"_id":"source/_posts/PomodoroTechnique.md","hash":"aa727061dc6565f897d568a25d30100c31bbac8a","modified":1561984547380},{"_id":"source/_posts/cocos2dx-xingneng.md","hash":"b004ec2ce38381845aea5e0f3ca195be74ecba8c","modified":1561984547382},{"_id":"source/_posts/coding-xingge.md","hash":"fea1787e6a74109206fb19e01d985b25842e6b8c","modified":1561984547382},{"_id":"source/_posts/design-observer.md","hash":"c1d38c220f5bd670252801c0518ab3b5bf1fc5a5","modified":1561984547382},{"_id":"source/_posts/design-commond.md","hash":"847c59ca99d52b982ea364adeb82616e3a1be71d","modified":1561984547382},{"_id":"source/_posts/design-single.md","hash":"56ddbff0af4b294fa53dc11fe315fc1a51164b86","modified":1561984547383},{"_id":"source/_posts/js-perfor.md","hash":"f6ff8bd0b38f5db8bcc125764e6f82380bba4fa8","modified":1561984547383},{"_id":"source/_posts/js-performance-optimize.md","hash":"dbca6d2044e70a26068b77b0935c53daf8dc246a","modified":1561984547383},{"_id":"source/_posts/js-closure.md","hash":"1f9ccc5668ac67f5ae5351ab5c105c8fa47a0745","modified":1561984547383},{"_id":"source/_posts/rich-father.md","hash":"25c35db3b39f61fbea353356f05aaeaded084ea1","modified":1561984547383},{"_id":"source/_posts/javascript-propertype.md","hash":"43c38201e7f26572340e36cef194c09124612a85","modified":1561986053271},{"_id":"source/_posts/lightMVC-1.md","hash":"a4b33793ffc9d095e2d244cfb7c26dcb5c1debc5","modified":1563208867880},{"_id":"source/_posts/shader-transfer.md","hash":"c61828a64100aa123bfeba825c3ba4fd423b6824","modified":1561984547383},{"_id":"source/_posts/the-importance-of-project-prepa.md","hash":"e0de4f72f3497dd40b00353d9b51eaddb5345ddb","modified":1561984547383},{"_id":"source/_posts/typescript-to-lib.md","hash":"89fa729f676a9bd372d9c3856834a8c842f16b7b","modified":1561984547384},{"_id":"source/_posts/第一篇文章.md","hash":"8b62d61891fe257114e25dd1f1a6047c54a25fea","modified":1561984547384},{"_id":"source/about/index.md","hash":"a78329ac5cab650b8664a3c5af944f543c0e061a","modified":1561984547384},{"_id":"source/categories/index.md","hash":"89914f71eee8f1e5ea0fa97bd882ab51b0af0dd7","modified":1561984547384},{"_id":"source/_posts/透明渐变过渡2-0.md","hash":"ea9f30ad8e8987334faa4c2638f9c4416705106f","modified":1563550975815},{"_id":"source/tags/index.md","hash":"5ae176db3b3d495e71c7bdff43e2758c0b18baaa","modified":1561984547402},{"_id":"source/uploads/wechat-qcode.jpg","hash":"66a67a4919f2732680ea19a0b7bcb63bbe3339f3","modified":1561984547404},{"_id":"source/uploads/wechat_charge.jpg","hash":"64c05bc1bbc5c32f0871748ca9487a4bd87ea3fc","modified":1561984547404},{"_id":"source/uploads/alipay_charge.jpg","hash":"bf0a359dd5714466cfdfb89ebacb1b83e856cfbc","modified":1561984547403},{"_id":"source/images/111.png","hash":"e2eecb34be869203e661a0bd284c1c1094cd4f45","modified":1563467710870},{"_id":"source/images/design_1_commond.png","hash":"a94e556b8a58b1f2892a1a39f9a067077275432c","modified":1561984547385},{"_id":"source/images/design_3_single.png","hash":"fbffe1afd7c4ff90e14640d3d280b140c1295158","modified":1561984547387},{"_id":"source/images/pomodoro_data.png","hash":"e5d10d0dac270ad0e11143b422444c6f7a6a38d3","modified":1561984547387},{"_id":"source/images/pomodoro_technique.png","hash":"ce224fb6395b0364d89e804a52e21bfa075cc92a","modified":1561984547388},{"_id":"themes/next-reloaded/.github/CODE_OF_CONDUCT.md","hash":"c149f003d03501565e7688915cd8f2e99fbf8f42","modified":1563684104104},{"_id":"source/images/tree_2_sql.png","hash":"de2b3149af56628db975af173fc3e61b4614b999","modified":1561984547402},{"_id":"themes/next-reloaded/.github/CONTRIBUTING.md","hash":"d366609651386c65ee842d47d10d7cf971790383","modified":1563684104105},{"_id":"themes/next-reloaded/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1563684104105},{"_id":"themes/next-reloaded/.github/auto_assign.yml","hash":"cb68a1dca1c4623448c2ca899614a9f21df1b036","modified":1563684104106},{"_id":"themes/next-reloaded/.github/PULL_REQUEST_TEMPLATE.md","hash":"3239625bb2573e61f7bcce27a74882a9ff7021e9","modified":1563684104106},{"_id":"themes/next-reloaded/.github/config.yml","hash":"8a5cbf5aa9529390fe0a782758aca9c3a02f9dcf","modified":1563684104106},{"_id":"themes/next-reloaded/.github/eslint-disable-bot.yml","hash":"16541fb7b80f5ab90135db96285badb63c4d7d3e","modified":1563684104106},{"_id":"themes/next-reloaded/.github/lock.yml","hash":"585d2c471047be320aa62f2b74dad797bf09c530","modified":1563684104106},{"_id":"themes/next-reloaded/.github/stale.yml","hash":"41bf97ee86b8940a0b2e754499ec77fd2b44b717","modified":1563684104107},{"_id":"themes/next-reloaded/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1563684104106},{"_id":"themes/next-reloaded/.github/release-drafter.yml","hash":"c9fdbbdf712327a8ae1ed5972973a75802e245bc","modified":1563684104107},{"_id":"themes/next-reloaded/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1563684104107},{"_id":"themes/next-reloaded/.github/topissuebot.yml","hash":"10665bf2b5aba351725715c71e94ad183a0e8f18","modified":1563684104107},{"_id":"themes/next-reloaded/.github/weekly-digest.yml","hash":"404e4ccb7fcd6587bc9b0247a7a7ff256d21f2cb","modified":1563684104107},{"_id":"themes/next-reloaded/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1563684104109},{"_id":"themes/next-reloaded/docs/ALGOLIA-SEARCH.md","hash":"4094dab82cbdfdd0de117e94b508bbd5ceb3d363","modified":1563684104109},{"_id":"themes/next-reloaded/docs/AUTHORS.md","hash":"265b3ae69a83efb2e0ce5308ef2dc0f5f1ea0b56","modified":1563684104109},{"_id":"themes/next-reloaded/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1563684104110},{"_id":"themes/next-reloaded/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1563684104109},{"_id":"themes/next-reloaded/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1563684104110},{"_id":"themes/next-reloaded/docs/MATH.md","hash":"026d2cff73c22a30ea39c50783557ff4913aceac","modified":1563684104110},{"_id":"themes/next-reloaded/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"b8fa118856f6992f7416697c4b96531b7c9816a0","modified":1563684104110},{"_id":"themes/next-reloaded/docs/UPDATE-FROM-5.1.X.md","hash":"a07ca23c38f6e4dddd4b74016b30e88cd3796f75","modified":1563684104110},{"_id":"themes/next-reloaded/languages/de.yml","hash":"88dcfa3e53cef1b7f858f98ca9f980179169ae4c","modified":1563684104112},{"_id":"themes/next-reloaded/languages/default.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1563684104113},{"_id":"themes/next-reloaded/languages/es.yml","hash":"a5203c7bbae70bc40f2ee526f9e8105ca9be851e","modified":1563684104113},{"_id":"themes/next-reloaded/languages/en.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1563684104113},{"_id":"themes/next-reloaded/languages/fa.yml","hash":"cc1f3a13e020e2cc666ddc57aaebc4c1ebd669d0","modified":1563684104113},{"_id":"themes/next-reloaded/languages/fr.yml","hash":"c1e2e892c678920854e1f3df409118398523849e","modified":1563684104113},{"_id":"themes/next-reloaded/languages/hu.yml","hash":"3b4c10c86a228da70dc4b1a1784a6f942e186032","modified":1563684104113},{"_id":"themes/next-reloaded/languages/id.yml","hash":"3a9f4485e6801e0e6fae749133a52e3797760795","modified":1563684104114},{"_id":"themes/next-reloaded/languages/it.yml","hash":"28ff9197a3d21e838e33bb026d8adb544320cb1a","modified":1563684104114},{"_id":"themes/next-reloaded/languages/nl.yml","hash":"6f4a339ecc67a140f3f9c7bec369cbda6b45afd7","modified":1563684104114},{"_id":"themes/next-reloaded/languages/ja.yml","hash":"8f85a6500716191159f16c7f484ba61ddd16eeb6","modified":1563684104114},{"_id":"themes/next-reloaded/languages/ko.yml","hash":"1df31bf037bcb6868a4bd60c49ff55eec5b8167f","modified":1563684104114},{"_id":"themes/next-reloaded/languages/pt-BR.yml","hash":"301a0535df5de7b585c7c9752053c41c6ef26f9b","modified":1563684104115},{"_id":"themes/next-reloaded/languages/pt.yml","hash":"6d87701443e33a13574049e613f064f1eb250c95","modified":1563684104115},{"_id":"themes/next-reloaded/languages/ru.yml","hash":"93872ac01074159566ee3e1738eea6e9216bab8e","modified":1563684104115},{"_id":"themes/next-reloaded/languages/tr.yml","hash":"5489606e6c40c0b226a3414c8e5037aac965211d","modified":1563684104115},{"_id":"themes/next-reloaded/languages/uk.yml","hash":"765ba405778f07d7ec3713606568852b04e1a862","modified":1563684104115},{"_id":"themes/next-reloaded/languages/vi.yml","hash":"6a812db8606498980cd64f001e9ef2f50e124809","modified":1563684104115},{"_id":"themes/next-reloaded/languages/zh-CN.yml","hash":"f311ad2cc2edba144764c36c0035b6ed0d356a53","modified":1563684104116},{"_id":"themes/next-reloaded/languages/zh-HK.yml","hash":"7a5e47f561d4b6e132f7f3b09676afbf8520264e","modified":1563684104116},{"_id":"themes/next-reloaded/languages/zh-TW.yml","hash":"3f3674cac8f47a9a509a7557ea1557bbfbd027e8","modified":1563684104116},{"_id":"themes/next-reloaded/layout/_layout.swig","hash":"4c959a459343ba2b931dfbd6d5239bca77e12dd8","modified":1563684104117},{"_id":"themes/next-reloaded/layout/page.swig","hash":"29c64c7031aaf276d3d11cdf2e95025996fd6eed","modified":1563684104130},{"_id":"themes/next-reloaded/layout/index.swig","hash":"9b4733d037c360e8504645b1d6c6dd17817c9d7b","modified":1563684104130},{"_id":"themes/next-reloaded/layout/post.swig","hash":"f74929fd792541916eb25c2addfb35431be071ba","modified":1563684104130},{"_id":"themes/next-reloaded/layout/schedule.swig","hash":"3268dd3d90d8b0e142cfa1a2ebb23355baeda148","modified":1563684104130},{"_id":"themes/next-reloaded/layout/tag.swig","hash":"a6be69a90924c9d2f4d90fb4867234859bd2c2e9","modified":1563684104131},{"_id":"themes/next-reloaded/scripts/injects-point.js","hash":"e6ef2f179c4d52d3175e655f9725d6195b5be51b","modified":1563684104132},{"_id":"themes/next-reloaded/layout/archive.swig","hash":"7e8f3a41a68e912f2b2aaba905d314306ccaf794","modified":1563684104130},{"_id":"themes/next-reloaded/layout/category.swig","hash":"dda0e6b2139decaf5e865d22ec9d45fdb615a703","modified":1563684104130},{"_id":"themes/next-reloaded/scripts/injects.js","hash":"f11bf387782cc0fcc8e64a374abbcad5b9e080c8","modified":1563684104132},{"_id":"themes/next-reloaded/scripts/merge-configs.js","hash":"8d2d3844ad5c29206a05986ab1e6deb88667537e","modified":1563684104132},{"_id":"themes/next-reloaded/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1563684104133},{"_id":"themes/next-reloaded/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1563684104156},{"_id":"themes/next-reloaded/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1563684104156},{"_id":"themes/next-reloaded/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1563684104156},{"_id":"source/images/12132.png","hash":"7b06ea862b169d11338d590ce817dd2a4df728ad","modified":1563468863453},{"_id":"source/images/2222.jpg","hash":"87f0d580a4b94bfab204976b26e3e02468f0ecd9","modified":1563467760082},{"_id":"source/images/design_2_observer.png","hash":"949aa8bbd7492f0dc8bb9d82aa66653121ba8e88","modified":1561984547386},{"_id":"source/images/code.png","hash":"6e50cb12a5fb0fe12398cdd4aa4116cdcdb48852","modified":1563468755872},{"_id":"source/images/files.png","hash":"c97418426d87aaf6016f6a75475079769c670972","modified":1563550292144},{"_id":"source/images/ineditor.png","hash":"4dfd2936a1d80157667c182ba8817a058f47391a","modified":1563550367992},{"_id":"themes/next-reloaded/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1563684104146},{"_id":"source/images/mvc.png","hash":"c52a4534b15eee76ca2d68eef69adcd74b3fc099","modified":1563121122917},{"_id":"themes/next-reloaded/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c37a60580c901c79ccb22564b228a46e06207445","modified":1563684104105},{"_id":"themes/next-reloaded/.github/ISSUE_TEMPLATE/feature-request.md","hash":"07c423cce4157b8e2dbf60907ccbf3f18c4cf98a","modified":1563684104105},{"_id":"themes/next-reloaded/.github/ISSUE_TEMPLATE/custom-issue-template.md","hash":"57e1e06e845193e80c7df4a4454af28352526f7a","modified":1563684104105},{"_id":"themes/next-reloaded/.github/ISSUE_TEMPLATE/non-english.md","hash":"0b0727ff4d5180ae67f930fb4f8e9488e33eda9f","modified":1563684104105},{"_id":"themes/next-reloaded/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1563684104110},{"_id":"themes/next-reloaded/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1563684104110},{"_id":"themes/next-reloaded/docs/ru/README.md","hash":"932d3965d8b1a1ff653c07a0cafcdbf5892d6945","modified":1563684104111},{"_id":"themes/next-reloaded/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1563684104111},{"_id":"themes/next-reloaded/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"0dfb458370a0ffbbe37c00f53c15e3aa3e79b125","modified":1563684104111},{"_id":"themes/next-reloaded/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"caa624092175d44e3d3a8c6ca23922718da2354c","modified":1563684104111},{"_id":"themes/next-reloaded/docs/zh-CN/CONTRIBUTING.md","hash":"93e45568d6225396efe5168606e856b3c4fd8ad4","modified":1563684104111},{"_id":"themes/next-reloaded/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"2b1d61e216a65210718697d75bbdd84cda671ea4","modified":1563684104112},{"_id":"themes/next-reloaded/docs/zh-CN/MATH.md","hash":"83feca62190abcca0332915ffe0eefe582573085","modified":1563684104112},{"_id":"themes/next-reloaded/docs/zh-CN/README.md","hash":"79a73361b24e7fb7022992702961faacd6a2f9fe","modified":1563684104112},{"_id":"themes/next-reloaded/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"ae9f012ce9216f384777fb56dc35e6e5ca13b901","modified":1563684104112},{"_id":"themes/next-reloaded/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1563684104111},{"_id":"themes/next-reloaded/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1563684104111},{"_id":"themes/next-reloaded/layout/_macro/post-collapse.swig","hash":"89b0a0e64637bf5b0cfea0a23642df3d95eedfa4","modified":1563684104118},{"_id":"themes/next-reloaded/layout/_macro/post.swig","hash":"b7f4b9fb69388a308f2ba430bca035aede001d3d","modified":1563684104118},{"_id":"themes/next-reloaded/layout/_partials/comments.swig","hash":"784356dd77fe96ea1bc4cb0008e2b40de71bf2f0","modified":1563684104118},{"_id":"themes/next-reloaded/layout/_macro/sidebar.swig","hash":"381a52b658bb8d7721e6a3852568ce88a2580f1d","modified":1563684104118},{"_id":"themes/next-reloaded/layout/_partials/github-banner.swig","hash":"6357537ac0bb114aed4d61bafb39e6690a413697","modified":1563684104119},{"_id":"themes/next-reloaded/layout/_partials/footer.swig","hash":"97953309b3ab354b8b7cf011850df42bc14b595d","modified":1563684104119},{"_id":"themes/next-reloaded/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1563684104121},{"_id":"themes/next-reloaded/layout/_partials/post-edit.swig","hash":"06dac109504812b63766a80ede9ddacbd42d227d","modified":1563684104121},{"_id":"themes/next-reloaded/layout/_scripts/commons.swig","hash":"5db3bf74183de45bb4d6e4632a91f1a561467f17","modified":1563684104123},{"_id":"themes/next-reloaded/layout/_scripts/exturl.swig","hash":"61ae10d41f67ece004a025077fdb28724af05090","modified":1563684104123},{"_id":"themes/next-reloaded/layout/_scripts/next-boot.swig","hash":"283e78eb795f52236026434dab6a0667f14d3c08","modified":1563684104123},{"_id":"themes/next-reloaded/layout/_scripts/scroll-cookie.swig","hash":"ccd13d73429ef91ef5e8b7d9fa43c8188facdf41","modified":1563684104124},{"_id":"themes/next-reloaded/layout/_scripts/noscript.swig","hash":"edaff4766e0c05fd5c889d9dd32884d376bef9d9","modified":1563684104123},{"_id":"themes/next-reloaded/layout/_scripts/three.swig","hash":"cf1819fc0a075d2389ca491740c98eba54ba72a6","modified":1563684104124},{"_id":"themes/next-reloaded/layout/_scripts/vendors.swig","hash":"4cb999150bdd41d6a5f5b27f44a05e7fbcb7379c","modified":1563684104124},{"_id":"themes/next-reloaded/layout/_third-party/baidu-push.swig","hash":"4ccf2abbfd070874265b0436a3eff21f7c998dfb","modified":1563684104126},{"_id":"themes/next-reloaded/layout/_third-party/bookmark.swig","hash":"10b61a8bac671e375916a4d234c120117098a78f","modified":1563684104126},{"_id":"themes/next-reloaded/layout/_third-party/needsharebutton.swig","hash":"2c4a66be4677d3e4dec3f169ac8a769098dad1fe","modified":1563684104128},{"_id":"themes/next-reloaded/layout/_third-party/pangu.swig","hash":"c28f9dc96ab735daeb7f599f86470aa5a83c03cf","modified":1563684104128},{"_id":"themes/next-reloaded/layout/_third-party/quicklink.swig","hash":"7757bd285732e857996b99af9d917953589fac5e","modified":1563684104129},{"_id":"themes/next-reloaded/layout/_third-party/rating.swig","hash":"cbe40cb67dad15ade967b0f396c1a95b6871f76a","modified":1563684104129},{"_id":"themes/next-reloaded/layout/_third-party/schedule.swig","hash":"2398e5cd0cb466953b6e7a42c2b2caddebf3c348","modified":1563684104129},{"_id":"themes/next-reloaded/scripts/filters/default-injects.js","hash":"ed8b2871c10d7d1128bda48582997a4b926290de","modified":1563684104131},{"_id":"themes/next-reloaded/scripts/filters/exturl.js","hash":"79ad823ca803cb00e0bfc648aa6c9d59711e0519","modified":1563684104131},{"_id":"themes/next-reloaded/scripts/filters/lazyload.js","hash":"3d424ad75b1431f57f8d1d0218b2a06ecc0a6e70","modified":1563684104132},{"_id":"themes/next-reloaded/scripts/helpers/engine.js","hash":"60eb1554456d9d0e5afc4a2d16f1580a0aa02da8","modified":1563684104132},{"_id":"themes/next-reloaded/scripts/helpers/next-url.js","hash":"799a042bbf497a4c7a2981aa2014ff28fa1bb382","modified":1563684104132},{"_id":"themes/next-reloaded/scripts/tags/button.js","hash":"f3b4f7ae7e58072bbf410d950a99a0b53cbc866d","modified":1563684104133},{"_id":"themes/next-reloaded/scripts/tags/caniuse.js","hash":"c3554972bfb081f8b23046bc3198c0bd31b4c443","modified":1563684104133},{"_id":"themes/next-reloaded/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1563684104133},{"_id":"themes/next-reloaded/scripts/tags/full-image.js","hash":"149de45ff83403e97f6affa280072392dca42e4f","modified":1563684104133},{"_id":"themes/next-reloaded/scripts/tags/group-pictures.js","hash":"8fc05f22b88553bc1d96e0c925799cd97920fc6a","modified":1563684104133},{"_id":"themes/next-reloaded/scripts/tags/include-raw.js","hash":"5db59d56f4f4082382bf1c16722e6c383892b0c5","modified":1563684104133},{"_id":"themes/next-reloaded/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1563684104133},{"_id":"themes/next-reloaded/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1563684104134},{"_id":"themes/next-reloaded/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1563684104134},{"_id":"themes/next-reloaded/scripts/tags/pdf.js","hash":"f780cc72bff91d2720626e7af69eed25e9c12a29","modified":1563684104134},{"_id":"themes/next-reloaded/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1563684104134},{"_id":"themes/next-reloaded/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1563684104134},{"_id":"themes/next-reloaded/source/css/main.styl","hash":"7b5a1b48e95fb0d6a75be2ef7318a9a1fe71d09c","modified":1563684104146},{"_id":"themes/next-reloaded/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1563684104146},{"_id":"themes/next-reloaded/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1563684104146},{"_id":"themes/next-reloaded/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1563684104146},{"_id":"themes/next-reloaded/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1563684104146},{"_id":"themes/next-reloaded/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1563684104146},{"_id":"themes/next-reloaded/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1563684104146},{"_id":"themes/next-reloaded/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1563684104147},{"_id":"themes/next-reloaded/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1563684104147},{"_id":"themes/next-reloaded/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1563684104147},{"_id":"themes/next-reloaded/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1563684104147},{"_id":"themes/next-reloaded/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1563684104147},{"_id":"themes/next-reloaded/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1563684104147},{"_id":"themes/next-reloaded/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1563684104147},{"_id":"themes/next-reloaded/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1563684104147},{"_id":"themes/next-reloaded/source/js/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1563684104148},{"_id":"themes/next-reloaded/source/js/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1563684104147},{"_id":"themes/next-reloaded/source/js/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1563684104148},{"_id":"themes/next-reloaded/source/js/js.cookie.js","hash":"e0afce539f1fb81d59e3c6f0a68d736e2fb45d93","modified":1563684104148},{"_id":"themes/next-reloaded/source/js/motion.js","hash":"ca2965da47ba9fc5b0dde0a825c29e0817b965b9","modified":1563684104148},{"_id":"themes/next-reloaded/source/js/post-details.js","hash":"a614a3830f7dfcd4df303c1255d558a135b3854e","modified":1563684104148},{"_id":"themes/next-reloaded/source/js/next-boot.js","hash":"d673f486417eaf1925ffecc3c4720850cad2ada3","modified":1563684104148},{"_id":"themes/next-reloaded/source/js/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1563684104148},{"_id":"themes/next-reloaded/source/js/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1563684104149},{"_id":"themes/next-reloaded/source/js/utils.js","hash":"c11f610e19fcbdb3d692bc5a17e43ef3338d81cc","modified":1563684104149},{"_id":"themes/next-reloaded/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1563684104142},{"_id":"themes/next-reloaded/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1563684104142},{"_id":"themes/next-reloaded/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1563684104145},{"_id":"themes/next-reloaded/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1563684104146},{"_id":"themes/next-reloaded/layout/_macro/menu/menu-item.swig","hash":"9257da95bd032bb3bd1da670e302fd2c7d5610b6","modified":1563684104117},{"_id":"themes/next-reloaded/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1563684104117},{"_id":"themes/next-reloaded/layout/_partials/head/head-unique.swig","hash":"02bb5748e8540b024e7f4008a9e640890b45280f","modified":1563684104119},{"_id":"themes/next-reloaded/layout/_partials/header/index.swig","hash":"7e3d5b40a8e13ce3bb5f28cb23f62c10c2bf14dd","modified":1563684104120},{"_id":"themes/next-reloaded/layout/_partials/head/external-fonts.swig","hash":"fc6bafc8c633afadc538c5afa5620ea2a1cdcb84","modified":1563684104119},{"_id":"themes/next-reloaded/layout/_partials/head/head.swig","hash":"33aacaad533ea17ee1ad7fa3c55aab8f0a804dc7","modified":1563708801584},{"_id":"themes/next-reloaded/layout/_partials/header/brand.swig","hash":"dec2d88ba95a69ce2796015eb712f24ef34ad82a","modified":1563684104120},{"_id":"themes/next-reloaded/layout/_partials/header/menu.swig","hash":"71af31fea5913fd30c233e555ef13cf2c9768f72","modified":1563684104120},{"_id":"themes/next-reloaded/layout/_partials/header/sub-menu.swig","hash":"5adc60100e129c1d0307bdcaa0c7b8e8375a6ea4","modified":1563684104120},{"_id":"themes/next-reloaded/layout/_partials/page/breadcrumb.swig","hash":"0fa4fadb39467b01cede49f21b22e86b1a2da805","modified":1563684104120},{"_id":"themes/next-reloaded/layout/_partials/page/page-header.swig","hash":"2940df694fff28e8bf71b6546b4162f1e38227db","modified":1563684104121},{"_id":"themes/next-reloaded/layout/_partials/post/post-copyright.swig","hash":"3615db591dd910fb9fa96542734c7ec0ef05019c","modified":1563684104121},{"_id":"themes/next-reloaded/layout/_partials/post/reward.swig","hash":"d44f025eb93c99ddf90202d8293ccf80689a00c7","modified":1563684104121},{"_id":"themes/next-reloaded/layout/_partials/post/post-related.swig","hash":"eea95b785c9c36d28e1839619793f66e89773bee","modified":1563684104121},{"_id":"themes/next-reloaded/layout/_partials/post/wechat-subscriber.swig","hash":"ef11b5be5bfb2f0affe82cf521c002b37fef9819","modified":1563684104121},{"_id":"themes/next-reloaded/layout/_partials/search/algolia-search.swig","hash":"d9fe715fee716f78c7976c4e8838da71439ee0e0","modified":1563684104121},{"_id":"themes/next-reloaded/layout/_partials/search/swiftype.swig","hash":"a5587bd1f60d35e58618576cec45e662aa44ea1f","modified":1563684104122},{"_id":"themes/next-reloaded/layout/_partials/search/index.swig","hash":"7d1693416a5dc098f4723a53da2e2d1fc2d6e075","modified":1563684104122},{"_id":"themes/next-reloaded/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1563684104122},{"_id":"themes/next-reloaded/layout/_partials/share/add-this.swig","hash":"15b542f5b06b7532234af367340b9ed9fcebb0ac","modified":1563684104122},{"_id":"themes/next-reloaded/layout/_partials/share/likely.swig","hash":"06cafe19f0e307ef7ad54038ae76b8db6bb5b4f9","modified":1563684104122},{"_id":"themes/next-reloaded/layout/_partials/sidebar/site-overview.swig","hash":"4992f1572e560a418b70c10764a95ec827a1a7b3","modified":1563684104122},{"_id":"themes/next-reloaded/layout/_scripts/pages/post-details.swig","hash":"5b05f165547391bf231e52f56f3d925efc09bc44","modified":1563684104123},{"_id":"themes/next-reloaded/layout/_scripts/schemes/gemini.swig","hash":"ffc8e8836714ea79abeb77b75859634615652877","modified":1563684104123},{"_id":"themes/next-reloaded/layout/_scripts/schemes/muse.swig","hash":"0097e45e7b671f8006b8b2d3c4f95cacc76a983c","modified":1563684104123},{"_id":"themes/next-reloaded/layout/_scripts/schemes/mist.swig","hash":"108b157fbd1ac3baaf19ae87234fa8728ab79556","modified":1563684104123},{"_id":"themes/next-reloaded/layout/_scripts/schemes/pisces.swig","hash":"e42604fbb17648484e5f12afe230d826de089388","modified":1563684104124},{"_id":"themes/next-reloaded/layout/_third-party/analytics/analytics-with-jquery.swig","hash":"b485797073495e24bf2f0b85880d513257bfed72","modified":1563684104124},{"_id":"themes/next-reloaded/layout/_third-party/analytics/analytics-with-widget.swig","hash":"a5723950c343d220270bfd27bd30050eda6c3fb3","modified":1563684104124},{"_id":"themes/next-reloaded/layout/_third-party/analytics/application-insights.swig","hash":"798d67e4a736613ab899eabe6529091bbcda7850","modified":1563684104124},{"_id":"themes/next-reloaded/layout/_third-party/analytics/baidu-analytics.swig","hash":"591b2ccd9713ccb922b9fcf5e278b6de9c5ec30b","modified":1563684104124},{"_id":"themes/next-reloaded/layout/_third-party/analytics/busuanzi-counter.swig","hash":"8eadb929c9e50e58502ccad2dc2657746f8c592a","modified":1563684104125},{"_id":"themes/next-reloaded/layout/_third-party/analytics/cnzz-analytics.swig","hash":"08cd47ef8572121b7811342d3c9a84a338a18191","modified":1563684104125},{"_id":"themes/next-reloaded/layout/_third-party/analytics/facebook-sdk.swig","hash":"3d01fa6edc0ad73f81813613f2e8a610777f1852","modified":1563684104125},{"_id":"themes/next-reloaded/layout/_third-party/analytics/firestore.swig","hash":"fae69a0e1a1d42f7bb44e594a29857d94594698b","modified":1563684104125},{"_id":"themes/next-reloaded/layout/_third-party/analytics/growingio.swig","hash":"4a966b7ffe2d80ff1b3dd0fd14b355766dc5c70f","modified":1563684104125},{"_id":"themes/next-reloaded/layout/_third-party/analytics/google-analytics.swig","hash":"9fa1ca7059243197d8fbbd35108c36629a254570","modified":1563684104125},{"_id":"themes/next-reloaded/layout/_third-party/analytics/index.swig","hash":"438c6f5e6665d72f4ea7ee206011d669246f6102","modified":1563684104125},{"_id":"themes/next-reloaded/layout/_third-party/analytics/lean-analytics.swig","hash":"a09d2af2a8470555eeb265b0eb14dc678079e870","modified":1563684104126},{"_id":"themes/next-reloaded/layout/_third-party/analytics/tencent-analytics.swig","hash":"f240a50cd9b627620d9a374a29cf95f0c5e99d7c","modified":1563684104126},{"_id":"themes/next-reloaded/layout/_third-party/analytics/vkontakte-api.swig","hash":"0dd5b315d1da55dbfc10f51a1f8952f72eba2720","modified":1563684104126},{"_id":"themes/next-reloaded/layout/_third-party/analytics/tencent-mta.swig","hash":"92e04a2b9e0c3df594bc22235d1894e5ad458dfc","modified":1563684104126},{"_id":"themes/next-reloaded/layout/_third-party/chat/index.swig","hash":"5ab4a8b4306c837d2f8c211a9d7fdaed76fa254d","modified":1563684104126},{"_id":"themes/next-reloaded/layout/_third-party/chat/chatra.swig","hash":"c59b04402ea02e52ea3dedc34217be0f0d1ad0ac","modified":1563684104126},{"_id":"themes/next-reloaded/layout/_third-party/chat/tidio.swig","hash":"912368c41de675f458b267a49a99ae3e7e420ebb","modified":1563684104127},{"_id":"themes/next-reloaded/layout/_third-party/comments/changyan.swig","hash":"3533167c4295637b91d90f3bae7c651cd128bb6e","modified":1563684104127},{"_id":"themes/next-reloaded/layout/_third-party/comments/disqus.swig","hash":"1a00b1b78c429721d6477c2d8f6f68f005285cc8","modified":1563684104127},{"_id":"themes/next-reloaded/layout/_third-party/comments/disqusjs.swig","hash":"074a995cd630f56fc4a3135173515c86f2cb34b6","modified":1563684104127},{"_id":"themes/next-reloaded/layout/_third-party/comments/gitalk.swig","hash":"e8f91c571ceb4b80aafebc4d36b89fb41b1ae040","modified":1563684104127},{"_id":"themes/next-reloaded/layout/_third-party/comments/index.swig","hash":"53a59cba82cad49f15a90e1a18007aaac525bddd","modified":1563684104127},{"_id":"themes/next-reloaded/layout/_third-party/comments/livere.swig","hash":"40bab84a4a7a368fa31f0f8ce49af6ec3e5983c9","modified":1563684104127},{"_id":"themes/next-reloaded/layout/_third-party/comments/valine.swig","hash":"15a4d60d3ecc59db2f23629477f8e7b8324981ed","modified":1563684104128},{"_id":"themes/next-reloaded/layout/_third-party/math/index.swig","hash":"a7e304b05a44279d3e4f611908d7faef9dc14d7c","modified":1563684104128},{"_id":"themes/next-reloaded/layout/_third-party/math/katex.swig","hash":"c2cb2f384bc30d31cdccf9794a729c03e687b45c","modified":1563684104128},{"_id":"themes/next-reloaded/layout/_third-party/math/mathjax.swig","hash":"601774d8672577aefbcefac82c94b01f0338da31","modified":1563684104128},{"_id":"themes/next-reloaded/layout/_third-party/search/index.swig","hash":"ea94aa85034c6d1b6bb865aecea55c73f8a14501","modified":1563684104129},{"_id":"themes/next-reloaded/layout/_third-party/search/algolia-search.swig","hash":"0a13dfd2de52a96901039098c6fc7b515edfc50b","modified":1563684104129},{"_id":"themes/next-reloaded/layout/_third-party/search/localsearch.swig","hash":"b3eaab6a269aa3fcbafe24fd06f0c9206dc12716","modified":1563684104129},{"_id":"themes/next-reloaded/layout/_third-party/tags/caniuse.swig","hash":"8fc1ac1a65b9e5c0a9081ec0f740d12543336575","modified":1563684104129},{"_id":"themes/next-reloaded/layout/_third-party/tags/mermaid.swig","hash":"d6e6ddda836bd9e2e8d9767a910c7d3280080e81","modified":1563684104130},{"_id":"themes/next-reloaded/layout/_third-party/tags/index.swig","hash":"d997d1df9c677ceaa4f719cdb6ac3ad32be020e5","modified":1563684104130},{"_id":"themes/next-reloaded/layout/_third-party/tags/pdf.swig","hash":"810a9b2a6059f46c4a2ddb178f1eaa4c5e23750b","modified":1563684104130},{"_id":"themes/next-reloaded/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1563684104142},{"_id":"themes/next-reloaded/source/css/_mixins/Pisces.styl","hash":"2e8fb29aa92325df39054b5450757858c6cebc41","modified":1563684104143},{"_id":"themes/next-reloaded/source/css/_mixins/base.styl","hash":"4056cf687cf435697afe569caf3954b04ae277c9","modified":1563684104143},{"_id":"themes/next-reloaded/source/css/_variables/Gemini.styl","hash":"a8aa41625b94cf17a7f473ed10dcbe683b1db705","modified":1563684104145},{"_id":"themes/next-reloaded/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1563684104145},{"_id":"themes/next-reloaded/source/css/_variables/Pisces.styl","hash":"fc15e277d1504532a09b7b1bd31f900ad95ec4b8","modified":1563684104145},{"_id":"themes/next-reloaded/source/css/_variables/base.styl","hash":"640f25a63770af5566ccc9cec79c40a4f1c0b29e","modified":1563684104145},{"_id":"themes/next-reloaded/source/js/schemes/muse.js","hash":"d6e4d1c937387d0d7891a41305ecdfe5597d6136","modified":1563684104148},{"_id":"themes/next-reloaded/source/js/schemes/pisces.js","hash":"9eb63cba0327d3d11b6cbfcbe40b88e97a8378a3","modified":1563684104148},{"_id":"themes/next-reloaded/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1563684104149},{"_id":"themes/next-reloaded/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1563684104149},{"_id":"themes/next-reloaded/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1563684104149},{"_id":"themes/next-reloaded/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1563684104149},{"_id":"themes/next-reloaded/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1563684104149},{"_id":"themes/next-reloaded/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1563684104155},{"_id":"themes/next-reloaded/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1563684104155},{"_id":"themes/next-reloaded/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1563684104155},{"_id":"themes/next-reloaded/source/lib/jquery/index.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1563684104153},{"_id":"themes/next-reloaded/source/css/_common/components/back-to-top-sidebar.styl","hash":"fe5ff961b86004a306778c7d33a85b32e5e00e48","modified":1563684104134},{"_id":"themes/next-reloaded/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1563684104135},{"_id":"themes/next-reloaded/source/css/_common/components/buttons.styl","hash":"b98c65006e2546fbf3870c16fbbcbc009dbaab15","modified":1563684104135},{"_id":"themes/next-reloaded/source/css/_common/components/back-to-top.styl","hash":"c8b3225396cb444d8baeb94bac78e5216b992a81","modified":1563684104135},{"_id":"themes/next-reloaded/source/css/_common/components/components.styl","hash":"9d71f34fa13a41b8c8cd2fbdf3fdea608385277c","modified":1563684104135},{"_id":"themes/next-reloaded/source/css/_common/components/pagination.styl","hash":"ce826aedf42b9eca424a044452f5d193866726a6","modified":1563684104137},{"_id":"themes/next-reloaded/source/css/_common/components/rainbow.styl","hash":"4741d642f9ed2eec9be23112f7a51645e77e41f3","modified":1563684104139},{"_id":"themes/next-reloaded/source/css/_common/components/scrollbar.styl","hash":"d7b8bcf2a6031296c84bb4f4ecfb037af01d2d82","modified":1563684104139},{"_id":"themes/next-reloaded/source/css/_common/outline/outline.styl","hash":"7e51ea64611ab5d678c112b4688d4db4fd2737e2","modified":1563684104142},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/base.styl","hash":"6d900b4159eeb869196a619602578bf4d83a117b","modified":1563684104142},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/mobile.styl","hash":"773f6d791f938ff037783004369092991d7bcd31","modified":1563684104142},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/helpers.styl","hash":"8e0740a9ad349ce5555122325da872923135a698","modified":1563684104142},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/normalize.styl","hash":"7ffde343bdf10add1f052f3c4308a15180eb4404","modified":1563684104142},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1563684104142},{"_id":"themes/next-reloaded/source/css/_schemes/Gemini/index.styl","hash":"1489ff40ce5f9fee81a7b4aa5ef56a864a481a63","modified":1563684104143},{"_id":"themes/next-reloaded/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1563684104143},{"_id":"themes/next-reloaded/source/css/_common/scaffolding/tables.styl","hash":"33456264a74d1bba38264d14713544d67d003733","modified":1563684104142},{"_id":"themes/next-reloaded/source/css/_schemes/Mist/_header.styl","hash":"24230e46fc9fb7b8551f97bb36e9bc1f7423098e","modified":1563684104143},{"_id":"themes/next-reloaded/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1563684104143},{"_id":"themes/next-reloaded/source/css/_schemes/Mist/_menu.styl","hash":"75d2d92af070eb10273558b2436972d3f12b361c","modified":1563684104143},{"_id":"themes/next-reloaded/source/css/_schemes/Mist/_posts-expanded.styl","hash":"213f2178dc260a28cba4fef723827a6e707f91a3","modified":1563684104143},{"_id":"themes/next-reloaded/source/css/_schemes/Mist/_search.styl","hash":"7359880e8d85312861fe0871f58b662e627dae0c","modified":1563684104143},{"_id":"themes/next-reloaded/source/css/_schemes/Mist/index.styl","hash":"3948894201e6229a66bcf490e451f2481c8a99cb","modified":1563684104144},{"_id":"themes/next-reloaded/source/css/_schemes/Muse/_logo.styl","hash":"fc160583f742c94316a0fee05c18468033173534","modified":1563684104144},{"_id":"themes/next-reloaded/source/css/_schemes/Muse/_layout.styl","hash":"6565b4a309325596768d0d32e022c80ef23066cb","modified":1563684104144},{"_id":"themes/next-reloaded/source/css/_schemes/Muse/_menu.styl","hash":"1edf4e69d0ec0dc9cefed6c35d3e803e0da4093d","modified":1563684104144},{"_id":"themes/next-reloaded/source/css/_schemes/Muse/_search.styl","hash":"7359880e8d85312861fe0871f58b662e627dae0c","modified":1563684104144},{"_id":"themes/next-reloaded/source/css/_schemes/Muse/index.styl","hash":"dfd7a9cf39a2135de4cf2f8651cac3fb333d028f","modified":1563684104144},{"_id":"themes/next-reloaded/source/css/_schemes/Pisces/_brand.styl","hash":"57044a6d19eb418c1c3d28787e82c69efa9e0ca6","modified":1563684104144},{"_id":"themes/next-reloaded/source/css/_schemes/Pisces/_layout.styl","hash":"75737591682a2bafa71db4c03fb79e970ac0e7aa","modified":1563684104144},{"_id":"themes/next-reloaded/source/css/_schemes/Pisces/_menu.styl","hash":"2f782305b1e1d19197a90f1e5e9167fd77749a8e","modified":1563684104145},{"_id":"themes/next-reloaded/source/css/_schemes/Pisces/_sidebar.styl","hash":"44d834c231e2bb57851954d73e70f6995b5929e7","modified":1563684104145},{"_id":"themes/next-reloaded/source/css/_schemes/Pisces/_sub-menu.styl","hash":"6f427a43550f7b03c503106767fbcce1f18a4f78","modified":1563684104145},{"_id":"themes/next-reloaded/source/css/_schemes/Pisces/index.styl","hash":"232aedbd44243b3b80c4503c947060d3269c1afc","modified":1563684104145},{"_id":"themes/next-reloaded/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1563684104149},{"_id":"themes/next-reloaded/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1563684104150},{"_id":"themes/next-reloaded/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1563684104150},{"_id":"themes/next-reloaded/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1563684104152},{"_id":"themes/next-reloaded/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1563684104153},{"_id":"themes/next-reloaded/source/css/_common/components/footer/footer.styl","hash":"4cfeec9434a72d5efc6ca225d3445d084d4590f7","modified":1563684104135},{"_id":"themes/next-reloaded/source/css/_common/components/header/github-banner.styl","hash":"ca97f0b6990eef947039faede80c56d9c4381ee1","modified":1563684104135},{"_id":"themes/next-reloaded/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1563684104135},{"_id":"themes/next-reloaded/source/css/_common/components/header/header.styl","hash":"6c4990d375b640ee4551e62c48c1cbe4c3d62212","modified":1563684104135},{"_id":"themes/next-reloaded/source/css/_common/components/header/menu.styl","hash":"a410ed529afd46ddf4a96ecf0de6599488716887","modified":1563684104135},{"_id":"themes/next-reloaded/source/css/_common/components/header/site-meta.styl","hash":"c0d9e18a9210fdcaf33e488518b3b288eb58c0a1","modified":1563684104135},{"_id":"themes/next-reloaded/source/css/_common/components/header/site-nav.styl","hash":"cc6ee18f47f2e1e06df6fa0eadb37079e580fd11","modified":1563684104136},{"_id":"themes/next-reloaded/source/css/_common/components/highlight/copy-code.styl","hash":"24d366f13f4af294ee929819713146e0a885706e","modified":1563684104136},{"_id":"themes/next-reloaded/source/css/_common/components/highlight/diff.styl","hash":"4114f1aa7546bbdf8253e261061c9d9bb0ca6c39","modified":1563684104136},{"_id":"themes/next-reloaded/source/css/_common/components/pages/breadcrumb.styl","hash":"f2469ecf57eeb32f5ad0a26c7358e521383ac935","modified":1563684104136},{"_id":"themes/next-reloaded/source/css/_common/components/pages/archive.styl","hash":"6904fd7ea6455e008d9884558b68254608af9a3c","modified":1563684104136},{"_id":"themes/next-reloaded/source/css/_common/components/highlight/highlight.styl","hash":"a690d4aba571b08c029a168e12cef2bbfd27a1ae","modified":1563684104136},{"_id":"themes/next-reloaded/source/css/_common/components/highlight/theme.styl","hash":"ba17bf993d3e6a4aed02e740e3a4b913d9e7409d","modified":1563684104136},{"_id":"themes/next-reloaded/source/css/_common/components/pages/categories.styl","hash":"e3124da5350d6c01f32ccd04134a686baa4fb30a","modified":1563684104136},{"_id":"themes/next-reloaded/source/css/_common/components/pages/pages.styl","hash":"f1d52954b9a5d1ca8e224382349f525e598dd923","modified":1563684104136},{"_id":"themes/next-reloaded/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1563684104137},{"_id":"themes/next-reloaded/source/css/_common/components/pages/schedule.styl","hash":"9df791fa842b16ae72ad2998ffc2f87fdf0b6a88","modified":1563684104137},{"_id":"themes/next-reloaded/source/css/_common/components/pages/tag-cloud.styl","hash":"61ca40856e5cacd48e0fa9728fde4605c7dd4c94","modified":1563684104137},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1563684104137},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-copyright.styl","hash":"2356226157e8068b0e9bbe2f7d0f74e1ab49199b","modified":1563684104137},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-collapse.styl","hash":"8bffc9f7f4b20860a56160f0d1ba77062106f990","modified":1563684104137},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-gallery.styl","hash":"0bf899fab331add63f0c8ead31ca3a3db2ad74d9","modified":1563684104138},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-expand.styl","hash":"df3c19fd447da6d4a807683345007a41338f9a04","modified":1563684104137},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-eof.styl","hash":"c961d37190d9bec58a36306c7e716c4e72c4582f","modified":1563684104137},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-meta.styl","hash":"67165cd8836e03c289162b96ef06f8b024afe9af","modified":1563684104138},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-nav.styl","hash":"496f931e3a7e313ba8088fb91bb20789cace72c9","modified":1563684104138},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1563684104138},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-reading_progress.styl","hash":"3f33bb862c2aa993f54987fbb345da067b79b112","modified":1563684104138},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-reward.styl","hash":"5440013a081201ca791582db98159dce93ea9e75","modified":1563684104138},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1563684104138},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-title.styl","hash":"8e058c99dd7d41f0bd34c7c28b6ac9fbb17dcb5e","modified":1563684104138},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-widgets.styl","hash":"a6c24393dffbdd94dd5c01cdbec5e180b0bfbbbd","modified":1563684104138},{"_id":"themes/next-reloaded/source/css/_common/components/post/post-type.styl","hash":"d5c8ffed7f2c701052b7a53abaf5ef437374ea72","modified":1563684104138},{"_id":"themes/next-reloaded/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"3d55c8641a69449de7caf1ea2cf731973481daf5","modified":1563684104139},{"_id":"themes/next-reloaded/source/css/_common/components/post/post.styl","hash":"9c60fd1c4d221b968a5b1129f41e6d62adac1730","modified":1563684104138},{"_id":"themes/next-reloaded/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"cc83816614f21c7e1d8d3f867d547ff7c658cec4","modified":1563684104139},{"_id":"themes/next-reloaded/source/css/_common/components/sidebar/sidebar-author.styl","hash":"965a4896925f4c2bfdb492e1923288c91b854f2d","modified":1563684104139},{"_id":"themes/next-reloaded/source/css/_common/components/sidebar/sidebar-button.styl","hash":"517d541a80d59ad99a3f648be74891e0c7bc72a8","modified":1563684104139},{"_id":"themes/next-reloaded/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"987f1cdd57dd9f6f81c133c280c20d7168c37d7f","modified":1563684104139},{"_id":"themes/next-reloaded/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"8a24b56524a388fbabd408ffc8ba9b56eb9e01ce","modified":1563684104139},{"_id":"themes/next-reloaded/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"9a3bfc878ca797946815bed23cd6f92b24a16358","modified":1563684104139},{"_id":"themes/next-reloaded/source/css/_common/components/sidebar/site-state.styl","hash":"967fb3a3c6c851b34ec5df2d945dc266ed63d146","modified":1563684104140},{"_id":"themes/next-reloaded/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"4a655ce8217e038b4b9df2265555feae9ccd6242","modified":1563684104140},{"_id":"themes/next-reloaded/source/css/_common/components/sidebar/sidebar.styl","hash":"38314eec8f4a2d1667e1061d7a3deb1c16f17da9","modified":1563684104140},{"_id":"themes/next-reloaded/source/css/_common/components/tags/full-image.styl","hash":"6ec8ea7b11a146777b6b8da0f71f0cc1dbd129df","modified":1563684104140},{"_id":"themes/next-reloaded/source/css/_common/components/tags/blockquote-center.styl","hash":"58ec00eebe68d0eebd2eea435c710063877447df","modified":1563684104140},{"_id":"themes/next-reloaded/source/css/_common/components/tags/group-pictures.styl","hash":"c85df3ecc0b37095cac14114c308e5829c66b5a3","modified":1563684104140},{"_id":"themes/next-reloaded/source/css/_common/components/tags/label.styl","hash":"d7501ae01fc45fa15b00d1bc5233b9fffa20a3c9","modified":1563684104140},{"_id":"themes/next-reloaded/source/css/_common/components/tags/tags.styl","hash":"cbc0be5a3285b469858ec9ead48e2ea90bd47ae1","modified":1563684104141},{"_id":"themes/next-reloaded/source/css/_common/components/tags/note.styl","hash":"ca7cd57bc346a3fda8097b2b49e6d943600912d2","modified":1563684104140},{"_id":"themes/next-reloaded/source/css/_common/components/tags/pdf.styl","hash":"da8d34729fb6eb0fcb8ee81e67d2be3c02bc1bc4","modified":1563684104140},{"_id":"themes/next-reloaded/source/css/_common/components/tags/tabs.styl","hash":"4b62818333d2463fe416fb3156ced12e7d60aafa","modified":1563684104141},{"_id":"themes/next-reloaded/source/css/_common/components/third-party/localsearch.styl","hash":"9fac89c8146eb2675721a26f528d7d0f8be7debe","modified":1563684104141},{"_id":"themes/next-reloaded/source/css/_common/components/third-party/algolia-search.styl","hash":"fc58498d4f5081fcf6218e9e18c5bf2328275bef","modified":1563684104141},{"_id":"themes/next-reloaded/source/css/_common/components/third-party/math.styl","hash":"ef66c0a08e4243a25e41408d70ca66682b8dcea1","modified":1563684104141},{"_id":"themes/next-reloaded/source/css/_common/components/third-party/gitalk.styl","hash":"1156b11ac74d2d21b1b5047767b2a9edafc9182d","modified":1563684104141},{"_id":"themes/next-reloaded/source/css/_common/components/third-party/related-posts.styl","hash":"3ae3f3c276d444862033fd3434c632ad0d2f84e6","modified":1563684104141},{"_id":"themes/next-reloaded/source/css/_common/components/third-party/third-party.styl","hash":"616f4820306dc0b6346cda3d2094a0af5ade4fba","modified":1563684104141},{"_id":"themes/next-reloaded/source/css/_common/components/third-party/needsharebutton.styl","hash":"61466e3e5459960b5802a267751a0c8018918b0b","modified":1563684104141},{"_id":"themes/next-reloaded/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1563684104144},{"_id":"themes/next-reloaded/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1563684104154},{"_id":"themes/next-reloaded/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1563684104144},{"_id":"themes/next-reloaded/source/css/_schemes/Muse/sidebar/_sidebar.styl","hash":"487dbb5b389620e7be2ce666531a7baa249d50a0","modified":1563684104144},{"_id":"themes/next-reloaded/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1563684104152},{"_id":"source/images/cats.gif","hash":"fb1c348f613c6e7aef9d3393bd39b03372bf0ee8","modified":1563549520287},{"_id":"source/uploads/avatar.png","hash":"3e411af0598eb1a4ccf078c2d2851bbd12fe2b79","modified":1563207784790},{"_id":"source/images/shader-transfer-1.gif","hash":"e7f3615f4a90b777c363cf47f794d652c17106e2","modified":1561984547394},{"_id":"source/images/shader-transfer-2.gif","hash":"67300457d9b0ca426e544b20bf83ac2af34b0ea9","modified":1561984547402},{"_id":"public/about/index.html","hash":"44d945f842f3c55e190e6d8c77ce20f771cca428","modified":1563708823346},{"_id":"public/categories/index.html","hash":"f4dce3e90b4fcb79b2449937fea83db230593a4d","modified":1563708823346},{"_id":"public/archives/2016/page/2/index.html","hash":"781f8a760b5c047b22f5ee4d5c7adca913382857","modified":1563708823347},{"_id":"public/archives/2016/12/index.html","hash":"a78ecb3a26553cba70e260c1a23f8ee2f4426520","modified":1563708823347},{"_id":"public/archives/2017/page/2/index.html","hash":"c308fea571d77cfe27a769227913aadb86ca222f","modified":1563708823347},{"_id":"public/archives/2017/01/index.html","hash":"db0fa7fa12f86f1f6def93dc6d25e79258318296","modified":1563708823348},{"_id":"public/archives/2017/02/index.html","hash":"a0bd4ba1685bd2401c89cf37e7d990a8cc8f125f","modified":1563708823348},{"_id":"public/archives/2017/03/index.html","hash":"a4b6d11369943a54e7bf72c56a7f9d24d4044e88","modified":1563708823348},{"_id":"public/archives/2017/06/index.html","hash":"f43a1172605edcf81da14a3faa6bc73d0323ff76","modified":1563708823348},{"_id":"public/archives/2017/07/index.html","hash":"71e4575cb1a36ee242116c479f6ddd68936912f3","modified":1563708823348},{"_id":"public/archives/2017/08/index.html","hash":"5db415babf059ae7d935f28e7b5951d5fbb2b4ca","modified":1563708823348},{"_id":"public/archives/2017/11/index.html","hash":"1400b0475f1571ca729ea2fea3a2bb81f656ed0d","modified":1563708823348},{"_id":"public/archives/2017/12/index.html","hash":"f94742581060e9828fd215403395e6c3a4af6849","modified":1563708823348},{"_id":"public/archives/2018/index.html","hash":"66969c82044b4528a356fbcf2a0fd973022d0b14","modified":1563708823348},{"_id":"public/archives/2018/05/index.html","hash":"644c4bc2a2ca6f885037b328b278f43cdb0cba38","modified":1563708823348},{"_id":"public/archives/2019/index.html","hash":"f59fdb5e772e6a6230213082ac66c979a734ee0a","modified":1563708823348},{"_id":"public/archives/2019/07/index.html","hash":"a2923f5a576fb8493173c3bd6fa2f0f275b9bcd5","modified":1563708823348},{"_id":"public/categories/架构管理/index.html","hash":"1ecfbe53edae4ffb4b53b27bc689872ef1fc82c7","modified":1563708823346},{"_id":"public/categories/Qt/index.html","hash":"afe2b425778f5fef9257ebd96ef89bb113fdb296","modified":1563708823346},{"_id":"public/categories/java/index.html","hash":"a0482303c0537809976d482ff24151e015e9fee0","modified":1563708823346},{"_id":"public/tags/index.html","hash":"8b1efe0b805f070d276e4ac77d67f1d114f46f35","modified":1563708823351},{"_id":"public/2019/07/19/透明渐变过渡2-0/index.html","hash":"181e353cea5810067b0836c2f93fc42b9d0ed9ca","modified":1563708823351},{"_id":"public/2019/07/15/lightMVC-1/index.html","hash":"4beace205ee15af1c540ffc7ea0727d7eeaad60c","modified":1563708823351},{"_id":"public/2019/07/01/javascript-propertype/index.html","hash":"07bc1506b8e216323fb84afa61c7bfc1c89eac58","modified":1563708823351},{"_id":"public/2018/05/02/shader-transfer/index.html","hash":"f596c020f3844bef774cafaf572df716e56b0513","modified":1563708823351},{"_id":"public/2017/12/19/20171219_项目架构和管理_项目结构及编程规范/index.html","hash":"51e72cae4309200b99b678374e46e93c728b7c93","modified":1563708823351},{"_id":"public/2017/12/14/20171214_项目架构和管理_网络通信/index.html","hash":"170d5c9bf5178fe2c03ec6f10caf56807cc92d62","modified":1563708823351},{"_id":"public/2017/11/23/20171123_项目架构和管理_引擎选择/index.html","hash":"42f5936c68e9ef3a288c066650e1e6bf49ece1a5","modified":1563708823351},{"_id":"public/2017/11/22/20171122_项目架构和管理/index.html","hash":"4fe866b6c1614d01feca3da49fdba998668065c5","modified":1563708823351},{"_id":"public/2017/08/02/typescript-to-lib/index.html","hash":"786371588ac0b19d9e45c0ddd19ea83e5993835d","modified":1563708823351},{"_id":"public/2017/06/06/the-importance-of-project-prepa/index.html","hash":"e722ba9dd0b50e0370aff8e6790c29e9abdca875","modified":1563708823351},{"_id":"public/2017/07/19/coding-xingge/index.html","hash":"85cc91999b6f7a01ef6156434589ed0fb0049e8b","modified":1563708823351},{"_id":"public/2017/03/27/js-perfor/index.html","hash":"0dd1db301c1cc21a42c74ee180116a7c94c2ec16","modified":1563708823351},{"_id":"public/2017/03/06/js-performance-optimize/index.html","hash":"bacd15b1cde6c9950322eb5d3d5f67fab60bfc75","modified":1563708823351},{"_id":"public/2017/02/09/QtNotes/index.html","hash":"21f408dc71b289900b3188ae9d14a6b0683afd07","modified":1563708823352},{"_id":"public/2017/02/02/js-closure/index.html","hash":"c8b540e15bcb5a267e0a53bcc6d407fad19f4961","modified":1563708823352},{"_id":"public/2017/01/19/PomodoroTechnique/index.html","hash":"4819d2db2a7ee32c3cc87f5ad2960159f0ae1aeb","modified":1563708823352},{"_id":"public/2017/01/10/rich-father/index.html","hash":"daeb7988a726f1dede949272ecadd5588e34a6e1","modified":1563708823352},{"_id":"public/2017/01/06/cocos2dx-xingneng/index.html","hash":"a615b83bfcb9bb9456fcfa57812e7b0882e7ebe4","modified":1563708823352},{"_id":"public/2016/12/01/design-single/index.html","hash":"07c84892d55c1dbea507ea4ad2f593f75937547e","modified":1563708823352},{"_id":"public/2016/12/01/design-observer/index.html","hash":"a146b860d37e7637c339453e20380e28087f41dd","modified":1563708823352},{"_id":"public/2016/11/29/design-commond/index.html","hash":"9659f328f251f16017e2d93428031277dd20a3b7","modified":1563708823352},{"_id":"public/2016/11/27/Grid-2/index.html","hash":"24b58d9fe21266ddf9469723594cf494068b1c6a","modified":1563708823352},{"_id":"public/2016/11/27/Grid-1/index.html","hash":"30b959a37c8f794000e4fb94cc603dc54fa740a3","modified":1563708823352},{"_id":"public/2016/11/27/Tree-3/index.html","hash":"2d2f63d58889a79b58e0fce92e2c63c50128ad52","modified":1563708823352},{"_id":"public/2016/11/27/Tree-2/index.html","hash":"443ddb9684f56083eee87c2aaef2aee7082a26e4","modified":1563708823353},{"_id":"public/2016/11/27/Tree-1/index.html","hash":"99b6d397e6aebf1e36db3df85cd1d4de74e7f4d7","modified":1563708823353},{"_id":"public/2016/11/27/Java多线程实现生产者与消费者/index.html","hash":"0fefe04024f05b61a75afac7929630f147c2ea16","modified":1563708823353},{"_id":"public/2016/11/27/WebService复杂类型数据传输-dom4j方式/index.html","hash":"5a483cc34a82f0fcf2873ad286642b7d73c00fb7","modified":1563708823353},{"_id":"public/2016/11/27/第一篇文章/index.html","hash":"1e76a4e75ce19a11701c6f52d495dae2729ba1bc","modified":1563708823353},{"_id":"public/archives/index.html","hash":"dc58b17d364ecfd3dcbed49d494d6793222df4ee","modified":1563708823353},{"_id":"public/archives/page/2/index.html","hash":"ba255c3260980223af90015232421941e0433a71","modified":1563708823353},{"_id":"public/archives/page/3/index.html","hash":"9f2af5c79e380a6b7eb457cfc24f9bf8c8fe1c0e","modified":1563708823353},{"_id":"public/archives/2016/index.html","hash":"bc40b421012863786d7b5743263fc1c8adfbc8e6","modified":1563708823353},{"_id":"public/archives/2016/11/index.html","hash":"248efefc2b0e12f769b697db502da7004c52e792","modified":1563708823353},{"_id":"public/archives/2017/index.html","hash":"e3f762cefac717a82f85768148fadff397faaad0","modified":1563708823353},{"_id":"public/categories/javascript/index.html","hash":"ba7d1cd5681287c50d4a465517f08e2abe56a451","modified":1563708823353},{"_id":"public/categories/cocos2d-x/index.html","hash":"dab68e0cf4c7546bee3f650ea731c33657521201","modified":1563708823346},{"_id":"public/categories/经验总结/index.html","hash":"7b8be284f13f72ecf3e7177c5a5a04bdfdc6307d","modified":1563708823346},{"_id":"public/categories/设计模式/index.html","hash":"e0876953449c4d4a11ba308a974801822705f83a","modified":1563708823347},{"_id":"public/categories/读书笔记/index.html","hash":"58d5063b2b8d464cafefcff3106cb9d7e198e917","modified":1563708823347},{"_id":"public/categories/shader/index.html","hash":"1807af3769a7b1a337a7eb7c78d9718a1a324f3b","modified":1563708823347},{"_id":"public/categories/cocos-creator/index.html","hash":"0dbc7a06894f1597baf276dae5a741d8266b3357","modified":1563708823347},{"_id":"public/categories/TpyeScript/index.html","hash":"34e5518e1b94725514b0a9fb3ad717c4545cce31","modified":1563708823347},{"_id":"public/tags/架构管理/index.html","hash":"d053cdcc2f743192e874cd132517cfb50258af2e","modified":1563708823349},{"_id":"public/tags/网络通信/index.html","hash":"a5adca24a824d53bc3f0bd1333b6a4b581b8716b","modified":1563708823349},{"_id":"public/tags/引擎选择/index.html","hash":"05db125cae22d0b2f6dd9d301cebc19117d7e9cf","modified":1563708823349},{"_id":"public/tags/编程规范/index.html","hash":"e7a8702c988fa824780bc6c9cc44efbaa8119080","modified":1563708823349},{"_id":"public/tags/ExtJS/index.html","hash":"aa2af15e6348f805bb4e5f9a0466562e3e6630a9","modified":1563708823349},{"_id":"public/tags/Qt/index.html","hash":"88cf60aa66ab905281d441a188310a471c7d0527","modified":1563708823349},{"_id":"public/tags/多线程/index.html","hash":"24dcff7aeeb937e631c279c1f3295471bb852eba","modified":1563708823349},{"_id":"public/tags/［WebService-java］/index.html","hash":"6f36a2ce4648062f652687a39222ee34f188a9d3","modified":1563708823349},{"_id":"public/tags/cocos2d-x-性能优化/index.html","hash":"8e6a0107bef5a3b5b2a0cbb65e99f079f29c34c2","modified":1563708823349},{"_id":"public/tags/番茄工作法/index.html","hash":"44c752b9043db77a227153358308974e17ca7725","modified":1563708823349},{"_id":"public/tags/编程与性格/index.html","hash":"0e10f0811d00b7a678687f7bca2dedf7065ca853","modified":1563708823349},{"_id":"public/tags/观察者模式/index.html","hash":"16e986c1a0aaabe72e5eec086cd99f5b189fabca","modified":1563708823349},{"_id":"public/tags/命令模式/index.html","hash":"9d129576371cf82f178ca79938e091e6ee0a01d2","modified":1563708823349},{"_id":"public/tags/js性能优化/index.html","hash":"c98c3f0d7adcff5a755378e1efd4b81878c8fc10","modified":1563708823350},{"_id":"public/tags/单例模式/index.html","hash":"ceaad7dbaee483badf86214b0ab9eb515fff138a","modified":1563708823350},{"_id":"public/tags/javascript-性能优化/index.html","hash":"492b8a6af99b8e81a6f5ee3e7a81bda569ecc2bb","modified":1563708823350},{"_id":"public/tags/闭包/index.html","hash":"0f34347703c187e7e1e03488f25338901835be35","modified":1563708823350},{"_id":"public/tags/理财/index.html","hash":"0577794bc377d532f9393448a065862d29bd2af3","modified":1563708823350},{"_id":"public/tags/shader/index.html","hash":"6623f554dc237777f83509dcd19b8a27513edcf3","modified":1563708823350},{"_id":"public/tags/prototype/index.html","hash":"8c1afb9d016de316b741f5a4d29c8f37c137971c","modified":1563708823350},{"_id":"public/tags/javascript/index.html","hash":"58a75d974329593c215de0bd1c08edb196a4ac90","modified":1563708823350},{"_id":"public/tags/mvc/index.html","hash":"2800e6bfac9bc0419d587193d2c9fcc9a8e20c45","modified":1563708823350},{"_id":"public/tags/前期准备/index.html","hash":"1de8df055220ef372b3bbbb1491f7e143bdc5d57","modified":1563708823350},{"_id":"public/tags/cocos-creator/index.html","hash":"804763a989089c81e71cf04c892c117610106c69","modified":1563708823350},{"_id":"public/tags/TpyeScript/index.html","hash":"09a6ee1eabfa777b73db51ace23b43da33a729a5","modified":1563708823350},{"_id":"public/tags/类库/index.html","hash":"5010ca3a1cd41786b28af8ec3d68a93c4fe8a81c","modified":1563708823350},{"_id":"public/tags/libs/index.html","hash":"e94c9279224e6b237d85a3dfe04ecf1dab2c7349","modified":1563708823350},{"_id":"public/index.html","hash":"0d1de6b98a4a1befe48855c122493456e2ecabe2","modified":1563708823353},{"_id":"public/page/2/index.html","hash":"15032dbea3a8137c695e9aa2c12eb460c7c73bb6","modified":1563708823354},{"_id":"public/page/3/index.html","hash":"96d4d308e552f7bac3e1a4e2b939989a69d76f26","modified":1563708823354},{"_id":"public/CNAME","hash":"f3ec92164503113069ecd096360a8b82c1c7cde5","modified":1563707458085},{"_id":"public/uploads/wechat-qcode.jpg","hash":"66a67a4919f2732680ea19a0b7bcb63bbe3339f3","modified":1563707458085},{"_id":"public/uploads/alipay_charge.jpg","hash":"bf0a359dd5714466cfdfb89ebacb1b83e856cfbc","modified":1563707458085},{"_id":"public/images/design_1_commond.png","hash":"a94e556b8a58b1f2892a1a39f9a067077275432c","modified":1563707458085},{"_id":"public/images/111.png","hash":"e2eecb34be869203e661a0bd284c1c1094cd4f45","modified":1563707458085},{"_id":"public/images/design_3_single.png","hash":"fbffe1afd7c4ff90e14640d3d280b140c1295158","modified":1563707458085},{"_id":"public/images/pomodoro_data.png","hash":"e5d10d0dac270ad0e11143b422444c6f7a6a38d3","modified":1563707458085},{"_id":"public/images/pomodoro_technique.png","hash":"ce224fb6395b0364d89e804a52e21bfa075cc92a","modified":1563707458085},{"_id":"public/images/tree_2_sql.png","hash":"de2b3149af56628db975af173fc3e61b4614b999","modified":1563707458085},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1563707458085},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1563707458085},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1563707458085},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1563707458085},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1563707458085},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1563707458085},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1563707458085},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1563707458085},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1563707458086},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1563707458086},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1563707458086},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1563707458086},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1563707458086},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1563707458086},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1563707458086},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1563707458086},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1563707458086},{"_id":"public/uploads/wechat_charge.jpg","hash":"64c05bc1bbc5c32f0871748ca9487a4bd87ea3fc","modified":1563707458467},{"_id":"public/images/12132.png","hash":"7b06ea862b169d11338d590ce817dd2a4df728ad","modified":1563707458467},{"_id":"public/images/2222.jpg","hash":"87f0d580a4b94bfab204976b26e3e02468f0ecd9","modified":1563707458467},{"_id":"public/images/design_2_observer.png","hash":"949aa8bbd7492f0dc8bb9d82aa66653121ba8e88","modified":1563707458467},{"_id":"public/images/code.png","hash":"6e50cb12a5fb0fe12398cdd4aa4116cdcdb48852","modified":1563707458467},{"_id":"public/images/files.png","hash":"c97418426d87aaf6016f6a75475079769c670972","modified":1563707458467},{"_id":"public/images/ineditor.png","hash":"4dfd2936a1d80157667c182ba8817a058f47391a","modified":1563707458468},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1563707458468},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1563707458468},{"_id":"public/js/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1563707458472},{"_id":"public/js/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1563707458472},{"_id":"public/js/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1563707458472},{"_id":"public/js/js.cookie.js","hash":"e0afce539f1fb81d59e3c6f0a68d736e2fb45d93","modified":1563707458472},{"_id":"public/js/motion.js","hash":"ca2965da47ba9fc5b0dde0a825c29e0817b965b9","modified":1563707458472},{"_id":"public/js/post-details.js","hash":"a614a3830f7dfcd4df303c1255d558a135b3854e","modified":1563707458473},{"_id":"public/js/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1563707458473},{"_id":"public/js/next-boot.js","hash":"d673f486417eaf1925ffecc3c4720850cad2ada3","modified":1563707458473},{"_id":"public/js/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1563707458473},{"_id":"public/js/utils.js","hash":"c11f610e19fcbdb3d692bc5a17e43ef3338d81cc","modified":1563707458473},{"_id":"public/js/schemes/muse.js","hash":"d6e4d1c937387d0d7891a41305ecdfe5597d6136","modified":1563707458473},{"_id":"public/js/schemes/pisces.js","hash":"9eb63cba0327d3d11b6cbfcbe40b88e97a8378a3","modified":1563707458473},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1563707458473},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1563707458473},{"_id":"public/css/main.css","hash":"3a576b308aac1bc1c994b23374dc591b9040f473","modified":1563707458473},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1563707458473},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1563707458473},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1563707458473},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1563707458473},{"_id":"public/lib/jquery/index.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1563707458473},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1563707458473},{"_id":"public/images/mvc.png","hash":"c52a4534b15eee76ca2d68eef69adcd74b3fc099","modified":1563707458473},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1563707458474},{"_id":"public/images/cats.gif","hash":"fb1c348f613c6e7aef9d3393bd39b03372bf0ee8","modified":1563707458486},{"_id":"public/uploads/avatar.png","hash":"3e411af0598eb1a4ccf078c2d2851bbd12fe2b79","modified":1563707458492},{"_id":"public/images/shader-transfer-1.gif","hash":"e7f3615f4a90b777c363cf47f794d652c17106e2","modified":1563707458495},{"_id":"public/images/shader-transfer-2.gif","hash":"67300457d9b0ca426e544b20bf83ac2af34b0ea9","modified":1563707458499}],"Category":[{"name":"架构管理","_id":"cjycv1m4q000wok9mr1iww6ux"},{"name":"javascript","_id":"cjycv1m510014ok9m8abxe7dr"},{"name":"Qt","_id":"cjycv1m53001aok9m36u5v7bn"},{"name":"java","_id":"cjycv1m54001eok9mkaqfkx9y"},{"name":"cocos2d-x","_id":"cjycv1m56001kok9m84ouw5b4"},{"name":"经验总结","_id":"cjycv1m56001mok9mn174k6qf"},{"name":"设计模式","_id":"cjycv1m58001qok9mbh82uu0w"},{"name":"读书笔记","_id":"cjycv1m5b0021ok9mphuz666a"},{"name":"shader","_id":"cjycv1m5b0023ok9m3qoi1tc1"},{"name":"cocos creator","_id":"cjycv1m5d002bok9m9nmf5fwj"},{"name":"TpyeScript","_id":"cjycv1m5e002dok9m8mm0rmqg"}],"Data":[],"Page":[{"title":"about","date":"2016-11-27T07:14:08.000Z","_content":"## 关于我\n\n我是一枚程序员，在游戏开发里深耕。我生活在魔性的帝都，家里有三只猫，它们分别叫kitty、Damon和崽子。最近在开发H5游戏，有志同道合的朋友可以给我留言。\n\nEmail: yue19870813@163.com\n\n还可以关注我的公众号:\n![wechat](/uploads/wechat-qcode.jpg)\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-11-27 15:14:08\n---\n## 关于我\n\n我是一枚程序员，在游戏开发里深耕。我生活在魔性的帝都，家里有三只猫，它们分别叫kitty、Damon和崽子。最近在开发H5游戏，有志同道合的朋友可以给我留言。\n\nEmail: yue19870813@163.com\n\n还可以关注我的公众号:\n![wechat](/uploads/wechat-qcode.jpg)\n","updated":"2019-07-01T12:35:47.384Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjycv1m330000ok9mrpau0j9a","content":"<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><p>我是一枚程序员，在游戏开发里深耕。我生活在魔性的帝都，家里有三只猫，它们分别叫kitty、Damon和崽子。最近在开发H5游戏，有志同道合的朋友可以给我留言。</p>\n<p>Email: yue19870813@163.com</p>\n<p>还可以关注我的公众号:<br><img src=\"/uploads/wechat-qcode.jpg\" alt=\"wechat\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><p>我是一枚程序员，在游戏开发里深耕。我生活在魔性的帝都，家里有三只猫，它们分别叫kitty、Damon和崽子。最近在开发H5游戏，有志同道合的朋友可以给我留言。</p>\n<p>Email: yue19870813@163.com</p>\n<p>还可以关注我的公众号:<br><img src=\"/uploads/wechat-qcode.jpg\" alt=\"wechat\"></p>\n"},{"title":"categories","date":"2016-11-27T07:27:52.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-11-27 15:27:52\ntype: \"categories\"\n---\n","updated":"2019-07-01T12:35:47.384Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjycv1m390002ok9m6zp2smip","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2016-11-27T07:30:03.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-11-27 15:30:03\ntype: \"tags\"\n---\n","updated":"2019-07-01T12:35:47.402Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjycv1m3b0004ok9mze0k02g9","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"游戏项目架构及管理 序","date":"2017-11-22T10:14:36.000Z","_content":"# 游戏项目架构及管理\n一个项目开发的过程顺不顺利、多人协作效率是否高效、后期拓展及维护成本是否浪费等，都和前期的项目架构有着密不可分的关系。这次就仔细的聊一下项目架构的问题。这里提前声明一下：本篇文章不涉及到具体功能的实现和技术讲解。\n\n做多了游戏的人，尤其是负责过中大型项目的人都知道，**底层架构很重要**。决定了后期功能修改和维护的成本，以及性能瓶颈等。要搭建一套可以支撑项目快速开发，易于维护，性能出色的底层。项目架构便于与其他人沟通，不同逻辑代码之间的交互，与美术，策划的沟通。框架可以让多人合作更加顺畅，包括策划和美术。同一件事情做到第三遍的时候，它就应该被封装和抽象到底层，或工具。<!--more-->\n\n## 架构大纲\n这里罗列一下需要考虑的关键点，如果不够全面大家可以补充。本身服务器不是太擅长，所以服务器部分内容可能不太全面或者存在片面的理解请多多指出。\n\n### 客户端\n1. 引擎选择：根据项目需求、团队人员组成等因素来选择引擎。\n2. 网络通信：根据项目类型来选择合适的网络通信方式。\n3. 项目结构：项目的目录结构很重要，是项目与人沟通的基本框架。\n4. 命名规范：命名规范就是代码与人沟通的细节了。\n5. 适配原则：移动游戏都要考虑适配，不同游戏也需要不同的适配策略。\n6. 其它待补充\n\n### 服务器\n1. 结构设计：服务器结构设计，节点之间的关系。不同的游戏类型，甚至同类型的不同玩法之间的游戏结构也会略有不同，适应游戏的玩法去做架构，能降低项目的研发风险及上线后的维护成本。\n2. 框架设计：服务器逻辑抽象层设计。业务逻辑及开发工具箱的高度抽象可以让开发更高效。\n3. 其它待补充\n\n### 其他\n1. 通用配置数据：策划配置的静态数据，采用什么样的形式编辑、存储及读取。\n2. 前后端协议配置：网络协议的约定。出色的协议配置策略可以让服务器和客户端更高效的开发和沟通。\n3. 发布及打包方式：科学的版本管理及发布可以为项目剩下很多时间。\n4. 脚本工具选择：项目中总会需要写很多脚本来处理一些复杂同时还重复的工作，哪些内容适合脚本化呢？又要选择哪些脚本语言来开发呢？\n5. 项目协作工具：项目协作工具也很重要，优秀的项目管理工具可以提高沟通效率，降低研发成本。\n6. 其它待补充\n\n\n\n\n","source":"_posts/20171122_项目架构和管理.md","raw":"---\ntitle: 游戏项目架构及管理 序\ndate: 2017-11-22 18:14:36\ntags: 架构管理\ncategories: 架构管理\n---\n# 游戏项目架构及管理\n一个项目开发的过程顺不顺利、多人协作效率是否高效、后期拓展及维护成本是否浪费等，都和前期的项目架构有着密不可分的关系。这次就仔细的聊一下项目架构的问题。这里提前声明一下：本篇文章不涉及到具体功能的实现和技术讲解。\n\n做多了游戏的人，尤其是负责过中大型项目的人都知道，**底层架构很重要**。决定了后期功能修改和维护的成本，以及性能瓶颈等。要搭建一套可以支撑项目快速开发，易于维护，性能出色的底层。项目架构便于与其他人沟通，不同逻辑代码之间的交互，与美术，策划的沟通。框架可以让多人合作更加顺畅，包括策划和美术。同一件事情做到第三遍的时候，它就应该被封装和抽象到底层，或工具。<!--more-->\n\n## 架构大纲\n这里罗列一下需要考虑的关键点，如果不够全面大家可以补充。本身服务器不是太擅长，所以服务器部分内容可能不太全面或者存在片面的理解请多多指出。\n\n### 客户端\n1. 引擎选择：根据项目需求、团队人员组成等因素来选择引擎。\n2. 网络通信：根据项目类型来选择合适的网络通信方式。\n3. 项目结构：项目的目录结构很重要，是项目与人沟通的基本框架。\n4. 命名规范：命名规范就是代码与人沟通的细节了。\n5. 适配原则：移动游戏都要考虑适配，不同游戏也需要不同的适配策略。\n6. 其它待补充\n\n### 服务器\n1. 结构设计：服务器结构设计，节点之间的关系。不同的游戏类型，甚至同类型的不同玩法之间的游戏结构也会略有不同，适应游戏的玩法去做架构，能降低项目的研发风险及上线后的维护成本。\n2. 框架设计：服务器逻辑抽象层设计。业务逻辑及开发工具箱的高度抽象可以让开发更高效。\n3. 其它待补充\n\n### 其他\n1. 通用配置数据：策划配置的静态数据，采用什么样的形式编辑、存储及读取。\n2. 前后端协议配置：网络协议的约定。出色的协议配置策略可以让服务器和客户端更高效的开发和沟通。\n3. 发布及打包方式：科学的版本管理及发布可以为项目剩下很多时间。\n4. 脚本工具选择：项目中总会需要写很多脚本来处理一些复杂同时还重复的工作，哪些内容适合脚本化呢？又要选择哪些脚本语言来开发呢？\n5. 项目协作工具：项目协作工具也很重要，优秀的项目管理工具可以提高沟通效率，降低研发成本。\n6. 其它待补充\n\n\n\n\n","slug":"20171122_项目架构和管理","published":1,"updated":"2019-07-01T12:35:47.379Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjycv1m350001ok9mgc1mm11b","content":"<h1 id=\"游戏项目架构及管理\"><a href=\"#游戏项目架构及管理\" class=\"headerlink\" title=\"游戏项目架构及管理\"></a>游戏项目架构及管理</h1><p>一个项目开发的过程顺不顺利、多人协作效率是否高效、后期拓展及维护成本是否浪费等，都和前期的项目架构有着密不可分的关系。这次就仔细的聊一下项目架构的问题。这里提前声明一下：本篇文章不涉及到具体功能的实现和技术讲解。</p>\n<p>做多了游戏的人，尤其是负责过中大型项目的人都知道，<strong>底层架构很重要</strong>。决定了后期功能修改和维护的成本，以及性能瓶颈等。要搭建一套可以支撑项目快速开发，易于维护，性能出色的底层。项目架构便于与其他人沟通，不同逻辑代码之间的交互，与美术，策划的沟通。框架可以让多人合作更加顺畅，包括策划和美术。同一件事情做到第三遍的时候，它就应该被封装和抽象到底层，或工具。<a id=\"more\"></a></p>\n<h2 id=\"架构大纲\"><a href=\"#架构大纲\" class=\"headerlink\" title=\"架构大纲\"></a>架构大纲</h2><p>这里罗列一下需要考虑的关键点，如果不够全面大家可以补充。本身服务器不是太擅长，所以服务器部分内容可能不太全面或者存在片面的理解请多多指出。</p>\n<h3 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h3><ol>\n<li>引擎选择：根据项目需求、团队人员组成等因素来选择引擎。</li>\n<li>网络通信：根据项目类型来选择合适的网络通信方式。</li>\n<li>项目结构：项目的目录结构很重要，是项目与人沟通的基本框架。</li>\n<li>命名规范：命名规范就是代码与人沟通的细节了。</li>\n<li>适配原则：移动游戏都要考虑适配，不同游戏也需要不同的适配策略。</li>\n<li>其它待补充</li>\n</ol>\n<h3 id=\"服务器\"><a href=\"#服务器\" class=\"headerlink\" title=\"服务器\"></a>服务器</h3><ol>\n<li>结构设计：服务器结构设计，节点之间的关系。不同的游戏类型，甚至同类型的不同玩法之间的游戏结构也会略有不同，适应游戏的玩法去做架构，能降低项目的研发风险及上线后的维护成本。</li>\n<li>框架设计：服务器逻辑抽象层设计。业务逻辑及开发工具箱的高度抽象可以让开发更高效。</li>\n<li>其它待补充</li>\n</ol>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><ol>\n<li>通用配置数据：策划配置的静态数据，采用什么样的形式编辑、存储及读取。</li>\n<li>前后端协议配置：网络协议的约定。出色的协议配置策略可以让服务器和客户端更高效的开发和沟通。</li>\n<li>发布及打包方式：科学的版本管理及发布可以为项目剩下很多时间。</li>\n<li>脚本工具选择：项目中总会需要写很多脚本来处理一些复杂同时还重复的工作，哪些内容适合脚本化呢？又要选择哪些脚本语言来开发呢？</li>\n<li>项目协作工具：项目协作工具也很重要，优秀的项目管理工具可以提高沟通效率，降低研发成本。</li>\n<li>其它待补充</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h1 id=\"游戏项目架构及管理\"><a href=\"#游戏项目架构及管理\" class=\"headerlink\" title=\"游戏项目架构及管理\"></a>游戏项目架构及管理</h1><p>一个项目开发的过程顺不顺利、多人协作效率是否高效、后期拓展及维护成本是否浪费等，都和前期的项目架构有着密不可分的关系。这次就仔细的聊一下项目架构的问题。这里提前声明一下：本篇文章不涉及到具体功能的实现和技术讲解。</p>\n<p>做多了游戏的人，尤其是负责过中大型项目的人都知道，<strong>底层架构很重要</strong>。决定了后期功能修改和维护的成本，以及性能瓶颈等。要搭建一套可以支撑项目快速开发，易于维护，性能出色的底层。项目架构便于与其他人沟通，不同逻辑代码之间的交互，与美术，策划的沟通。框架可以让多人合作更加顺畅，包括策划和美术。同一件事情做到第三遍的时候，它就应该被封装和抽象到底层，或工具。","more":"</p>\n<h2 id=\"架构大纲\"><a href=\"#架构大纲\" class=\"headerlink\" title=\"架构大纲\"></a>架构大纲</h2><p>这里罗列一下需要考虑的关键点，如果不够全面大家可以补充。本身服务器不是太擅长，所以服务器部分内容可能不太全面或者存在片面的理解请多多指出。</p>\n<h3 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h3><ol>\n<li>引擎选择：根据项目需求、团队人员组成等因素来选择引擎。</li>\n<li>网络通信：根据项目类型来选择合适的网络通信方式。</li>\n<li>项目结构：项目的目录结构很重要，是项目与人沟通的基本框架。</li>\n<li>命名规范：命名规范就是代码与人沟通的细节了。</li>\n<li>适配原则：移动游戏都要考虑适配，不同游戏也需要不同的适配策略。</li>\n<li>其它待补充</li>\n</ol>\n<h3 id=\"服务器\"><a href=\"#服务器\" class=\"headerlink\" title=\"服务器\"></a>服务器</h3><ol>\n<li>结构设计：服务器结构设计，节点之间的关系。不同的游戏类型，甚至同类型的不同玩法之间的游戏结构也会略有不同，适应游戏的玩法去做架构，能降低项目的研发风险及上线后的维护成本。</li>\n<li>框架设计：服务器逻辑抽象层设计。业务逻辑及开发工具箱的高度抽象可以让开发更高效。</li>\n<li>其它待补充</li>\n</ol>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><ol>\n<li>通用配置数据：策划配置的静态数据，采用什么样的形式编辑、存储及读取。</li>\n<li>前后端协议配置：网络协议的约定。出色的协议配置策略可以让服务器和客户端更高效的开发和沟通。</li>\n<li>发布及打包方式：科学的版本管理及发布可以为项目剩下很多时间。</li>\n<li>脚本工具选择：项目中总会需要写很多脚本来处理一些复杂同时还重复的工作，哪些内容适合脚本化呢？又要选择哪些脚本语言来开发呢？</li>\n<li>项目协作工具：项目协作工具也很重要，优秀的项目管理工具可以提高沟通效率，降低研发成本。</li>\n<li>其它待补充</li>\n</ol>"},{"title":"游戏项目架构及管理：网络通信","date":"2017-12-14T03:18:36.000Z","_content":"## 网络通信\n在项目最开始阶段主要需要考虑的还有网络通信模块，当然如果你做的是单机游戏就可以跳过这部分了。\n<!--more-->\n这里主要讲**长短连接的选择**，这个也是根据游戏项目来选择的。长连接和短链接分别也有不同的处理。这里说一下其实如果没有玩法上的限制，能用短链接来实现就尽量用短链接来实现，因为短链接无论是对服务器还是对客户端，短连接对消息的处理会简单很多，而且最重要的是占用的系统资源相对于长连接来说非常少。这里所说的系统资源占用少就是，无论是客户端还是服务器都不用长时间维护连接状态。而且假如一个逻辑服务器长连接时可以同时保持4000个连接，也就是支持4000人同时在线，但是如果改成短链接的话，这个逻辑服务器可能会支持10000+人同时在线，当然，前提是不影响游戏功能的情况下。\n\n下面先来说说**短链接**。一般我们说短链接大都是指http请求，当然有时我们也**用socket来模拟短连接**，这个我后面再详细说明。很多游戏与服务器数据交互比较简单，像一些偏单机玩法的弱联网游戏，一般指向服务器上传和请求很少的数据，比如积分、排名等信息。这时一般我们就直接用http请求来做就可以了，也不用做任何的数据封装和处理，简单粗暴也高效。但有时游戏会复杂一些，比如一些社交游戏(Social Game)，它就没必要使用长连接，短链接完全可以满足游戏需求，还可以最大化利用服务器资源，但是如果还采用刚刚那种简单粗暴的方式，直接用http请求，不做任何封装的话，开发时就会力不从心了，因为这类游戏中数据交互较多，人力维护成本较高，也容易出错。这时我们一般都会对http进行一个简单的封装，例如为每个消息增加一个唯一ID，同时会有一个对应的配置，告诉程序怎么解析这个请求，也就是这个请求里有哪些数据可以Get到，按照这个逻辑可以封装一套不需要逻辑层来维护的网络协议层，再把这些工具话，就不会再数据传输和解析上出错，并且也能提高开发效率。\n\n接着我们再说**长连接**。通俗的说长连接就是与服务器长时间的保持连接。保持连接的一个好处就是，不需要客户端主动的发起请求，服务器就可以随时的推送数据给客户端。短连接中我们采用轮询这种机制来，让服务器可以在一定的心跳时间内向客户端推送数据。但是在交换性较强，并且需要实时性的游戏中这种方式就不太好用，并且浪费了，这时我们就会采用长连接，保持连接不断开，服务器可以随时快速的推送数据给客户端。一些游戏类型必需采用长连接才能实现所要的玩法，比如FPS、MOBA这类游戏，还有大部分需要联网对战的游戏，都需要长连接来支撑玩法。在长连接中，还分为基于TCP和UDP的两种协议，更复杂的还有TCP和UDP混合使用的设计，这里我们不详细讨论，后面有时间我会单独讨论这个知识点。这里有一片文章介绍TCP和UDP怎么选择和设计的比较不错，大家可以参考一下：[UDP vs. TCP](https://gafferongames.com/post/udp_vs_tcp/)\n\n我们再说一下上文提到的**用socket来模拟短连接**这点。第二点在介绍短连接时我们了解到短连接可以实现大部分游戏需求，而且能用短连接尽量采用短连接，这样可以节省服务器资源。但是有很多游戏虽然可以采用短连接，可是他的数据请求比较频繁，这时使用http请求的弊端就显露出来了，由于http的特性（[HTTP数据包头解析](http://www.360doc.com/content/14/0408/14/8510389_367243070.shtml)）导致相同的数据http的数据包总要比socket大很多，所以频繁发送http请求就会很消耗流量资源，以及响应速度也稍慢(当然这点可以忽略不计)。这里就会用socket来模拟短连接来解决这个问题。由于http包头信息较多，导致数据量大，所以我们可以用soket来自定义自己的数据格式，来减少包头信息，自定义可以让包头足够的小，然后用socket来创建连接-发送数据-接收数据-关闭连接，就完成了一次请求。\n\n最后还有一种设计方式是**短连接和长连接组合使用**。有些游戏类型游戏会分为两种状态，比如一些棋牌游戏，在大厅时交互很弱，强交互都在房间内产生，这时候就适合短连接和长连接组合使用这种设计了。因为这种游戏一般服务器结构都分为大厅服务器和房间服务器，在大厅服务器时交互较弱，就适合使用短连接来实现，这样可以充分的利用服务器资源，让大厅服务器可以承载更多玩家在线。而连接到房间服务器时就可以保持连接不断开，采用长连接，以更好的服务玩法和带来更好的游戏体验。\n\n总之无论怎样设计，都是用来**服务游戏本身**的，所以考量设计时一定要从游戏本身来考虑和设计。这里还有一篇文章也不错，分享给大家看看：[手游开发中网络通信使用长连接还是短连接比较好?](https://www.zhihu.com/question/21093821)\n\n\n\n\n","source":"_posts/20171214_项目架构和管理_网络通信.md","raw":"---\ntitle: 游戏项目架构及管理：网络通信\ndate: 2017-12-14 11:18:36\ntags: 网络通信\ncategories: 架构管理\n---\n## 网络通信\n在项目最开始阶段主要需要考虑的还有网络通信模块，当然如果你做的是单机游戏就可以跳过这部分了。\n<!--more-->\n这里主要讲**长短连接的选择**，这个也是根据游戏项目来选择的。长连接和短链接分别也有不同的处理。这里说一下其实如果没有玩法上的限制，能用短链接来实现就尽量用短链接来实现，因为短链接无论是对服务器还是对客户端，短连接对消息的处理会简单很多，而且最重要的是占用的系统资源相对于长连接来说非常少。这里所说的系统资源占用少就是，无论是客户端还是服务器都不用长时间维护连接状态。而且假如一个逻辑服务器长连接时可以同时保持4000个连接，也就是支持4000人同时在线，但是如果改成短链接的话，这个逻辑服务器可能会支持10000+人同时在线，当然，前提是不影响游戏功能的情况下。\n\n下面先来说说**短链接**。一般我们说短链接大都是指http请求，当然有时我们也**用socket来模拟短连接**，这个我后面再详细说明。很多游戏与服务器数据交互比较简单，像一些偏单机玩法的弱联网游戏，一般指向服务器上传和请求很少的数据，比如积分、排名等信息。这时一般我们就直接用http请求来做就可以了，也不用做任何的数据封装和处理，简单粗暴也高效。但有时游戏会复杂一些，比如一些社交游戏(Social Game)，它就没必要使用长连接，短链接完全可以满足游戏需求，还可以最大化利用服务器资源，但是如果还采用刚刚那种简单粗暴的方式，直接用http请求，不做任何封装的话，开发时就会力不从心了，因为这类游戏中数据交互较多，人力维护成本较高，也容易出错。这时我们一般都会对http进行一个简单的封装，例如为每个消息增加一个唯一ID，同时会有一个对应的配置，告诉程序怎么解析这个请求，也就是这个请求里有哪些数据可以Get到，按照这个逻辑可以封装一套不需要逻辑层来维护的网络协议层，再把这些工具话，就不会再数据传输和解析上出错，并且也能提高开发效率。\n\n接着我们再说**长连接**。通俗的说长连接就是与服务器长时间的保持连接。保持连接的一个好处就是，不需要客户端主动的发起请求，服务器就可以随时的推送数据给客户端。短连接中我们采用轮询这种机制来，让服务器可以在一定的心跳时间内向客户端推送数据。但是在交换性较强，并且需要实时性的游戏中这种方式就不太好用，并且浪费了，这时我们就会采用长连接，保持连接不断开，服务器可以随时快速的推送数据给客户端。一些游戏类型必需采用长连接才能实现所要的玩法，比如FPS、MOBA这类游戏，还有大部分需要联网对战的游戏，都需要长连接来支撑玩法。在长连接中，还分为基于TCP和UDP的两种协议，更复杂的还有TCP和UDP混合使用的设计，这里我们不详细讨论，后面有时间我会单独讨论这个知识点。这里有一片文章介绍TCP和UDP怎么选择和设计的比较不错，大家可以参考一下：[UDP vs. TCP](https://gafferongames.com/post/udp_vs_tcp/)\n\n我们再说一下上文提到的**用socket来模拟短连接**这点。第二点在介绍短连接时我们了解到短连接可以实现大部分游戏需求，而且能用短连接尽量采用短连接，这样可以节省服务器资源。但是有很多游戏虽然可以采用短连接，可是他的数据请求比较频繁，这时使用http请求的弊端就显露出来了，由于http的特性（[HTTP数据包头解析](http://www.360doc.com/content/14/0408/14/8510389_367243070.shtml)）导致相同的数据http的数据包总要比socket大很多，所以频繁发送http请求就会很消耗流量资源，以及响应速度也稍慢(当然这点可以忽略不计)。这里就会用socket来模拟短连接来解决这个问题。由于http包头信息较多，导致数据量大，所以我们可以用soket来自定义自己的数据格式，来减少包头信息，自定义可以让包头足够的小，然后用socket来创建连接-发送数据-接收数据-关闭连接，就完成了一次请求。\n\n最后还有一种设计方式是**短连接和长连接组合使用**。有些游戏类型游戏会分为两种状态，比如一些棋牌游戏，在大厅时交互很弱，强交互都在房间内产生，这时候就适合短连接和长连接组合使用这种设计了。因为这种游戏一般服务器结构都分为大厅服务器和房间服务器，在大厅服务器时交互较弱，就适合使用短连接来实现，这样可以充分的利用服务器资源，让大厅服务器可以承载更多玩家在线。而连接到房间服务器时就可以保持连接不断开，采用长连接，以更好的服务玩法和带来更好的游戏体验。\n\n总之无论怎样设计，都是用来**服务游戏本身**的，所以考量设计时一定要从游戏本身来考虑和设计。这里还有一篇文章也不错，分享给大家看看：[手游开发中网络通信使用长连接还是短连接比较好?](https://www.zhihu.com/question/21093821)\n\n\n\n\n","slug":"20171214_项目架构和管理_网络通信","published":1,"updated":"2019-07-01T12:35:47.379Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjycv1m3a0003ok9m0oiutcow","content":"<h2 id=\"网络通信\"><a href=\"#网络通信\" class=\"headerlink\" title=\"网络通信\"></a>网络通信</h2><p>在项目最开始阶段主要需要考虑的还有网络通信模块，当然如果你做的是单机游戏就可以跳过这部分了。<br><a id=\"more\"></a><br>这里主要讲<strong>长短连接的选择</strong>，这个也是根据游戏项目来选择的。长连接和短链接分别也有不同的处理。这里说一下其实如果没有玩法上的限制，能用短链接来实现就尽量用短链接来实现，因为短链接无论是对服务器还是对客户端，短连接对消息的处理会简单很多，而且最重要的是占用的系统资源相对于长连接来说非常少。这里所说的系统资源占用少就是，无论是客户端还是服务器都不用长时间维护连接状态。而且假如一个逻辑服务器长连接时可以同时保持4000个连接，也就是支持4000人同时在线，但是如果改成短链接的话，这个逻辑服务器可能会支持10000+人同时在线，当然，前提是不影响游戏功能的情况下。</p>\n<p>下面先来说说<strong>短链接</strong>。一般我们说短链接大都是指http请求，当然有时我们也<strong>用socket来模拟短连接</strong>，这个我后面再详细说明。很多游戏与服务器数据交互比较简单，像一些偏单机玩法的弱联网游戏，一般指向服务器上传和请求很少的数据，比如积分、排名等信息。这时一般我们就直接用http请求来做就可以了，也不用做任何的数据封装和处理，简单粗暴也高效。但有时游戏会复杂一些，比如一些社交游戏(Social Game)，它就没必要使用长连接，短链接完全可以满足游戏需求，还可以最大化利用服务器资源，但是如果还采用刚刚那种简单粗暴的方式，直接用http请求，不做任何封装的话，开发时就会力不从心了，因为这类游戏中数据交互较多，人力维护成本较高，也容易出错。这时我们一般都会对http进行一个简单的封装，例如为每个消息增加一个唯一ID，同时会有一个对应的配置，告诉程序怎么解析这个请求，也就是这个请求里有哪些数据可以Get到，按照这个逻辑可以封装一套不需要逻辑层来维护的网络协议层，再把这些工具话，就不会再数据传输和解析上出错，并且也能提高开发效率。</p>\n<p>接着我们再说<strong>长连接</strong>。通俗的说长连接就是与服务器长时间的保持连接。保持连接的一个好处就是，不需要客户端主动的发起请求，服务器就可以随时的推送数据给客户端。短连接中我们采用轮询这种机制来，让服务器可以在一定的心跳时间内向客户端推送数据。但是在交换性较强，并且需要实时性的游戏中这种方式就不太好用，并且浪费了，这时我们就会采用长连接，保持连接不断开，服务器可以随时快速的推送数据给客户端。一些游戏类型必需采用长连接才能实现所要的玩法，比如FPS、MOBA这类游戏，还有大部分需要联网对战的游戏，都需要长连接来支撑玩法。在长连接中，还分为基于TCP和UDP的两种协议，更复杂的还有TCP和UDP混合使用的设计，这里我们不详细讨论，后面有时间我会单独讨论这个知识点。这里有一片文章介绍TCP和UDP怎么选择和设计的比较不错，大家可以参考一下：<a href=\"https://gafferongames.com/post/udp_vs_tcp/\" target=\"_blank\" rel=\"noopener\">UDP vs. TCP</a></p>\n<p>我们再说一下上文提到的<strong>用socket来模拟短连接</strong>这点。第二点在介绍短连接时我们了解到短连接可以实现大部分游戏需求，而且能用短连接尽量采用短连接，这样可以节省服务器资源。但是有很多游戏虽然可以采用短连接，可是他的数据请求比较频繁，这时使用http请求的弊端就显露出来了，由于http的特性（<a href=\"http://www.360doc.com/content/14/0408/14/8510389_367243070.shtml\" target=\"_blank\" rel=\"noopener\">HTTP数据包头解析</a>）导致相同的数据http的数据包总要比socket大很多，所以频繁发送http请求就会很消耗流量资源，以及响应速度也稍慢(当然这点可以忽略不计)。这里就会用socket来模拟短连接来解决这个问题。由于http包头信息较多，导致数据量大，所以我们可以用soket来自定义自己的数据格式，来减少包头信息，自定义可以让包头足够的小，然后用socket来创建连接-发送数据-接收数据-关闭连接，就完成了一次请求。</p>\n<p>最后还有一种设计方式是<strong>短连接和长连接组合使用</strong>。有些游戏类型游戏会分为两种状态，比如一些棋牌游戏，在大厅时交互很弱，强交互都在房间内产生，这时候就适合短连接和长连接组合使用这种设计了。因为这种游戏一般服务器结构都分为大厅服务器和房间服务器，在大厅服务器时交互较弱，就适合使用短连接来实现，这样可以充分的利用服务器资源，让大厅服务器可以承载更多玩家在线。而连接到房间服务器时就可以保持连接不断开，采用长连接，以更好的服务玩法和带来更好的游戏体验。</p>\n<p>总之无论怎样设计，都是用来<strong>服务游戏本身</strong>的，所以考量设计时一定要从游戏本身来考虑和设计。这里还有一篇文章也不错，分享给大家看看：<a href=\"https://www.zhihu.com/question/21093821\" target=\"_blank\" rel=\"noopener\">手游开发中网络通信使用长连接还是短连接比较好?</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"网络通信\"><a href=\"#网络通信\" class=\"headerlink\" title=\"网络通信\"></a>网络通信</h2><p>在项目最开始阶段主要需要考虑的还有网络通信模块，当然如果你做的是单机游戏就可以跳过这部分了。<br>","more":"<br>这里主要讲<strong>长短连接的选择</strong>，这个也是根据游戏项目来选择的。长连接和短链接分别也有不同的处理。这里说一下其实如果没有玩法上的限制，能用短链接来实现就尽量用短链接来实现，因为短链接无论是对服务器还是对客户端，短连接对消息的处理会简单很多，而且最重要的是占用的系统资源相对于长连接来说非常少。这里所说的系统资源占用少就是，无论是客户端还是服务器都不用长时间维护连接状态。而且假如一个逻辑服务器长连接时可以同时保持4000个连接，也就是支持4000人同时在线，但是如果改成短链接的话，这个逻辑服务器可能会支持10000+人同时在线，当然，前提是不影响游戏功能的情况下。</p>\n<p>下面先来说说<strong>短链接</strong>。一般我们说短链接大都是指http请求，当然有时我们也<strong>用socket来模拟短连接</strong>，这个我后面再详细说明。很多游戏与服务器数据交互比较简单，像一些偏单机玩法的弱联网游戏，一般指向服务器上传和请求很少的数据，比如积分、排名等信息。这时一般我们就直接用http请求来做就可以了，也不用做任何的数据封装和处理，简单粗暴也高效。但有时游戏会复杂一些，比如一些社交游戏(Social Game)，它就没必要使用长连接，短链接完全可以满足游戏需求，还可以最大化利用服务器资源，但是如果还采用刚刚那种简单粗暴的方式，直接用http请求，不做任何封装的话，开发时就会力不从心了，因为这类游戏中数据交互较多，人力维护成本较高，也容易出错。这时我们一般都会对http进行一个简单的封装，例如为每个消息增加一个唯一ID，同时会有一个对应的配置，告诉程序怎么解析这个请求，也就是这个请求里有哪些数据可以Get到，按照这个逻辑可以封装一套不需要逻辑层来维护的网络协议层，再把这些工具话，就不会再数据传输和解析上出错，并且也能提高开发效率。</p>\n<p>接着我们再说<strong>长连接</strong>。通俗的说长连接就是与服务器长时间的保持连接。保持连接的一个好处就是，不需要客户端主动的发起请求，服务器就可以随时的推送数据给客户端。短连接中我们采用轮询这种机制来，让服务器可以在一定的心跳时间内向客户端推送数据。但是在交换性较强，并且需要实时性的游戏中这种方式就不太好用，并且浪费了，这时我们就会采用长连接，保持连接不断开，服务器可以随时快速的推送数据给客户端。一些游戏类型必需采用长连接才能实现所要的玩法，比如FPS、MOBA这类游戏，还有大部分需要联网对战的游戏，都需要长连接来支撑玩法。在长连接中，还分为基于TCP和UDP的两种协议，更复杂的还有TCP和UDP混合使用的设计，这里我们不详细讨论，后面有时间我会单独讨论这个知识点。这里有一片文章介绍TCP和UDP怎么选择和设计的比较不错，大家可以参考一下：<a href=\"https://gafferongames.com/post/udp_vs_tcp/\" target=\"_blank\" rel=\"noopener\">UDP vs. TCP</a></p>\n<p>我们再说一下上文提到的<strong>用socket来模拟短连接</strong>这点。第二点在介绍短连接时我们了解到短连接可以实现大部分游戏需求，而且能用短连接尽量采用短连接，这样可以节省服务器资源。但是有很多游戏虽然可以采用短连接，可是他的数据请求比较频繁，这时使用http请求的弊端就显露出来了，由于http的特性（<a href=\"http://www.360doc.com/content/14/0408/14/8510389_367243070.shtml\" target=\"_blank\" rel=\"noopener\">HTTP数据包头解析</a>）导致相同的数据http的数据包总要比socket大很多，所以频繁发送http请求就会很消耗流量资源，以及响应速度也稍慢(当然这点可以忽略不计)。这里就会用socket来模拟短连接来解决这个问题。由于http包头信息较多，导致数据量大，所以我们可以用soket来自定义自己的数据格式，来减少包头信息，自定义可以让包头足够的小，然后用socket来创建连接-发送数据-接收数据-关闭连接，就完成了一次请求。</p>\n<p>最后还有一种设计方式是<strong>短连接和长连接组合使用</strong>。有些游戏类型游戏会分为两种状态，比如一些棋牌游戏，在大厅时交互很弱，强交互都在房间内产生，这时候就适合短连接和长连接组合使用这种设计了。因为这种游戏一般服务器结构都分为大厅服务器和房间服务器，在大厅服务器时交互较弱，就适合使用短连接来实现，这样可以充分的利用服务器资源，让大厅服务器可以承载更多玩家在线。而连接到房间服务器时就可以保持连接不断开，采用长连接，以更好的服务玩法和带来更好的游戏体验。</p>\n<p>总之无论怎样设计，都是用来<strong>服务游戏本身</strong>的，所以考量设计时一定要从游戏本身来考虑和设计。这里还有一篇文章也不错，分享给大家看看：<a href=\"https://www.zhihu.com/question/21093821\" target=\"_blank\" rel=\"noopener\">手游开发中网络通信使用长连接还是短连接比较好?</a></p>"},{"title":"游戏项目架构及管理：引擎选择","date":"2017-11-23T10:00:36.000Z","_content":"### 引擎选择\n游戏引擎的选择是项目开始的第一项工作，后面所有的工作都要在这个选择的引擎上进行，可想而知选择引擎的重要性。<!--more-->一般引擎的选择从下面几个维度来考虑：\n- 平台的选择：这里我们只考虑手游，不过现在H5游戏的不断流行，所以我们也要考虑H5平台的支持。目前H5平台支持比较好的引擎有Egret、laya和cocos creator，从工具链、性能和易用性上来说Egret更适合做H5平台的游戏，但是cocos creator近期发力不少，无论是从编辑器上还是性能上都有很出色的表现，我很期待它的后续发展。如果想做纯原生平台的游戏那么cocos2d-x和Unity都是不错的选择，这两款引擎占着整个原生游戏市场的80%以上的份额，国内市场份额更高。UE4现在也是很多大团队的选择，搭配技术积累较深厚和美术能力较强的团队可以做出出色的次世代表现的大作。\n- 2D与3D的选择：游戏立项时一定是可以确定该项目是2D项目还是3D项目，**2D游戏没必要非得使用3D来表现，合理选择2D与3D能让游戏有更好的体验**。目前H5平台上3D技术并不成熟，大多游戏还是采用2D来表现，所以。cocos2d-x在2D游戏开发上有着较大的优势，cocos2d-x比较轻量级、开源、可定制性强，同时2D平台很多解决方案也都很成熟。3D游戏首选Unity，市场上大量的3D游戏都是使用Unity引擎开发的，已经说明了Unity足够优秀。另外画面效果表现更为突出的虚幻也是很多团队的选择。这里有一篇Unity与UE4的对比文章，大家可以看一看（[Unity 过度到 Unreal 4 对比参考 非常详细！](http://blog.csdn.net/mengyin521/article/details/53507505)）。\n- 团队技术基础：这一定也是一定要考虑的，团队最擅长什么类型的游戏、什么引擎和什么编程语言等，都会对后期的开发有着至关重要的影响。上一点我提到：\n    > 2D游戏没必要非得使用3D来表现，合理选择2D与3D能让游戏有更好的体验。\n\n    在这个时候就要变通了。比如团队之前有一定Unity的开发经验，并且团队没有人擅长C\\+\\+开发，那么虽然项目是一款2D项目，比较适合使用cocos2d-x来开发，但是此时的最佳选择还是Unity，使用3D引擎开发2D游戏完全可以，但是让团队重新接受一款新引擎和一个新的编程语言（尤其是C\\+\\+）是不理智的，后期带来的风险一定会很高。\n- 招聘市场支持：这一点可能很多团队的管理者在立项之初并没有考虑过，其实也是很重要。比如公司想做一款表现较突出的次世代3D游戏，可能比较适合的方案就是选择UE4，但是招聘市场支持是需要去考虑的，能否快速组建出优秀的团队，包括技术、美术和策划，都是要对这个复杂的引擎有经验的，否则还不如采用Unity一样可以做出优秀的画面表现。除了前期的队伍搭建，还有当团队有人离开时是否能迅速招到人补充进来也是很重要的。同理后期的项目优化有可能也需要人才引进。如果选择了个冷门或者使用基数较小的技术或引擎，在人才储备和补充时就会捉襟见肘，严重时更会影响项目进度。\n\n当然影响技术的选择肯定不止这些因素，每个公司或者团队都有自己需要考量的因素，能够提炼出来的也希望大家提出来一起讨论。\n\n\n\n\n","source":"_posts/20171123_项目架构和管理_引擎选择.md","raw":"---\ntitle: 游戏项目架构及管理：引擎选择\ndate: 2017-11-23 18:00:36\ntags: 引擎选择\ncategories: 架构管理\n---\n### 引擎选择\n游戏引擎的选择是项目开始的第一项工作，后面所有的工作都要在这个选择的引擎上进行，可想而知选择引擎的重要性。<!--more-->一般引擎的选择从下面几个维度来考虑：\n- 平台的选择：这里我们只考虑手游，不过现在H5游戏的不断流行，所以我们也要考虑H5平台的支持。目前H5平台支持比较好的引擎有Egret、laya和cocos creator，从工具链、性能和易用性上来说Egret更适合做H5平台的游戏，但是cocos creator近期发力不少，无论是从编辑器上还是性能上都有很出色的表现，我很期待它的后续发展。如果想做纯原生平台的游戏那么cocos2d-x和Unity都是不错的选择，这两款引擎占着整个原生游戏市场的80%以上的份额，国内市场份额更高。UE4现在也是很多大团队的选择，搭配技术积累较深厚和美术能力较强的团队可以做出出色的次世代表现的大作。\n- 2D与3D的选择：游戏立项时一定是可以确定该项目是2D项目还是3D项目，**2D游戏没必要非得使用3D来表现，合理选择2D与3D能让游戏有更好的体验**。目前H5平台上3D技术并不成熟，大多游戏还是采用2D来表现，所以。cocos2d-x在2D游戏开发上有着较大的优势，cocos2d-x比较轻量级、开源、可定制性强，同时2D平台很多解决方案也都很成熟。3D游戏首选Unity，市场上大量的3D游戏都是使用Unity引擎开发的，已经说明了Unity足够优秀。另外画面效果表现更为突出的虚幻也是很多团队的选择。这里有一篇Unity与UE4的对比文章，大家可以看一看（[Unity 过度到 Unreal 4 对比参考 非常详细！](http://blog.csdn.net/mengyin521/article/details/53507505)）。\n- 团队技术基础：这一定也是一定要考虑的，团队最擅长什么类型的游戏、什么引擎和什么编程语言等，都会对后期的开发有着至关重要的影响。上一点我提到：\n    > 2D游戏没必要非得使用3D来表现，合理选择2D与3D能让游戏有更好的体验。\n\n    在这个时候就要变通了。比如团队之前有一定Unity的开发经验，并且团队没有人擅长C\\+\\+开发，那么虽然项目是一款2D项目，比较适合使用cocos2d-x来开发，但是此时的最佳选择还是Unity，使用3D引擎开发2D游戏完全可以，但是让团队重新接受一款新引擎和一个新的编程语言（尤其是C\\+\\+）是不理智的，后期带来的风险一定会很高。\n- 招聘市场支持：这一点可能很多团队的管理者在立项之初并没有考虑过，其实也是很重要。比如公司想做一款表现较突出的次世代3D游戏，可能比较适合的方案就是选择UE4，但是招聘市场支持是需要去考虑的，能否快速组建出优秀的团队，包括技术、美术和策划，都是要对这个复杂的引擎有经验的，否则还不如采用Unity一样可以做出优秀的画面表现。除了前期的队伍搭建，还有当团队有人离开时是否能迅速招到人补充进来也是很重要的。同理后期的项目优化有可能也需要人才引进。如果选择了个冷门或者使用基数较小的技术或引擎，在人才储备和补充时就会捉襟见肘，严重时更会影响项目进度。\n\n当然影响技术的选择肯定不止这些因素，每个公司或者团队都有自己需要考量的因素，能够提炼出来的也希望大家提出来一起讨论。\n\n\n\n\n","slug":"20171123_项目架构和管理_引擎选择","published":1,"updated":"2019-07-01T12:35:47.379Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjycv1m3c0005ok9mpkvxr5i9","content":"<h3 id=\"引擎选择\"><a href=\"#引擎选择\" class=\"headerlink\" title=\"引擎选择\"></a>引擎选择</h3><p>游戏引擎的选择是项目开始的第一项工作，后面所有的工作都要在这个选择的引擎上进行，可想而知选择引擎的重要性。<a id=\"more\"></a>一般引擎的选择从下面几个维度来考虑：</p>\n<ul>\n<li>平台的选择：这里我们只考虑手游，不过现在H5游戏的不断流行，所以我们也要考虑H5平台的支持。目前H5平台支持比较好的引擎有Egret、laya和cocos creator，从工具链、性能和易用性上来说Egret更适合做H5平台的游戏，但是cocos creator近期发力不少，无论是从编辑器上还是性能上都有很出色的表现，我很期待它的后续发展。如果想做纯原生平台的游戏那么cocos2d-x和Unity都是不错的选择，这两款引擎占着整个原生游戏市场的80%以上的份额，国内市场份额更高。UE4现在也是很多大团队的选择，搭配技术积累较深厚和美术能力较强的团队可以做出出色的次世代表现的大作。</li>\n<li>2D与3D的选择：游戏立项时一定是可以确定该项目是2D项目还是3D项目，<strong>2D游戏没必要非得使用3D来表现，合理选择2D与3D能让游戏有更好的体验</strong>。目前H5平台上3D技术并不成熟，大多游戏还是采用2D来表现，所以。cocos2d-x在2D游戏开发上有着较大的优势，cocos2d-x比较轻量级、开源、可定制性强，同时2D平台很多解决方案也都很成熟。3D游戏首选Unity，市场上大量的3D游戏都是使用Unity引擎开发的，已经说明了Unity足够优秀。另外画面效果表现更为突出的虚幻也是很多团队的选择。这里有一篇Unity与UE4的对比文章，大家可以看一看（<a href=\"http://blog.csdn.net/mengyin521/article/details/53507505\" target=\"_blank\" rel=\"noopener\">Unity 过度到 Unreal 4 对比参考 非常详细！</a>）。</li>\n<li><p>团队技术基础：这一定也是一定要考虑的，团队最擅长什么类型的游戏、什么引擎和什么编程语言等，都会对后期的开发有着至关重要的影响。上一点我提到：</p>\n<blockquote>\n<p>2D游戏没必要非得使用3D来表现，合理选择2D与3D能让游戏有更好的体验。</p>\n</blockquote>\n<p>  在这个时候就要变通了。比如团队之前有一定Unity的开发经验，并且团队没有人擅长C++开发，那么虽然项目是一款2D项目，比较适合使用cocos2d-x来开发，但是此时的最佳选择还是Unity，使用3D引擎开发2D游戏完全可以，但是让团队重新接受一款新引擎和一个新的编程语言（尤其是C++）是不理智的，后期带来的风险一定会很高。</p>\n</li>\n<li>招聘市场支持：这一点可能很多团队的管理者在立项之初并没有考虑过，其实也是很重要。比如公司想做一款表现较突出的次世代3D游戏，可能比较适合的方案就是选择UE4，但是招聘市场支持是需要去考虑的，能否快速组建出优秀的团队，包括技术、美术和策划，都是要对这个复杂的引擎有经验的，否则还不如采用Unity一样可以做出优秀的画面表现。除了前期的队伍搭建，还有当团队有人离开时是否能迅速招到人补充进来也是很重要的。同理后期的项目优化有可能也需要人才引进。如果选择了个冷门或者使用基数较小的技术或引擎，在人才储备和补充时就会捉襟见肘，严重时更会影响项目进度。</li>\n</ul>\n<p>当然影响技术的选择肯定不止这些因素，每个公司或者团队都有自己需要考量的因素，能够提炼出来的也希望大家提出来一起讨论。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"引擎选择\"><a href=\"#引擎选择\" class=\"headerlink\" title=\"引擎选择\"></a>引擎选择</h3><p>游戏引擎的选择是项目开始的第一项工作，后面所有的工作都要在这个选择的引擎上进行，可想而知选择引擎的重要性。","more":"一般引擎的选择从下面几个维度来考虑：</p>\n<ul>\n<li>平台的选择：这里我们只考虑手游，不过现在H5游戏的不断流行，所以我们也要考虑H5平台的支持。目前H5平台支持比较好的引擎有Egret、laya和cocos creator，从工具链、性能和易用性上来说Egret更适合做H5平台的游戏，但是cocos creator近期发力不少，无论是从编辑器上还是性能上都有很出色的表现，我很期待它的后续发展。如果想做纯原生平台的游戏那么cocos2d-x和Unity都是不错的选择，这两款引擎占着整个原生游戏市场的80%以上的份额，国内市场份额更高。UE4现在也是很多大团队的选择，搭配技术积累较深厚和美术能力较强的团队可以做出出色的次世代表现的大作。</li>\n<li>2D与3D的选择：游戏立项时一定是可以确定该项目是2D项目还是3D项目，<strong>2D游戏没必要非得使用3D来表现，合理选择2D与3D能让游戏有更好的体验</strong>。目前H5平台上3D技术并不成熟，大多游戏还是采用2D来表现，所以。cocos2d-x在2D游戏开发上有着较大的优势，cocos2d-x比较轻量级、开源、可定制性强，同时2D平台很多解决方案也都很成熟。3D游戏首选Unity，市场上大量的3D游戏都是使用Unity引擎开发的，已经说明了Unity足够优秀。另外画面效果表现更为突出的虚幻也是很多团队的选择。这里有一篇Unity与UE4的对比文章，大家可以看一看（<a href=\"http://blog.csdn.net/mengyin521/article/details/53507505\" target=\"_blank\" rel=\"noopener\">Unity 过度到 Unreal 4 对比参考 非常详细！</a>）。</li>\n<li><p>团队技术基础：这一定也是一定要考虑的，团队最擅长什么类型的游戏、什么引擎和什么编程语言等，都会对后期的开发有着至关重要的影响。上一点我提到：</p>\n<blockquote>\n<p>2D游戏没必要非得使用3D来表现，合理选择2D与3D能让游戏有更好的体验。</p>\n</blockquote>\n<p>  在这个时候就要变通了。比如团队之前有一定Unity的开发经验，并且团队没有人擅长C++开发，那么虽然项目是一款2D项目，比较适合使用cocos2d-x来开发，但是此时的最佳选择还是Unity，使用3D引擎开发2D游戏完全可以，但是让团队重新接受一款新引擎和一个新的编程语言（尤其是C++）是不理智的，后期带来的风险一定会很高。</p>\n</li>\n<li>招聘市场支持：这一点可能很多团队的管理者在立项之初并没有考虑过，其实也是很重要。比如公司想做一款表现较突出的次世代3D游戏，可能比较适合的方案就是选择UE4，但是招聘市场支持是需要去考虑的，能否快速组建出优秀的团队，包括技术、美术和策划，都是要对这个复杂的引擎有经验的，否则还不如采用Unity一样可以做出优秀的画面表现。除了前期的队伍搭建，还有当团队有人离开时是否能迅速招到人补充进来也是很重要的。同理后期的项目优化有可能也需要人才引进。如果选择了个冷门或者使用基数较小的技术或引擎，在人才储备和补充时就会捉襟见肘，严重时更会影响项目进度。</li>\n</ul>\n<p>当然影响技术的选择肯定不止这些因素，每个公司或者团队都有自己需要考量的因素，能够提炼出来的也希望大家提出来一起讨论。</p>"},{"title":"游戏项目架构及管理：项目结构及编程规范","date":"2017-12-19T07:03:31.000Z","_content":"### 项目结构\n提到项目结构这点，其实它的重要程度很多人都忽视掉了，清晰合理的项目结构可以让多人开发更高效，越大的项目效果越明显；优秀的项目结构可以让人更好的沟通，让其它模块的人迅速熟悉和了解另一模块，还可以让新加入团队的人快速了解和掌握项目。\n<!--more-->\n先说项目结构。项目结构非常重要，有的项目结构非常混乱，别说是新加入团队的新人，就是熟悉项目的人也不能迅速的找到一个功能所在的位置，这样的目录结构就是非常糟糕的了，熟悉项目的人都很难第一时间找到想要的东西，更别说其他人了，这为新加入团队的人增加了熟悉项目的难度，同时在项目不断庞大的后期维护中也越发的难以控制，维护成本越来越高，而这种情况往往随着时间的推移，混乱程度越来越高。而清晰规范的目录结构则不同，它可以让开发人员规范自己的代码，可以快速的找到想要找的功能，新人也可以快速了解项目，这给后期的维护和工作交接等降低了很多成本。同时清晰和规范的目录结构也能约束开发过程的不规范。下面列举两个客户端的项目结构，单并不是唯一，也不是最优：\n```\n//以MVC为分层的目录结构\nroot -- core\n     -- game -- model\n             -- view\n             -- control\n     -- platform\n\n//以功能为分层来管理目录结构\nroot -- core\n     -- game -- shop -- model\n                     -- view\n                     -- control\n             -- task -- model \n                     -- view\n                     -- control\n     -- platform\n```\n上面两种结构中是常用的两种管理方式，core是项目中使用的核心库，都是从业务逻辑中抽象出来可以复用的类库；game是游戏的业务逻辑目录，主要了两种管理方式都是体现在这里；platform是游戏外平台渠道相关的逻辑，是对外的业务目录。第一种通过设计来管理目录的这种方式适合项目规模不大，业务较少的项目，这种形式就非常简单明了，但是规模较大、业务较多的项目就不适合了，继续用这种方式管理，就会造成每个目录下臃肿并且业务逻辑显着冗余，这时适合第二种通过业务逻辑来管理目录的这种方式。\n\n除了项目内的目录结构外，还有项目外的整个工程目录结构也要管理清晰，这个涉及到后面各个部门间的协作沟通，以及后期不同版本的维护等。多个游戏版本开发中，有很多管理方式，一般常见的有主线开发打支线和支线开发合并到主线上这两种。比如主线开发就是有一个版本作为主线版本，其他所有版本的内容都现在主线版本中开发，再同步到其他支线版本中，其他支线版本再针对各自的需求制作各自特殊的修改。主线版本中版保证了各版本中共性的部分可以同步，例如在某个支线版本中发现了一个bug，不仅要在这个支线版本中改掉，还需要同步到主线版本中并验证，如果主线版本中也存在相同的问题，那么其他从主线版中打出去的分支版本也都要进行同步的修改。在这些个版本中，无论主线还是支线，除了代码的同步外，还有游戏配置、资源源文件等也要同步维护。这些负责的功能管理都需要项目的工程目录合理清晰，否则会越来越乱，越来越臃肿，难以管理。\n\n项目结构看似简单，实质上有很多东西值得讨论，同时也有很多项目组并不重视这点，小型的项目可以能还好，中大型项目如果不重视这点，尤其是到上线维护后，版本过多弊端就会明显，所以项目之初就要考虑好这些问题。\n\n\n### 命名规范\n#### 意义\n命名规范的意义不用多说，很多开发者应该或多或少都应该感受过优秀的命名规范带来的益处或者糟糕的命名规范带来的痛苦。命名规范和上一节讨论的项目结构一样，能够为项目带来客观的正向收益，下面就仔细的聊一下命名规范。\n\n#### 原则\n首先先讨论一下命名规范的原则。其实命名规范并没有一个统一的标准，每个公司甚至每个项目规范可能都不一样，但这不是问题，只要我们遵守几个原则去定义规范就好了，下面几个原则点是我个人的总结，有不对或者不全面的请指出。\n- 简单：命名要尽量简单，用简短的命名来表达语义，而不用很复杂的词组，当然如果这个变量所表达的意思就是很复杂，那么也不要强制把它简写，能看懂毕竟比简单要重要的多。\n- 明确：明确就是指能够看懂所表达的意思，并且没有多重语义。上一点提到过，明确要比简单重要。\n- 统一：这点非常重要，在实际开发中这点总被忽视，而且也带来了很多问题。比如对点券这个变量的命名，有人命名成cash，有人命名成money，甚至还有ticket，这在其他人阅读代码时就造成了很大的困扰，会认为他们是三个东西。所以这种变量命名一定要统一，并且是全局统一，不仅在客户端或者服务器，二是整个项目，包括前后端以及策划文档等。\n\n#### 条目\n这里罗列一下哪些东西需要命名规范，前两类在各种编程入门、进阶等书籍或者很多地方都说到了，所以前两点就不细说了。\n- 项目名、文件名。\n- 包名、类名、函数名、变量名。\n- 项目中的资源名。资源命名除了能体现是什么功能外，还要体现出资源类型，所在目录等。最好是单独拿出一个资源时，能快速的知道这是什么资源、在哪里、什么功能等。\n- 模版生成的代码命名。工具自动生成的模版代码在项目中很常见，这类代码一般是不允许直接手动修改的，所以这部分代码除了遵守基准的命名规则外，还要能体现出它是模版代码，在使用或者引用时能让使用者或者阅读代码的人能够知道这部分代码是不能直接修改的。\n- 文档、日志。提到命名规范时，大部分人可能首先想到并且只想到的都是编写代码中的命名规范，其实除了编码外其它很多东西也是需要命名的。比如，比较重要的一部分就是文档，文档中对一些名词的命名也要规范统一，否则后期理解维护成本会较高。\n\n#### 经验\n这里简单说几条经验，规范这个东西越早提出越好。当然对应一个新团队来说，可能没有这些积累，但是早期应该有一个大概的规范框架，在项目开发过程中不断完善和修改，慢慢就积累下来了。还有关于命名统一这点，项目可以做一个通用名词对照表，放在一个大家都可以方便查看的地方共享，由大家来维护。最后再次强调命名规范的重要性。\n\n#### 参考推荐用名\n这里有个常用短语命名大家可以参考：\n\n名称 | 命名 | 名称 | 命名\n---|---|---|---\n搜索|search|按钮|button(btn)\n菜单栏|tab|背景|BG\n用户|user|刷新|refresh\n图片|image|广告|banner\n注册|register|链接|link\n导航栏|nav|图标|icon\n个人资料|profile|弹出|pop\n删除|delete|下载|download\n登陆|login|标题|title\n注释|note|返回|back\n编辑|edit|内容|content\n左、右、中|left、right、center|标志|logo\n提示信息|msg\t\n状态（选中）|selected|状态（不可点）|disabled\n状态（默认）|default|状态（按下）|pressed\n参考推荐用名[：http://www.jianshu.com/p/126dc658d763](http://www.jianshu.com/p/126dc658d763)\n\n\n\n\n","source":"_posts/20171219_项目架构和管理_项目结构及编程规范.md","raw":"---\ntitle: 游戏项目架构及管理：项目结构及编程规范\ndate: 2017-12-19 15:03:31\ntags: 编程规范\ncategories: 架构管理\n---\n### 项目结构\n提到项目结构这点，其实它的重要程度很多人都忽视掉了，清晰合理的项目结构可以让多人开发更高效，越大的项目效果越明显；优秀的项目结构可以让人更好的沟通，让其它模块的人迅速熟悉和了解另一模块，还可以让新加入团队的人快速了解和掌握项目。\n<!--more-->\n先说项目结构。项目结构非常重要，有的项目结构非常混乱，别说是新加入团队的新人，就是熟悉项目的人也不能迅速的找到一个功能所在的位置，这样的目录结构就是非常糟糕的了，熟悉项目的人都很难第一时间找到想要的东西，更别说其他人了，这为新加入团队的人增加了熟悉项目的难度，同时在项目不断庞大的后期维护中也越发的难以控制，维护成本越来越高，而这种情况往往随着时间的推移，混乱程度越来越高。而清晰规范的目录结构则不同，它可以让开发人员规范自己的代码，可以快速的找到想要找的功能，新人也可以快速了解项目，这给后期的维护和工作交接等降低了很多成本。同时清晰和规范的目录结构也能约束开发过程的不规范。下面列举两个客户端的项目结构，单并不是唯一，也不是最优：\n```\n//以MVC为分层的目录结构\nroot -- core\n     -- game -- model\n             -- view\n             -- control\n     -- platform\n\n//以功能为分层来管理目录结构\nroot -- core\n     -- game -- shop -- model\n                     -- view\n                     -- control\n             -- task -- model \n                     -- view\n                     -- control\n     -- platform\n```\n上面两种结构中是常用的两种管理方式，core是项目中使用的核心库，都是从业务逻辑中抽象出来可以复用的类库；game是游戏的业务逻辑目录，主要了两种管理方式都是体现在这里；platform是游戏外平台渠道相关的逻辑，是对外的业务目录。第一种通过设计来管理目录的这种方式适合项目规模不大，业务较少的项目，这种形式就非常简单明了，但是规模较大、业务较多的项目就不适合了，继续用这种方式管理，就会造成每个目录下臃肿并且业务逻辑显着冗余，这时适合第二种通过业务逻辑来管理目录的这种方式。\n\n除了项目内的目录结构外，还有项目外的整个工程目录结构也要管理清晰，这个涉及到后面各个部门间的协作沟通，以及后期不同版本的维护等。多个游戏版本开发中，有很多管理方式，一般常见的有主线开发打支线和支线开发合并到主线上这两种。比如主线开发就是有一个版本作为主线版本，其他所有版本的内容都现在主线版本中开发，再同步到其他支线版本中，其他支线版本再针对各自的需求制作各自特殊的修改。主线版本中版保证了各版本中共性的部分可以同步，例如在某个支线版本中发现了一个bug，不仅要在这个支线版本中改掉，还需要同步到主线版本中并验证，如果主线版本中也存在相同的问题，那么其他从主线版中打出去的分支版本也都要进行同步的修改。在这些个版本中，无论主线还是支线，除了代码的同步外，还有游戏配置、资源源文件等也要同步维护。这些负责的功能管理都需要项目的工程目录合理清晰，否则会越来越乱，越来越臃肿，难以管理。\n\n项目结构看似简单，实质上有很多东西值得讨论，同时也有很多项目组并不重视这点，小型的项目可以能还好，中大型项目如果不重视这点，尤其是到上线维护后，版本过多弊端就会明显，所以项目之初就要考虑好这些问题。\n\n\n### 命名规范\n#### 意义\n命名规范的意义不用多说，很多开发者应该或多或少都应该感受过优秀的命名规范带来的益处或者糟糕的命名规范带来的痛苦。命名规范和上一节讨论的项目结构一样，能够为项目带来客观的正向收益，下面就仔细的聊一下命名规范。\n\n#### 原则\n首先先讨论一下命名规范的原则。其实命名规范并没有一个统一的标准，每个公司甚至每个项目规范可能都不一样，但这不是问题，只要我们遵守几个原则去定义规范就好了，下面几个原则点是我个人的总结，有不对或者不全面的请指出。\n- 简单：命名要尽量简单，用简短的命名来表达语义，而不用很复杂的词组，当然如果这个变量所表达的意思就是很复杂，那么也不要强制把它简写，能看懂毕竟比简单要重要的多。\n- 明确：明确就是指能够看懂所表达的意思，并且没有多重语义。上一点提到过，明确要比简单重要。\n- 统一：这点非常重要，在实际开发中这点总被忽视，而且也带来了很多问题。比如对点券这个变量的命名，有人命名成cash，有人命名成money，甚至还有ticket，这在其他人阅读代码时就造成了很大的困扰，会认为他们是三个东西。所以这种变量命名一定要统一，并且是全局统一，不仅在客户端或者服务器，二是整个项目，包括前后端以及策划文档等。\n\n#### 条目\n这里罗列一下哪些东西需要命名规范，前两类在各种编程入门、进阶等书籍或者很多地方都说到了，所以前两点就不细说了。\n- 项目名、文件名。\n- 包名、类名、函数名、变量名。\n- 项目中的资源名。资源命名除了能体现是什么功能外，还要体现出资源类型，所在目录等。最好是单独拿出一个资源时，能快速的知道这是什么资源、在哪里、什么功能等。\n- 模版生成的代码命名。工具自动生成的模版代码在项目中很常见，这类代码一般是不允许直接手动修改的，所以这部分代码除了遵守基准的命名规则外，还要能体现出它是模版代码，在使用或者引用时能让使用者或者阅读代码的人能够知道这部分代码是不能直接修改的。\n- 文档、日志。提到命名规范时，大部分人可能首先想到并且只想到的都是编写代码中的命名规范，其实除了编码外其它很多东西也是需要命名的。比如，比较重要的一部分就是文档，文档中对一些名词的命名也要规范统一，否则后期理解维护成本会较高。\n\n#### 经验\n这里简单说几条经验，规范这个东西越早提出越好。当然对应一个新团队来说，可能没有这些积累，但是早期应该有一个大概的规范框架，在项目开发过程中不断完善和修改，慢慢就积累下来了。还有关于命名统一这点，项目可以做一个通用名词对照表，放在一个大家都可以方便查看的地方共享，由大家来维护。最后再次强调命名规范的重要性。\n\n#### 参考推荐用名\n这里有个常用短语命名大家可以参考：\n\n名称 | 命名 | 名称 | 命名\n---|---|---|---\n搜索|search|按钮|button(btn)\n菜单栏|tab|背景|BG\n用户|user|刷新|refresh\n图片|image|广告|banner\n注册|register|链接|link\n导航栏|nav|图标|icon\n个人资料|profile|弹出|pop\n删除|delete|下载|download\n登陆|login|标题|title\n注释|note|返回|back\n编辑|edit|内容|content\n左、右、中|left、right、center|标志|logo\n提示信息|msg\t\n状态（选中）|selected|状态（不可点）|disabled\n状态（默认）|default|状态（按下）|pressed\n参考推荐用名[：http://www.jianshu.com/p/126dc658d763](http://www.jianshu.com/p/126dc658d763)\n\n\n\n\n","slug":"20171219_项目架构和管理_项目结构及编程规范","published":1,"updated":"2019-07-01T12:35:47.380Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjycv1m3d0006ok9m4xmuhc74","content":"<h3 id=\"项目结构\"><a href=\"#项目结构\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h3><p>提到项目结构这点，其实它的重要程度很多人都忽视掉了，清晰合理的项目结构可以让多人开发更高效，越大的项目效果越明显；优秀的项目结构可以让人更好的沟通，让其它模块的人迅速熟悉和了解另一模块，还可以让新加入团队的人快速了解和掌握项目。<br><a id=\"more\"></a><br>先说项目结构。项目结构非常重要，有的项目结构非常混乱，别说是新加入团队的新人，就是熟悉项目的人也不能迅速的找到一个功能所在的位置，这样的目录结构就是非常糟糕的了，熟悉项目的人都很难第一时间找到想要的东西，更别说其他人了，这为新加入团队的人增加了熟悉项目的难度，同时在项目不断庞大的后期维护中也越发的难以控制，维护成本越来越高，而这种情况往往随着时间的推移，混乱程度越来越高。而清晰规范的目录结构则不同，它可以让开发人员规范自己的代码，可以快速的找到想要找的功能，新人也可以快速了解项目，这给后期的维护和工作交接等降低了很多成本。同时清晰和规范的目录结构也能约束开发过程的不规范。下面列举两个客户端的项目结构，单并不是唯一，也不是最优：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//以MVC为分层的目录结构</span><br><span class=\"line\">root -- core</span><br><span class=\"line\">     -- game -- model</span><br><span class=\"line\">             -- view</span><br><span class=\"line\">             -- control</span><br><span class=\"line\">     -- platform</span><br><span class=\"line\"></span><br><span class=\"line\">//以功能为分层来管理目录结构</span><br><span class=\"line\">root -- core</span><br><span class=\"line\">     -- game -- shop -- model</span><br><span class=\"line\">                     -- view</span><br><span class=\"line\">                     -- control</span><br><span class=\"line\">             -- task -- model </span><br><span class=\"line\">                     -- view</span><br><span class=\"line\">                     -- control</span><br><span class=\"line\">     -- platform</span><br></pre></td></tr></table></figure></p>\n<p>上面两种结构中是常用的两种管理方式，core是项目中使用的核心库，都是从业务逻辑中抽象出来可以复用的类库；game是游戏的业务逻辑目录，主要了两种管理方式都是体现在这里；platform是游戏外平台渠道相关的逻辑，是对外的业务目录。第一种通过设计来管理目录的这种方式适合项目规模不大，业务较少的项目，这种形式就非常简单明了，但是规模较大、业务较多的项目就不适合了，继续用这种方式管理，就会造成每个目录下臃肿并且业务逻辑显着冗余，这时适合第二种通过业务逻辑来管理目录的这种方式。</p>\n<p>除了项目内的目录结构外，还有项目外的整个工程目录结构也要管理清晰，这个涉及到后面各个部门间的协作沟通，以及后期不同版本的维护等。多个游戏版本开发中，有很多管理方式，一般常见的有主线开发打支线和支线开发合并到主线上这两种。比如主线开发就是有一个版本作为主线版本，其他所有版本的内容都现在主线版本中开发，再同步到其他支线版本中，其他支线版本再针对各自的需求制作各自特殊的修改。主线版本中版保证了各版本中共性的部分可以同步，例如在某个支线版本中发现了一个bug，不仅要在这个支线版本中改掉，还需要同步到主线版本中并验证，如果主线版本中也存在相同的问题，那么其他从主线版中打出去的分支版本也都要进行同步的修改。在这些个版本中，无论主线还是支线，除了代码的同步外，还有游戏配置、资源源文件等也要同步维护。这些负责的功能管理都需要项目的工程目录合理清晰，否则会越来越乱，越来越臃肿，难以管理。</p>\n<p>项目结构看似简单，实质上有很多东西值得讨论，同时也有很多项目组并不重视这点，小型的项目可以能还好，中大型项目如果不重视这点，尤其是到上线维护后，版本过多弊端就会明显，所以项目之初就要考虑好这些问题。</p>\n<h3 id=\"命名规范\"><a href=\"#命名规范\" class=\"headerlink\" title=\"命名规范\"></a>命名规范</h3><h4 id=\"意义\"><a href=\"#意义\" class=\"headerlink\" title=\"意义\"></a>意义</h4><p>命名规范的意义不用多说，很多开发者应该或多或少都应该感受过优秀的命名规范带来的益处或者糟糕的命名规范带来的痛苦。命名规范和上一节讨论的项目结构一样，能够为项目带来客观的正向收益，下面就仔细的聊一下命名规范。</p>\n<h4 id=\"原则\"><a href=\"#原则\" class=\"headerlink\" title=\"原则\"></a>原则</h4><p>首先先讨论一下命名规范的原则。其实命名规范并没有一个统一的标准，每个公司甚至每个项目规范可能都不一样，但这不是问题，只要我们遵守几个原则去定义规范就好了，下面几个原则点是我个人的总结，有不对或者不全面的请指出。</p>\n<ul>\n<li>简单：命名要尽量简单，用简短的命名来表达语义，而不用很复杂的词组，当然如果这个变量所表达的意思就是很复杂，那么也不要强制把它简写，能看懂毕竟比简单要重要的多。</li>\n<li>明确：明确就是指能够看懂所表达的意思，并且没有多重语义。上一点提到过，明确要比简单重要。</li>\n<li>统一：这点非常重要，在实际开发中这点总被忽视，而且也带来了很多问题。比如对点券这个变量的命名，有人命名成cash，有人命名成money，甚至还有ticket，这在其他人阅读代码时就造成了很大的困扰，会认为他们是三个东西。所以这种变量命名一定要统一，并且是全局统一，不仅在客户端或者服务器，二是整个项目，包括前后端以及策划文档等。</li>\n</ul>\n<h4 id=\"条目\"><a href=\"#条目\" class=\"headerlink\" title=\"条目\"></a>条目</h4><p>这里罗列一下哪些东西需要命名规范，前两类在各种编程入门、进阶等书籍或者很多地方都说到了，所以前两点就不细说了。</p>\n<ul>\n<li>项目名、文件名。</li>\n<li>包名、类名、函数名、变量名。</li>\n<li>项目中的资源名。资源命名除了能体现是什么功能外，还要体现出资源类型，所在目录等。最好是单独拿出一个资源时，能快速的知道这是什么资源、在哪里、什么功能等。</li>\n<li>模版生成的代码命名。工具自动生成的模版代码在项目中很常见，这类代码一般是不允许直接手动修改的，所以这部分代码除了遵守基准的命名规则外，还要能体现出它是模版代码，在使用或者引用时能让使用者或者阅读代码的人能够知道这部分代码是不能直接修改的。</li>\n<li>文档、日志。提到命名规范时，大部分人可能首先想到并且只想到的都是编写代码中的命名规范，其实除了编码外其它很多东西也是需要命名的。比如，比较重要的一部分就是文档，文档中对一些名词的命名也要规范统一，否则后期理解维护成本会较高。</li>\n</ul>\n<h4 id=\"经验\"><a href=\"#经验\" class=\"headerlink\" title=\"经验\"></a>经验</h4><p>这里简单说几条经验，规范这个东西越早提出越好。当然对应一个新团队来说，可能没有这些积累，但是早期应该有一个大概的规范框架，在项目开发过程中不断完善和修改，慢慢就积累下来了。还有关于命名统一这点，项目可以做一个通用名词对照表，放在一个大家都可以方便查看的地方共享，由大家来维护。最后再次强调命名规范的重要性。</p>\n<h4 id=\"参考推荐用名\"><a href=\"#参考推荐用名\" class=\"headerlink\" title=\"参考推荐用名\"></a>参考推荐用名</h4><p>这里有个常用短语命名大家可以参考：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>命名</th>\n<th>名称</th>\n<th>命名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>搜索</td>\n<td>search</td>\n<td>按钮</td>\n<td>button(btn)</td>\n</tr>\n<tr>\n<td>菜单栏</td>\n<td>tab</td>\n<td>背景</td>\n<td>BG</td>\n</tr>\n<tr>\n<td>用户</td>\n<td>user</td>\n<td>刷新</td>\n<td>refresh</td>\n</tr>\n<tr>\n<td>图片</td>\n<td>image</td>\n<td>广告</td>\n<td>banner</td>\n</tr>\n<tr>\n<td>注册</td>\n<td>register</td>\n<td>链接</td>\n<td>link</td>\n</tr>\n<tr>\n<td>导航栏</td>\n<td>nav</td>\n<td>图标</td>\n<td>icon</td>\n</tr>\n<tr>\n<td>个人资料</td>\n<td>profile</td>\n<td>弹出</td>\n<td>pop</td>\n</tr>\n<tr>\n<td>删除</td>\n<td>delete</td>\n<td>下载</td>\n<td>download</td>\n</tr>\n<tr>\n<td>登陆</td>\n<td>login</td>\n<td>标题</td>\n<td>title</td>\n</tr>\n<tr>\n<td>注释</td>\n<td>note</td>\n<td>返回</td>\n<td>back</td>\n</tr>\n<tr>\n<td>编辑</td>\n<td>edit</td>\n<td>内容</td>\n<td>content</td>\n</tr>\n<tr>\n<td>左、右、中</td>\n<td>left、right、center</td>\n<td>标志</td>\n<td>logo</td>\n</tr>\n<tr>\n<td>提示信息</td>\n<td>msg    </td>\n</tr>\n<tr>\n<td>状态（选中）</td>\n<td>selected</td>\n<td>状态（不可点）</td>\n<td>disabled</td>\n</tr>\n<tr>\n<td>状态（默认）</td>\n<td>default</td>\n<td>状态（按下）</td>\n<td>pressed</td>\n</tr>\n</tbody>\n</table>\n<p>参考推荐用名<a href=\"http://www.jianshu.com/p/126dc658d763\" target=\"_blank\" rel=\"noopener\">：http://www.jianshu.com/p/126dc658d763</a></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"项目结构\"><a href=\"#项目结构\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h3><p>提到项目结构这点，其实它的重要程度很多人都忽视掉了，清晰合理的项目结构可以让多人开发更高效，越大的项目效果越明显；优秀的项目结构可以让人更好的沟通，让其它模块的人迅速熟悉和了解另一模块，还可以让新加入团队的人快速了解和掌握项目。<br>","more":"<br>先说项目结构。项目结构非常重要，有的项目结构非常混乱，别说是新加入团队的新人，就是熟悉项目的人也不能迅速的找到一个功能所在的位置，这样的目录结构就是非常糟糕的了，熟悉项目的人都很难第一时间找到想要的东西，更别说其他人了，这为新加入团队的人增加了熟悉项目的难度，同时在项目不断庞大的后期维护中也越发的难以控制，维护成本越来越高，而这种情况往往随着时间的推移，混乱程度越来越高。而清晰规范的目录结构则不同，它可以让开发人员规范自己的代码，可以快速的找到想要找的功能，新人也可以快速了解项目，这给后期的维护和工作交接等降低了很多成本。同时清晰和规范的目录结构也能约束开发过程的不规范。下面列举两个客户端的项目结构，单并不是唯一，也不是最优：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//以MVC为分层的目录结构</span><br><span class=\"line\">root -- core</span><br><span class=\"line\">     -- game -- model</span><br><span class=\"line\">             -- view</span><br><span class=\"line\">             -- control</span><br><span class=\"line\">     -- platform</span><br><span class=\"line\"></span><br><span class=\"line\">//以功能为分层来管理目录结构</span><br><span class=\"line\">root -- core</span><br><span class=\"line\">     -- game -- shop -- model</span><br><span class=\"line\">                     -- view</span><br><span class=\"line\">                     -- control</span><br><span class=\"line\">             -- task -- model </span><br><span class=\"line\">                     -- view</span><br><span class=\"line\">                     -- control</span><br><span class=\"line\">     -- platform</span><br></pre></td></tr></table></figure></p>\n<p>上面两种结构中是常用的两种管理方式，core是项目中使用的核心库，都是从业务逻辑中抽象出来可以复用的类库；game是游戏的业务逻辑目录，主要了两种管理方式都是体现在这里；platform是游戏外平台渠道相关的逻辑，是对外的业务目录。第一种通过设计来管理目录的这种方式适合项目规模不大，业务较少的项目，这种形式就非常简单明了，但是规模较大、业务较多的项目就不适合了，继续用这种方式管理，就会造成每个目录下臃肿并且业务逻辑显着冗余，这时适合第二种通过业务逻辑来管理目录的这种方式。</p>\n<p>除了项目内的目录结构外，还有项目外的整个工程目录结构也要管理清晰，这个涉及到后面各个部门间的协作沟通，以及后期不同版本的维护等。多个游戏版本开发中，有很多管理方式，一般常见的有主线开发打支线和支线开发合并到主线上这两种。比如主线开发就是有一个版本作为主线版本，其他所有版本的内容都现在主线版本中开发，再同步到其他支线版本中，其他支线版本再针对各自的需求制作各自特殊的修改。主线版本中版保证了各版本中共性的部分可以同步，例如在某个支线版本中发现了一个bug，不仅要在这个支线版本中改掉，还需要同步到主线版本中并验证，如果主线版本中也存在相同的问题，那么其他从主线版中打出去的分支版本也都要进行同步的修改。在这些个版本中，无论主线还是支线，除了代码的同步外，还有游戏配置、资源源文件等也要同步维护。这些负责的功能管理都需要项目的工程目录合理清晰，否则会越来越乱，越来越臃肿，难以管理。</p>\n<p>项目结构看似简单，实质上有很多东西值得讨论，同时也有很多项目组并不重视这点，小型的项目可以能还好，中大型项目如果不重视这点，尤其是到上线维护后，版本过多弊端就会明显，所以项目之初就要考虑好这些问题。</p>\n<h3 id=\"命名规范\"><a href=\"#命名规范\" class=\"headerlink\" title=\"命名规范\"></a>命名规范</h3><h4 id=\"意义\"><a href=\"#意义\" class=\"headerlink\" title=\"意义\"></a>意义</h4><p>命名规范的意义不用多说，很多开发者应该或多或少都应该感受过优秀的命名规范带来的益处或者糟糕的命名规范带来的痛苦。命名规范和上一节讨论的项目结构一样，能够为项目带来客观的正向收益，下面就仔细的聊一下命名规范。</p>\n<h4 id=\"原则\"><a href=\"#原则\" class=\"headerlink\" title=\"原则\"></a>原则</h4><p>首先先讨论一下命名规范的原则。其实命名规范并没有一个统一的标准，每个公司甚至每个项目规范可能都不一样，但这不是问题，只要我们遵守几个原则去定义规范就好了，下面几个原则点是我个人的总结，有不对或者不全面的请指出。</p>\n<ul>\n<li>简单：命名要尽量简单，用简短的命名来表达语义，而不用很复杂的词组，当然如果这个变量所表达的意思就是很复杂，那么也不要强制把它简写，能看懂毕竟比简单要重要的多。</li>\n<li>明确：明确就是指能够看懂所表达的意思，并且没有多重语义。上一点提到过，明确要比简单重要。</li>\n<li>统一：这点非常重要，在实际开发中这点总被忽视，而且也带来了很多问题。比如对点券这个变量的命名，有人命名成cash，有人命名成money，甚至还有ticket，这在其他人阅读代码时就造成了很大的困扰，会认为他们是三个东西。所以这种变量命名一定要统一，并且是全局统一，不仅在客户端或者服务器，二是整个项目，包括前后端以及策划文档等。</li>\n</ul>\n<h4 id=\"条目\"><a href=\"#条目\" class=\"headerlink\" title=\"条目\"></a>条目</h4><p>这里罗列一下哪些东西需要命名规范，前两类在各种编程入门、进阶等书籍或者很多地方都说到了，所以前两点就不细说了。</p>\n<ul>\n<li>项目名、文件名。</li>\n<li>包名、类名、函数名、变量名。</li>\n<li>项目中的资源名。资源命名除了能体现是什么功能外，还要体现出资源类型，所在目录等。最好是单独拿出一个资源时，能快速的知道这是什么资源、在哪里、什么功能等。</li>\n<li>模版生成的代码命名。工具自动生成的模版代码在项目中很常见，这类代码一般是不允许直接手动修改的，所以这部分代码除了遵守基准的命名规则外，还要能体现出它是模版代码，在使用或者引用时能让使用者或者阅读代码的人能够知道这部分代码是不能直接修改的。</li>\n<li>文档、日志。提到命名规范时，大部分人可能首先想到并且只想到的都是编写代码中的命名规范，其实除了编码外其它很多东西也是需要命名的。比如，比较重要的一部分就是文档，文档中对一些名词的命名也要规范统一，否则后期理解维护成本会较高。</li>\n</ul>\n<h4 id=\"经验\"><a href=\"#经验\" class=\"headerlink\" title=\"经验\"></a>经验</h4><p>这里简单说几条经验，规范这个东西越早提出越好。当然对应一个新团队来说，可能没有这些积累，但是早期应该有一个大概的规范框架，在项目开发过程中不断完善和修改，慢慢就积累下来了。还有关于命名统一这点，项目可以做一个通用名词对照表，放在一个大家都可以方便查看的地方共享，由大家来维护。最后再次强调命名规范的重要性。</p>\n<h4 id=\"参考推荐用名\"><a href=\"#参考推荐用名\" class=\"headerlink\" title=\"参考推荐用名\"></a>参考推荐用名</h4><p>这里有个常用短语命名大家可以参考：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>命名</th>\n<th>名称</th>\n<th>命名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>搜索</td>\n<td>search</td>\n<td>按钮</td>\n<td>button(btn)</td>\n</tr>\n<tr>\n<td>菜单栏</td>\n<td>tab</td>\n<td>背景</td>\n<td>BG</td>\n</tr>\n<tr>\n<td>用户</td>\n<td>user</td>\n<td>刷新</td>\n<td>refresh</td>\n</tr>\n<tr>\n<td>图片</td>\n<td>image</td>\n<td>广告</td>\n<td>banner</td>\n</tr>\n<tr>\n<td>注册</td>\n<td>register</td>\n<td>链接</td>\n<td>link</td>\n</tr>\n<tr>\n<td>导航栏</td>\n<td>nav</td>\n<td>图标</td>\n<td>icon</td>\n</tr>\n<tr>\n<td>个人资料</td>\n<td>profile</td>\n<td>弹出</td>\n<td>pop</td>\n</tr>\n<tr>\n<td>删除</td>\n<td>delete</td>\n<td>下载</td>\n<td>download</td>\n</tr>\n<tr>\n<td>登陆</td>\n<td>login</td>\n<td>标题</td>\n<td>title</td>\n</tr>\n<tr>\n<td>注释</td>\n<td>note</td>\n<td>返回</td>\n<td>back</td>\n</tr>\n<tr>\n<td>编辑</td>\n<td>edit</td>\n<td>内容</td>\n<td>content</td>\n</tr>\n<tr>\n<td>左、右、中</td>\n<td>left、right、center</td>\n<td>标志</td>\n<td>logo</td>\n</tr>\n<tr>\n<td>提示信息</td>\n<td>msg    </td>\n</tr>\n<tr>\n<td>状态（选中）</td>\n<td>selected</td>\n<td>状态（不可点）</td>\n<td>disabled</td>\n</tr>\n<tr>\n<td>状态（默认）</td>\n<td>default</td>\n<td>状态（按下）</td>\n<td>pressed</td>\n</tr>\n</tbody>\n</table>\n<p>参考推荐用名<a href=\"http://www.jianshu.com/p/126dc658d763\" target=\"_blank\" rel=\"noopener\">：http://www.jianshu.com/p/126dc658d763</a></p>"},{"title":"ExtJS初级教程之ExtJS Grid(一)","date":"2016-11-27T14:45:35.000Z","_content":"我们在很多网站都能看到表格的影子，而ExtJS Grid在页面表现上又非常强大，下面我们就创建我们的第一个表格。<!--more-->\n在ExtJS中我们是通过Ext.grid.ColumnModel这个类来描述列属性的。下面我们建立一个ColumnModel对象。\n``` javascript\nvar cm = new Ext.grid.ColumnModel([  \n {header:'产品编号',dataIndex:'product_id'},  \n {header:'产品名称',dataIndex:'product_name'},  \n {header:'产品价格',dataIndex:'product_price'}  \n]);\n```\n接下来我们定义表格中要显示的数据。\n``` javascript\nvar data = [  \n    ['01','电脑','4800'],  \n    ['02','手机','2100'],  \n    ['03','相机','1800'],  \n    ['04','衣服','220']  \n];  \n```\n数据中的列是和定义表格列属性时是相对应的。下面我们要创建一个Store对象来讲data装载到stroe对象中。\n``` javascript\nvar store = new Ext.data.Store({  \n proxy:new Ext.data.MemoryProxy(data),  \n reader:new Ext.data.ArrayReader({},[  \n       {name:'product_id'},  \n       {name:'product_name'},  \n       {name:'product_price'}  \n ])  \n});  \n```\nproxy属性是一个代理类对象，该对象可以封装一个静态数组。ArrayReader对象可以将数组解析，但是要使用mapping属性来进行映射。\n``` javascript\nvar store = new Ext.data.Store({  \n proxy:new Ext.data.MemoryProxy(data),  \n reader:new Ext.data.ArrayReader({},[  \n       {name:'product_id',mapping:0},  \n       {name:'product_name',mapping:1},  \n       {name:'product_price',mapping:2}  \n ])  \n});  \nstore.load();  \n```\n接着就是创建一个GridPanel对象来装置表格并显示在页面上。\n``` javascript\nvar gridPanel = new Ext.grid.GridPanel( {  \n autoHeigth : false,  \n renderTo : 'grid',  \n store : store,  \n cm : cm  \n});  \n```\n这样，我们第一个静态表格就完成了。下面是完整的代码：\n``` javascript\n\nExt.onReady(function() {  \n var cm = new Ext.grid.ColumnModel( [ {  \n  header : 'id',  \n  dataIndex : 'product_id'  \n }, {  \n  header : 'name',  \n  dataIndex : 'product_name'  \n }, {  \n  header : 'price',  \n  dataIndex : 'product_price'  \n } ]);  \n var data = [ [ '01', 'computer', '4800' ], [ '02', 'phone', '2100' ],  \n   [ '03', 'ffff', '1800' ], [ '04', 'closes', '220' ] ];  \n var store = new Ext.data.Store( {  \n  proxy : new Ext.data.MemoryProxy(data),  \n  reader : new Ext.data.ArrayReader( {}, [ {  \n   name : 'product_id',  \n   mapping : 0  \n  }, {  \n   name : 'product_name',  \n   mapping : 1  \n  }, {  \n   name : 'product_price',  \n   mapping : 2  \n  } ])  \n });  \n store.load();  \n var gridPanel = new Ext.grid.GridPanel( {  \n  autoHeigth : false,  \n  renderTo : 'grid',  \n  store : store,  \n  cm : cm  \n });  \n});  \n```\n通过这个简单的代码例子我们也大概了解了创建一个Grid的基本流程了，下面我们简单介绍一下Grid的一些其他的简单属性。\n\n阻止移动列和改变列的宽度：\n``` javascript\nvar gridPanel = new Ext.grid.GridPanel( {         \n    autoHeigth : true,    \n    renderTo : 'grid',    \n    enableColumnMove:false,   \n    enableColumnResize:false,     \n    store : store,    \n    cm : cm   \n}); \n```\n代码中enableColumnMove:false设置的是阻止列的移动，enableColumnResize:false设置的是让列的宽度禁止改变。\n\n按列排序：\n``` javascript\nvar cm = new Ext.grid.ColumnModel( [ {                \n        header : 'id',        \n        dataIndex : 'product_id'          \n    }, {              \n        header : 'name',          \n        dataIndex : 'product_name',       \n        sortable:true         \n    }, {              \n        header : 'price',         \n        dataIndex : 'product_price'       \n    } ]); \n```\n在该列设置sortable：true之后，该列就拥有了排序的功能。\n\n有很多时候我们需要在表格的每列前加一个复选框，用来标记选中的，进行操作，下面我们就加入复选框试试。首先，我们要创建复选框对象，这时我们要用到Ext.grid.CheckboxSelectionModel这个类。\n``` javascript\nvar sm = new Ext.grid.CheckboxSelectionModel();           \nvar cm = new Ext.grid.ColumnModel( [              \n              \n   {              \n    header : 'id',        \n    dataIndex : 'product_id',         \n    sortable:true         \n}, {              \n    header : 'name',          \n    dataIndex : 'product_name',       \n    sortable:true  \n}, {      \n    header : 'price',  \n    dataIndex : 'product_price',  \n    sortable:true  \n} ]);  \n```\n创建完复选框对象后，我们还要将这个复选框对象添加到ColumnModel对象中去。接着还要将复选框对象添加到Panel上:\n``` javascript\nvar gridPanel = new Ext.grid.GridPanel( {     \n    autoHeigth : true,  \n    renderTo : 'grid',  \n    enableColumnMove:false,  \n    enableColumnResize:false,  \n    store : store,  \n    cm : cm,  \n    sm:sm  \n});  \n```\n下面我们做一个非常频繁用到的功能：将复选框选中的行删除。首先要在页面添加一个删除按钮。\n``` html\n<input type = \"button\" value = \"删除选中行\" onclick = \"deleteCheckbox()\" style = \"margin-top:20px\"/>  \n```\n这个JavaScript函数就是页面按钮要调用的函数：\n``` javascript\nfunction deleteCheckbox(){                \n     //从后往前扫描             \n     for(var i = store.getCount();i>=0;i--){           \n        if(mm.isSelected(i)){         \n                //删除当前行  \n                store.removeAt(i);  \n            }  \n     }        \n     //重新加载表数据        \n     gridPanel.reconfigure(store,cm);         \n  }; \n```\n这样一个主要功能都健全的Grid就完成了，今天我就写这些，下次我将继续ExtJS Grid的分页和编辑表格的研究。","source":"_posts/Grid-1.md","raw":"---\ntitle: ExtJS初级教程之ExtJS Grid(一)\ndate: 2016-11-27 22:45:35\ntags: ExtJS\ncategories: javascript\n---\n我们在很多网站都能看到表格的影子，而ExtJS Grid在页面表现上又非常强大，下面我们就创建我们的第一个表格。<!--more-->\n在ExtJS中我们是通过Ext.grid.ColumnModel这个类来描述列属性的。下面我们建立一个ColumnModel对象。\n``` javascript\nvar cm = new Ext.grid.ColumnModel([  \n {header:'产品编号',dataIndex:'product_id'},  \n {header:'产品名称',dataIndex:'product_name'},  \n {header:'产品价格',dataIndex:'product_price'}  \n]);\n```\n接下来我们定义表格中要显示的数据。\n``` javascript\nvar data = [  \n    ['01','电脑','4800'],  \n    ['02','手机','2100'],  \n    ['03','相机','1800'],  \n    ['04','衣服','220']  \n];  \n```\n数据中的列是和定义表格列属性时是相对应的。下面我们要创建一个Store对象来讲data装载到stroe对象中。\n``` javascript\nvar store = new Ext.data.Store({  \n proxy:new Ext.data.MemoryProxy(data),  \n reader:new Ext.data.ArrayReader({},[  \n       {name:'product_id'},  \n       {name:'product_name'},  \n       {name:'product_price'}  \n ])  \n});  \n```\nproxy属性是一个代理类对象，该对象可以封装一个静态数组。ArrayReader对象可以将数组解析，但是要使用mapping属性来进行映射。\n``` javascript\nvar store = new Ext.data.Store({  \n proxy:new Ext.data.MemoryProxy(data),  \n reader:new Ext.data.ArrayReader({},[  \n       {name:'product_id',mapping:0},  \n       {name:'product_name',mapping:1},  \n       {name:'product_price',mapping:2}  \n ])  \n});  \nstore.load();  \n```\n接着就是创建一个GridPanel对象来装置表格并显示在页面上。\n``` javascript\nvar gridPanel = new Ext.grid.GridPanel( {  \n autoHeigth : false,  \n renderTo : 'grid',  \n store : store,  \n cm : cm  \n});  \n```\n这样，我们第一个静态表格就完成了。下面是完整的代码：\n``` javascript\n\nExt.onReady(function() {  \n var cm = new Ext.grid.ColumnModel( [ {  \n  header : 'id',  \n  dataIndex : 'product_id'  \n }, {  \n  header : 'name',  \n  dataIndex : 'product_name'  \n }, {  \n  header : 'price',  \n  dataIndex : 'product_price'  \n } ]);  \n var data = [ [ '01', 'computer', '4800' ], [ '02', 'phone', '2100' ],  \n   [ '03', 'ffff', '1800' ], [ '04', 'closes', '220' ] ];  \n var store = new Ext.data.Store( {  \n  proxy : new Ext.data.MemoryProxy(data),  \n  reader : new Ext.data.ArrayReader( {}, [ {  \n   name : 'product_id',  \n   mapping : 0  \n  }, {  \n   name : 'product_name',  \n   mapping : 1  \n  }, {  \n   name : 'product_price',  \n   mapping : 2  \n  } ])  \n });  \n store.load();  \n var gridPanel = new Ext.grid.GridPanel( {  \n  autoHeigth : false,  \n  renderTo : 'grid',  \n  store : store,  \n  cm : cm  \n });  \n});  \n```\n通过这个简单的代码例子我们也大概了解了创建一个Grid的基本流程了，下面我们简单介绍一下Grid的一些其他的简单属性。\n\n阻止移动列和改变列的宽度：\n``` javascript\nvar gridPanel = new Ext.grid.GridPanel( {         \n    autoHeigth : true,    \n    renderTo : 'grid',    \n    enableColumnMove:false,   \n    enableColumnResize:false,     \n    store : store,    \n    cm : cm   \n}); \n```\n代码中enableColumnMove:false设置的是阻止列的移动，enableColumnResize:false设置的是让列的宽度禁止改变。\n\n按列排序：\n``` javascript\nvar cm = new Ext.grid.ColumnModel( [ {                \n        header : 'id',        \n        dataIndex : 'product_id'          \n    }, {              \n        header : 'name',          \n        dataIndex : 'product_name',       \n        sortable:true         \n    }, {              \n        header : 'price',         \n        dataIndex : 'product_price'       \n    } ]); \n```\n在该列设置sortable：true之后，该列就拥有了排序的功能。\n\n有很多时候我们需要在表格的每列前加一个复选框，用来标记选中的，进行操作，下面我们就加入复选框试试。首先，我们要创建复选框对象，这时我们要用到Ext.grid.CheckboxSelectionModel这个类。\n``` javascript\nvar sm = new Ext.grid.CheckboxSelectionModel();           \nvar cm = new Ext.grid.ColumnModel( [              \n              \n   {              \n    header : 'id',        \n    dataIndex : 'product_id',         \n    sortable:true         \n}, {              \n    header : 'name',          \n    dataIndex : 'product_name',       \n    sortable:true  \n}, {      \n    header : 'price',  \n    dataIndex : 'product_price',  \n    sortable:true  \n} ]);  \n```\n创建完复选框对象后，我们还要将这个复选框对象添加到ColumnModel对象中去。接着还要将复选框对象添加到Panel上:\n``` javascript\nvar gridPanel = new Ext.grid.GridPanel( {     \n    autoHeigth : true,  \n    renderTo : 'grid',  \n    enableColumnMove:false,  \n    enableColumnResize:false,  \n    store : store,  \n    cm : cm,  \n    sm:sm  \n});  \n```\n下面我们做一个非常频繁用到的功能：将复选框选中的行删除。首先要在页面添加一个删除按钮。\n``` html\n<input type = \"button\" value = \"删除选中行\" onclick = \"deleteCheckbox()\" style = \"margin-top:20px\"/>  \n```\n这个JavaScript函数就是页面按钮要调用的函数：\n``` javascript\nfunction deleteCheckbox(){                \n     //从后往前扫描             \n     for(var i = store.getCount();i>=0;i--){           \n        if(mm.isSelected(i)){         \n                //删除当前行  \n                store.removeAt(i);  \n            }  \n     }        \n     //重新加载表数据        \n     gridPanel.reconfigure(store,cm);         \n  }; \n```\n这样一个主要功能都健全的Grid就完成了，今天我就写这些，下次我将继续ExtJS Grid的分页和编辑表格的研究。","slug":"Grid-1","published":1,"updated":"2019-07-01T12:35:47.380Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjycv1m3d0007ok9mhlohhq1u","content":"<p>我们在很多网站都能看到表格的影子，而ExtJS Grid在页面表现上又非常强大，下面我们就创建我们的第一个表格。<a id=\"more\"></a><br>在ExtJS中我们是通过Ext.grid.ColumnModel这个类来描述列属性的。下面我们建立一个ColumnModel对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cm = <span class=\"keyword\">new</span> Ext.grid.ColumnModel([  </span><br><span class=\"line\"> &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品编号'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_id'</span>&#125;,  </span><br><span class=\"line\"> &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品名称'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_name'</span>&#125;,  </span><br><span class=\"line\"> &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品价格'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_price'</span>&#125;  </span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure></p>\n<p>接下来我们定义表格中要显示的数据。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> data = [  </span><br><span class=\"line\">    [<span class=\"string\">'01'</span>,<span class=\"string\">'电脑'</span>,<span class=\"string\">'4800'</span>],  </span><br><span class=\"line\">    [<span class=\"string\">'02'</span>,<span class=\"string\">'手机'</span>,<span class=\"string\">'2100'</span>],  </span><br><span class=\"line\">    [<span class=\"string\">'03'</span>,<span class=\"string\">'相机'</span>,<span class=\"string\">'1800'</span>],  </span><br><span class=\"line\">    [<span class=\"string\">'04'</span>,<span class=\"string\">'衣服'</span>,<span class=\"string\">'220'</span>]  </span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure></p>\n<p>数据中的列是和定义表格列属性时是相对应的。下面我们要创建一个Store对象来讲data装载到stroe对象中。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> store = <span class=\"keyword\">new</span> Ext.data.Store(&#123;  </span><br><span class=\"line\"> proxy:<span class=\"keyword\">new</span> Ext.data.MemoryProxy(data),  </span><br><span class=\"line\"> reader:<span class=\"keyword\">new</span> Ext.data.ArrayReader(&#123;&#125;,[  </span><br><span class=\"line\">       &#123;<span class=\"attr\">name</span>:<span class=\"string\">'product_id'</span>&#125;,  </span><br><span class=\"line\">       &#123;<span class=\"attr\">name</span>:<span class=\"string\">'product_name'</span>&#125;,  </span><br><span class=\"line\">       &#123;<span class=\"attr\">name</span>:<span class=\"string\">'product_price'</span>&#125;  </span><br><span class=\"line\"> ])  </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>proxy属性是一个代理类对象，该对象可以封装一个静态数组。ArrayReader对象可以将数组解析，但是要使用mapping属性来进行映射。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> store = <span class=\"keyword\">new</span> Ext.data.Store(&#123;  </span><br><span class=\"line\"> proxy:<span class=\"keyword\">new</span> Ext.data.MemoryProxy(data),  </span><br><span class=\"line\"> reader:<span class=\"keyword\">new</span> Ext.data.ArrayReader(&#123;&#125;,[  </span><br><span class=\"line\">       &#123;<span class=\"attr\">name</span>:<span class=\"string\">'product_id'</span>,<span class=\"attr\">mapping</span>:<span class=\"number\">0</span>&#125;,  </span><br><span class=\"line\">       &#123;<span class=\"attr\">name</span>:<span class=\"string\">'product_name'</span>,<span class=\"attr\">mapping</span>:<span class=\"number\">1</span>&#125;,  </span><br><span class=\"line\">       &#123;<span class=\"attr\">name</span>:<span class=\"string\">'product_price'</span>,<span class=\"attr\">mapping</span>:<span class=\"number\">2</span>&#125;  </span><br><span class=\"line\"> ])  </span><br><span class=\"line\">&#125;);  </span><br><span class=\"line\">store.load();</span><br></pre></td></tr></table></figure></p>\n<p>接着就是创建一个GridPanel对象来装置表格并显示在页面上。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gridPanel = <span class=\"keyword\">new</span> Ext.grid.GridPanel( &#123;  </span><br><span class=\"line\"> autoHeigth : <span class=\"literal\">false</span>,  </span><br><span class=\"line\"> renderTo : <span class=\"string\">'grid'</span>,  </span><br><span class=\"line\"> store : store,  </span><br><span class=\"line\"> cm : cm  </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>这样，我们第一个静态表格就完成了。下面是完整的代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Ext.onReady(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\"> <span class=\"keyword\">var</span> cm = <span class=\"keyword\">new</span> Ext.grid.ColumnModel( [ &#123;  </span><br><span class=\"line\">  header : <span class=\"string\">'id'</span>,  </span><br><span class=\"line\">  dataIndex : <span class=\"string\">'product_id'</span>  </span><br><span class=\"line\"> &#125;, &#123;  </span><br><span class=\"line\">  header : <span class=\"string\">'name'</span>,  </span><br><span class=\"line\">  dataIndex : <span class=\"string\">'product_name'</span>  </span><br><span class=\"line\"> &#125;, &#123;  </span><br><span class=\"line\">  header : <span class=\"string\">'price'</span>,  </span><br><span class=\"line\">  dataIndex : <span class=\"string\">'product_price'</span>  </span><br><span class=\"line\"> &#125; ]);  </span><br><span class=\"line\"> <span class=\"keyword\">var</span> data = [ [ <span class=\"string\">'01'</span>, <span class=\"string\">'computer'</span>, <span class=\"string\">'4800'</span> ], [ <span class=\"string\">'02'</span>, <span class=\"string\">'phone'</span>, <span class=\"string\">'2100'</span> ],  </span><br><span class=\"line\">   [ <span class=\"string\">'03'</span>, <span class=\"string\">'ffff'</span>, <span class=\"string\">'1800'</span> ], [ <span class=\"string\">'04'</span>, <span class=\"string\">'closes'</span>, <span class=\"string\">'220'</span> ] ];  </span><br><span class=\"line\"> <span class=\"keyword\">var</span> store = <span class=\"keyword\">new</span> Ext.data.Store( &#123;  </span><br><span class=\"line\">  proxy : <span class=\"keyword\">new</span> Ext.data.MemoryProxy(data),  </span><br><span class=\"line\">  reader : <span class=\"keyword\">new</span> Ext.data.ArrayReader( &#123;&#125;, [ &#123;  </span><br><span class=\"line\">   name : <span class=\"string\">'product_id'</span>,  </span><br><span class=\"line\">   mapping : <span class=\"number\">0</span>  </span><br><span class=\"line\">  &#125;, &#123;  </span><br><span class=\"line\">   name : <span class=\"string\">'product_name'</span>,  </span><br><span class=\"line\">   mapping : <span class=\"number\">1</span>  </span><br><span class=\"line\">  &#125;, &#123;  </span><br><span class=\"line\">   name : <span class=\"string\">'product_price'</span>,  </span><br><span class=\"line\">   mapping : <span class=\"number\">2</span>  </span><br><span class=\"line\">  &#125; ])  </span><br><span class=\"line\"> &#125;);  </span><br><span class=\"line\"> store.load();  </span><br><span class=\"line\"> <span class=\"keyword\">var</span> gridPanel = <span class=\"keyword\">new</span> Ext.grid.GridPanel( &#123;  </span><br><span class=\"line\">  autoHeigth : <span class=\"literal\">false</span>,  </span><br><span class=\"line\">  renderTo : <span class=\"string\">'grid'</span>,  </span><br><span class=\"line\">  store : store,  </span><br><span class=\"line\">  cm : cm  </span><br><span class=\"line\"> &#125;);  </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>通过这个简单的代码例子我们也大概了解了创建一个Grid的基本流程了，下面我们简单介绍一下Grid的一些其他的简单属性。</p>\n<p>阻止移动列和改变列的宽度：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gridPanel = <span class=\"keyword\">new</span> Ext.grid.GridPanel( &#123;         </span><br><span class=\"line\">    autoHeigth : <span class=\"literal\">true</span>,    </span><br><span class=\"line\">    renderTo : <span class=\"string\">'grid'</span>,    </span><br><span class=\"line\">    enableColumnMove:<span class=\"literal\">false</span>,   </span><br><span class=\"line\">    enableColumnResize:<span class=\"literal\">false</span>,     </span><br><span class=\"line\">    store : store,    </span><br><span class=\"line\">    cm : cm   </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>代码中enableColumnMove:false设置的是阻止列的移动，enableColumnResize:false设置的是让列的宽度禁止改变。</p>\n<p>按列排序：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cm = <span class=\"keyword\">new</span> Ext.grid.ColumnModel( [ &#123;                </span><br><span class=\"line\">        header : <span class=\"string\">'id'</span>,        </span><br><span class=\"line\">        dataIndex : <span class=\"string\">'product_id'</span>          </span><br><span class=\"line\">    &#125;, &#123;              </span><br><span class=\"line\">        header : <span class=\"string\">'name'</span>,          </span><br><span class=\"line\">        dataIndex : <span class=\"string\">'product_name'</span>,       </span><br><span class=\"line\">        sortable:<span class=\"literal\">true</span>         </span><br><span class=\"line\">    &#125;, &#123;              </span><br><span class=\"line\">        header : <span class=\"string\">'price'</span>,         </span><br><span class=\"line\">        dataIndex : <span class=\"string\">'product_price'</span>       </span><br><span class=\"line\">    &#125; ]);</span><br></pre></td></tr></table></figure></p>\n<p>在该列设置sortable：true之后，该列就拥有了排序的功能。</p>\n<p>有很多时候我们需要在表格的每列前加一个复选框，用来标记选中的，进行操作，下面我们就加入复选框试试。首先，我们要创建复选框对象，这时我们要用到Ext.grid.CheckboxSelectionModel这个类。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sm = <span class=\"keyword\">new</span> Ext.grid.CheckboxSelectionModel();           </span><br><span class=\"line\"><span class=\"keyword\">var</span> cm = <span class=\"keyword\">new</span> Ext.grid.ColumnModel( [              </span><br><span class=\"line\">              </span><br><span class=\"line\">   &#123;              </span><br><span class=\"line\">    header : <span class=\"string\">'id'</span>,        </span><br><span class=\"line\">    dataIndex : <span class=\"string\">'product_id'</span>,         </span><br><span class=\"line\">    sortable:<span class=\"literal\">true</span>         </span><br><span class=\"line\">&#125;, &#123;              </span><br><span class=\"line\">    header : <span class=\"string\">'name'</span>,          </span><br><span class=\"line\">    dataIndex : <span class=\"string\">'product_name'</span>,       </span><br><span class=\"line\">    sortable:<span class=\"literal\">true</span>  </span><br><span class=\"line\">&#125;, &#123;      </span><br><span class=\"line\">    header : <span class=\"string\">'price'</span>,  </span><br><span class=\"line\">    dataIndex : <span class=\"string\">'product_price'</span>,  </span><br><span class=\"line\">    sortable:<span class=\"literal\">true</span>  </span><br><span class=\"line\">&#125; ]);</span><br></pre></td></tr></table></figure></p>\n<p>创建完复选框对象后，我们还要将这个复选框对象添加到ColumnModel对象中去。接着还要将复选框对象添加到Panel上:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gridPanel = <span class=\"keyword\">new</span> Ext.grid.GridPanel( &#123;     </span><br><span class=\"line\">    autoHeigth : <span class=\"literal\">true</span>,  </span><br><span class=\"line\">    renderTo : <span class=\"string\">'grid'</span>,  </span><br><span class=\"line\">    enableColumnMove:<span class=\"literal\">false</span>,  </span><br><span class=\"line\">    enableColumnResize:<span class=\"literal\">false</span>,  </span><br><span class=\"line\">    store : store,  </span><br><span class=\"line\">    cm : cm,  </span><br><span class=\"line\">    sm:sm  </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>下面我们做一个非常频繁用到的功能：将复选框选中的行删除。首先要在页面添加一个删除按钮。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span> = <span class=\"string\">\"button\"</span> <span class=\"attr\">value</span> = <span class=\"string\">\"删除选中行\"</span> <span class=\"attr\">onclick</span> = <span class=\"string\">\"deleteCheckbox()\"</span> <span class=\"attr\">style</span> = <span class=\"string\">\"margin-top:20px\"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>这个JavaScript函数就是页面按钮要调用的函数：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deleteCheckbox</span>(<span class=\"params\"></span>)</span>&#123;                </span><br><span class=\"line\">     <span class=\"comment\">//从后往前扫描             </span></span><br><span class=\"line\">     <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = store.getCount();i&gt;=<span class=\"number\">0</span>;i--)&#123;           </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(mm.isSelected(i))&#123;         </span><br><span class=\"line\">                <span class=\"comment\">//删除当前行  </span></span><br><span class=\"line\">                store.removeAt(i);  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">     &#125;        </span><br><span class=\"line\">     <span class=\"comment\">//重新加载表数据        </span></span><br><span class=\"line\">     gridPanel.reconfigure(store,cm);         </span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure></p>\n<p>这样一个主要功能都健全的Grid就完成了，今天我就写这些，下次我将继续ExtJS Grid的分页和编辑表格的研究。</p>\n","site":{"data":{}},"excerpt":"<p>我们在很多网站都能看到表格的影子，而ExtJS Grid在页面表现上又非常强大，下面我们就创建我们的第一个表格。","more":"<br>在ExtJS中我们是通过Ext.grid.ColumnModel这个类来描述列属性的。下面我们建立一个ColumnModel对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cm = <span class=\"keyword\">new</span> Ext.grid.ColumnModel([  </span><br><span class=\"line\"> &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品编号'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_id'</span>&#125;,  </span><br><span class=\"line\"> &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品名称'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_name'</span>&#125;,  </span><br><span class=\"line\"> &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品价格'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_price'</span>&#125;  </span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure></p>\n<p>接下来我们定义表格中要显示的数据。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> data = [  </span><br><span class=\"line\">    [<span class=\"string\">'01'</span>,<span class=\"string\">'电脑'</span>,<span class=\"string\">'4800'</span>],  </span><br><span class=\"line\">    [<span class=\"string\">'02'</span>,<span class=\"string\">'手机'</span>,<span class=\"string\">'2100'</span>],  </span><br><span class=\"line\">    [<span class=\"string\">'03'</span>,<span class=\"string\">'相机'</span>,<span class=\"string\">'1800'</span>],  </span><br><span class=\"line\">    [<span class=\"string\">'04'</span>,<span class=\"string\">'衣服'</span>,<span class=\"string\">'220'</span>]  </span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure></p>\n<p>数据中的列是和定义表格列属性时是相对应的。下面我们要创建一个Store对象来讲data装载到stroe对象中。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> store = <span class=\"keyword\">new</span> Ext.data.Store(&#123;  </span><br><span class=\"line\"> proxy:<span class=\"keyword\">new</span> Ext.data.MemoryProxy(data),  </span><br><span class=\"line\"> reader:<span class=\"keyword\">new</span> Ext.data.ArrayReader(&#123;&#125;,[  </span><br><span class=\"line\">       &#123;<span class=\"attr\">name</span>:<span class=\"string\">'product_id'</span>&#125;,  </span><br><span class=\"line\">       &#123;<span class=\"attr\">name</span>:<span class=\"string\">'product_name'</span>&#125;,  </span><br><span class=\"line\">       &#123;<span class=\"attr\">name</span>:<span class=\"string\">'product_price'</span>&#125;  </span><br><span class=\"line\"> ])  </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>proxy属性是一个代理类对象，该对象可以封装一个静态数组。ArrayReader对象可以将数组解析，但是要使用mapping属性来进行映射。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> store = <span class=\"keyword\">new</span> Ext.data.Store(&#123;  </span><br><span class=\"line\"> proxy:<span class=\"keyword\">new</span> Ext.data.MemoryProxy(data),  </span><br><span class=\"line\"> reader:<span class=\"keyword\">new</span> Ext.data.ArrayReader(&#123;&#125;,[  </span><br><span class=\"line\">       &#123;<span class=\"attr\">name</span>:<span class=\"string\">'product_id'</span>,<span class=\"attr\">mapping</span>:<span class=\"number\">0</span>&#125;,  </span><br><span class=\"line\">       &#123;<span class=\"attr\">name</span>:<span class=\"string\">'product_name'</span>,<span class=\"attr\">mapping</span>:<span class=\"number\">1</span>&#125;,  </span><br><span class=\"line\">       &#123;<span class=\"attr\">name</span>:<span class=\"string\">'product_price'</span>,<span class=\"attr\">mapping</span>:<span class=\"number\">2</span>&#125;  </span><br><span class=\"line\"> ])  </span><br><span class=\"line\">&#125;);  </span><br><span class=\"line\">store.load();</span><br></pre></td></tr></table></figure></p>\n<p>接着就是创建一个GridPanel对象来装置表格并显示在页面上。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gridPanel = <span class=\"keyword\">new</span> Ext.grid.GridPanel( &#123;  </span><br><span class=\"line\"> autoHeigth : <span class=\"literal\">false</span>,  </span><br><span class=\"line\"> renderTo : <span class=\"string\">'grid'</span>,  </span><br><span class=\"line\"> store : store,  </span><br><span class=\"line\"> cm : cm  </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>这样，我们第一个静态表格就完成了。下面是完整的代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Ext.onReady(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </span><br><span class=\"line\"> <span class=\"keyword\">var</span> cm = <span class=\"keyword\">new</span> Ext.grid.ColumnModel( [ &#123;  </span><br><span class=\"line\">  header : <span class=\"string\">'id'</span>,  </span><br><span class=\"line\">  dataIndex : <span class=\"string\">'product_id'</span>  </span><br><span class=\"line\"> &#125;, &#123;  </span><br><span class=\"line\">  header : <span class=\"string\">'name'</span>,  </span><br><span class=\"line\">  dataIndex : <span class=\"string\">'product_name'</span>  </span><br><span class=\"line\"> &#125;, &#123;  </span><br><span class=\"line\">  header : <span class=\"string\">'price'</span>,  </span><br><span class=\"line\">  dataIndex : <span class=\"string\">'product_price'</span>  </span><br><span class=\"line\"> &#125; ]);  </span><br><span class=\"line\"> <span class=\"keyword\">var</span> data = [ [ <span class=\"string\">'01'</span>, <span class=\"string\">'computer'</span>, <span class=\"string\">'4800'</span> ], [ <span class=\"string\">'02'</span>, <span class=\"string\">'phone'</span>, <span class=\"string\">'2100'</span> ],  </span><br><span class=\"line\">   [ <span class=\"string\">'03'</span>, <span class=\"string\">'ffff'</span>, <span class=\"string\">'1800'</span> ], [ <span class=\"string\">'04'</span>, <span class=\"string\">'closes'</span>, <span class=\"string\">'220'</span> ] ];  </span><br><span class=\"line\"> <span class=\"keyword\">var</span> store = <span class=\"keyword\">new</span> Ext.data.Store( &#123;  </span><br><span class=\"line\">  proxy : <span class=\"keyword\">new</span> Ext.data.MemoryProxy(data),  </span><br><span class=\"line\">  reader : <span class=\"keyword\">new</span> Ext.data.ArrayReader( &#123;&#125;, [ &#123;  </span><br><span class=\"line\">   name : <span class=\"string\">'product_id'</span>,  </span><br><span class=\"line\">   mapping : <span class=\"number\">0</span>  </span><br><span class=\"line\">  &#125;, &#123;  </span><br><span class=\"line\">   name : <span class=\"string\">'product_name'</span>,  </span><br><span class=\"line\">   mapping : <span class=\"number\">1</span>  </span><br><span class=\"line\">  &#125;, &#123;  </span><br><span class=\"line\">   name : <span class=\"string\">'product_price'</span>,  </span><br><span class=\"line\">   mapping : <span class=\"number\">2</span>  </span><br><span class=\"line\">  &#125; ])  </span><br><span class=\"line\"> &#125;);  </span><br><span class=\"line\"> store.load();  </span><br><span class=\"line\"> <span class=\"keyword\">var</span> gridPanel = <span class=\"keyword\">new</span> Ext.grid.GridPanel( &#123;  </span><br><span class=\"line\">  autoHeigth : <span class=\"literal\">false</span>,  </span><br><span class=\"line\">  renderTo : <span class=\"string\">'grid'</span>,  </span><br><span class=\"line\">  store : store,  </span><br><span class=\"line\">  cm : cm  </span><br><span class=\"line\"> &#125;);  </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>通过这个简单的代码例子我们也大概了解了创建一个Grid的基本流程了，下面我们简单介绍一下Grid的一些其他的简单属性。</p>\n<p>阻止移动列和改变列的宽度：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gridPanel = <span class=\"keyword\">new</span> Ext.grid.GridPanel( &#123;         </span><br><span class=\"line\">    autoHeigth : <span class=\"literal\">true</span>,    </span><br><span class=\"line\">    renderTo : <span class=\"string\">'grid'</span>,    </span><br><span class=\"line\">    enableColumnMove:<span class=\"literal\">false</span>,   </span><br><span class=\"line\">    enableColumnResize:<span class=\"literal\">false</span>,     </span><br><span class=\"line\">    store : store,    </span><br><span class=\"line\">    cm : cm   </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>代码中enableColumnMove:false设置的是阻止列的移动，enableColumnResize:false设置的是让列的宽度禁止改变。</p>\n<p>按列排序：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cm = <span class=\"keyword\">new</span> Ext.grid.ColumnModel( [ &#123;                </span><br><span class=\"line\">        header : <span class=\"string\">'id'</span>,        </span><br><span class=\"line\">        dataIndex : <span class=\"string\">'product_id'</span>          </span><br><span class=\"line\">    &#125;, &#123;              </span><br><span class=\"line\">        header : <span class=\"string\">'name'</span>,          </span><br><span class=\"line\">        dataIndex : <span class=\"string\">'product_name'</span>,       </span><br><span class=\"line\">        sortable:<span class=\"literal\">true</span>         </span><br><span class=\"line\">    &#125;, &#123;              </span><br><span class=\"line\">        header : <span class=\"string\">'price'</span>,         </span><br><span class=\"line\">        dataIndex : <span class=\"string\">'product_price'</span>       </span><br><span class=\"line\">    &#125; ]);</span><br></pre></td></tr></table></figure></p>\n<p>在该列设置sortable：true之后，该列就拥有了排序的功能。</p>\n<p>有很多时候我们需要在表格的每列前加一个复选框，用来标记选中的，进行操作，下面我们就加入复选框试试。首先，我们要创建复选框对象，这时我们要用到Ext.grid.CheckboxSelectionModel这个类。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sm = <span class=\"keyword\">new</span> Ext.grid.CheckboxSelectionModel();           </span><br><span class=\"line\"><span class=\"keyword\">var</span> cm = <span class=\"keyword\">new</span> Ext.grid.ColumnModel( [              </span><br><span class=\"line\">              </span><br><span class=\"line\">   &#123;              </span><br><span class=\"line\">    header : <span class=\"string\">'id'</span>,        </span><br><span class=\"line\">    dataIndex : <span class=\"string\">'product_id'</span>,         </span><br><span class=\"line\">    sortable:<span class=\"literal\">true</span>         </span><br><span class=\"line\">&#125;, &#123;              </span><br><span class=\"line\">    header : <span class=\"string\">'name'</span>,          </span><br><span class=\"line\">    dataIndex : <span class=\"string\">'product_name'</span>,       </span><br><span class=\"line\">    sortable:<span class=\"literal\">true</span>  </span><br><span class=\"line\">&#125;, &#123;      </span><br><span class=\"line\">    header : <span class=\"string\">'price'</span>,  </span><br><span class=\"line\">    dataIndex : <span class=\"string\">'product_price'</span>,  </span><br><span class=\"line\">    sortable:<span class=\"literal\">true</span>  </span><br><span class=\"line\">&#125; ]);</span><br></pre></td></tr></table></figure></p>\n<p>创建完复选框对象后，我们还要将这个复选框对象添加到ColumnModel对象中去。接着还要将复选框对象添加到Panel上:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gridPanel = <span class=\"keyword\">new</span> Ext.grid.GridPanel( &#123;     </span><br><span class=\"line\">    autoHeigth : <span class=\"literal\">true</span>,  </span><br><span class=\"line\">    renderTo : <span class=\"string\">'grid'</span>,  </span><br><span class=\"line\">    enableColumnMove:<span class=\"literal\">false</span>,  </span><br><span class=\"line\">    enableColumnResize:<span class=\"literal\">false</span>,  </span><br><span class=\"line\">    store : store,  </span><br><span class=\"line\">    cm : cm,  </span><br><span class=\"line\">    sm:sm  </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>下面我们做一个非常频繁用到的功能：将复选框选中的行删除。首先要在页面添加一个删除按钮。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span> = <span class=\"string\">\"button\"</span> <span class=\"attr\">value</span> = <span class=\"string\">\"删除选中行\"</span> <span class=\"attr\">onclick</span> = <span class=\"string\">\"deleteCheckbox()\"</span> <span class=\"attr\">style</span> = <span class=\"string\">\"margin-top:20px\"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>这个JavaScript函数就是页面按钮要调用的函数：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deleteCheckbox</span>(<span class=\"params\"></span>)</span>&#123;                </span><br><span class=\"line\">     <span class=\"comment\">//从后往前扫描             </span></span><br><span class=\"line\">     <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = store.getCount();i&gt;=<span class=\"number\">0</span>;i--)&#123;           </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(mm.isSelected(i))&#123;         </span><br><span class=\"line\">                <span class=\"comment\">//删除当前行  </span></span><br><span class=\"line\">                store.removeAt(i);  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">     &#125;        </span><br><span class=\"line\">     <span class=\"comment\">//重新加载表数据        </span></span><br><span class=\"line\">     gridPanel.reconfigure(store,cm);         </span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure></p>\n<p>这样一个主要功能都健全的Grid就完成了，今天我就写这些，下次我将继续ExtJS Grid的分页和编辑表格的研究。</p>"},{"title":"ExtJS初级教程之ExtJS Grid(二)","date":"2016-11-27T14:45:40.000Z","_content":"很多时候我们表格里显示的数据是从后台查询出来的海量数据，那么海量的数据显示在表格里用户的体验肯定会很差，效率也会很低。ExtJS为了解决这个问题，就给我们提供了一个非常强大的分页组件。今天我们就研究一下ExtJS的分页技术。<!--more-->\n## 为表格添加分页组件\n要为表格添加分页组件，就要先创建Ext.PagingToolbar类的实例对象，然后将它添加到Panel中去。\n``` javascript\ngridPanel = new Ext.grid.GridPanel({  \n      autoHeight: true,  \n      renderTo: 'grid',   \n      store: store,       \n      cm: cm,   \n      sm:mm,  \n      bbar:new Ext.PagingToolbar({  \n      pageSize:3,  \n      store:store,  \n      displayInfo:true,  \n      displayMsg:'显示记录 {0} - {1} of {2}',  \n      emptyMsg:\"没有记录\"  \n      })  \n }); \n```\nPagingToolbar类的属性描述：\n- pageSize：每页显示的记录条数。\n- displayInfo：是否显示记录信息。\n- displayMsg：该属性值为true时，该属性才有效。{0}：表示当前显示的记录起始数。{1}：表示显示记录数的结尾数。{2}：表示总共多少记录。\n- emptyMsg：当没有记录的时候显示的文本信息。  \n\n## 从服务器端获得分页数据\n如果使用静态数据，Grid每次都会将所有数据显示。所以这里我们就编写一个Servlet来生成动态数据生成Grid。Servlet将接受两个请求数据start和limit。Start表示当前页显示记录的起始位置，limit表示每页显示的记录数。\n``` java\npublic class GridServlet extends HttpServlet {  \n private static final long serialVersionUID = 1L;      \n protected void service(HttpServletRequest request, HttpServletResponse response)  \n   throws ServletException, IOException {  \n  response.setContentType(\"text/html;charset=gbk\");  \n  PrintWriter out = response.getWriter();  \n  String start = request.getParameter(\"start\");  \n  String limit = request.getParameter(\"limit\");  \n  int index = Integer.parseInt(start);  \n  int pageSize = Integer.parseInt(limit);  \n  int total = 100000;  \n  String jsonStr = \"{total:\" + total + \",root:[\";  \n  for (int i = index; i < pageSize + index; i++)  \n  {  \n   int productIndex = i + 1;  \n   jsonStr += \"{product_id:\" + productIndex + \",product_name:'产品\"  \n     + productIndex + \"',product_price:'价格\" + productIndex  \n     + \"'}\";  \n   if (i != pageSize + index - 1)  \n    jsonStr += \",\";  \n  }  \n  jsonStr += \"]}\";  \n  out.println(jsonStr);  \n }  \n} \n```\n要通过服务器来接收数据生成表格，就必须使用HttpProxy来制定URL。还有，服务器传递过来的数据是Json格式的，就不能使用ArrayReader了，需要使用的是JsonReader。\n``` javascript\nExt.onReady(function(){  \n var mm = new Ext.grid.CheckboxSelectionModel();  \n    var cm = new Ext.grid.ColumnModel([  \n        new Ext.grid.RowNumberer(),  \n        mm,  \n        {header:'产品编号',dataIndex:'product_id'},  \n        {header:'产品名称',dataIndex:'product_name'},  \n        {header:'产品价格',dataIndex:'product_price'}  \n    ]);    \n var store = new Ext.data.Store({  \n        proxy: new Ext.data.HttpProxy({url:'../GridServlet'}),  \n        reader: new Ext.data.JsonReader({  \n         totalProperty:'total',  \n         root:'root'  \n        },[  \n           {name:'product_id'},  \n           {name:'product_name'},  \n           {name:'product_price'}  \n        ])   \n    });  \nstore.load({params:{start:0,limit:10}});  \n    var gridPanel = new Ext.grid.GridPanel({  \n        autoHeight: true,  \n        renderTo: 'grid',          \n        store: store,  \n        cm: cm,  \n        sm:mm,  \n        bbar:new Ext.PagingToolbar({  \n         pageSize:10,  \n         store:store,  \n         displayInfo:true,  \n         displayMsg:'显示记录 {0} - {1} of {2}',  \n         emptyMsg:\"没有记录\"  \n        })  \n    });   \n}); \n```\n这样一个简单的ExtJS Grid分页就实现了。要想让用户体验更高就应该让用户可以在自己刚刚查询出来的数据表格上进行数据编辑，可以进行增删改查。可编辑的表格就在在想要能编辑的列里注册一个TextField组件，这个组件需要使用Ext.grid.GridEditor类来封装。  \n## 第一个可编辑表格\n``` javascript\ncm = new Ext.grid.ColumnModel([  \nnew Ext.grid.RowNumberer(),  \n {header:'产品编号',dataIndex:'product_id'},  \n {header:'产品名称',dataIndex:'product_name',editor:new Ext.grid.GridEditor(new Ext.form.TextField({allowBlank:false}))},  \n {header:'产品价格',dataIndex:'product_price',editor:new Ext.grid.GridEditor(new Ext.form.TextField({allowBlank:false}))}  \n]); \n```\n使用了可编辑的对象就需要建立一个Ext.grid.EditorGridPanel来代替Ext.grid.GridPanel。\n``` javascript\ngridPanel = new Ext.grid.EditorGridPanel({  \n  autoHeight: true,  \n  renderTo: 'grid',      \n  store: store,  \n  cm: cm,  \n});  \n```\n这时默认的是双击编辑，如果想设置成单击编辑的话就需要做如下改动。\n``` javascript\n\ngridPanel = new Ext.grid.EditorGridPanel({  \n  autoHeight: true,  \n  renderTo: 'grid',          \n  store: store,  \n  //值为1的时候就是单击，2就是双击。  \n  clicksToEdit:1,  \n  cm: cm,  \n  sm:mm  \n});\n```\n## 向表格中添加新行和删除一行\n添加新的一行是使用Store类的insert方法插入一个新的Ext.data.Record对象，删除用的是remove方法,为了使插入的新行所有列都能编辑，我们要把所有列都设为可编辑。\n``` javascript\ncm = new Ext.grid.ColumnModel([  \n  new Ext.grid.RowNumberer(),  \n  mm,  \n  {header:'产品编号',dataIndex:'product_id',editor:new Ext.grid.GridEditor(new Ext.form.TextField({allowBlank:false}))},  \n  {header:'产品名称',dataIndex:'product_name',editor:new Ext.grid.GridEditor(new Ext.form.TextField({allowBlank:false}))},  \n  {header:'产品价格',dataIndex:'product_price',editor:new Ext.grid.GridEditor(new Ext.form.TextField({allowBlank:false}))}  \n]);\n```\n将所想要编辑的列添加Ext.grid.GridEditor对象就能是该列可编辑,接着我们要在表格组件的上方添加两个按键，分别是增加和删除。代码如下：\n``` javascript\nvar gridPanel = new Ext.grid.EditorGridPanel({    \n       autoHeight: true,      \n       renderTo: 'grid',      \n       store: store,      \n       cm: cm,    \n       tbar: new Ext.Toolbar(['-', {      \n           text: '添加一行',      \n           handler: function(){   \n               var record = new Ext.data.Record({     \n                product_id:'',  \n                product_name:'',  \n                product_price:''  \n               });  \n               gridPanel.stopEditing();                  \n               store.insert(store.getCount(),record);  \n               gridPanel.startEditing(store.getCount()-1,0);  \n           }  \n       }, '-', {  \n           text: '删除一行',  \n           handler: function(){  \n               Ext.Msg.confirm('信息', '是否删除当前记录？', function(btn){  \n                   if (btn == 'yes') {  \n                       var sm = gridPanel.getSelectionModel();  \n                       var cell = sm.getSelectedCell();  \n                       var record = store.getAt(cell[0]);  \n                       store.remove(record);  \n                   }  \n               });    \n           }      \n       }, '-'])   \n   });  \n```\n## 保存数据\n论是添加或是修改了表格中的数据后，一般我们都要将结果提交到服务器，在ExtJS中Slice类就是干这个用的。\n``` javascript\n{  \n           text: '保存',    \n           handler: function(){   \n               var m = store.modified.slice(0);   \n               var data = [];     \n               Ext.each(m, function(item) {   \n                   data.push(item.data);      \n               });    \n               alert(Ext.encode(data));   \n               Ext.lib.Ajax.request(      \n                   'POST',    \n                   'SaveData',    \n                   {success: function(response){      \n                       Ext.Msg.alert('信息', response.responseText, function(){     \n                           store.reload();    \n                       });    \n                   }},    \n                   'row=' + encodeURIComponent(Ext.encode(data))      \n               );     \n           }      \n}  \n```\n## 对记录进行分组  \n此外ExtJS Grid还可以对数据进行分组，要建立一个按列分组的表格就要使用Ext.data.GroupingStore这个类。\n``` javascript\n\nvar store = new Ext.data.GroupingStore({  \n    reader: reader,  \n    data: data,  \n    groupField: 'sex',  \n    sortInfo: {field: 'name', direction: \"ASC\"}  \n});  \nvar grid = new Ext.grid.GridPanel({  \n    autoHeight: true,  \n    store: store,  \n    columns: columns,  \n    view: new Ext.grid.GroupingView(),  \n    renderTo: 'grid'  \n});  \n```\nExtJS各种各样的组件和控件有很多，做的都很漂亮，还可以自己定制样式，使用继承来拓展ExtJS的功能，ExtJS的介绍就到这了，更多的功能我今后还会继续研究的。\n\n","source":"_posts/Grid-2.md","raw":"---\ntitle: ExtJS初级教程之ExtJS Grid(二)\ndate: 2016-11-27 22:45:40\ntags: ExtJS\ncategories: javascript\n---\n很多时候我们表格里显示的数据是从后台查询出来的海量数据，那么海量的数据显示在表格里用户的体验肯定会很差，效率也会很低。ExtJS为了解决这个问题，就给我们提供了一个非常强大的分页组件。今天我们就研究一下ExtJS的分页技术。<!--more-->\n## 为表格添加分页组件\n要为表格添加分页组件，就要先创建Ext.PagingToolbar类的实例对象，然后将它添加到Panel中去。\n``` javascript\ngridPanel = new Ext.grid.GridPanel({  \n      autoHeight: true,  \n      renderTo: 'grid',   \n      store: store,       \n      cm: cm,   \n      sm:mm,  \n      bbar:new Ext.PagingToolbar({  \n      pageSize:3,  \n      store:store,  \n      displayInfo:true,  \n      displayMsg:'显示记录 {0} - {1} of {2}',  \n      emptyMsg:\"没有记录\"  \n      })  \n }); \n```\nPagingToolbar类的属性描述：\n- pageSize：每页显示的记录条数。\n- displayInfo：是否显示记录信息。\n- displayMsg：该属性值为true时，该属性才有效。{0}：表示当前显示的记录起始数。{1}：表示显示记录数的结尾数。{2}：表示总共多少记录。\n- emptyMsg：当没有记录的时候显示的文本信息。  \n\n## 从服务器端获得分页数据\n如果使用静态数据，Grid每次都会将所有数据显示。所以这里我们就编写一个Servlet来生成动态数据生成Grid。Servlet将接受两个请求数据start和limit。Start表示当前页显示记录的起始位置，limit表示每页显示的记录数。\n``` java\npublic class GridServlet extends HttpServlet {  \n private static final long serialVersionUID = 1L;      \n protected void service(HttpServletRequest request, HttpServletResponse response)  \n   throws ServletException, IOException {  \n  response.setContentType(\"text/html;charset=gbk\");  \n  PrintWriter out = response.getWriter();  \n  String start = request.getParameter(\"start\");  \n  String limit = request.getParameter(\"limit\");  \n  int index = Integer.parseInt(start);  \n  int pageSize = Integer.parseInt(limit);  \n  int total = 100000;  \n  String jsonStr = \"{total:\" + total + \",root:[\";  \n  for (int i = index; i < pageSize + index; i++)  \n  {  \n   int productIndex = i + 1;  \n   jsonStr += \"{product_id:\" + productIndex + \",product_name:'产品\"  \n     + productIndex + \"',product_price:'价格\" + productIndex  \n     + \"'}\";  \n   if (i != pageSize + index - 1)  \n    jsonStr += \",\";  \n  }  \n  jsonStr += \"]}\";  \n  out.println(jsonStr);  \n }  \n} \n```\n要通过服务器来接收数据生成表格，就必须使用HttpProxy来制定URL。还有，服务器传递过来的数据是Json格式的，就不能使用ArrayReader了，需要使用的是JsonReader。\n``` javascript\nExt.onReady(function(){  \n var mm = new Ext.grid.CheckboxSelectionModel();  \n    var cm = new Ext.grid.ColumnModel([  \n        new Ext.grid.RowNumberer(),  \n        mm,  \n        {header:'产品编号',dataIndex:'product_id'},  \n        {header:'产品名称',dataIndex:'product_name'},  \n        {header:'产品价格',dataIndex:'product_price'}  \n    ]);    \n var store = new Ext.data.Store({  \n        proxy: new Ext.data.HttpProxy({url:'../GridServlet'}),  \n        reader: new Ext.data.JsonReader({  \n         totalProperty:'total',  \n         root:'root'  \n        },[  \n           {name:'product_id'},  \n           {name:'product_name'},  \n           {name:'product_price'}  \n        ])   \n    });  \nstore.load({params:{start:0,limit:10}});  \n    var gridPanel = new Ext.grid.GridPanel({  \n        autoHeight: true,  \n        renderTo: 'grid',          \n        store: store,  \n        cm: cm,  \n        sm:mm,  \n        bbar:new Ext.PagingToolbar({  \n         pageSize:10,  \n         store:store,  \n         displayInfo:true,  \n         displayMsg:'显示记录 {0} - {1} of {2}',  \n         emptyMsg:\"没有记录\"  \n        })  \n    });   \n}); \n```\n这样一个简单的ExtJS Grid分页就实现了。要想让用户体验更高就应该让用户可以在自己刚刚查询出来的数据表格上进行数据编辑，可以进行增删改查。可编辑的表格就在在想要能编辑的列里注册一个TextField组件，这个组件需要使用Ext.grid.GridEditor类来封装。  \n## 第一个可编辑表格\n``` javascript\ncm = new Ext.grid.ColumnModel([  \nnew Ext.grid.RowNumberer(),  \n {header:'产品编号',dataIndex:'product_id'},  \n {header:'产品名称',dataIndex:'product_name',editor:new Ext.grid.GridEditor(new Ext.form.TextField({allowBlank:false}))},  \n {header:'产品价格',dataIndex:'product_price',editor:new Ext.grid.GridEditor(new Ext.form.TextField({allowBlank:false}))}  \n]); \n```\n使用了可编辑的对象就需要建立一个Ext.grid.EditorGridPanel来代替Ext.grid.GridPanel。\n``` javascript\ngridPanel = new Ext.grid.EditorGridPanel({  \n  autoHeight: true,  \n  renderTo: 'grid',      \n  store: store,  \n  cm: cm,  \n});  \n```\n这时默认的是双击编辑，如果想设置成单击编辑的话就需要做如下改动。\n``` javascript\n\ngridPanel = new Ext.grid.EditorGridPanel({  \n  autoHeight: true,  \n  renderTo: 'grid',          \n  store: store,  \n  //值为1的时候就是单击，2就是双击。  \n  clicksToEdit:1,  \n  cm: cm,  \n  sm:mm  \n});\n```\n## 向表格中添加新行和删除一行\n添加新的一行是使用Store类的insert方法插入一个新的Ext.data.Record对象，删除用的是remove方法,为了使插入的新行所有列都能编辑，我们要把所有列都设为可编辑。\n``` javascript\ncm = new Ext.grid.ColumnModel([  \n  new Ext.grid.RowNumberer(),  \n  mm,  \n  {header:'产品编号',dataIndex:'product_id',editor:new Ext.grid.GridEditor(new Ext.form.TextField({allowBlank:false}))},  \n  {header:'产品名称',dataIndex:'product_name',editor:new Ext.grid.GridEditor(new Ext.form.TextField({allowBlank:false}))},  \n  {header:'产品价格',dataIndex:'product_price',editor:new Ext.grid.GridEditor(new Ext.form.TextField({allowBlank:false}))}  \n]);\n```\n将所想要编辑的列添加Ext.grid.GridEditor对象就能是该列可编辑,接着我们要在表格组件的上方添加两个按键，分别是增加和删除。代码如下：\n``` javascript\nvar gridPanel = new Ext.grid.EditorGridPanel({    \n       autoHeight: true,      \n       renderTo: 'grid',      \n       store: store,      \n       cm: cm,    \n       tbar: new Ext.Toolbar(['-', {      \n           text: '添加一行',      \n           handler: function(){   \n               var record = new Ext.data.Record({     \n                product_id:'',  \n                product_name:'',  \n                product_price:''  \n               });  \n               gridPanel.stopEditing();                  \n               store.insert(store.getCount(),record);  \n               gridPanel.startEditing(store.getCount()-1,0);  \n           }  \n       }, '-', {  \n           text: '删除一行',  \n           handler: function(){  \n               Ext.Msg.confirm('信息', '是否删除当前记录？', function(btn){  \n                   if (btn == 'yes') {  \n                       var sm = gridPanel.getSelectionModel();  \n                       var cell = sm.getSelectedCell();  \n                       var record = store.getAt(cell[0]);  \n                       store.remove(record);  \n                   }  \n               });    \n           }      \n       }, '-'])   \n   });  \n```\n## 保存数据\n论是添加或是修改了表格中的数据后，一般我们都要将结果提交到服务器，在ExtJS中Slice类就是干这个用的。\n``` javascript\n{  \n           text: '保存',    \n           handler: function(){   \n               var m = store.modified.slice(0);   \n               var data = [];     \n               Ext.each(m, function(item) {   \n                   data.push(item.data);      \n               });    \n               alert(Ext.encode(data));   \n               Ext.lib.Ajax.request(      \n                   'POST',    \n                   'SaveData',    \n                   {success: function(response){      \n                       Ext.Msg.alert('信息', response.responseText, function(){     \n                           store.reload();    \n                       });    \n                   }},    \n                   'row=' + encodeURIComponent(Ext.encode(data))      \n               );     \n           }      \n}  \n```\n## 对记录进行分组  \n此外ExtJS Grid还可以对数据进行分组，要建立一个按列分组的表格就要使用Ext.data.GroupingStore这个类。\n``` javascript\n\nvar store = new Ext.data.GroupingStore({  \n    reader: reader,  \n    data: data,  \n    groupField: 'sex',  \n    sortInfo: {field: 'name', direction: \"ASC\"}  \n});  \nvar grid = new Ext.grid.GridPanel({  \n    autoHeight: true,  \n    store: store,  \n    columns: columns,  \n    view: new Ext.grid.GroupingView(),  \n    renderTo: 'grid'  \n});  \n```\nExtJS各种各样的组件和控件有很多，做的都很漂亮，还可以自己定制样式，使用继承来拓展ExtJS的功能，ExtJS的介绍就到这了，更多的功能我今后还会继续研究的。\n\n","slug":"Grid-2","published":1,"updated":"2019-07-01T12:35:47.380Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjycv1m3e0008ok9mgub06k56","content":"<p>很多时候我们表格里显示的数据是从后台查询出来的海量数据，那么海量的数据显示在表格里用户的体验肯定会很差，效率也会很低。ExtJS为了解决这个问题，就给我们提供了一个非常强大的分页组件。今天我们就研究一下ExtJS的分页技术。<a id=\"more\"></a></p>\n<h2 id=\"为表格添加分页组件\"><a href=\"#为表格添加分页组件\" class=\"headerlink\" title=\"为表格添加分页组件\"></a>为表格添加分页组件</h2><p>要为表格添加分页组件，就要先创建Ext.PagingToolbar类的实例对象，然后将它添加到Panel中去。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gridPanel = <span class=\"keyword\">new</span> Ext.grid.GridPanel(&#123;  </span><br><span class=\"line\">      autoHeight: <span class=\"literal\">true</span>,  </span><br><span class=\"line\">      renderTo: <span class=\"string\">'grid'</span>,   </span><br><span class=\"line\">      store: store,       </span><br><span class=\"line\">      cm: cm,   </span><br><span class=\"line\">      sm:mm,  </span><br><span class=\"line\">      bbar:<span class=\"keyword\">new</span> Ext.PagingToolbar(&#123;  </span><br><span class=\"line\">      pageSize:<span class=\"number\">3</span>,  </span><br><span class=\"line\">      store:store,  </span><br><span class=\"line\">      displayInfo:<span class=\"literal\">true</span>,  </span><br><span class=\"line\">      displayMsg:<span class=\"string\">'显示记录 &#123;0&#125; - &#123;1&#125; of &#123;2&#125;'</span>,  </span><br><span class=\"line\">      emptyMsg:<span class=\"string\">\"没有记录\"</span>  </span><br><span class=\"line\">      &#125;)  </span><br><span class=\"line\"> &#125;);</span><br></pre></td></tr></table></figure></p>\n<p>PagingToolbar类的属性描述：</p>\n<ul>\n<li>pageSize：每页显示的记录条数。</li>\n<li>displayInfo：是否显示记录信息。</li>\n<li>displayMsg：该属性值为true时，该属性才有效。{0}：表示当前显示的记录起始数。{1}：表示显示记录数的结尾数。{2}：表示总共多少记录。</li>\n<li>emptyMsg：当没有记录的时候显示的文本信息。  </li>\n</ul>\n<h2 id=\"从服务器端获得分页数据\"><a href=\"#从服务器端获得分页数据\" class=\"headerlink\" title=\"从服务器端获得分页数据\"></a>从服务器端获得分页数据</h2><p>如果使用静态数据，Grid每次都会将所有数据显示。所以这里我们就编写一个Servlet来生成动态数据生成Grid。Servlet将接受两个请求数据start和limit。Start表示当前页显示记录的起始位置，limit表示每页显示的记录数。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GridServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;  </span><br><span class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;      </span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span>  </span></span><br><span class=\"line\"><span class=\"function\">   <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;  </span><br><span class=\"line\">  response.setContentType(<span class=\"string\">\"text/html;charset=gbk\"</span>);  </span><br><span class=\"line\">  PrintWriter out = response.getWriter();  </span><br><span class=\"line\">  String start = request.getParameter(<span class=\"string\">\"start\"</span>);  </span><br><span class=\"line\">  String limit = request.getParameter(<span class=\"string\">\"limit\"</span>);  </span><br><span class=\"line\">  <span class=\"keyword\">int</span> index = Integer.parseInt(start);  </span><br><span class=\"line\">  <span class=\"keyword\">int</span> pageSize = Integer.parseInt(limit);  </span><br><span class=\"line\">  <span class=\"keyword\">int</span> total = <span class=\"number\">100000</span>;  </span><br><span class=\"line\">  String jsonStr = <span class=\"string\">\"&#123;total:\"</span> + total + <span class=\"string\">\",root:[\"</span>;  </span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = index; i &lt; pageSize + index; i++)  </span><br><span class=\"line\">  &#123;  </span><br><span class=\"line\">   <span class=\"keyword\">int</span> productIndex = i + <span class=\"number\">1</span>;  </span><br><span class=\"line\">   jsonStr += <span class=\"string\">\"&#123;product_id:\"</span> + productIndex + <span class=\"string\">\",product_name:'产品\"</span>  </span><br><span class=\"line\">     + productIndex + <span class=\"string\">\"',product_price:'价格\"</span> + productIndex  </span><br><span class=\"line\">     + <span class=\"string\">\"'&#125;\"</span>;  </span><br><span class=\"line\">   <span class=\"keyword\">if</span> (i != pageSize + index - <span class=\"number\">1</span>)  </span><br><span class=\"line\">    jsonStr += <span class=\"string\">\",\"</span>;  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  jsonStr += <span class=\"string\">\"]&#125;\"</span>;  </span><br><span class=\"line\">  out.println(jsonStr);  </span><br><span class=\"line\"> &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>要通过服务器来接收数据生成表格，就必须使用HttpProxy来制定URL。还有，服务器传递过来的数据是Json格式的，就不能使用ArrayReader了，需要使用的是JsonReader。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ext.onReady(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;  </span><br><span class=\"line\"> <span class=\"keyword\">var</span> mm = <span class=\"keyword\">new</span> Ext.grid.CheckboxSelectionModel();  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> cm = <span class=\"keyword\">new</span> Ext.grid.ColumnModel([  </span><br><span class=\"line\">        <span class=\"keyword\">new</span> Ext.grid.RowNumberer(),  </span><br><span class=\"line\">        mm,  </span><br><span class=\"line\">        &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品编号'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_id'</span>&#125;,  </span><br><span class=\"line\">        &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品名称'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_name'</span>&#125;,  </span><br><span class=\"line\">        &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品价格'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_price'</span>&#125;  </span><br><span class=\"line\">    ]);    </span><br><span class=\"line\"> <span class=\"keyword\">var</span> store = <span class=\"keyword\">new</span> Ext.data.Store(&#123;  </span><br><span class=\"line\">        proxy: <span class=\"keyword\">new</span> Ext.data.HttpProxy(&#123;<span class=\"attr\">url</span>:<span class=\"string\">'../GridServlet'</span>&#125;),  </span><br><span class=\"line\">        reader: <span class=\"keyword\">new</span> Ext.data.JsonReader(&#123;  </span><br><span class=\"line\">         totalProperty:<span class=\"string\">'total'</span>,  </span><br><span class=\"line\">         root:<span class=\"string\">'root'</span>  </span><br><span class=\"line\">        &#125;,[  </span><br><span class=\"line\">           &#123;<span class=\"attr\">name</span>:<span class=\"string\">'product_id'</span>&#125;,  </span><br><span class=\"line\">           &#123;<span class=\"attr\">name</span>:<span class=\"string\">'product_name'</span>&#125;,  </span><br><span class=\"line\">           &#123;<span class=\"attr\">name</span>:<span class=\"string\">'product_price'</span>&#125;  </span><br><span class=\"line\">        ])   </span><br><span class=\"line\">    &#125;);  </span><br><span class=\"line\">store.load(&#123;<span class=\"attr\">params</span>:&#123;<span class=\"attr\">start</span>:<span class=\"number\">0</span>,<span class=\"attr\">limit</span>:<span class=\"number\">10</span>&#125;&#125;);  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> gridPanel = <span class=\"keyword\">new</span> Ext.grid.GridPanel(&#123;  </span><br><span class=\"line\">        autoHeight: <span class=\"literal\">true</span>,  </span><br><span class=\"line\">        renderTo: <span class=\"string\">'grid'</span>,          </span><br><span class=\"line\">        store: store,  </span><br><span class=\"line\">        cm: cm,  </span><br><span class=\"line\">        sm:mm,  </span><br><span class=\"line\">        bbar:<span class=\"keyword\">new</span> Ext.PagingToolbar(&#123;  </span><br><span class=\"line\">         pageSize:<span class=\"number\">10</span>,  </span><br><span class=\"line\">         store:store,  </span><br><span class=\"line\">         displayInfo:<span class=\"literal\">true</span>,  </span><br><span class=\"line\">         displayMsg:<span class=\"string\">'显示记录 &#123;0&#125; - &#123;1&#125; of &#123;2&#125;'</span>,  </span><br><span class=\"line\">         emptyMsg:<span class=\"string\">\"没有记录\"</span>  </span><br><span class=\"line\">        &#125;)  </span><br><span class=\"line\">    &#125;);   </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>这样一个简单的ExtJS Grid分页就实现了。要想让用户体验更高就应该让用户可以在自己刚刚查询出来的数据表格上进行数据编辑，可以进行增删改查。可编辑的表格就在在想要能编辑的列里注册一个TextField组件，这个组件需要使用Ext.grid.GridEditor类来封装。  </p>\n<h2 id=\"第一个可编辑表格\"><a href=\"#第一个可编辑表格\" class=\"headerlink\" title=\"第一个可编辑表格\"></a>第一个可编辑表格</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cm = <span class=\"keyword\">new</span> Ext.grid.ColumnModel([  </span><br><span class=\"line\"><span class=\"keyword\">new</span> Ext.grid.RowNumberer(),  </span><br><span class=\"line\"> &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品编号'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_id'</span>&#125;,  </span><br><span class=\"line\"> &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品名称'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_name'</span>,<span class=\"attr\">editor</span>:<span class=\"keyword\">new</span> Ext.grid.GridEditor(<span class=\"keyword\">new</span> Ext.form.TextField(&#123;<span class=\"attr\">allowBlank</span>:<span class=\"literal\">false</span>&#125;))&#125;,  </span><br><span class=\"line\"> &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品价格'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_price'</span>,<span class=\"attr\">editor</span>:<span class=\"keyword\">new</span> Ext.grid.GridEditor(<span class=\"keyword\">new</span> Ext.form.TextField(&#123;<span class=\"attr\">allowBlank</span>:<span class=\"literal\">false</span>&#125;))&#125;  </span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure>\n<p>使用了可编辑的对象就需要建立一个Ext.grid.EditorGridPanel来代替Ext.grid.GridPanel。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gridPanel = <span class=\"keyword\">new</span> Ext.grid.EditorGridPanel(&#123;  </span><br><span class=\"line\">  autoHeight: <span class=\"literal\">true</span>,  </span><br><span class=\"line\">  renderTo: <span class=\"string\">'grid'</span>,      </span><br><span class=\"line\">  store: store,  </span><br><span class=\"line\">  cm: cm,  </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>这时默认的是双击编辑，如果想设置成单击编辑的话就需要做如下改动。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">gridPanel = <span class=\"keyword\">new</span> Ext.grid.EditorGridPanel(&#123;  </span><br><span class=\"line\">  autoHeight: <span class=\"literal\">true</span>,  </span><br><span class=\"line\">  renderTo: <span class=\"string\">'grid'</span>,          </span><br><span class=\"line\">  store: store,  </span><br><span class=\"line\">  <span class=\"comment\">//值为1的时候就是单击，2就是双击。  </span></span><br><span class=\"line\">  clicksToEdit:<span class=\"number\">1</span>,  </span><br><span class=\"line\">  cm: cm,  </span><br><span class=\"line\">  sm:mm  </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"向表格中添加新行和删除一行\"><a href=\"#向表格中添加新行和删除一行\" class=\"headerlink\" title=\"向表格中添加新行和删除一行\"></a>向表格中添加新行和删除一行</h2><p>添加新的一行是使用Store类的insert方法插入一个新的Ext.data.Record对象，删除用的是remove方法,为了使插入的新行所有列都能编辑，我们要把所有列都设为可编辑。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cm = <span class=\"keyword\">new</span> Ext.grid.ColumnModel([  </span><br><span class=\"line\">  <span class=\"keyword\">new</span> Ext.grid.RowNumberer(),  </span><br><span class=\"line\">  mm,  </span><br><span class=\"line\">  &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品编号'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_id'</span>,<span class=\"attr\">editor</span>:<span class=\"keyword\">new</span> Ext.grid.GridEditor(<span class=\"keyword\">new</span> Ext.form.TextField(&#123;<span class=\"attr\">allowBlank</span>:<span class=\"literal\">false</span>&#125;))&#125;,  </span><br><span class=\"line\">  &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品名称'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_name'</span>,<span class=\"attr\">editor</span>:<span class=\"keyword\">new</span> Ext.grid.GridEditor(<span class=\"keyword\">new</span> Ext.form.TextField(&#123;<span class=\"attr\">allowBlank</span>:<span class=\"literal\">false</span>&#125;))&#125;,  </span><br><span class=\"line\">  &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品价格'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_price'</span>,<span class=\"attr\">editor</span>:<span class=\"keyword\">new</span> Ext.grid.GridEditor(<span class=\"keyword\">new</span> Ext.form.TextField(&#123;<span class=\"attr\">allowBlank</span>:<span class=\"literal\">false</span>&#125;))&#125;  </span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure></p>\n<p>将所想要编辑的列添加Ext.grid.GridEditor对象就能是该列可编辑,接着我们要在表格组件的上方添加两个按键，分别是增加和删除。代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gridPanel = <span class=\"keyword\">new</span> Ext.grid.EditorGridPanel(&#123;    </span><br><span class=\"line\">       autoHeight: <span class=\"literal\">true</span>,      </span><br><span class=\"line\">       renderTo: <span class=\"string\">'grid'</span>,      </span><br><span class=\"line\">       store: store,      </span><br><span class=\"line\">       cm: cm,    </span><br><span class=\"line\">       tbar: <span class=\"keyword\">new</span> Ext.Toolbar([<span class=\"string\">'-'</span>, &#123;      </span><br><span class=\"line\">           text: <span class=\"string\">'添加一行'</span>,      </span><br><span class=\"line\">           handler: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;   </span><br><span class=\"line\">               <span class=\"keyword\">var</span> record = <span class=\"keyword\">new</span> Ext.data.Record(&#123;     </span><br><span class=\"line\">                product_id:<span class=\"string\">''</span>,  </span><br><span class=\"line\">                product_name:<span class=\"string\">''</span>,  </span><br><span class=\"line\">                product_price:<span class=\"string\">''</span>  </span><br><span class=\"line\">               &#125;);  </span><br><span class=\"line\">               gridPanel.stopEditing();                  </span><br><span class=\"line\">               store.insert(store.getCount(),record);  </span><br><span class=\"line\">               gridPanel.startEditing(store.getCount()<span class=\"number\">-1</span>,<span class=\"number\">0</span>);  </span><br><span class=\"line\">           &#125;  </span><br><span class=\"line\">       &#125;, <span class=\"string\">'-'</span>, &#123;  </span><br><span class=\"line\">           text: <span class=\"string\">'删除一行'</span>,  </span><br><span class=\"line\">           handler: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;  </span><br><span class=\"line\">               Ext.Msg.confirm(<span class=\"string\">'信息'</span>, <span class=\"string\">'是否删除当前记录？'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">btn</span>)</span>&#123;  </span><br><span class=\"line\">                   <span class=\"keyword\">if</span> (btn == <span class=\"string\">'yes'</span>) &#123;  </span><br><span class=\"line\">                       <span class=\"keyword\">var</span> sm = gridPanel.getSelectionModel();  </span><br><span class=\"line\">                       <span class=\"keyword\">var</span> cell = sm.getSelectedCell();  </span><br><span class=\"line\">                       <span class=\"keyword\">var</span> record = store.getAt(cell[<span class=\"number\">0</span>]);  </span><br><span class=\"line\">                       store.remove(record);  </span><br><span class=\"line\">                   &#125;  </span><br><span class=\"line\">               &#125;);    </span><br><span class=\"line\">           &#125;      </span><br><span class=\"line\">       &#125;, <span class=\"string\">'-'</span>])   </span><br><span class=\"line\">   &#125;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"保存数据\"><a href=\"#保存数据\" class=\"headerlink\" title=\"保存数据\"></a>保存数据</h2><p>论是添加或是修改了表格中的数据后，一般我们都要将结果提交到服务器，在ExtJS中Slice类就是干这个用的。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;  </span><br><span class=\"line\">           text: <span class=\"string\">'保存'</span>,    </span><br><span class=\"line\">           handler: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;   </span><br><span class=\"line\">               <span class=\"keyword\">var</span> m = store.modified.slice(<span class=\"number\">0</span>);   </span><br><span class=\"line\">               <span class=\"keyword\">var</span> data = [];     </span><br><span class=\"line\">               Ext.each(m, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>) </span>&#123;   </span><br><span class=\"line\">                   data.push(item.data);      </span><br><span class=\"line\">               &#125;);    </span><br><span class=\"line\">               alert(Ext.encode(data));   </span><br><span class=\"line\">               Ext.lib.Ajax.request(      </span><br><span class=\"line\">                   <span class=\"string\">'POST'</span>,    </span><br><span class=\"line\">                   <span class=\"string\">'SaveData'</span>,    </span><br><span class=\"line\">                   &#123;<span class=\"attr\">success</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>)</span>&#123;      </span><br><span class=\"line\">                       Ext.Msg.alert(<span class=\"string\">'信息'</span>, response.responseText, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;     </span><br><span class=\"line\">                           store.reload();    </span><br><span class=\"line\">                       &#125;);    </span><br><span class=\"line\">                   &#125;&#125;,    </span><br><span class=\"line\">                   <span class=\"string\">'row='</span> + <span class=\"built_in\">encodeURIComponent</span>(Ext.encode(data))      </span><br><span class=\"line\">               );     </span><br><span class=\"line\">           &#125;      </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"对记录进行分组\"><a href=\"#对记录进行分组\" class=\"headerlink\" title=\"对记录进行分组\"></a>对记录进行分组</h2><p>此外ExtJS Grid还可以对数据进行分组，要建立一个按列分组的表格就要使用Ext.data.GroupingStore这个类。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> store = <span class=\"keyword\">new</span> Ext.data.GroupingStore(&#123;  </span><br><span class=\"line\">    reader: reader,  </span><br><span class=\"line\">    data: data,  </span><br><span class=\"line\">    groupField: <span class=\"string\">'sex'</span>,  </span><br><span class=\"line\">    sortInfo: &#123;<span class=\"attr\">field</span>: <span class=\"string\">'name'</span>, <span class=\"attr\">direction</span>: <span class=\"string\">\"ASC\"</span>&#125;  </span><br><span class=\"line\">&#125;);  </span><br><span class=\"line\"><span class=\"keyword\">var</span> grid = <span class=\"keyword\">new</span> Ext.grid.GridPanel(&#123;  </span><br><span class=\"line\">    autoHeight: <span class=\"literal\">true</span>,  </span><br><span class=\"line\">    store: store,  </span><br><span class=\"line\">    columns: columns,  </span><br><span class=\"line\">    view: <span class=\"keyword\">new</span> Ext.grid.GroupingView(),  </span><br><span class=\"line\">    renderTo: <span class=\"string\">'grid'</span>  </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>ExtJS各种各样的组件和控件有很多，做的都很漂亮，还可以自己定制样式，使用继承来拓展ExtJS的功能，ExtJS的介绍就到这了，更多的功能我今后还会继续研究的。</p>\n","site":{"data":{}},"excerpt":"<p>很多时候我们表格里显示的数据是从后台查询出来的海量数据，那么海量的数据显示在表格里用户的体验肯定会很差，效率也会很低。ExtJS为了解决这个问题，就给我们提供了一个非常强大的分页组件。今天我们就研究一下ExtJS的分页技术。","more":"</p>\n<h2 id=\"为表格添加分页组件\"><a href=\"#为表格添加分页组件\" class=\"headerlink\" title=\"为表格添加分页组件\"></a>为表格添加分页组件</h2><p>要为表格添加分页组件，就要先创建Ext.PagingToolbar类的实例对象，然后将它添加到Panel中去。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gridPanel = <span class=\"keyword\">new</span> Ext.grid.GridPanel(&#123;  </span><br><span class=\"line\">      autoHeight: <span class=\"literal\">true</span>,  </span><br><span class=\"line\">      renderTo: <span class=\"string\">'grid'</span>,   </span><br><span class=\"line\">      store: store,       </span><br><span class=\"line\">      cm: cm,   </span><br><span class=\"line\">      sm:mm,  </span><br><span class=\"line\">      bbar:<span class=\"keyword\">new</span> Ext.PagingToolbar(&#123;  </span><br><span class=\"line\">      pageSize:<span class=\"number\">3</span>,  </span><br><span class=\"line\">      store:store,  </span><br><span class=\"line\">      displayInfo:<span class=\"literal\">true</span>,  </span><br><span class=\"line\">      displayMsg:<span class=\"string\">'显示记录 &#123;0&#125; - &#123;1&#125; of &#123;2&#125;'</span>,  </span><br><span class=\"line\">      emptyMsg:<span class=\"string\">\"没有记录\"</span>  </span><br><span class=\"line\">      &#125;)  </span><br><span class=\"line\"> &#125;);</span><br></pre></td></tr></table></figure></p>\n<p>PagingToolbar类的属性描述：</p>\n<ul>\n<li>pageSize：每页显示的记录条数。</li>\n<li>displayInfo：是否显示记录信息。</li>\n<li>displayMsg：该属性值为true时，该属性才有效。{0}：表示当前显示的记录起始数。{1}：表示显示记录数的结尾数。{2}：表示总共多少记录。</li>\n<li>emptyMsg：当没有记录的时候显示的文本信息。  </li>\n</ul>\n<h2 id=\"从服务器端获得分页数据\"><a href=\"#从服务器端获得分页数据\" class=\"headerlink\" title=\"从服务器端获得分页数据\"></a>从服务器端获得分页数据</h2><p>如果使用静态数据，Grid每次都会将所有数据显示。所以这里我们就编写一个Servlet来生成动态数据生成Grid。Servlet将接受两个请求数据start和limit。Start表示当前页显示记录的起始位置，limit表示每页显示的记录数。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GridServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;  </span><br><span class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;      </span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span>  </span></span><br><span class=\"line\"><span class=\"function\">   <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;  </span><br><span class=\"line\">  response.setContentType(<span class=\"string\">\"text/html;charset=gbk\"</span>);  </span><br><span class=\"line\">  PrintWriter out = response.getWriter();  </span><br><span class=\"line\">  String start = request.getParameter(<span class=\"string\">\"start\"</span>);  </span><br><span class=\"line\">  String limit = request.getParameter(<span class=\"string\">\"limit\"</span>);  </span><br><span class=\"line\">  <span class=\"keyword\">int</span> index = Integer.parseInt(start);  </span><br><span class=\"line\">  <span class=\"keyword\">int</span> pageSize = Integer.parseInt(limit);  </span><br><span class=\"line\">  <span class=\"keyword\">int</span> total = <span class=\"number\">100000</span>;  </span><br><span class=\"line\">  String jsonStr = <span class=\"string\">\"&#123;total:\"</span> + total + <span class=\"string\">\",root:[\"</span>;  </span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = index; i &lt; pageSize + index; i++)  </span><br><span class=\"line\">  &#123;  </span><br><span class=\"line\">   <span class=\"keyword\">int</span> productIndex = i + <span class=\"number\">1</span>;  </span><br><span class=\"line\">   jsonStr += <span class=\"string\">\"&#123;product_id:\"</span> + productIndex + <span class=\"string\">\",product_name:'产品\"</span>  </span><br><span class=\"line\">     + productIndex + <span class=\"string\">\"',product_price:'价格\"</span> + productIndex  </span><br><span class=\"line\">     + <span class=\"string\">\"'&#125;\"</span>;  </span><br><span class=\"line\">   <span class=\"keyword\">if</span> (i != pageSize + index - <span class=\"number\">1</span>)  </span><br><span class=\"line\">    jsonStr += <span class=\"string\">\",\"</span>;  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  jsonStr += <span class=\"string\">\"]&#125;\"</span>;  </span><br><span class=\"line\">  out.println(jsonStr);  </span><br><span class=\"line\"> &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>要通过服务器来接收数据生成表格，就必须使用HttpProxy来制定URL。还有，服务器传递过来的数据是Json格式的，就不能使用ArrayReader了，需要使用的是JsonReader。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ext.onReady(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;  </span><br><span class=\"line\"> <span class=\"keyword\">var</span> mm = <span class=\"keyword\">new</span> Ext.grid.CheckboxSelectionModel();  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> cm = <span class=\"keyword\">new</span> Ext.grid.ColumnModel([  </span><br><span class=\"line\">        <span class=\"keyword\">new</span> Ext.grid.RowNumberer(),  </span><br><span class=\"line\">        mm,  </span><br><span class=\"line\">        &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品编号'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_id'</span>&#125;,  </span><br><span class=\"line\">        &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品名称'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_name'</span>&#125;,  </span><br><span class=\"line\">        &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品价格'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_price'</span>&#125;  </span><br><span class=\"line\">    ]);    </span><br><span class=\"line\"> <span class=\"keyword\">var</span> store = <span class=\"keyword\">new</span> Ext.data.Store(&#123;  </span><br><span class=\"line\">        proxy: <span class=\"keyword\">new</span> Ext.data.HttpProxy(&#123;<span class=\"attr\">url</span>:<span class=\"string\">'../GridServlet'</span>&#125;),  </span><br><span class=\"line\">        reader: <span class=\"keyword\">new</span> Ext.data.JsonReader(&#123;  </span><br><span class=\"line\">         totalProperty:<span class=\"string\">'total'</span>,  </span><br><span class=\"line\">         root:<span class=\"string\">'root'</span>  </span><br><span class=\"line\">        &#125;,[  </span><br><span class=\"line\">           &#123;<span class=\"attr\">name</span>:<span class=\"string\">'product_id'</span>&#125;,  </span><br><span class=\"line\">           &#123;<span class=\"attr\">name</span>:<span class=\"string\">'product_name'</span>&#125;,  </span><br><span class=\"line\">           &#123;<span class=\"attr\">name</span>:<span class=\"string\">'product_price'</span>&#125;  </span><br><span class=\"line\">        ])   </span><br><span class=\"line\">    &#125;);  </span><br><span class=\"line\">store.load(&#123;<span class=\"attr\">params</span>:&#123;<span class=\"attr\">start</span>:<span class=\"number\">0</span>,<span class=\"attr\">limit</span>:<span class=\"number\">10</span>&#125;&#125;);  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> gridPanel = <span class=\"keyword\">new</span> Ext.grid.GridPanel(&#123;  </span><br><span class=\"line\">        autoHeight: <span class=\"literal\">true</span>,  </span><br><span class=\"line\">        renderTo: <span class=\"string\">'grid'</span>,          </span><br><span class=\"line\">        store: store,  </span><br><span class=\"line\">        cm: cm,  </span><br><span class=\"line\">        sm:mm,  </span><br><span class=\"line\">        bbar:<span class=\"keyword\">new</span> Ext.PagingToolbar(&#123;  </span><br><span class=\"line\">         pageSize:<span class=\"number\">10</span>,  </span><br><span class=\"line\">         store:store,  </span><br><span class=\"line\">         displayInfo:<span class=\"literal\">true</span>,  </span><br><span class=\"line\">         displayMsg:<span class=\"string\">'显示记录 &#123;0&#125; - &#123;1&#125; of &#123;2&#125;'</span>,  </span><br><span class=\"line\">         emptyMsg:<span class=\"string\">\"没有记录\"</span>  </span><br><span class=\"line\">        &#125;)  </span><br><span class=\"line\">    &#125;);   </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>这样一个简单的ExtJS Grid分页就实现了。要想让用户体验更高就应该让用户可以在自己刚刚查询出来的数据表格上进行数据编辑，可以进行增删改查。可编辑的表格就在在想要能编辑的列里注册一个TextField组件，这个组件需要使用Ext.grid.GridEditor类来封装。  </p>\n<h2 id=\"第一个可编辑表格\"><a href=\"#第一个可编辑表格\" class=\"headerlink\" title=\"第一个可编辑表格\"></a>第一个可编辑表格</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cm = <span class=\"keyword\">new</span> Ext.grid.ColumnModel([  </span><br><span class=\"line\"><span class=\"keyword\">new</span> Ext.grid.RowNumberer(),  </span><br><span class=\"line\"> &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品编号'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_id'</span>&#125;,  </span><br><span class=\"line\"> &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品名称'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_name'</span>,<span class=\"attr\">editor</span>:<span class=\"keyword\">new</span> Ext.grid.GridEditor(<span class=\"keyword\">new</span> Ext.form.TextField(&#123;<span class=\"attr\">allowBlank</span>:<span class=\"literal\">false</span>&#125;))&#125;,  </span><br><span class=\"line\"> &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品价格'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_price'</span>,<span class=\"attr\">editor</span>:<span class=\"keyword\">new</span> Ext.grid.GridEditor(<span class=\"keyword\">new</span> Ext.form.TextField(&#123;<span class=\"attr\">allowBlank</span>:<span class=\"literal\">false</span>&#125;))&#125;  </span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure>\n<p>使用了可编辑的对象就需要建立一个Ext.grid.EditorGridPanel来代替Ext.grid.GridPanel。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gridPanel = <span class=\"keyword\">new</span> Ext.grid.EditorGridPanel(&#123;  </span><br><span class=\"line\">  autoHeight: <span class=\"literal\">true</span>,  </span><br><span class=\"line\">  renderTo: <span class=\"string\">'grid'</span>,      </span><br><span class=\"line\">  store: store,  </span><br><span class=\"line\">  cm: cm,  </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>这时默认的是双击编辑，如果想设置成单击编辑的话就需要做如下改动。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">gridPanel = <span class=\"keyword\">new</span> Ext.grid.EditorGridPanel(&#123;  </span><br><span class=\"line\">  autoHeight: <span class=\"literal\">true</span>,  </span><br><span class=\"line\">  renderTo: <span class=\"string\">'grid'</span>,          </span><br><span class=\"line\">  store: store,  </span><br><span class=\"line\">  <span class=\"comment\">//值为1的时候就是单击，2就是双击。  </span></span><br><span class=\"line\">  clicksToEdit:<span class=\"number\">1</span>,  </span><br><span class=\"line\">  cm: cm,  </span><br><span class=\"line\">  sm:mm  </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"向表格中添加新行和删除一行\"><a href=\"#向表格中添加新行和删除一行\" class=\"headerlink\" title=\"向表格中添加新行和删除一行\"></a>向表格中添加新行和删除一行</h2><p>添加新的一行是使用Store类的insert方法插入一个新的Ext.data.Record对象，删除用的是remove方法,为了使插入的新行所有列都能编辑，我们要把所有列都设为可编辑。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cm = <span class=\"keyword\">new</span> Ext.grid.ColumnModel([  </span><br><span class=\"line\">  <span class=\"keyword\">new</span> Ext.grid.RowNumberer(),  </span><br><span class=\"line\">  mm,  </span><br><span class=\"line\">  &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品编号'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_id'</span>,<span class=\"attr\">editor</span>:<span class=\"keyword\">new</span> Ext.grid.GridEditor(<span class=\"keyword\">new</span> Ext.form.TextField(&#123;<span class=\"attr\">allowBlank</span>:<span class=\"literal\">false</span>&#125;))&#125;,  </span><br><span class=\"line\">  &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品名称'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_name'</span>,<span class=\"attr\">editor</span>:<span class=\"keyword\">new</span> Ext.grid.GridEditor(<span class=\"keyword\">new</span> Ext.form.TextField(&#123;<span class=\"attr\">allowBlank</span>:<span class=\"literal\">false</span>&#125;))&#125;,  </span><br><span class=\"line\">  &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品价格'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_price'</span>,<span class=\"attr\">editor</span>:<span class=\"keyword\">new</span> Ext.grid.GridEditor(<span class=\"keyword\">new</span> Ext.form.TextField(&#123;<span class=\"attr\">allowBlank</span>:<span class=\"literal\">false</span>&#125;))&#125;  </span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure></p>\n<p>将所想要编辑的列添加Ext.grid.GridEditor对象就能是该列可编辑,接着我们要在表格组件的上方添加两个按键，分别是增加和删除。代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gridPanel = <span class=\"keyword\">new</span> Ext.grid.EditorGridPanel(&#123;    </span><br><span class=\"line\">       autoHeight: <span class=\"literal\">true</span>,      </span><br><span class=\"line\">       renderTo: <span class=\"string\">'grid'</span>,      </span><br><span class=\"line\">       store: store,      </span><br><span class=\"line\">       cm: cm,    </span><br><span class=\"line\">       tbar: <span class=\"keyword\">new</span> Ext.Toolbar([<span class=\"string\">'-'</span>, &#123;      </span><br><span class=\"line\">           text: <span class=\"string\">'添加一行'</span>,      </span><br><span class=\"line\">           handler: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;   </span><br><span class=\"line\">               <span class=\"keyword\">var</span> record = <span class=\"keyword\">new</span> Ext.data.Record(&#123;     </span><br><span class=\"line\">                product_id:<span class=\"string\">''</span>,  </span><br><span class=\"line\">                product_name:<span class=\"string\">''</span>,  </span><br><span class=\"line\">                product_price:<span class=\"string\">''</span>  </span><br><span class=\"line\">               &#125;);  </span><br><span class=\"line\">               gridPanel.stopEditing();                  </span><br><span class=\"line\">               store.insert(store.getCount(),record);  </span><br><span class=\"line\">               gridPanel.startEditing(store.getCount()<span class=\"number\">-1</span>,<span class=\"number\">0</span>);  </span><br><span class=\"line\">           &#125;  </span><br><span class=\"line\">       &#125;, <span class=\"string\">'-'</span>, &#123;  </span><br><span class=\"line\">           text: <span class=\"string\">'删除一行'</span>,  </span><br><span class=\"line\">           handler: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;  </span><br><span class=\"line\">               Ext.Msg.confirm(<span class=\"string\">'信息'</span>, <span class=\"string\">'是否删除当前记录？'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">btn</span>)</span>&#123;  </span><br><span class=\"line\">                   <span class=\"keyword\">if</span> (btn == <span class=\"string\">'yes'</span>) &#123;  </span><br><span class=\"line\">                       <span class=\"keyword\">var</span> sm = gridPanel.getSelectionModel();  </span><br><span class=\"line\">                       <span class=\"keyword\">var</span> cell = sm.getSelectedCell();  </span><br><span class=\"line\">                       <span class=\"keyword\">var</span> record = store.getAt(cell[<span class=\"number\">0</span>]);  </span><br><span class=\"line\">                       store.remove(record);  </span><br><span class=\"line\">                   &#125;  </span><br><span class=\"line\">               &#125;);    </span><br><span class=\"line\">           &#125;      </span><br><span class=\"line\">       &#125;, <span class=\"string\">'-'</span>])   </span><br><span class=\"line\">   &#125;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"保存数据\"><a href=\"#保存数据\" class=\"headerlink\" title=\"保存数据\"></a>保存数据</h2><p>论是添加或是修改了表格中的数据后，一般我们都要将结果提交到服务器，在ExtJS中Slice类就是干这个用的。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;  </span><br><span class=\"line\">           text: <span class=\"string\">'保存'</span>,    </span><br><span class=\"line\">           handler: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;   </span><br><span class=\"line\">               <span class=\"keyword\">var</span> m = store.modified.slice(<span class=\"number\">0</span>);   </span><br><span class=\"line\">               <span class=\"keyword\">var</span> data = [];     </span><br><span class=\"line\">               Ext.each(m, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>) </span>&#123;   </span><br><span class=\"line\">                   data.push(item.data);      </span><br><span class=\"line\">               &#125;);    </span><br><span class=\"line\">               alert(Ext.encode(data));   </span><br><span class=\"line\">               Ext.lib.Ajax.request(      </span><br><span class=\"line\">                   <span class=\"string\">'POST'</span>,    </span><br><span class=\"line\">                   <span class=\"string\">'SaveData'</span>,    </span><br><span class=\"line\">                   &#123;<span class=\"attr\">success</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>)</span>&#123;      </span><br><span class=\"line\">                       Ext.Msg.alert(<span class=\"string\">'信息'</span>, response.responseText, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;     </span><br><span class=\"line\">                           store.reload();    </span><br><span class=\"line\">                       &#125;);    </span><br><span class=\"line\">                   &#125;&#125;,    </span><br><span class=\"line\">                   <span class=\"string\">'row='</span> + <span class=\"built_in\">encodeURIComponent</span>(Ext.encode(data))      </span><br><span class=\"line\">               );     </span><br><span class=\"line\">           &#125;      </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"对记录进行分组\"><a href=\"#对记录进行分组\" class=\"headerlink\" title=\"对记录进行分组\"></a>对记录进行分组</h2><p>此外ExtJS Grid还可以对数据进行分组，要建立一个按列分组的表格就要使用Ext.data.GroupingStore这个类。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> store = <span class=\"keyword\">new</span> Ext.data.GroupingStore(&#123;  </span><br><span class=\"line\">    reader: reader,  </span><br><span class=\"line\">    data: data,  </span><br><span class=\"line\">    groupField: <span class=\"string\">'sex'</span>,  </span><br><span class=\"line\">    sortInfo: &#123;<span class=\"attr\">field</span>: <span class=\"string\">'name'</span>, <span class=\"attr\">direction</span>: <span class=\"string\">\"ASC\"</span>&#125;  </span><br><span class=\"line\">&#125;);  </span><br><span class=\"line\"><span class=\"keyword\">var</span> grid = <span class=\"keyword\">new</span> Ext.grid.GridPanel(&#123;  </span><br><span class=\"line\">    autoHeight: <span class=\"literal\">true</span>,  </span><br><span class=\"line\">    store: store,  </span><br><span class=\"line\">    columns: columns,  </span><br><span class=\"line\">    view: <span class=\"keyword\">new</span> Ext.grid.GroupingView(),  </span><br><span class=\"line\">    renderTo: <span class=\"string\">'grid'</span>  </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>ExtJS各种各样的组件和控件有很多，做的都很漂亮，还可以自己定制样式，使用继承来拓展ExtJS的功能，ExtJS的介绍就到这了，更多的功能我今后还会继续研究的。</p>"},{"title":"ExtJS初级教程之ExtJS Tree(一)","date":"2016-11-27T12:51:18.000Z","_content":"ExtJS是一款基于Ajax的web客户端框架，有着更加和漂亮友好的界面，今天起我就开始学习ExtJS了，下面我把我学习的过程与大家分享。<!--more-->  \n\n我先学习我最近用到ExtJS Tree。下面我们开始写我们的第一个静态树。  \n1、首先导入ExtJS提供的js和css文件。\n``` javascript\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"../script/resources/css/ext-all.css\" />\n  <script type=\"text/JavaScript\" src=\"../script/adapter/ext/ext-base.js\"></script>\n  <script type=\"text/javascript\" src=\"../script/ext-all.js\"></script>\n  <script type=\"text/javascript\" src=\"../script/locale/ext-lang-zh_CN.js\"></script>\n```\n注意导入顺序，这些文件都可以在extjs的源码包里找到。  \n2、首先我们先要创建一个空的树面板，此时页面上是神马都显示不出来的。\n``` javascript\n//创建Tree面板  \nvar tree = new Ext.tree.TreePanel({  \n //指定添加到的div  \n el:'tree-div',  \n}); \n```\n页面上应该有div的标签，因为我们写的树即将安插到这里。\n``` javascript\n<div id = \"tree-div\" ></div>\n```\n3、下面我们先创建一个根节点显示在页面上\n``` javascript\n//创建Tree面板  \nvar tree = new Ext.tree.TreePanel({  \n //指定添加到的div  \n el:'tree-div',  \n});  \nvar root = Ext.tree.TreeNode({text:'跟节点'});  \ntree.setRootNode(root);  \ntree.render();  \n```\n这样页面上就不会是一个空树了，应该显示的是一颗带有一个根节点的树。  \n4、最后我们按照上面的思路创建一个有层次的静态树。\n``` javascript\n//普通的静态树  \nvar tree = new Ext.tree.TreePanel({  \n el:'tree-div'  \n});  \n//创建根节点  \nvar root = new Ext.tree.TreeNode({text:'AllShengFen'});  \n//创建父节点  \nvar shengfen1 = new Ext.tree.TreeNode({text:'HeiLongJiang'});  \nvar shengfen2 = new Ext.tree.TreeNode({text:'LiaoNing'});  \nvar city1 = new Ext.tree.TreeNode({text:'harbin'});  \nvar city2 = new Ext.tree.TreeNode({text:'daqiang'});  \nvar city3 = new Ext.tree.TreeNode({text:'shenyang'});  \nvar city4 = new Ext.tree.TreeNode({text:'dalian'});  \n//将子节点添加到父节点中  \nshengfen1.appendChild(city1);  \nshengfen1.appendChild(city2);  \nshengfen2.appendChild(city3);  \nshengfen2.appendChild(city4);  \n//将子节点添加到父节点中  \nroot.appendChild(shengfen1);  \nroot.appendChild(shengfen2);  \n//将root节点设置为根节点  \ntree.setRootNode(root);  \n//使这棵树显示在div标签中  \ntree.render(); \n```\n这样一棵完整的树就应该显示在页面上了。  \n\n但是我们大多数用的都不是写死的静态树而是要根据不同数据生成不同的树，接下来我们就看看怎么读取服务器端的文件来生成ExtJS Tree。  \n1、创建一个data1.txt文件，内容是一个json字符串。\n``` javascript\n[  \n {text:'非叶子节点'},  \n {text:'叶子节点',leaf:true}  \n] \n```\n2、TreeLoader 导入数据的URL。我们需要一个类能够帮我们找到要加载的文件，这个类就是TreeLoader。\n``` javascript\n//创建Tree面板  \nvar tree = new Ext.tree.TreePanel({  \n //指定添加到的div  \n el:'tree-div',  \n //导入数据的URL  \n loader:new Ext.tree.TreeLoader({dataUrl:'../js/data1.txt'})  \n}); \n```\n3、但此时我们不能够再用Ext.tree.TreeNode来创建根节点了，用它创建根节点的话在页面上我们就只能看见跟节点。这是因为它不支持ajax，不能加载data.txt的数据，所以此时我们就用到了AsyncTreeNode了。\n``` javascript\n//创建根节点，使用AsyncTreeNode能够加载外部数据  \nvar root = new Ext.tree.AsyncTreeNode({text:'gen'});  \n//设置root为根节点  \ntree.setRootNode(root);  \n//将树显示在div标签上  \ntree.render();  \n//第一个true是自动展开所有字节点，第二个true是以动画效果展开树  \nroot.expand(true,true); \n```\n但此时我们发现，页面上的树开始无限的展开了。当我们将root.expand(true,true)删掉后，打开页面是不自动展开了，但是当我们点击展开的时候还是会无限的展开下去，这是因为AsyncTreeNode能够重新加载它下面的非叶子节点，我们加载的data1.txt里面的数据有一个节点是非叶子节点，所以AsyncTreeNode会再次的把它当做根节点，重新加载数据。所以我们应该给它一个所有节点的最后都是叶子节点的数据文件data2.txt。\n``` javascript\n[  \n  {text:'computer',children:[  \n    {text:'<a href=\"http://lib.csdn.net/base/17\" class='replace_word' title=\"Java EE知识库\" target='_blank' style='color:#df3434; font-weight:bold;'>Java</a>',leaf:true},  \n    {text:'c++',children:[  \n      {text:'thinking',leaf:true},  \n      {text:'yyyyy',leaf:true}  \n    ]},  \n  {text:'asp',leaf:true}   \n  ]},  \n  {text:'jsp',children:[  \n    {text:'dadf',leaf:true},  \n    {text:'ddddddd',leaf:true}  \n  ]}  \n]  \n```\n此时我们将加载的数据源改为data2.txt。\n``` javascript\n//创建Tree面板  \nvar tree = new Ext.tree.TreePanel({  \n //指定添加到的div  \n el:'tree-div',  \n //导入数据的URL  \n loader:new Ext.tree.TreeLoader({dataUrl:'../js/data1.txt'})  \n});\n```\n这时我们生成的树就不是无限展开的了。  \n今天就这些，下次我们再研究从servlet中获得Json数据来生成ExtJS树。\n","source":"_posts/Tree-1.md","raw":"---\ntitle: ExtJS初级教程之ExtJS Tree(一)\ndate: 2016-11-27 20:51:18\ntags: ExtJS\ncategories: javascript\n---\nExtJS是一款基于Ajax的web客户端框架，有着更加和漂亮友好的界面，今天起我就开始学习ExtJS了，下面我把我学习的过程与大家分享。<!--more-->  \n\n我先学习我最近用到ExtJS Tree。下面我们开始写我们的第一个静态树。  \n1、首先导入ExtJS提供的js和css文件。\n``` javascript\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"../script/resources/css/ext-all.css\" />\n  <script type=\"text/JavaScript\" src=\"../script/adapter/ext/ext-base.js\"></script>\n  <script type=\"text/javascript\" src=\"../script/ext-all.js\"></script>\n  <script type=\"text/javascript\" src=\"../script/locale/ext-lang-zh_CN.js\"></script>\n```\n注意导入顺序，这些文件都可以在extjs的源码包里找到。  \n2、首先我们先要创建一个空的树面板，此时页面上是神马都显示不出来的。\n``` javascript\n//创建Tree面板  \nvar tree = new Ext.tree.TreePanel({  \n //指定添加到的div  \n el:'tree-div',  \n}); \n```\n页面上应该有div的标签，因为我们写的树即将安插到这里。\n``` javascript\n<div id = \"tree-div\" ></div>\n```\n3、下面我们先创建一个根节点显示在页面上\n``` javascript\n//创建Tree面板  \nvar tree = new Ext.tree.TreePanel({  \n //指定添加到的div  \n el:'tree-div',  \n});  \nvar root = Ext.tree.TreeNode({text:'跟节点'});  \ntree.setRootNode(root);  \ntree.render();  \n```\n这样页面上就不会是一个空树了，应该显示的是一颗带有一个根节点的树。  \n4、最后我们按照上面的思路创建一个有层次的静态树。\n``` javascript\n//普通的静态树  \nvar tree = new Ext.tree.TreePanel({  \n el:'tree-div'  \n});  \n//创建根节点  \nvar root = new Ext.tree.TreeNode({text:'AllShengFen'});  \n//创建父节点  \nvar shengfen1 = new Ext.tree.TreeNode({text:'HeiLongJiang'});  \nvar shengfen2 = new Ext.tree.TreeNode({text:'LiaoNing'});  \nvar city1 = new Ext.tree.TreeNode({text:'harbin'});  \nvar city2 = new Ext.tree.TreeNode({text:'daqiang'});  \nvar city3 = new Ext.tree.TreeNode({text:'shenyang'});  \nvar city4 = new Ext.tree.TreeNode({text:'dalian'});  \n//将子节点添加到父节点中  \nshengfen1.appendChild(city1);  \nshengfen1.appendChild(city2);  \nshengfen2.appendChild(city3);  \nshengfen2.appendChild(city4);  \n//将子节点添加到父节点中  \nroot.appendChild(shengfen1);  \nroot.appendChild(shengfen2);  \n//将root节点设置为根节点  \ntree.setRootNode(root);  \n//使这棵树显示在div标签中  \ntree.render(); \n```\n这样一棵完整的树就应该显示在页面上了。  \n\n但是我们大多数用的都不是写死的静态树而是要根据不同数据生成不同的树，接下来我们就看看怎么读取服务器端的文件来生成ExtJS Tree。  \n1、创建一个data1.txt文件，内容是一个json字符串。\n``` javascript\n[  \n {text:'非叶子节点'},  \n {text:'叶子节点',leaf:true}  \n] \n```\n2、TreeLoader 导入数据的URL。我们需要一个类能够帮我们找到要加载的文件，这个类就是TreeLoader。\n``` javascript\n//创建Tree面板  \nvar tree = new Ext.tree.TreePanel({  \n //指定添加到的div  \n el:'tree-div',  \n //导入数据的URL  \n loader:new Ext.tree.TreeLoader({dataUrl:'../js/data1.txt'})  \n}); \n```\n3、但此时我们不能够再用Ext.tree.TreeNode来创建根节点了，用它创建根节点的话在页面上我们就只能看见跟节点。这是因为它不支持ajax，不能加载data.txt的数据，所以此时我们就用到了AsyncTreeNode了。\n``` javascript\n//创建根节点，使用AsyncTreeNode能够加载外部数据  \nvar root = new Ext.tree.AsyncTreeNode({text:'gen'});  \n//设置root为根节点  \ntree.setRootNode(root);  \n//将树显示在div标签上  \ntree.render();  \n//第一个true是自动展开所有字节点，第二个true是以动画效果展开树  \nroot.expand(true,true); \n```\n但此时我们发现，页面上的树开始无限的展开了。当我们将root.expand(true,true)删掉后，打开页面是不自动展开了，但是当我们点击展开的时候还是会无限的展开下去，这是因为AsyncTreeNode能够重新加载它下面的非叶子节点，我们加载的data1.txt里面的数据有一个节点是非叶子节点，所以AsyncTreeNode会再次的把它当做根节点，重新加载数据。所以我们应该给它一个所有节点的最后都是叶子节点的数据文件data2.txt。\n``` javascript\n[  \n  {text:'computer',children:[  \n    {text:'<a href=\"http://lib.csdn.net/base/17\" class='replace_word' title=\"Java EE知识库\" target='_blank' style='color:#df3434; font-weight:bold;'>Java</a>',leaf:true},  \n    {text:'c++',children:[  \n      {text:'thinking',leaf:true},  \n      {text:'yyyyy',leaf:true}  \n    ]},  \n  {text:'asp',leaf:true}   \n  ]},  \n  {text:'jsp',children:[  \n    {text:'dadf',leaf:true},  \n    {text:'ddddddd',leaf:true}  \n  ]}  \n]  \n```\n此时我们将加载的数据源改为data2.txt。\n``` javascript\n//创建Tree面板  \nvar tree = new Ext.tree.TreePanel({  \n //指定添加到的div  \n el:'tree-div',  \n //导入数据的URL  \n loader:new Ext.tree.TreeLoader({dataUrl:'../js/data1.txt'})  \n});\n```\n这时我们生成的树就不是无限展开的了。  \n今天就这些，下次我们再研究从servlet中获得Json数据来生成ExtJS树。\n","slug":"Tree-1","published":1,"updated":"2019-07-01T12:35:47.381Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjycv1m3f0009ok9myunk4awp","content":"<p>ExtJS是一款基于Ajax的web客户端框架，有着更加和漂亮友好的界面，今天起我就开始学习ExtJS了，下面我把我学习的过程与大家分享。<a id=\"more\"></a>  </p>\n<p>我先学习我最近用到ExtJS Tree。下面我们开始写我们的第一个静态树。<br>1、首先导入ExtJS提供的js和css文件。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link rel=<span class=\"string\">\"stylesheet\"</span> type=<span class=\"string\">\"text/css\"</span> href=<span class=\"string\">\"../script/resources/css/ext-all.css\"</span> /&gt;</span><br><span class=\"line\">&lt;script type=<span class=\"string\">\"text/JavaScript\"</span> src=<span class=\"string\">\"../script/adapter/ext/ext-base.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"../script/ext-all.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"../script/locale/ext-lang-zh_CN.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>\n<p>注意导入顺序，这些文件都可以在extjs的源码包里找到。<br>2、首先我们先要创建一个空的树面板，此时页面上是神马都显示不出来的。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建Tree面板  </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </span><br><span class=\"line\"> <span class=\"comment\">//指定添加到的div  </span></span><br><span class=\"line\"> el:<span class=\"string\">'tree-div'</span>,  </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>页面上应该有div的标签，因为我们写的树即将安插到这里。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id = <span class=\"string\">\"tree-div\"</span> &gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>\n<p>3、下面我们先创建一个根节点显示在页面上<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建Tree面板  </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </span><br><span class=\"line\"> <span class=\"comment\">//指定添加到的div  </span></span><br><span class=\"line\"> el:<span class=\"string\">'tree-div'</span>,  </span><br><span class=\"line\">&#125;);  </span><br><span class=\"line\"><span class=\"keyword\">var</span> root = Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'跟节点'</span>&#125;);  </span><br><span class=\"line\">tree.setRootNode(root);  </span><br><span class=\"line\">tree.render();</span><br></pre></td></tr></table></figure></p>\n<p>这样页面上就不会是一个空树了，应该显示的是一颗带有一个根节点的树。<br>4、最后我们按照上面的思路创建一个有层次的静态树。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//普通的静态树  </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </span><br><span class=\"line\"> el:<span class=\"string\">'tree-div'</span>  </span><br><span class=\"line\">&#125;);  </span><br><span class=\"line\"><span class=\"comment\">//创建根节点  </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> root = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'AllShengFen'</span>&#125;);  </span><br><span class=\"line\"><span class=\"comment\">//创建父节点  </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> shengfen1 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'HeiLongJiang'</span>&#125;);  </span><br><span class=\"line\"><span class=\"keyword\">var</span> shengfen2 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'LiaoNing'</span>&#125;);  </span><br><span class=\"line\"><span class=\"keyword\">var</span> city1 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'harbin'</span>&#125;);  </span><br><span class=\"line\"><span class=\"keyword\">var</span> city2 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'daqiang'</span>&#125;);  </span><br><span class=\"line\"><span class=\"keyword\">var</span> city3 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'shenyang'</span>&#125;);  </span><br><span class=\"line\"><span class=\"keyword\">var</span> city4 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'dalian'</span>&#125;);  </span><br><span class=\"line\"><span class=\"comment\">//将子节点添加到父节点中  </span></span><br><span class=\"line\">shengfen1.appendChild(city1);  </span><br><span class=\"line\">shengfen1.appendChild(city2);  </span><br><span class=\"line\">shengfen2.appendChild(city3);  </span><br><span class=\"line\">shengfen2.appendChild(city4);  </span><br><span class=\"line\"><span class=\"comment\">//将子节点添加到父节点中  </span></span><br><span class=\"line\">root.appendChild(shengfen1);  </span><br><span class=\"line\">root.appendChild(shengfen2);  </span><br><span class=\"line\"><span class=\"comment\">//将root节点设置为根节点  </span></span><br><span class=\"line\">tree.setRootNode(root);  </span><br><span class=\"line\"><span class=\"comment\">//使这棵树显示在div标签中  </span></span><br><span class=\"line\">tree.render();</span><br></pre></td></tr></table></figure></p>\n<p>这样一棵完整的树就应该显示在页面上了。  </p>\n<p>但是我们大多数用的都不是写死的静态树而是要根据不同数据生成不同的树，接下来我们就看看怎么读取服务器端的文件来生成ExtJS Tree。<br>1、创建一个data1.txt文件，内容是一个json字符串。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[  </span><br><span class=\"line\"> &#123;<span class=\"attr\">text</span>:<span class=\"string\">'非叶子节点'</span>&#125;,  </span><br><span class=\"line\"> &#123;<span class=\"attr\">text</span>:<span class=\"string\">'叶子节点'</span>,<span class=\"attr\">leaf</span>:<span class=\"literal\">true</span>&#125;  </span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>2、TreeLoader 导入数据的URL。我们需要一个类能够帮我们找到要加载的文件，这个类就是TreeLoader。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建Tree面板  </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </span><br><span class=\"line\"> <span class=\"comment\">//指定添加到的div  </span></span><br><span class=\"line\"> el:<span class=\"string\">'tree-div'</span>,  </span><br><span class=\"line\"> <span class=\"comment\">//导入数据的URL  </span></span><br><span class=\"line\"> loader:<span class=\"keyword\">new</span> Ext.tree.TreeLoader(&#123;<span class=\"attr\">dataUrl</span>:<span class=\"string\">'../js/data1.txt'</span>&#125;)  </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>3、但此时我们不能够再用Ext.tree.TreeNode来创建根节点了，用它创建根节点的话在页面上我们就只能看见跟节点。这是因为它不支持ajax，不能加载data.txt的数据，所以此时我们就用到了AsyncTreeNode了。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建根节点，使用AsyncTreeNode能够加载外部数据  </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> root = <span class=\"keyword\">new</span> Ext.tree.AsyncTreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'gen'</span>&#125;);  </span><br><span class=\"line\"><span class=\"comment\">//设置root为根节点  </span></span><br><span class=\"line\">tree.setRootNode(root);  </span><br><span class=\"line\"><span class=\"comment\">//将树显示在div标签上  </span></span><br><span class=\"line\">tree.render();  </span><br><span class=\"line\"><span class=\"comment\">//第一个true是自动展开所有字节点，第二个true是以动画效果展开树  </span></span><br><span class=\"line\">root.expand(<span class=\"literal\">true</span>,<span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure></p>\n<p>但此时我们发现，页面上的树开始无限的展开了。当我们将root.expand(true,true)删掉后，打开页面是不自动展开了，但是当我们点击展开的时候还是会无限的展开下去，这是因为AsyncTreeNode能够重新加载它下面的非叶子节点，我们加载的data1.txt里面的数据有一个节点是非叶子节点，所以AsyncTreeNode会再次的把它当做根节点，重新加载数据。所以我们应该给它一个所有节点的最后都是叶子节点的数据文件data2.txt。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[  </span><br><span class=\"line\">  &#123;<span class=\"attr\">text</span>:<span class=\"string\">'computer'</span>,<span class=\"attr\">children</span>:[  </span><br><span class=\"line\">    &#123;text:'&lt;a href=\"http://lib.csdn.net/base/17\" class='replace_word' title=\"Java EE知识库\" target='_blank' style='color:#df3434; font-weight:bold;'&gt;Java&lt;/a&gt;',leaf:true&#125;,  </span><br><span class=\"line\">    &#123;<span class=\"attr\">text</span>:<span class=\"string\">'c++'</span>,<span class=\"attr\">children</span>:[  </span><br><span class=\"line\">      &#123;<span class=\"attr\">text</span>:<span class=\"string\">'thinking'</span>,<span class=\"attr\">leaf</span>:<span class=\"literal\">true</span>&#125;,  </span><br><span class=\"line\">      &#123;<span class=\"attr\">text</span>:<span class=\"string\">'yyyyy'</span>,<span class=\"attr\">leaf</span>:<span class=\"literal\">true</span>&#125;  </span><br><span class=\"line\">    ]&#125;,  </span><br><span class=\"line\">  &#123;<span class=\"attr\">text</span>:<span class=\"string\">'asp'</span>,<span class=\"attr\">leaf</span>:<span class=\"literal\">true</span>&#125;   </span><br><span class=\"line\">  ]&#125;,  </span><br><span class=\"line\">  &#123;<span class=\"attr\">text</span>:<span class=\"string\">'jsp'</span>,<span class=\"attr\">children</span>:[  </span><br><span class=\"line\">    &#123;<span class=\"attr\">text</span>:<span class=\"string\">'dadf'</span>,<span class=\"attr\">leaf</span>:<span class=\"literal\">true</span>&#125;,  </span><br><span class=\"line\">    &#123;<span class=\"attr\">text</span>:<span class=\"string\">'ddddddd'</span>,<span class=\"attr\">leaf</span>:<span class=\"literal\">true</span>&#125;  </span><br><span class=\"line\">  ]&#125;  </span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>此时我们将加载的数据源改为data2.txt。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建Tree面板  </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </span><br><span class=\"line\"> <span class=\"comment\">//指定添加到的div  </span></span><br><span class=\"line\"> el:<span class=\"string\">'tree-div'</span>,  </span><br><span class=\"line\"> <span class=\"comment\">//导入数据的URL  </span></span><br><span class=\"line\"> loader:<span class=\"keyword\">new</span> Ext.tree.TreeLoader(&#123;<span class=\"attr\">dataUrl</span>:<span class=\"string\">'../js/data1.txt'</span>&#125;)  </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>这时我们生成的树就不是无限展开的了。<br>今天就这些，下次我们再研究从servlet中获得Json数据来生成ExtJS树。</p>\n","site":{"data":{}},"excerpt":"<p>ExtJS是一款基于Ajax的web客户端框架，有着更加和漂亮友好的界面，今天起我就开始学习ExtJS了，下面我把我学习的过程与大家分享。","more":"</p>\n<p>我先学习我最近用到ExtJS Tree。下面我们开始写我们的第一个静态树。<br>1、首先导入ExtJS提供的js和css文件。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link rel=<span class=\"string\">\"stylesheet\"</span> type=<span class=\"string\">\"text/css\"</span> href=<span class=\"string\">\"../script/resources/css/ext-all.css\"</span> /&gt;</span><br><span class=\"line\">&lt;script type=<span class=\"string\">\"text/JavaScript\"</span> src=<span class=\"string\">\"../script/adapter/ext/ext-base.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"../script/ext-all.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"../script/locale/ext-lang-zh_CN.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>\n<p>注意导入顺序，这些文件都可以在extjs的源码包里找到。<br>2、首先我们先要创建一个空的树面板，此时页面上是神马都显示不出来的。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建Tree面板  </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </span><br><span class=\"line\"> <span class=\"comment\">//指定添加到的div  </span></span><br><span class=\"line\"> el:<span class=\"string\">'tree-div'</span>,  </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>页面上应该有div的标签，因为我们写的树即将安插到这里。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id = <span class=\"string\">\"tree-div\"</span> &gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>\n<p>3、下面我们先创建一个根节点显示在页面上<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建Tree面板  </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </span><br><span class=\"line\"> <span class=\"comment\">//指定添加到的div  </span></span><br><span class=\"line\"> el:<span class=\"string\">'tree-div'</span>,  </span><br><span class=\"line\">&#125;);  </span><br><span class=\"line\"><span class=\"keyword\">var</span> root = Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'跟节点'</span>&#125;);  </span><br><span class=\"line\">tree.setRootNode(root);  </span><br><span class=\"line\">tree.render();</span><br></pre></td></tr></table></figure></p>\n<p>这样页面上就不会是一个空树了，应该显示的是一颗带有一个根节点的树。<br>4、最后我们按照上面的思路创建一个有层次的静态树。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//普通的静态树  </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </span><br><span class=\"line\"> el:<span class=\"string\">'tree-div'</span>  </span><br><span class=\"line\">&#125;);  </span><br><span class=\"line\"><span class=\"comment\">//创建根节点  </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> root = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'AllShengFen'</span>&#125;);  </span><br><span class=\"line\"><span class=\"comment\">//创建父节点  </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> shengfen1 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'HeiLongJiang'</span>&#125;);  </span><br><span class=\"line\"><span class=\"keyword\">var</span> shengfen2 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'LiaoNing'</span>&#125;);  </span><br><span class=\"line\"><span class=\"keyword\">var</span> city1 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'harbin'</span>&#125;);  </span><br><span class=\"line\"><span class=\"keyword\">var</span> city2 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'daqiang'</span>&#125;);  </span><br><span class=\"line\"><span class=\"keyword\">var</span> city3 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'shenyang'</span>&#125;);  </span><br><span class=\"line\"><span class=\"keyword\">var</span> city4 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'dalian'</span>&#125;);  </span><br><span class=\"line\"><span class=\"comment\">//将子节点添加到父节点中  </span></span><br><span class=\"line\">shengfen1.appendChild(city1);  </span><br><span class=\"line\">shengfen1.appendChild(city2);  </span><br><span class=\"line\">shengfen2.appendChild(city3);  </span><br><span class=\"line\">shengfen2.appendChild(city4);  </span><br><span class=\"line\"><span class=\"comment\">//将子节点添加到父节点中  </span></span><br><span class=\"line\">root.appendChild(shengfen1);  </span><br><span class=\"line\">root.appendChild(shengfen2);  </span><br><span class=\"line\"><span class=\"comment\">//将root节点设置为根节点  </span></span><br><span class=\"line\">tree.setRootNode(root);  </span><br><span class=\"line\"><span class=\"comment\">//使这棵树显示在div标签中  </span></span><br><span class=\"line\">tree.render();</span><br></pre></td></tr></table></figure></p>\n<p>这样一棵完整的树就应该显示在页面上了。  </p>\n<p>但是我们大多数用的都不是写死的静态树而是要根据不同数据生成不同的树，接下来我们就看看怎么读取服务器端的文件来生成ExtJS Tree。<br>1、创建一个data1.txt文件，内容是一个json字符串。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[  </span><br><span class=\"line\"> &#123;<span class=\"attr\">text</span>:<span class=\"string\">'非叶子节点'</span>&#125;,  </span><br><span class=\"line\"> &#123;<span class=\"attr\">text</span>:<span class=\"string\">'叶子节点'</span>,<span class=\"attr\">leaf</span>:<span class=\"literal\">true</span>&#125;  </span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>2、TreeLoader 导入数据的URL。我们需要一个类能够帮我们找到要加载的文件，这个类就是TreeLoader。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建Tree面板  </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </span><br><span class=\"line\"> <span class=\"comment\">//指定添加到的div  </span></span><br><span class=\"line\"> el:<span class=\"string\">'tree-div'</span>,  </span><br><span class=\"line\"> <span class=\"comment\">//导入数据的URL  </span></span><br><span class=\"line\"> loader:<span class=\"keyword\">new</span> Ext.tree.TreeLoader(&#123;<span class=\"attr\">dataUrl</span>:<span class=\"string\">'../js/data1.txt'</span>&#125;)  </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>3、但此时我们不能够再用Ext.tree.TreeNode来创建根节点了，用它创建根节点的话在页面上我们就只能看见跟节点。这是因为它不支持ajax，不能加载data.txt的数据，所以此时我们就用到了AsyncTreeNode了。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建根节点，使用AsyncTreeNode能够加载外部数据  </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> root = <span class=\"keyword\">new</span> Ext.tree.AsyncTreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'gen'</span>&#125;);  </span><br><span class=\"line\"><span class=\"comment\">//设置root为根节点  </span></span><br><span class=\"line\">tree.setRootNode(root);  </span><br><span class=\"line\"><span class=\"comment\">//将树显示在div标签上  </span></span><br><span class=\"line\">tree.render();  </span><br><span class=\"line\"><span class=\"comment\">//第一个true是自动展开所有字节点，第二个true是以动画效果展开树  </span></span><br><span class=\"line\">root.expand(<span class=\"literal\">true</span>,<span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure></p>\n<p>但此时我们发现，页面上的树开始无限的展开了。当我们将root.expand(true,true)删掉后，打开页面是不自动展开了，但是当我们点击展开的时候还是会无限的展开下去，这是因为AsyncTreeNode能够重新加载它下面的非叶子节点，我们加载的data1.txt里面的数据有一个节点是非叶子节点，所以AsyncTreeNode会再次的把它当做根节点，重新加载数据。所以我们应该给它一个所有节点的最后都是叶子节点的数据文件data2.txt。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[  </span><br><span class=\"line\">  &#123;<span class=\"attr\">text</span>:<span class=\"string\">'computer'</span>,<span class=\"attr\">children</span>:[  </span><br><span class=\"line\">    &#123;text:'&lt;a href=\"http://lib.csdn.net/base/17\" class='replace_word' title=\"Java EE知识库\" target='_blank' style='color:#df3434; font-weight:bold;'&gt;Java&lt;/a&gt;',leaf:true&#125;,  </span><br><span class=\"line\">    &#123;<span class=\"attr\">text</span>:<span class=\"string\">'c++'</span>,<span class=\"attr\">children</span>:[  </span><br><span class=\"line\">      &#123;<span class=\"attr\">text</span>:<span class=\"string\">'thinking'</span>,<span class=\"attr\">leaf</span>:<span class=\"literal\">true</span>&#125;,  </span><br><span class=\"line\">      &#123;<span class=\"attr\">text</span>:<span class=\"string\">'yyyyy'</span>,<span class=\"attr\">leaf</span>:<span class=\"literal\">true</span>&#125;  </span><br><span class=\"line\">    ]&#125;,  </span><br><span class=\"line\">  &#123;<span class=\"attr\">text</span>:<span class=\"string\">'asp'</span>,<span class=\"attr\">leaf</span>:<span class=\"literal\">true</span>&#125;   </span><br><span class=\"line\">  ]&#125;,  </span><br><span class=\"line\">  &#123;<span class=\"attr\">text</span>:<span class=\"string\">'jsp'</span>,<span class=\"attr\">children</span>:[  </span><br><span class=\"line\">    &#123;<span class=\"attr\">text</span>:<span class=\"string\">'dadf'</span>,<span class=\"attr\">leaf</span>:<span class=\"literal\">true</span>&#125;,  </span><br><span class=\"line\">    &#123;<span class=\"attr\">text</span>:<span class=\"string\">'ddddddd'</span>,<span class=\"attr\">leaf</span>:<span class=\"literal\">true</span>&#125;  </span><br><span class=\"line\">  ]&#125;  </span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>此时我们将加载的数据源改为data2.txt。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建Tree面板  </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </span><br><span class=\"line\"> <span class=\"comment\">//指定添加到的div  </span></span><br><span class=\"line\"> el:<span class=\"string\">'tree-div'</span>,  </span><br><span class=\"line\"> <span class=\"comment\">//导入数据的URL  </span></span><br><span class=\"line\"> loader:<span class=\"keyword\">new</span> Ext.tree.TreeLoader(&#123;<span class=\"attr\">dataUrl</span>:<span class=\"string\">'../js/data1.txt'</span>&#125;)  </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>这时我们生成的树就不是无限展开的了。<br>今天就这些，下次我们再研究从servlet中获得Json数据来生成ExtJS树。</p>"},{"title":"Qt学习笔记","date":"2017-02-09T12:07:29.000Z","_content":"前几天项目需要一个编辑器，现学现卖边查文档边用Qt写了个简单的编辑器供项目使用，编写过程中记录了一些笔记，都是些没有系统性的知识点。\n- 在Qt中固定窗口大小\n```\n//将最大窗口与最小窗口设置大小相同\nsetMinimumSize(1280, 720);\nsetMaximumSize(1280, 720);\n```\n- QString转char*\n```\nQString name = \"test\";\nQByteArray ba = name.toLatin1();\nchar *mm = ba.data();\nqDebug(mm);\n```\n- 输入对话框\n```\nQString name = QInputDialog::getText(this, tr(\"title\") ,tr(\"Please input\"));\n```\n<!--more-->\n- 提示框\n```\nQMessageBox::about(NULL, \"Warning\", \"Filename cannot be empty!\");\n```\n- C1083: Cannot open include file: 'QAxObject': No such file or directory\n```\n#include <ActiveQt/QAxWidget>\n```\n- 浏览目录\n```\nQString openFilename = QFileDialog::getExistingDirectory(\n                this,\n                tr(\"Open fish table\"),\n                \"\",\n                QFileDialog::ShowDirsOnly|QFileDialog::DontResolveSymlinks);\n```\n- 浏览文件\n```\nQString openFilename = QFileDialog::getOpenFileName(\n                this,\n                tr(\"Open fish table\"),\n                \"\",\n                tr(\"Config Files (*.xlsx)\"));\n```\n- 创建按钮不显示\n```\nauto btn = new QPushButton(this);\nbtn->setText(\"OK\");\nbtn->move(100, 100);\nbtn->show();    //一定要调用show()才会显示\n```\n- 设置鼠标样式\n```\nsetCursor(QCursor(Qt::OpenHandCursor));\n```\n- 创建json串\n```  \nQJsonObject json;\njson.insert(\"name\", \"test\");\njson.insert(\"version\", \"1.0.1\");\n\nQJsonDocument document;\ndocument.setObject(json);\nQByteArray byte_array = document.toJson(QJsonDocument::Compact);\nQString json_str(byte_array);\n```\n- 解析json串\n```\nQJsonParseError error;\nQJsonDocument jsonDocument = QJsonDocument::fromJson(json.toUtf8(),&error);\nif (error.error == QJsonParseError::NoError) {\n    if (jsonDocument.isObject()) {\n        QVariantMap result = jsonDocument.toVariant().toMap();\n        resPath = result[\"resPath\"].toString();\n        fishTable = result[\"fishTable\"].toString();\n    }\n}\n```\n- 发布打包  \n1.首先使用Qt Creator发布Release版本。  \n2.将Release目录下的.exe文件单独copy到一个目录中。  \n3.命令行进入该目录执行your Qt path\\bin\\windeployqt project.exe  \n4.全选生成的依赖文件，打包成rar压缩文件project.rar。  \n5.打开你压缩的project.rar压缩包，点击菜单栏的解压格式，高级自解压选项。  \n6.设置----解压后运行里写入project.exe（写你要执行的文件）。  \n7.模式----打钩解包到临时文件夹，安全模式选择全部隐藏。  \n8.更新----更新方式，解压并更新文件；覆盖凡是，覆盖所有文件。  \n9.文本和图标------可改可不改。  \n10.然后确定就可以生成exe可执行文件了。  \n","source":"_posts/QtNotes.md","raw":"---\ntitle: Qt学习笔记\ndate: 2017-02-09 20:07:29\ntags: Qt\ncategories: Qt\n---\n前几天项目需要一个编辑器，现学现卖边查文档边用Qt写了个简单的编辑器供项目使用，编写过程中记录了一些笔记，都是些没有系统性的知识点。\n- 在Qt中固定窗口大小\n```\n//将最大窗口与最小窗口设置大小相同\nsetMinimumSize(1280, 720);\nsetMaximumSize(1280, 720);\n```\n- QString转char*\n```\nQString name = \"test\";\nQByteArray ba = name.toLatin1();\nchar *mm = ba.data();\nqDebug(mm);\n```\n- 输入对话框\n```\nQString name = QInputDialog::getText(this, tr(\"title\") ,tr(\"Please input\"));\n```\n<!--more-->\n- 提示框\n```\nQMessageBox::about(NULL, \"Warning\", \"Filename cannot be empty!\");\n```\n- C1083: Cannot open include file: 'QAxObject': No such file or directory\n```\n#include <ActiveQt/QAxWidget>\n```\n- 浏览目录\n```\nQString openFilename = QFileDialog::getExistingDirectory(\n                this,\n                tr(\"Open fish table\"),\n                \"\",\n                QFileDialog::ShowDirsOnly|QFileDialog::DontResolveSymlinks);\n```\n- 浏览文件\n```\nQString openFilename = QFileDialog::getOpenFileName(\n                this,\n                tr(\"Open fish table\"),\n                \"\",\n                tr(\"Config Files (*.xlsx)\"));\n```\n- 创建按钮不显示\n```\nauto btn = new QPushButton(this);\nbtn->setText(\"OK\");\nbtn->move(100, 100);\nbtn->show();    //一定要调用show()才会显示\n```\n- 设置鼠标样式\n```\nsetCursor(QCursor(Qt::OpenHandCursor));\n```\n- 创建json串\n```  \nQJsonObject json;\njson.insert(\"name\", \"test\");\njson.insert(\"version\", \"1.0.1\");\n\nQJsonDocument document;\ndocument.setObject(json);\nQByteArray byte_array = document.toJson(QJsonDocument::Compact);\nQString json_str(byte_array);\n```\n- 解析json串\n```\nQJsonParseError error;\nQJsonDocument jsonDocument = QJsonDocument::fromJson(json.toUtf8(),&error);\nif (error.error == QJsonParseError::NoError) {\n    if (jsonDocument.isObject()) {\n        QVariantMap result = jsonDocument.toVariant().toMap();\n        resPath = result[\"resPath\"].toString();\n        fishTable = result[\"fishTable\"].toString();\n    }\n}\n```\n- 发布打包  \n1.首先使用Qt Creator发布Release版本。  \n2.将Release目录下的.exe文件单独copy到一个目录中。  \n3.命令行进入该目录执行your Qt path\\bin\\windeployqt project.exe  \n4.全选生成的依赖文件，打包成rar压缩文件project.rar。  \n5.打开你压缩的project.rar压缩包，点击菜单栏的解压格式，高级自解压选项。  \n6.设置----解压后运行里写入project.exe（写你要执行的文件）。  \n7.模式----打钩解包到临时文件夹，安全模式选择全部隐藏。  \n8.更新----更新方式，解压并更新文件；覆盖凡是，覆盖所有文件。  \n9.文本和图标------可改可不改。  \n10.然后确定就可以生成exe可执行文件了。  \n","slug":"QtNotes","published":1,"updated":"2019-07-01T12:35:47.381Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjycv1m3g000aok9m9eu73s6j","content":"<p>前几天项目需要一个编辑器，现学现卖边查文档边用Qt写了个简单的编辑器供项目使用，编写过程中记录了一些笔记，都是些没有系统性的知识点。</p>\n<ul>\n<li><p>在Qt中固定窗口大小</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//将最大窗口与最小窗口设置大小相同</span><br><span class=\"line\">setMinimumSize(1280, 720);</span><br><span class=\"line\">setMaximumSize(1280, 720);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>QString转char*</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QString name = &quot;test&quot;;</span><br><span class=\"line\">QByteArray ba = name.toLatin1();</span><br><span class=\"line\">char *mm = ba.data();</span><br><span class=\"line\">qDebug(mm);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>输入对话框</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QString name = QInputDialog::getText(this, tr(&quot;title&quot;) ,tr(&quot;Please input&quot;));</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li><p>提示框</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QMessageBox::about(NULL, &quot;Warning&quot;, &quot;Filename cannot be empty!&quot;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>C1083: Cannot open include file: ‘QAxObject’: No such file or directory</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;ActiveQt/QAxWidget&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>浏览目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QString openFilename = QFileDialog::getExistingDirectory(</span><br><span class=\"line\">                this,</span><br><span class=\"line\">                tr(&quot;Open fish table&quot;),</span><br><span class=\"line\">                &quot;&quot;,</span><br><span class=\"line\">                QFileDialog::ShowDirsOnly|QFileDialog::DontResolveSymlinks);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>浏览文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QString openFilename = QFileDialog::getOpenFileName(</span><br><span class=\"line\">                this,</span><br><span class=\"line\">                tr(&quot;Open fish table&quot;),</span><br><span class=\"line\">                &quot;&quot;,</span><br><span class=\"line\">                tr(&quot;Config Files (*.xlsx)&quot;));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建按钮不显示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">auto btn = new QPushButton(this);</span><br><span class=\"line\">btn-&gt;setText(&quot;OK&quot;);</span><br><span class=\"line\">btn-&gt;move(100, 100);</span><br><span class=\"line\">btn-&gt;show();    //一定要调用show()才会显示</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置鼠标样式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setCursor(QCursor(Qt::OpenHandCursor));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建json串</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QJsonObject json;</span><br><span class=\"line\">json.insert(&quot;name&quot;, &quot;test&quot;);</span><br><span class=\"line\">json.insert(&quot;version&quot;, &quot;1.0.1&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">QJsonDocument document;</span><br><span class=\"line\">document.setObject(json);</span><br><span class=\"line\">QByteArray byte_array = document.toJson(QJsonDocument::Compact);</span><br><span class=\"line\">QString json_str(byte_array);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>解析json串</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QJsonParseError error;</span><br><span class=\"line\">QJsonDocument jsonDocument = QJsonDocument::fromJson(json.toUtf8(),&amp;error);</span><br><span class=\"line\">if (error.error == QJsonParseError::NoError) &#123;</span><br><span class=\"line\">    if (jsonDocument.isObject()) &#123;</span><br><span class=\"line\">        QVariantMap result = jsonDocument.toVariant().toMap();</span><br><span class=\"line\">        resPath = result[&quot;resPath&quot;].toString();</span><br><span class=\"line\">        fishTable = result[&quot;fishTable&quot;].toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>发布打包<br>1.首先使用Qt Creator发布Release版本。<br>2.将Release目录下的.exe文件单独copy到一个目录中。<br>3.命令行进入该目录执行your Qt path\\bin\\windeployqt project.exe<br>4.全选生成的依赖文件，打包成rar压缩文件project.rar。<br>5.打开你压缩的project.rar压缩包，点击菜单栏的解压格式，高级自解压选项。<br>6.设置—-解压后运行里写入project.exe（写你要执行的文件）。<br>7.模式—-打钩解包到临时文件夹，安全模式选择全部隐藏。<br>8.更新—-更新方式，解压并更新文件；覆盖凡是，覆盖所有文件。<br>9.文本和图标——可改可不改。<br>10.然后确定就可以生成exe可执行文件了。  </p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>前几天项目需要一个编辑器，现学现卖边查文档边用Qt写了个简单的编辑器供项目使用，编写过程中记录了一些笔记，都是些没有系统性的知识点。</p>\n<ul>\n<li><p>在Qt中固定窗口大小</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//将最大窗口与最小窗口设置大小相同</span><br><span class=\"line\">setMinimumSize(1280, 720);</span><br><span class=\"line\">setMaximumSize(1280, 720);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>QString转char*</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QString name = &quot;test&quot;;</span><br><span class=\"line\">QByteArray ba = name.toLatin1();</span><br><span class=\"line\">char *mm = ba.data();</span><br><span class=\"line\">qDebug(mm);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>输入对话框</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QString name = QInputDialog::getText(this, tr(&quot;title&quot;) ,tr(&quot;Please input&quot;));</span><br></pre></td></tr></table></figure>\n</li>\n</ul>","more":"<ul>\n<li><p>提示框</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QMessageBox::about(NULL, &quot;Warning&quot;, &quot;Filename cannot be empty!&quot;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>C1083: Cannot open include file: ‘QAxObject’: No such file or directory</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;ActiveQt/QAxWidget&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>浏览目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QString openFilename = QFileDialog::getExistingDirectory(</span><br><span class=\"line\">                this,</span><br><span class=\"line\">                tr(&quot;Open fish table&quot;),</span><br><span class=\"line\">                &quot;&quot;,</span><br><span class=\"line\">                QFileDialog::ShowDirsOnly|QFileDialog::DontResolveSymlinks);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>浏览文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QString openFilename = QFileDialog::getOpenFileName(</span><br><span class=\"line\">                this,</span><br><span class=\"line\">                tr(&quot;Open fish table&quot;),</span><br><span class=\"line\">                &quot;&quot;,</span><br><span class=\"line\">                tr(&quot;Config Files (*.xlsx)&quot;));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建按钮不显示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">auto btn = new QPushButton(this);</span><br><span class=\"line\">btn-&gt;setText(&quot;OK&quot;);</span><br><span class=\"line\">btn-&gt;move(100, 100);</span><br><span class=\"line\">btn-&gt;show();    //一定要调用show()才会显示</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置鼠标样式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setCursor(QCursor(Qt::OpenHandCursor));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建json串</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QJsonObject json;</span><br><span class=\"line\">json.insert(&quot;name&quot;, &quot;test&quot;);</span><br><span class=\"line\">json.insert(&quot;version&quot;, &quot;1.0.1&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">QJsonDocument document;</span><br><span class=\"line\">document.setObject(json);</span><br><span class=\"line\">QByteArray byte_array = document.toJson(QJsonDocument::Compact);</span><br><span class=\"line\">QString json_str(byte_array);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>解析json串</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QJsonParseError error;</span><br><span class=\"line\">QJsonDocument jsonDocument = QJsonDocument::fromJson(json.toUtf8(),&amp;error);</span><br><span class=\"line\">if (error.error == QJsonParseError::NoError) &#123;</span><br><span class=\"line\">    if (jsonDocument.isObject()) &#123;</span><br><span class=\"line\">        QVariantMap result = jsonDocument.toVariant().toMap();</span><br><span class=\"line\">        resPath = result[&quot;resPath&quot;].toString();</span><br><span class=\"line\">        fishTable = result[&quot;fishTable&quot;].toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>发布打包<br>1.首先使用Qt Creator发布Release版本。<br>2.将Release目录下的.exe文件单独copy到一个目录中。<br>3.命令行进入该目录执行your Qt path\\bin\\windeployqt project.exe<br>4.全选生成的依赖文件，打包成rar压缩文件project.rar。<br>5.打开你压缩的project.rar压缩包，点击菜单栏的解压格式，高级自解压选项。<br>6.设置—-解压后运行里写入project.exe（写你要执行的文件）。<br>7.模式—-打钩解包到临时文件夹，安全模式选择全部隐藏。<br>8.更新—-更新方式，解压并更新文件；覆盖凡是，覆盖所有文件。<br>9.文本和图标——可改可不改。<br>10.然后确定就可以生成exe可执行文件了。  </p>\n</li>\n</ul>"},{"title":"ExtJS初级教程之ExtJS Tree(二)","date":"2016-11-27T14:07:37.000Z","_content":"上次我将ExtJS Tree的静态树和加载服务器文件生成的树跟大家阐述了一下，今天我把怎么根据从数据库中查出的数据生成树根大家讨论一下。<!--more-->\n\n要想根据数据库生成树首先我们先要准备数据库数据，大概表的结构如下：\n![SQL](/images/tree_2_sql.png)\nsql语句我也为大家准备好了，如下：\n``` sql\n//oracle建表语句  \ncreate table  dept   (  \n    deptId              NUMBER(20)                      not null,  \n    deptName            VARCHAR2(20),  \n    higherDept          NUMBER(20),  \n   constraint PK_DEPT primary key ( deptId )  \n);  \n//测试数据  \ninsert into dept values(23010000,'哈尔滨市公安局',0);  \ninsert into dept values(23011000,'国家安全保卫队',23010000);  \ninsert into dept values(23011001,'国家安全保支队政工科',23010000);  \ninsert into dept values(23011002,'国家安全保支队秘书科',23010000);  \ninsert into dept values(23011003,'国家安全保支队一大队',23011001);  \ninsert into dept values(23011004,'国家安全保支队二大队',23011001);  \ninsert into dept values(23011005,'国家安全保支队三大队',23011004);  \ninsert into dept values(23011006,'国家安全保支队四大队',23011004);  \ninsert into dept values(23011007,'国家安全保支队五大队',23010000);  \ninsert into dept values(23011008,'国家安全保支队六大队',23011002); \n```\n当数据都准备完毕后，首先要写一个vo用来储存我们将要查询出来的数据。这个vo属性的名字有一定的要求，必须遵守以下的命名： private int id;这个是保存数据的主键的，也就是deptId，这个id是生成树结构的关键。然后是 private String text;这个是生成树时显示的内容。最后是private boolean leaf;这个属性也挺关键，它是用来决定该树的节点是否是叶子节点。先不多说，等我们把树写完就了解这些属性的功能了。  \n下面是DAO的查询方法，这个非常简单的用JDBC实现一下就好：\n``` java\npublic class DAO {  \n Connection conn;   \n PreparedStatement pstate;  \n ResultSet rs;  \n public List findAll(){  \n   \n  List list = new ArrayList();  \n  String sql = \" select deptid,deptname from dept \" ;   \n  try{  \n     \n   conn = DBConn.getConn();   \n   pstate = conn.prepareStatement(sql);  \n   rs = pstate.executeQuery();  \n     \n   while(rs.next()){    \n    Tree vo = new Tree();  \n    vo.setId(rs.getInt(\"deptid\"));  \n    vo.setText(rs.getString(\"deptname\"));  \n    vo.setLeaf(true);  \n    list.add(vo);  \n   }   \n  }catch(Exception e){     \n   e.printStackTrace();     \n  }finally{  \n    //释放资源  \n  }  \n  return list;  \n }  \n}\n```\n接着我们要在servlet中将查询出来的List数据转换成json字符串，这样ExtJS才能解析。\n``` java\nprotected void service(HttpServletRequest request, HttpServletResponse response)throws ServletException, IOException {  \n //转码  \n response.setContentType(\"text/html;charset=utf-8\");  \n PrintWriter out = response.getWriter();  \n    \n DAO dao = new DAO();  \n List list = new ArrayList();  \n list = dao.findAll();  \n //转换成json并传递给ExtJS Tree  \n response.getWriter().write(JSONTools.getJsonArray(list).toString());   \n}  \n```\n代码中的JSONTools就是将List转换成json字符串的一个工具类。最后就是关键的页面树的实现部分了：\n``` javascript\nvar tree = new Ext.tree.TreePanel({  \n el:'tree-div',  \n loader: new Ext.tree.TreeLoader({dataUrl:'../TreeNodeServlet'})  \n});  \nvar root = new Ext.tree.AsyncTreeNode({  \n    text: 'harbin',  \n    id:'23010000'  \n});  \ntree.setRootNode(root);  \ntree.render();\n```\n这样将项目部署到服务器上运行就可以看到效果了。\n\n\n","source":"_posts/Tree-2.md","raw":"---\ntitle: ExtJS初级教程之ExtJS Tree(二)\ndate: 2016-11-27 22:07:37\ntags: ExtJS\ncategories: javascript\n---\n上次我将ExtJS Tree的静态树和加载服务器文件生成的树跟大家阐述了一下，今天我把怎么根据从数据库中查出的数据生成树根大家讨论一下。<!--more-->\n\n要想根据数据库生成树首先我们先要准备数据库数据，大概表的结构如下：\n![SQL](/images/tree_2_sql.png)\nsql语句我也为大家准备好了，如下：\n``` sql\n//oracle建表语句  \ncreate table  dept   (  \n    deptId              NUMBER(20)                      not null,  \n    deptName            VARCHAR2(20),  \n    higherDept          NUMBER(20),  \n   constraint PK_DEPT primary key ( deptId )  \n);  \n//测试数据  \ninsert into dept values(23010000,'哈尔滨市公安局',0);  \ninsert into dept values(23011000,'国家安全保卫队',23010000);  \ninsert into dept values(23011001,'国家安全保支队政工科',23010000);  \ninsert into dept values(23011002,'国家安全保支队秘书科',23010000);  \ninsert into dept values(23011003,'国家安全保支队一大队',23011001);  \ninsert into dept values(23011004,'国家安全保支队二大队',23011001);  \ninsert into dept values(23011005,'国家安全保支队三大队',23011004);  \ninsert into dept values(23011006,'国家安全保支队四大队',23011004);  \ninsert into dept values(23011007,'国家安全保支队五大队',23010000);  \ninsert into dept values(23011008,'国家安全保支队六大队',23011002); \n```\n当数据都准备完毕后，首先要写一个vo用来储存我们将要查询出来的数据。这个vo属性的名字有一定的要求，必须遵守以下的命名： private int id;这个是保存数据的主键的，也就是deptId，这个id是生成树结构的关键。然后是 private String text;这个是生成树时显示的内容。最后是private boolean leaf;这个属性也挺关键，它是用来决定该树的节点是否是叶子节点。先不多说，等我们把树写完就了解这些属性的功能了。  \n下面是DAO的查询方法，这个非常简单的用JDBC实现一下就好：\n``` java\npublic class DAO {  \n Connection conn;   \n PreparedStatement pstate;  \n ResultSet rs;  \n public List findAll(){  \n   \n  List list = new ArrayList();  \n  String sql = \" select deptid,deptname from dept \" ;   \n  try{  \n     \n   conn = DBConn.getConn();   \n   pstate = conn.prepareStatement(sql);  \n   rs = pstate.executeQuery();  \n     \n   while(rs.next()){    \n    Tree vo = new Tree();  \n    vo.setId(rs.getInt(\"deptid\"));  \n    vo.setText(rs.getString(\"deptname\"));  \n    vo.setLeaf(true);  \n    list.add(vo);  \n   }   \n  }catch(Exception e){     \n   e.printStackTrace();     \n  }finally{  \n    //释放资源  \n  }  \n  return list;  \n }  \n}\n```\n接着我们要在servlet中将查询出来的List数据转换成json字符串，这样ExtJS才能解析。\n``` java\nprotected void service(HttpServletRequest request, HttpServletResponse response)throws ServletException, IOException {  \n //转码  \n response.setContentType(\"text/html;charset=utf-8\");  \n PrintWriter out = response.getWriter();  \n    \n DAO dao = new DAO();  \n List list = new ArrayList();  \n list = dao.findAll();  \n //转换成json并传递给ExtJS Tree  \n response.getWriter().write(JSONTools.getJsonArray(list).toString());   \n}  \n```\n代码中的JSONTools就是将List转换成json字符串的一个工具类。最后就是关键的页面树的实现部分了：\n``` javascript\nvar tree = new Ext.tree.TreePanel({  \n el:'tree-div',  \n loader: new Ext.tree.TreeLoader({dataUrl:'../TreeNodeServlet'})  \n});  \nvar root = new Ext.tree.AsyncTreeNode({  \n    text: 'harbin',  \n    id:'23010000'  \n});  \ntree.setRootNode(root);  \ntree.render();\n```\n这样将项目部署到服务器上运行就可以看到效果了。\n\n\n","slug":"Tree-2","published":1,"updated":"2019-07-01T12:35:47.381Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjycv1m3h000bok9mx61lo19d","content":"<p>上次我将ExtJS Tree的静态树和加载服务器文件生成的树跟大家阐述了一下，今天我把怎么根据从数据库中查出的数据生成树根大家讨论一下。<a id=\"more\"></a></p>\n<p>要想根据数据库生成树首先我们先要准备数据库数据，大概表的结构如下：<br><img src=\"/images/tree_2_sql.png\" alt=\"SQL\"><br>sql语句我也为大家准备好了，如下：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//oracle建表语句  </span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span>  dept   (  </span><br><span class=\"line\">    deptId              <span class=\"built_in\">NUMBER</span>(<span class=\"number\">20</span>)                      <span class=\"keyword\">not</span> <span class=\"literal\">null</span>,  </span><br><span class=\"line\">    deptName            VARCHAR2(<span class=\"number\">20</span>),  </span><br><span class=\"line\">    higherDept          <span class=\"built_in\">NUMBER</span>(<span class=\"number\">20</span>),  </span><br><span class=\"line\">   <span class=\"keyword\">constraint</span> PK_DEPT primary <span class=\"keyword\">key</span> ( deptId )  </span><br><span class=\"line\">);  </span><br><span class=\"line\">//测试数据  </span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">23010000</span>,<span class=\"string\">'哈尔滨市公安局'</span>,<span class=\"number\">0</span>);  </span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">23011000</span>,<span class=\"string\">'国家安全保卫队'</span>,<span class=\"number\">23010000</span>);  </span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">23011001</span>,<span class=\"string\">'国家安全保支队政工科'</span>,<span class=\"number\">23010000</span>);  </span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">23011002</span>,<span class=\"string\">'国家安全保支队秘书科'</span>,<span class=\"number\">23010000</span>);  </span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">23011003</span>,<span class=\"string\">'国家安全保支队一大队'</span>,<span class=\"number\">23011001</span>);  </span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">23011004</span>,<span class=\"string\">'国家安全保支队二大队'</span>,<span class=\"number\">23011001</span>);  </span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">23011005</span>,<span class=\"string\">'国家安全保支队三大队'</span>,<span class=\"number\">23011004</span>);  </span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">23011006</span>,<span class=\"string\">'国家安全保支队四大队'</span>,<span class=\"number\">23011004</span>);  </span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">23011007</span>,<span class=\"string\">'国家安全保支队五大队'</span>,<span class=\"number\">23010000</span>);  </span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">23011008</span>,<span class=\"string\">'国家安全保支队六大队'</span>,<span class=\"number\">23011002</span>);</span><br></pre></td></tr></table></figure></p>\n<p>当数据都准备完毕后，首先要写一个vo用来储存我们将要查询出来的数据。这个vo属性的名字有一定的要求，必须遵守以下的命名： private int id;这个是保存数据的主键的，也就是deptId，这个id是生成树结构的关键。然后是 private String text;这个是生成树时显示的内容。最后是private boolean leaf;这个属性也挺关键，它是用来决定该树的节点是否是叶子节点。先不多说，等我们把树写完就了解这些属性的功能了。<br>下面是DAO的查询方法，这个非常简单的用JDBC实现一下就好：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DAO</span> </span>&#123;  </span><br><span class=\"line\"> Connection conn;   </span><br><span class=\"line\"> PreparedStatement pstate;  </span><br><span class=\"line\"> ResultSet rs;  </span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> List <span class=\"title\">findAll</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">   </span><br><span class=\"line\">  List list = <span class=\"keyword\">new</span> ArrayList();  </span><br><span class=\"line\">  String sql = <span class=\"string\">\" select deptid,deptname from dept \"</span> ;   </span><br><span class=\"line\">  <span class=\"keyword\">try</span>&#123;  </span><br><span class=\"line\">     </span><br><span class=\"line\">   conn = DBConn.getConn();   </span><br><span class=\"line\">   pstate = conn.prepareStatement(sql);  </span><br><span class=\"line\">   rs = pstate.executeQuery();  </span><br><span class=\"line\">     </span><br><span class=\"line\">   <span class=\"keyword\">while</span>(rs.next())&#123;    </span><br><span class=\"line\">    Tree vo = <span class=\"keyword\">new</span> Tree();  </span><br><span class=\"line\">    vo.setId(rs.getInt(<span class=\"string\">\"deptid\"</span>));  </span><br><span class=\"line\">    vo.setText(rs.getString(<span class=\"string\">\"deptname\"</span>));  </span><br><span class=\"line\">    vo.setLeaf(<span class=\"keyword\">true</span>);  </span><br><span class=\"line\">    list.add(vo);  </span><br><span class=\"line\">   &#125;   </span><br><span class=\"line\">  &#125;<span class=\"keyword\">catch</span>(Exception e)&#123;     </span><br><span class=\"line\">   e.printStackTrace();     </span><br><span class=\"line\">  &#125;<span class=\"keyword\">finally</span>&#123;  </span><br><span class=\"line\">    <span class=\"comment\">//释放资源  </span></span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> list;  </span><br><span class=\"line\"> &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>接着我们要在servlet中将查询出来的List数据转换成json字符串，这样ExtJS才能解析。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span><span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;  </span><br><span class=\"line\"> <span class=\"comment\">//转码  </span></span><br><span class=\"line\"> response.setContentType(<span class=\"string\">\"text/html;charset=utf-8\"</span>);  </span><br><span class=\"line\"> PrintWriter out = response.getWriter();  </span><br><span class=\"line\">    </span><br><span class=\"line\"> DAO dao = <span class=\"keyword\">new</span> DAO();  </span><br><span class=\"line\"> List list = <span class=\"keyword\">new</span> ArrayList();  </span><br><span class=\"line\"> list = dao.findAll();  </span><br><span class=\"line\"> <span class=\"comment\">//转换成json并传递给ExtJS Tree  </span></span><br><span class=\"line\"> response.getWriter().write(JSONTools.getJsonArray(list).toString());   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>代码中的JSONTools就是将List转换成json字符串的一个工具类。最后就是关键的页面树的实现部分了：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </span><br><span class=\"line\"> el:<span class=\"string\">'tree-div'</span>,  </span><br><span class=\"line\"> loader: <span class=\"keyword\">new</span> Ext.tree.TreeLoader(&#123;<span class=\"attr\">dataUrl</span>:<span class=\"string\">'../TreeNodeServlet'</span>&#125;)  </span><br><span class=\"line\">&#125;);  </span><br><span class=\"line\"><span class=\"keyword\">var</span> root = <span class=\"keyword\">new</span> Ext.tree.AsyncTreeNode(&#123;  </span><br><span class=\"line\">    text: <span class=\"string\">'harbin'</span>,  </span><br><span class=\"line\">    id:<span class=\"string\">'23010000'</span>  </span><br><span class=\"line\">&#125;);  </span><br><span class=\"line\">tree.setRootNode(root);  </span><br><span class=\"line\">tree.render();</span><br></pre></td></tr></table></figure></p>\n<p>这样将项目部署到服务器上运行就可以看到效果了。</p>\n","site":{"data":{}},"excerpt":"<p>上次我将ExtJS Tree的静态树和加载服务器文件生成的树跟大家阐述了一下，今天我把怎么根据从数据库中查出的数据生成树根大家讨论一下。","more":"</p>\n<p>要想根据数据库生成树首先我们先要准备数据库数据，大概表的结构如下：<br><img src=\"/images/tree_2_sql.png\" alt=\"SQL\"><br>sql语句我也为大家准备好了，如下：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//oracle建表语句  </span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span>  dept   (  </span><br><span class=\"line\">    deptId              <span class=\"built_in\">NUMBER</span>(<span class=\"number\">20</span>)                      <span class=\"keyword\">not</span> <span class=\"literal\">null</span>,  </span><br><span class=\"line\">    deptName            VARCHAR2(<span class=\"number\">20</span>),  </span><br><span class=\"line\">    higherDept          <span class=\"built_in\">NUMBER</span>(<span class=\"number\">20</span>),  </span><br><span class=\"line\">   <span class=\"keyword\">constraint</span> PK_DEPT primary <span class=\"keyword\">key</span> ( deptId )  </span><br><span class=\"line\">);  </span><br><span class=\"line\">//测试数据  </span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">23010000</span>,<span class=\"string\">'哈尔滨市公安局'</span>,<span class=\"number\">0</span>);  </span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">23011000</span>,<span class=\"string\">'国家安全保卫队'</span>,<span class=\"number\">23010000</span>);  </span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">23011001</span>,<span class=\"string\">'国家安全保支队政工科'</span>,<span class=\"number\">23010000</span>);  </span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">23011002</span>,<span class=\"string\">'国家安全保支队秘书科'</span>,<span class=\"number\">23010000</span>);  </span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">23011003</span>,<span class=\"string\">'国家安全保支队一大队'</span>,<span class=\"number\">23011001</span>);  </span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">23011004</span>,<span class=\"string\">'国家安全保支队二大队'</span>,<span class=\"number\">23011001</span>);  </span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">23011005</span>,<span class=\"string\">'国家安全保支队三大队'</span>,<span class=\"number\">23011004</span>);  </span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">23011006</span>,<span class=\"string\">'国家安全保支队四大队'</span>,<span class=\"number\">23011004</span>);  </span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">23011007</span>,<span class=\"string\">'国家安全保支队五大队'</span>,<span class=\"number\">23010000</span>);  </span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">23011008</span>,<span class=\"string\">'国家安全保支队六大队'</span>,<span class=\"number\">23011002</span>);</span><br></pre></td></tr></table></figure></p>\n<p>当数据都准备完毕后，首先要写一个vo用来储存我们将要查询出来的数据。这个vo属性的名字有一定的要求，必须遵守以下的命名： private int id;这个是保存数据的主键的，也就是deptId，这个id是生成树结构的关键。然后是 private String text;这个是生成树时显示的内容。最后是private boolean leaf;这个属性也挺关键，它是用来决定该树的节点是否是叶子节点。先不多说，等我们把树写完就了解这些属性的功能了。<br>下面是DAO的查询方法，这个非常简单的用JDBC实现一下就好：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DAO</span> </span>&#123;  </span><br><span class=\"line\"> Connection conn;   </span><br><span class=\"line\"> PreparedStatement pstate;  </span><br><span class=\"line\"> ResultSet rs;  </span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> List <span class=\"title\">findAll</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">   </span><br><span class=\"line\">  List list = <span class=\"keyword\">new</span> ArrayList();  </span><br><span class=\"line\">  String sql = <span class=\"string\">\" select deptid,deptname from dept \"</span> ;   </span><br><span class=\"line\">  <span class=\"keyword\">try</span>&#123;  </span><br><span class=\"line\">     </span><br><span class=\"line\">   conn = DBConn.getConn();   </span><br><span class=\"line\">   pstate = conn.prepareStatement(sql);  </span><br><span class=\"line\">   rs = pstate.executeQuery();  </span><br><span class=\"line\">     </span><br><span class=\"line\">   <span class=\"keyword\">while</span>(rs.next())&#123;    </span><br><span class=\"line\">    Tree vo = <span class=\"keyword\">new</span> Tree();  </span><br><span class=\"line\">    vo.setId(rs.getInt(<span class=\"string\">\"deptid\"</span>));  </span><br><span class=\"line\">    vo.setText(rs.getString(<span class=\"string\">\"deptname\"</span>));  </span><br><span class=\"line\">    vo.setLeaf(<span class=\"keyword\">true</span>);  </span><br><span class=\"line\">    list.add(vo);  </span><br><span class=\"line\">   &#125;   </span><br><span class=\"line\">  &#125;<span class=\"keyword\">catch</span>(Exception e)&#123;     </span><br><span class=\"line\">   e.printStackTrace();     </span><br><span class=\"line\">  &#125;<span class=\"keyword\">finally</span>&#123;  </span><br><span class=\"line\">    <span class=\"comment\">//释放资源  </span></span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> list;  </span><br><span class=\"line\"> &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>接着我们要在servlet中将查询出来的List数据转换成json字符串，这样ExtJS才能解析。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span><span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;  </span><br><span class=\"line\"> <span class=\"comment\">//转码  </span></span><br><span class=\"line\"> response.setContentType(<span class=\"string\">\"text/html;charset=utf-8\"</span>);  </span><br><span class=\"line\"> PrintWriter out = response.getWriter();  </span><br><span class=\"line\">    </span><br><span class=\"line\"> DAO dao = <span class=\"keyword\">new</span> DAO();  </span><br><span class=\"line\"> List list = <span class=\"keyword\">new</span> ArrayList();  </span><br><span class=\"line\"> list = dao.findAll();  </span><br><span class=\"line\"> <span class=\"comment\">//转换成json并传递给ExtJS Tree  </span></span><br><span class=\"line\"> response.getWriter().write(JSONTools.getJsonArray(list).toString());   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>代码中的JSONTools就是将List转换成json字符串的一个工具类。最后就是关键的页面树的实现部分了：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </span><br><span class=\"line\"> el:<span class=\"string\">'tree-div'</span>,  </span><br><span class=\"line\"> loader: <span class=\"keyword\">new</span> Ext.tree.TreeLoader(&#123;<span class=\"attr\">dataUrl</span>:<span class=\"string\">'../TreeNodeServlet'</span>&#125;)  </span><br><span class=\"line\">&#125;);  </span><br><span class=\"line\"><span class=\"keyword\">var</span> root = <span class=\"keyword\">new</span> Ext.tree.AsyncTreeNode(&#123;  </span><br><span class=\"line\">    text: <span class=\"string\">'harbin'</span>,  </span><br><span class=\"line\">    id:<span class=\"string\">'23010000'</span>  </span><br><span class=\"line\">&#125;);  </span><br><span class=\"line\">tree.setRootNode(root);  </span><br><span class=\"line\">tree.render();</span><br></pre></td></tr></table></figure></p>\n<p>这样将项目部署到服务器上运行就可以看到效果了。</p>"},{"title":"Java多线程实现生产者与消费者","date":"2016-11-27T12:32:32.000Z","_content":"生产者与消费者问题是指创建一组“生产者”线程和一组“消费者”线程，让他们进行同步互斥的运行，生产者生产一个产品，消费者就消费掉一个产品，下面我就用Java的多线程来实现这个课题。<!--more-->本例子的ChuShi代表生产者，XiaoFei代表消费者。首先是生产者厨师的代码：\n``` java\npackage thread;  \npublic class ChuShi extends Thread{  \n      \n    private GongNeng g;  \n    public ChuShi(GongNeng g){    \n        this.g = g;  \n    }  \n      \n    public void run(){  \n        for(;;){  \n              \n            g.lao();  \n              \n        }  \n    }  \n} \n```\n然后是消费者的代码：  \n``` java\npackage thread;  \npublic class XiaoFei extends Thread{  \n      \n    private GongNeng g;  \n      \n    public XiaoFei(GongNeng g){  \n          \n        this.g = g;  \n          \n    }  \n      \n    public void run(){  \n        for(;;){  \n                  \n            g.chi();  \n              \n        }  \n    }  \n}\n```\n接着是封装了生产者的生产方法和消费者的消费方法的类，该类中的方法要使用synchronized关键字，就可以使run方法同步，也就是说，对于同一个Java类的对象实例，run方法同时只能被一个线程调用，并当前的run执行完后，才能被其他的线程调用。需要注意的是每个线程run()方法调用的synchronized修饰的方法必须是一个实例的方法才能保证同步，所以这个里将生产者和消费者的功能封装在一个实例中，在将他们的实例分别传给生产者和消费者，这样他们就能够同步了，下面是同步的方法代码：\n``` java\npackage thread;  \npublic class GongNeng {  \n    private Bing b;  \n      \n    public GongNeng(Bing b){      \n        this.b = b;   \n    }  \n      \n    public synchronized void lao(){  \n          \n        if(b.getBing()<10){  \n              \n            try {  \n                Thread.sleep(1500);  \n            } catch (InterruptedException e) {  \n                // TODO Auto-generated catch block  \n                e.printStackTrace();  \n            }  \n              \n            System.out.println(Thread.currentThread()+  \n                  \n            \":厨师烙了一张饼，盘里还剩\"+(b.getBing()+1)+\"张饼\");  \n              \n            b.setBing(b.getBing()+1);  \n        }  \n    }  \n      \n    public synchronized void chi(){  \n        if(b.getBing()>0){  \n              \n            try {  \n                Thread.sleep(2000);  \n            } catch (InterruptedException e) {  \n                // TODO Auto-generated catch block  \n                e.printStackTrace();  \n            }  \n            System.out.println(Thread.currentThread()+  \n                  \n            \":消费者吃了一张饼，盘里还剩\"+(b.getBing()-1)+\"张饼\");  \n              \n            b.setBing(b.getBing()-1);  \n              \n        }  \n    }  \n} \n```\n还有他们对一个消费品进行同步的操作，在这里我们用的是饼：\n``` java\npackage thread;  \npublic class Bing {  \n    private int bing = 10;  \n    public int getBing() {  \n        return bing;  \n    }  \n    public void setBing(int bing) {  \n        this.bing = bing;  \n    }  \n      \n}\n```\n下面是主入口方法进行测试：\n``` java\npackage thread;  \npublic class Test {  \n    public static void main(String[] args) {  \n          \n        //创建饼的实例  \n        Bing b = new Bing();  \n        //创建同步的吃饼和烙饼实例  \n        GongNeng g = new GongNeng(b);  \n        //创建线程两个消费者两个生产者  \n        ChuShi c1 = new ChuShi(g);  \n        ChuShi c2 = new ChuShi(g);  \n        XiaoFei x1 = new XiaoFei(g);  \n        XiaoFei x2 = new XiaoFei(g);  \n          \n        //启动线程  \n        c1.start();  \n        c2.start();  \n        x1.start();  \n        x2.start();  \n    }  \n} \n```\n 这个例子就模拟了生产与消费的问题。\n","source":"_posts/Java多线程实现生产者与消费者.md","raw":"---\ntitle: Java多线程实现生产者与消费者\ndate: 2016-11-27 20:32:32\ntags: 多线程\ncategories: java\n---\n生产者与消费者问题是指创建一组“生产者”线程和一组“消费者”线程，让他们进行同步互斥的运行，生产者生产一个产品，消费者就消费掉一个产品，下面我就用Java的多线程来实现这个课题。<!--more-->本例子的ChuShi代表生产者，XiaoFei代表消费者。首先是生产者厨师的代码：\n``` java\npackage thread;  \npublic class ChuShi extends Thread{  \n      \n    private GongNeng g;  \n    public ChuShi(GongNeng g){    \n        this.g = g;  \n    }  \n      \n    public void run(){  \n        for(;;){  \n              \n            g.lao();  \n              \n        }  \n    }  \n} \n```\n然后是消费者的代码：  \n``` java\npackage thread;  \npublic class XiaoFei extends Thread{  \n      \n    private GongNeng g;  \n      \n    public XiaoFei(GongNeng g){  \n          \n        this.g = g;  \n          \n    }  \n      \n    public void run(){  \n        for(;;){  \n                  \n            g.chi();  \n              \n        }  \n    }  \n}\n```\n接着是封装了生产者的生产方法和消费者的消费方法的类，该类中的方法要使用synchronized关键字，就可以使run方法同步，也就是说，对于同一个Java类的对象实例，run方法同时只能被一个线程调用，并当前的run执行完后，才能被其他的线程调用。需要注意的是每个线程run()方法调用的synchronized修饰的方法必须是一个实例的方法才能保证同步，所以这个里将生产者和消费者的功能封装在一个实例中，在将他们的实例分别传给生产者和消费者，这样他们就能够同步了，下面是同步的方法代码：\n``` java\npackage thread;  \npublic class GongNeng {  \n    private Bing b;  \n      \n    public GongNeng(Bing b){      \n        this.b = b;   \n    }  \n      \n    public synchronized void lao(){  \n          \n        if(b.getBing()<10){  \n              \n            try {  \n                Thread.sleep(1500);  \n            } catch (InterruptedException e) {  \n                // TODO Auto-generated catch block  \n                e.printStackTrace();  \n            }  \n              \n            System.out.println(Thread.currentThread()+  \n                  \n            \":厨师烙了一张饼，盘里还剩\"+(b.getBing()+1)+\"张饼\");  \n              \n            b.setBing(b.getBing()+1);  \n        }  \n    }  \n      \n    public synchronized void chi(){  \n        if(b.getBing()>0){  \n              \n            try {  \n                Thread.sleep(2000);  \n            } catch (InterruptedException e) {  \n                // TODO Auto-generated catch block  \n                e.printStackTrace();  \n            }  \n            System.out.println(Thread.currentThread()+  \n                  \n            \":消费者吃了一张饼，盘里还剩\"+(b.getBing()-1)+\"张饼\");  \n              \n            b.setBing(b.getBing()-1);  \n              \n        }  \n    }  \n} \n```\n还有他们对一个消费品进行同步的操作，在这里我们用的是饼：\n``` java\npackage thread;  \npublic class Bing {  \n    private int bing = 10;  \n    public int getBing() {  \n        return bing;  \n    }  \n    public void setBing(int bing) {  \n        this.bing = bing;  \n    }  \n      \n}\n```\n下面是主入口方法进行测试：\n``` java\npackage thread;  \npublic class Test {  \n    public static void main(String[] args) {  \n          \n        //创建饼的实例  \n        Bing b = new Bing();  \n        //创建同步的吃饼和烙饼实例  \n        GongNeng g = new GongNeng(b);  \n        //创建线程两个消费者两个生产者  \n        ChuShi c1 = new ChuShi(g);  \n        ChuShi c2 = new ChuShi(g);  \n        XiaoFei x1 = new XiaoFei(g);  \n        XiaoFei x2 = new XiaoFei(g);  \n          \n        //启动线程  \n        c1.start();  \n        c2.start();  \n        x1.start();  \n        x2.start();  \n    }  \n} \n```\n 这个例子就模拟了生产与消费的问题。\n","slug":"Java多线程实现生产者与消费者","published":1,"updated":"2019-07-01T12:35:47.380Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjycv1m3i000cok9mxpd1p75h","content":"<p>生产者与消费者问题是指创建一组“生产者”线程和一组“消费者”线程，让他们进行同步互斥的运行，生产者生产一个产品，消费者就消费掉一个产品，下面我就用Java的多线程来实现这个课题。<a id=\"more\"></a>本例子的ChuShi代表生产者，XiaoFei代表消费者。首先是生产者厨师的代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> thread;  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChuShi</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"keyword\">private</span> GongNeng g;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ChuShi</span><span class=\"params\">(GongNeng g)</span></span>&#123;    </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.g = g;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(;;)&#123;  </span><br><span class=\"line\">              </span><br><span class=\"line\">            g.lao();  </span><br><span class=\"line\">              </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后是消费者的代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> thread;  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XiaoFei</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"keyword\">private</span> GongNeng g;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">XiaoFei</span><span class=\"params\">(GongNeng g)</span></span>&#123;  </span><br><span class=\"line\">          </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.g = g;  </span><br><span class=\"line\">          </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(;;)&#123;  </span><br><span class=\"line\">                  </span><br><span class=\"line\">            g.chi();  </span><br><span class=\"line\">              </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>接着是封装了生产者的生产方法和消费者的消费方法的类，该类中的方法要使用synchronized关键字，就可以使run方法同步，也就是说，对于同一个Java类的对象实例，run方法同时只能被一个线程调用，并当前的run执行完后，才能被其他的线程调用。需要注意的是每个线程run()方法调用的synchronized修饰的方法必须是一个实例的方法才能保证同步，所以这个里将生产者和消费者的功能封装在一个实例中，在将他们的实例分别传给生产者和消费者，这样他们就能够同步了，下面是同步的方法代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> thread;  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GongNeng</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Bing b;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">GongNeng</span><span class=\"params\">(Bing b)</span></span>&#123;      </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.b = b;   </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">lao</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">          </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(b.getBing()&lt;<span class=\"number\">10</span>)&#123;  </span><br><span class=\"line\">              </span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;  </span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">1500</span>);  </span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;  </span><br><span class=\"line\">                <span class=\"comment\">// TODO Auto-generated catch block  </span></span><br><span class=\"line\">                e.printStackTrace();  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">              </span><br><span class=\"line\">            System.out.println(Thread.currentThread()+  </span><br><span class=\"line\">                  </span><br><span class=\"line\">            <span class=\"string\">\":厨师烙了一张饼，盘里还剩\"</span>+(b.getBing()+<span class=\"number\">1</span>)+<span class=\"string\">\"张饼\"</span>);  </span><br><span class=\"line\">              </span><br><span class=\"line\">            b.setBing(b.getBing()+<span class=\"number\">1</span>);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">chi</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(b.getBing()&gt;<span class=\"number\">0</span>)&#123;  </span><br><span class=\"line\">              </span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;  </span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">2000</span>);  </span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;  </span><br><span class=\"line\">                <span class=\"comment\">// TODO Auto-generated catch block  </span></span><br><span class=\"line\">                e.printStackTrace();  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            System.out.println(Thread.currentThread()+  </span><br><span class=\"line\">                  </span><br><span class=\"line\">            <span class=\"string\">\":消费者吃了一张饼，盘里还剩\"</span>+(b.getBing()-<span class=\"number\">1</span>)+<span class=\"string\">\"张饼\"</span>);  </span><br><span class=\"line\">              </span><br><span class=\"line\">            b.setBing(b.getBing()-<span class=\"number\">1</span>);  </span><br><span class=\"line\">              </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>还有他们对一个消费品进行同步的操作，在这里我们用的是饼：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> thread;  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bing</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> bing = <span class=\"number\">10</span>;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getBing</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> bing;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setBing</span><span class=\"params\">(<span class=\"keyword\">int</span> bing)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.bing = bing;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">      </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>下面是主入口方法进行测试：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> thread;  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">          </span><br><span class=\"line\">        <span class=\"comment\">//创建饼的实例  </span></span><br><span class=\"line\">        Bing b = <span class=\"keyword\">new</span> Bing();  </span><br><span class=\"line\">        <span class=\"comment\">//创建同步的吃饼和烙饼实例  </span></span><br><span class=\"line\">        GongNeng g = <span class=\"keyword\">new</span> GongNeng(b);  </span><br><span class=\"line\">        <span class=\"comment\">//创建线程两个消费者两个生产者  </span></span><br><span class=\"line\">        ChuShi c1 = <span class=\"keyword\">new</span> ChuShi(g);  </span><br><span class=\"line\">        ChuShi c2 = <span class=\"keyword\">new</span> ChuShi(g);  </span><br><span class=\"line\">        XiaoFei x1 = <span class=\"keyword\">new</span> XiaoFei(g);  </span><br><span class=\"line\">        XiaoFei x2 = <span class=\"keyword\">new</span> XiaoFei(g);  </span><br><span class=\"line\">          </span><br><span class=\"line\">        <span class=\"comment\">//启动线程  </span></span><br><span class=\"line\">        c1.start();  </span><br><span class=\"line\">        c2.start();  </span><br><span class=\"line\">        x1.start();  </span><br><span class=\"line\">        x2.start();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p> 这个例子就模拟了生产与消费的问题。</p>\n","site":{"data":{}},"excerpt":"<p>生产者与消费者问题是指创建一组“生产者”线程和一组“消费者”线程，让他们进行同步互斥的运行，生产者生产一个产品，消费者就消费掉一个产品，下面我就用Java的多线程来实现这个课题。","more":"本例子的ChuShi代表生产者，XiaoFei代表消费者。首先是生产者厨师的代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> thread;  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChuShi</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"keyword\">private</span> GongNeng g;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ChuShi</span><span class=\"params\">(GongNeng g)</span></span>&#123;    </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.g = g;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(;;)&#123;  </span><br><span class=\"line\">              </span><br><span class=\"line\">            g.lao();  </span><br><span class=\"line\">              </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后是消费者的代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> thread;  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XiaoFei</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"keyword\">private</span> GongNeng g;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">XiaoFei</span><span class=\"params\">(GongNeng g)</span></span>&#123;  </span><br><span class=\"line\">          </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.g = g;  </span><br><span class=\"line\">          </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(;;)&#123;  </span><br><span class=\"line\">                  </span><br><span class=\"line\">            g.chi();  </span><br><span class=\"line\">              </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>接着是封装了生产者的生产方法和消费者的消费方法的类，该类中的方法要使用synchronized关键字，就可以使run方法同步，也就是说，对于同一个Java类的对象实例，run方法同时只能被一个线程调用，并当前的run执行完后，才能被其他的线程调用。需要注意的是每个线程run()方法调用的synchronized修饰的方法必须是一个实例的方法才能保证同步，所以这个里将生产者和消费者的功能封装在一个实例中，在将他们的实例分别传给生产者和消费者，这样他们就能够同步了，下面是同步的方法代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> thread;  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GongNeng</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Bing b;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">GongNeng</span><span class=\"params\">(Bing b)</span></span>&#123;      </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.b = b;   </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">lao</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">          </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(b.getBing()&lt;<span class=\"number\">10</span>)&#123;  </span><br><span class=\"line\">              </span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;  </span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">1500</span>);  </span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;  </span><br><span class=\"line\">                <span class=\"comment\">// TODO Auto-generated catch block  </span></span><br><span class=\"line\">                e.printStackTrace();  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">              </span><br><span class=\"line\">            System.out.println(Thread.currentThread()+  </span><br><span class=\"line\">                  </span><br><span class=\"line\">            <span class=\"string\">\":厨师烙了一张饼，盘里还剩\"</span>+(b.getBing()+<span class=\"number\">1</span>)+<span class=\"string\">\"张饼\"</span>);  </span><br><span class=\"line\">              </span><br><span class=\"line\">            b.setBing(b.getBing()+<span class=\"number\">1</span>);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">chi</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(b.getBing()&gt;<span class=\"number\">0</span>)&#123;  </span><br><span class=\"line\">              </span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;  </span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">2000</span>);  </span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;  </span><br><span class=\"line\">                <span class=\"comment\">// TODO Auto-generated catch block  </span></span><br><span class=\"line\">                e.printStackTrace();  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            System.out.println(Thread.currentThread()+  </span><br><span class=\"line\">                  </span><br><span class=\"line\">            <span class=\"string\">\":消费者吃了一张饼，盘里还剩\"</span>+(b.getBing()-<span class=\"number\">1</span>)+<span class=\"string\">\"张饼\"</span>);  </span><br><span class=\"line\">              </span><br><span class=\"line\">            b.setBing(b.getBing()-<span class=\"number\">1</span>);  </span><br><span class=\"line\">              </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>还有他们对一个消费品进行同步的操作，在这里我们用的是饼：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> thread;  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bing</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> bing = <span class=\"number\">10</span>;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getBing</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> bing;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setBing</span><span class=\"params\">(<span class=\"keyword\">int</span> bing)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.bing = bing;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">      </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>下面是主入口方法进行测试：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> thread;  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">          </span><br><span class=\"line\">        <span class=\"comment\">//创建饼的实例  </span></span><br><span class=\"line\">        Bing b = <span class=\"keyword\">new</span> Bing();  </span><br><span class=\"line\">        <span class=\"comment\">//创建同步的吃饼和烙饼实例  </span></span><br><span class=\"line\">        GongNeng g = <span class=\"keyword\">new</span> GongNeng(b);  </span><br><span class=\"line\">        <span class=\"comment\">//创建线程两个消费者两个生产者  </span></span><br><span class=\"line\">        ChuShi c1 = <span class=\"keyword\">new</span> ChuShi(g);  </span><br><span class=\"line\">        ChuShi c2 = <span class=\"keyword\">new</span> ChuShi(g);  </span><br><span class=\"line\">        XiaoFei x1 = <span class=\"keyword\">new</span> XiaoFei(g);  </span><br><span class=\"line\">        XiaoFei x2 = <span class=\"keyword\">new</span> XiaoFei(g);  </span><br><span class=\"line\">          </span><br><span class=\"line\">        <span class=\"comment\">//启动线程  </span></span><br><span class=\"line\">        c1.start();  </span><br><span class=\"line\">        c2.start();  </span><br><span class=\"line\">        x1.start();  </span><br><span class=\"line\">        x2.start();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p> 这个例子就模拟了生产与消费的问题。</p>"},{"title":"xtJS初级教程之ExtJS Tree(三)","date":"2016-11-27T14:33:05.000Z","_content":"前两次我介绍了静态树和根据数据库加载的数据生成的树，今天我就把ExtJS Tree这剩的一些主要的东西说一说，剩下的主要就是：树的事件处理、可编辑的树和可拖拽的树，最后再实现一下异步加载的树。<!--more-->\n## 树的事件处理\n树的事件主要有：1、展开节点事件。2、折叠节点事件。3、单击节点事件。4、双击节点事件。下面我们以一个静态树来测试树的主要事件。\n``` javascript\n//普通的静态树  \nvar tree = new Ext.tree.TreePanel({  \n el:'tree-div'  \n});  \n//创建根节点  \nvar root = new Ext.tree.TreeNode({text:'AllShengFen'});  \n//创建父节点  \nvar shengfen1 = new Ext.tree.TreeNode({text:'HeiLongJiang'});  \nvar shengfen2 = new Ext.tree.TreeNode({text:'LiaoNing'});  \nvar city1 = new Ext.tree.TreeNode({text:'harbin'});  \nvar city2 = new Ext.tree.TreeNode({text:'daqiang'});  \nvar city3 = new Ext.tree.TreeNode({text:'shenyang'});  \nvar city4 = new Ext.tree.TreeNode({text:'dalian'});  \n//将子节点添加到父节点中  \nshengfen1.appendChild(city1);  \nshengfen1.appendChild(city2);  \nshengfen2.appendChild(city3);  \nshengfen2.appendChild(city4);  \n//将子节点添加到父节点中  \nroot.appendChild(shengfen1);  \nroot.appendChild(shengfen2);  \n//将root节点设置为根节点  \ntree.setRootNode(root);  \n//使这棵树显示在div标签中  \ntree.render();  \n//展开节点事件  \ntree.on(\"expandnode\",function(node){  \n alert(\"[\"+node.text+\"]open\");  \n});  \n//折叠节点事件  \ntree.on(\"collapsenode\",function(node){  \n alert(\"[\"+node.text+\"]close\");  \n});  \n//单击节点事件  \ntree.on(\"click\",function(node){  \n alert(\"[\"+node.text+\"]click\");  \n});  \n//双击节点事件  \ntree.on(\"dblclick\",function(node){  \n alert(\"[\"+node.text+\"]double click\");  \n}); \n```\n由于单击和双击有冲突，所以我们在测试的时候可以先注释掉一个，单独测试。\n## 可编辑的树\n有了前面我们ExtJS的基础我就直接上代码了。简单的功能我都在代码的注释里写了。下面的例子中都会用到TreeNodeServlet.Java这个类所以我把这个代码也贴出来。\n``` java\npublic class TreeNodeServlet extends HttpServlet {  \n    private static final long serialVersionUID = 1L;  \n         \n    /** \n     * @see HttpServlet#HttpServlet() \n     */  \n    public TreeNodeServlet() {  \n        super();  \n        // TODO Auto-generated constructor stub  \n    }  \n    @Override  \n    protected void service(HttpServletRequest request, HttpServletResponse response)  \n            throws ServletException, IOException {  \n      \n        response.setContentType(\"text/html;charset=utf-8\");  \n        PrintWriter out = response.getWriter();  \n        String node = request.getParameter(\"node\");  \n        String json = \"\";  \n        if(\"0\".equals(node)){  \n              \n            json += \"[{id:1,text:'节点1'},{id:2,text:'节点2'}]\";  \n        }  \n        else if(\"1\".equals(node)){  \n              \n            json += \"[{id:11,text:'节点11',leaf:true},{id:12,text:'节点12',leaf:true}]\";  \n              \n        }  \n        else if(\"2\".equals(node)){  \n              \n            json += \"[{id:21,text:'节点21'},{id:22,text:'节点22',leaf:true}]\";  \n              \n        }  \n        else if(\"21\".equals(node)){  \n              \n            json += \"[{id:211,text:'节点211',leaf:true},{id:212,text:'节点212',leaf:true}]\";  \n              \n        }  \n          \n        out.write(json);  \n          \n    }  \n} \n```\n前端代码\n``` javascript\nvar tree = new Ext.tree.TreePanel({  \n el:'tree-div',  \n loader: new Ext.tree.TreeLoader({dataUrl:'../TreeNodeServlet'})  \n});  \nvar root = new Ext.tree.AsyncTreeNode({  \n id:'0',text: 'harbin'  \n});  \ntree.setRootNode(root);  \ntree.render();  \n//设置该树可编辑  \nvar treeEditor = new Ext.tree.TreeEditor(tree,{allowBlank:false});  \n//设置只有叶子节点可编辑  \ntreeEditor.on(\"beforestartedit\",function(treeEditor){  \n return treeEditor.editNode.isLeaf();  \n});  \ntree.on(\"click\",function(node){  \n   \n alert(\"The name is:\"+node.text+\"***\"+node.id);  \n   \n});  \n//此处将编辑的值输出  \ntreeEditor.on(\"complete\",function(treeEditor,newValue){  \n alert(\"The name had been modified,the result is:\"+newValue);  \n});  \n```\n## 可拖拽的树\n``` javascript\nvar tree = new Ext.tree.TreePanel({  \n el:'tree-div',  \n//设置可拖拽  \n enableDD:true,  \n loader: new Ext.tree.TreeLoader({dataUrl:'../TreeNodeServlet'})  \n});  \nvar root = new Ext.tree.AsyncTreeNode({  \n id:'0',  \n    text: 'harbin'  \n});  \ntree.setRootNode(root);  \ntree.render();  \n//设置叶子节点可追加元素  \ntree.on(\"nodedragover\",function(e){  \n var node = e.target;  \n if(node.leaf)  \n  node.leaf = false;  \n return true;  \n}); \n```\n## 异步加载树\n异步加载树是非常常用的，因为我们页面上生成的树往往都是从数据库中查出来的数据，有时候我们的数据量很大，如果每次都全加载那么很浪费资源，所以我们就用到了异步加载的树。所谓异步加载的树就是：我们点击哪个节点，就只加载这个节点下的元素，并不查询其他元素。但数据量大，并且树的层次特别多的时候就非常好用了，下面我们就实现一个异步加载的树。我将所有代码都粘出来，方便大家直接运行测试。\n- 准备数据库的数据。这个我们就用在第二节给的数据就可以了。\n- vo也就是JavaBean的写法，我们也在第二节将过了，下面是代码。\n``` java\npublic class Tree {  \n    private int id;  \n    private String text;  \n    private boolean leaf;  \n    public Tree(){  \n          \n    }  \n    public Tree(int id,String text,boolean leaf){  \n          \n        this.id = id;  \n          \n        this.text = text;  \n          \n        this.leaf = leaf;  \n          \n    }  \n      \n    public int getId() {  \n        return id;  \n    }  \n    public void setId(int id) {  \n        this.id = id;  \n    }  \n    public String getText() {  \n        return text;  \n    }  \n    public void setText(String text) {  \n        this.text = text;  \n    }  \n    public boolean isLeaf() {  \n        return leaf;  \n    }  \n    public void setLeaf(boolean leaf) {  \n        this.leaf = leaf;  \n    }  \n}  \n```\n- 接着是查询的DAO，其实也和第二节的差不多，只不过第二节用的是查询所有，而这里我们只是查询点击的节点下的数据，所以我们就根据传递过来的id进行查询部分数据进行显示。\n``` java\npublic class DAO {  \n    Connection conn;  \n      \n    PreparedStatement pstate;  \n      \n    ResultSet rs;  \n      \n    public List findAll(int id){  \n          \n        List list = new ArrayList();  \n          \n        String sql = \" select deptid,deptname from dept where higherDept = \"+id ;  \n          \n        try{  \n              \n            conn = DBConn.getConn();  \n              \n            pstate = conn.prepareStatement(sql);  \n              \n            rs = pstate.executeQuery();  \n              \n            while(rs.next()){  \n                  \n                Tree vo = new Tree();  \n                  \n                vo.setId(rs.getInt(\"deptid\"));  \n                vo.setText(rs.getString(\"deptname\"));  \n                vo.setLeaf(false);  \n                list.add(vo);  \n            }  \n              \n              \n        }catch(Exception e){  \n              \n            e.printStackTrace();  \n              \n        }finally{  \n              \n            DBConn.closeRs(rs);  \n              \n            DBConn.closePreState(pstate);  \n              \n            DBConn.closeConn(conn);  \n              \n        }  \n          \n        return list;  \n    }  \n} \n```\n这里涉及到了另外一个工具类，就是连接数据库用的类，这个非常简单大家都应该没有问题。\n- 然后是servlet，servlet里我们也简单的处理一下，就是接收一下页面传递过来的节点id，并根据这个id查询数据。\n``` java\n\npublic class TreeServlet extends HttpServlet {  \n    private static final long serialVersionUID = 1L;  \n         \n    /** \n     * @see HttpServlet#HttpServlet() \n     */  \n    public TreeServlet() {  \n        super();  \n        // TODO Auto-generated constructor stub  \n    }  \n    @Override  \n    protected void service(HttpServletRequest request, HttpServletResponse response)  \n            throws ServletException, IOException {  \n        response.setContentType(\"text/html;charset=utf-8\");  \n        PrintWriter out = response.getWriter();  \n        String node = request.getParameter(\"pid\");  \n          \n        int id = Integer.parseInt(node);  \n          \n        DAO dao = new DAO();  \n        List list = new ArrayList();  \n          \n        list = dao.findAll(id);  \n                response.getWriter().write(JSONTools.getJsonArray(list).toString());  \n          \n    }  \n}  \n```\n- 下面就是页面js文件了。\n``` javascript\nvar tree = new Ext.tree.TreePanel({  \n el:'tree-div',  \n loader: new   \n//第一次访问的时候只加载根节点下的数据  \nExt.tree.TreeLoader({dataUrl:'../TreeServlet?pid=23010000'})  \n});  \nvar root = new Ext.tree.AsyncTreeNode({  \n    text: 'harbin',  \n    draggable:false,  \n    id:'23010000'  \n});  \ntree.setRootNode(root);  \ntree.render();  \n//根据点击的节点加载该节点下的数据,点击哪个节点就加载哪个节点的数据  \ntree.on('beforeload',function(node){     \n    if(node.id != '23010000'){    \n        tree.loader.dataUrl = '../TreeServlet?pid='+node.id;           \n    }      \n}); \n```\n这样整个异步加载的树也就完成了。完成了异步加载的树，那么ExtJS Tree这块的主要内容也就差不多了，还有一些细节大家研究研究就可以了。如果哪有错误或不足希望指出。\n","source":"_posts/Tree-3.md","raw":"---\ntitle: xtJS初级教程之ExtJS Tree(三)\ndate: 2016-11-27 22:33:05\ntags: ExtJS\ncategories: javascript\n---\n前两次我介绍了静态树和根据数据库加载的数据生成的树，今天我就把ExtJS Tree这剩的一些主要的东西说一说，剩下的主要就是：树的事件处理、可编辑的树和可拖拽的树，最后再实现一下异步加载的树。<!--more-->\n## 树的事件处理\n树的事件主要有：1、展开节点事件。2、折叠节点事件。3、单击节点事件。4、双击节点事件。下面我们以一个静态树来测试树的主要事件。\n``` javascript\n//普通的静态树  \nvar tree = new Ext.tree.TreePanel({  \n el:'tree-div'  \n});  \n//创建根节点  \nvar root = new Ext.tree.TreeNode({text:'AllShengFen'});  \n//创建父节点  \nvar shengfen1 = new Ext.tree.TreeNode({text:'HeiLongJiang'});  \nvar shengfen2 = new Ext.tree.TreeNode({text:'LiaoNing'});  \nvar city1 = new Ext.tree.TreeNode({text:'harbin'});  \nvar city2 = new Ext.tree.TreeNode({text:'daqiang'});  \nvar city3 = new Ext.tree.TreeNode({text:'shenyang'});  \nvar city4 = new Ext.tree.TreeNode({text:'dalian'});  \n//将子节点添加到父节点中  \nshengfen1.appendChild(city1);  \nshengfen1.appendChild(city2);  \nshengfen2.appendChild(city3);  \nshengfen2.appendChild(city4);  \n//将子节点添加到父节点中  \nroot.appendChild(shengfen1);  \nroot.appendChild(shengfen2);  \n//将root节点设置为根节点  \ntree.setRootNode(root);  \n//使这棵树显示在div标签中  \ntree.render();  \n//展开节点事件  \ntree.on(\"expandnode\",function(node){  \n alert(\"[\"+node.text+\"]open\");  \n});  \n//折叠节点事件  \ntree.on(\"collapsenode\",function(node){  \n alert(\"[\"+node.text+\"]close\");  \n});  \n//单击节点事件  \ntree.on(\"click\",function(node){  \n alert(\"[\"+node.text+\"]click\");  \n});  \n//双击节点事件  \ntree.on(\"dblclick\",function(node){  \n alert(\"[\"+node.text+\"]double click\");  \n}); \n```\n由于单击和双击有冲突，所以我们在测试的时候可以先注释掉一个，单独测试。\n## 可编辑的树\n有了前面我们ExtJS的基础我就直接上代码了。简单的功能我都在代码的注释里写了。下面的例子中都会用到TreeNodeServlet.Java这个类所以我把这个代码也贴出来。\n``` java\npublic class TreeNodeServlet extends HttpServlet {  \n    private static final long serialVersionUID = 1L;  \n         \n    /** \n     * @see HttpServlet#HttpServlet() \n     */  \n    public TreeNodeServlet() {  \n        super();  \n        // TODO Auto-generated constructor stub  \n    }  \n    @Override  \n    protected void service(HttpServletRequest request, HttpServletResponse response)  \n            throws ServletException, IOException {  \n      \n        response.setContentType(\"text/html;charset=utf-8\");  \n        PrintWriter out = response.getWriter();  \n        String node = request.getParameter(\"node\");  \n        String json = \"\";  \n        if(\"0\".equals(node)){  \n              \n            json += \"[{id:1,text:'节点1'},{id:2,text:'节点2'}]\";  \n        }  \n        else if(\"1\".equals(node)){  \n              \n            json += \"[{id:11,text:'节点11',leaf:true},{id:12,text:'节点12',leaf:true}]\";  \n              \n        }  \n        else if(\"2\".equals(node)){  \n              \n            json += \"[{id:21,text:'节点21'},{id:22,text:'节点22',leaf:true}]\";  \n              \n        }  \n        else if(\"21\".equals(node)){  \n              \n            json += \"[{id:211,text:'节点211',leaf:true},{id:212,text:'节点212',leaf:true}]\";  \n              \n        }  \n          \n        out.write(json);  \n          \n    }  \n} \n```\n前端代码\n``` javascript\nvar tree = new Ext.tree.TreePanel({  \n el:'tree-div',  \n loader: new Ext.tree.TreeLoader({dataUrl:'../TreeNodeServlet'})  \n});  \nvar root = new Ext.tree.AsyncTreeNode({  \n id:'0',text: 'harbin'  \n});  \ntree.setRootNode(root);  \ntree.render();  \n//设置该树可编辑  \nvar treeEditor = new Ext.tree.TreeEditor(tree,{allowBlank:false});  \n//设置只有叶子节点可编辑  \ntreeEditor.on(\"beforestartedit\",function(treeEditor){  \n return treeEditor.editNode.isLeaf();  \n});  \ntree.on(\"click\",function(node){  \n   \n alert(\"The name is:\"+node.text+\"***\"+node.id);  \n   \n});  \n//此处将编辑的值输出  \ntreeEditor.on(\"complete\",function(treeEditor,newValue){  \n alert(\"The name had been modified,the result is:\"+newValue);  \n});  \n```\n## 可拖拽的树\n``` javascript\nvar tree = new Ext.tree.TreePanel({  \n el:'tree-div',  \n//设置可拖拽  \n enableDD:true,  \n loader: new Ext.tree.TreeLoader({dataUrl:'../TreeNodeServlet'})  \n});  \nvar root = new Ext.tree.AsyncTreeNode({  \n id:'0',  \n    text: 'harbin'  \n});  \ntree.setRootNode(root);  \ntree.render();  \n//设置叶子节点可追加元素  \ntree.on(\"nodedragover\",function(e){  \n var node = e.target;  \n if(node.leaf)  \n  node.leaf = false;  \n return true;  \n}); \n```\n## 异步加载树\n异步加载树是非常常用的，因为我们页面上生成的树往往都是从数据库中查出来的数据，有时候我们的数据量很大，如果每次都全加载那么很浪费资源，所以我们就用到了异步加载的树。所谓异步加载的树就是：我们点击哪个节点，就只加载这个节点下的元素，并不查询其他元素。但数据量大，并且树的层次特别多的时候就非常好用了，下面我们就实现一个异步加载的树。我将所有代码都粘出来，方便大家直接运行测试。\n- 准备数据库的数据。这个我们就用在第二节给的数据就可以了。\n- vo也就是JavaBean的写法，我们也在第二节将过了，下面是代码。\n``` java\npublic class Tree {  \n    private int id;  \n    private String text;  \n    private boolean leaf;  \n    public Tree(){  \n          \n    }  \n    public Tree(int id,String text,boolean leaf){  \n          \n        this.id = id;  \n          \n        this.text = text;  \n          \n        this.leaf = leaf;  \n          \n    }  \n      \n    public int getId() {  \n        return id;  \n    }  \n    public void setId(int id) {  \n        this.id = id;  \n    }  \n    public String getText() {  \n        return text;  \n    }  \n    public void setText(String text) {  \n        this.text = text;  \n    }  \n    public boolean isLeaf() {  \n        return leaf;  \n    }  \n    public void setLeaf(boolean leaf) {  \n        this.leaf = leaf;  \n    }  \n}  \n```\n- 接着是查询的DAO，其实也和第二节的差不多，只不过第二节用的是查询所有，而这里我们只是查询点击的节点下的数据，所以我们就根据传递过来的id进行查询部分数据进行显示。\n``` java\npublic class DAO {  \n    Connection conn;  \n      \n    PreparedStatement pstate;  \n      \n    ResultSet rs;  \n      \n    public List findAll(int id){  \n          \n        List list = new ArrayList();  \n          \n        String sql = \" select deptid,deptname from dept where higherDept = \"+id ;  \n          \n        try{  \n              \n            conn = DBConn.getConn();  \n              \n            pstate = conn.prepareStatement(sql);  \n              \n            rs = pstate.executeQuery();  \n              \n            while(rs.next()){  \n                  \n                Tree vo = new Tree();  \n                  \n                vo.setId(rs.getInt(\"deptid\"));  \n                vo.setText(rs.getString(\"deptname\"));  \n                vo.setLeaf(false);  \n                list.add(vo);  \n            }  \n              \n              \n        }catch(Exception e){  \n              \n            e.printStackTrace();  \n              \n        }finally{  \n              \n            DBConn.closeRs(rs);  \n              \n            DBConn.closePreState(pstate);  \n              \n            DBConn.closeConn(conn);  \n              \n        }  \n          \n        return list;  \n    }  \n} \n```\n这里涉及到了另外一个工具类，就是连接数据库用的类，这个非常简单大家都应该没有问题。\n- 然后是servlet，servlet里我们也简单的处理一下，就是接收一下页面传递过来的节点id，并根据这个id查询数据。\n``` java\n\npublic class TreeServlet extends HttpServlet {  \n    private static final long serialVersionUID = 1L;  \n         \n    /** \n     * @see HttpServlet#HttpServlet() \n     */  \n    public TreeServlet() {  \n        super();  \n        // TODO Auto-generated constructor stub  \n    }  \n    @Override  \n    protected void service(HttpServletRequest request, HttpServletResponse response)  \n            throws ServletException, IOException {  \n        response.setContentType(\"text/html;charset=utf-8\");  \n        PrintWriter out = response.getWriter();  \n        String node = request.getParameter(\"pid\");  \n          \n        int id = Integer.parseInt(node);  \n          \n        DAO dao = new DAO();  \n        List list = new ArrayList();  \n          \n        list = dao.findAll(id);  \n                response.getWriter().write(JSONTools.getJsonArray(list).toString());  \n          \n    }  \n}  \n```\n- 下面就是页面js文件了。\n``` javascript\nvar tree = new Ext.tree.TreePanel({  \n el:'tree-div',  \n loader: new   \n//第一次访问的时候只加载根节点下的数据  \nExt.tree.TreeLoader({dataUrl:'../TreeServlet?pid=23010000'})  \n});  \nvar root = new Ext.tree.AsyncTreeNode({  \n    text: 'harbin',  \n    draggable:false,  \n    id:'23010000'  \n});  \ntree.setRootNode(root);  \ntree.render();  \n//根据点击的节点加载该节点下的数据,点击哪个节点就加载哪个节点的数据  \ntree.on('beforeload',function(node){     \n    if(node.id != '23010000'){    \n        tree.loader.dataUrl = '../TreeServlet?pid='+node.id;           \n    }      \n}); \n```\n这样整个异步加载的树也就完成了。完成了异步加载的树，那么ExtJS Tree这块的主要内容也就差不多了，还有一些细节大家研究研究就可以了。如果哪有错误或不足希望指出。\n","slug":"Tree-3","published":1,"updated":"2019-07-01T12:35:47.381Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjycv1m3j000dok9m9klzkk2i","content":"<p>前两次我介绍了静态树和根据数据库加载的数据生成的树，今天我就把ExtJS Tree这剩的一些主要的东西说一说，剩下的主要就是：树的事件处理、可编辑的树和可拖拽的树，最后再实现一下异步加载的树。<a id=\"more\"></a></p>\n<h2 id=\"树的事件处理\"><a href=\"#树的事件处理\" class=\"headerlink\" title=\"树的事件处理\"></a>树的事件处理</h2><p>树的事件主要有：1、展开节点事件。2、折叠节点事件。3、单击节点事件。4、双击节点事件。下面我们以一个静态树来测试树的主要事件。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//普通的静态树  </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </span><br><span class=\"line\"> el:<span class=\"string\">'tree-div'</span>  </span><br><span class=\"line\">&#125;);  </span><br><span class=\"line\"><span class=\"comment\">//创建根节点  </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> root = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'AllShengFen'</span>&#125;);  </span><br><span class=\"line\"><span class=\"comment\">//创建父节点  </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> shengfen1 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'HeiLongJiang'</span>&#125;);  </span><br><span class=\"line\"><span class=\"keyword\">var</span> shengfen2 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'LiaoNing'</span>&#125;);  </span><br><span class=\"line\"><span class=\"keyword\">var</span> city1 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'harbin'</span>&#125;);  </span><br><span class=\"line\"><span class=\"keyword\">var</span> city2 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'daqiang'</span>&#125;);  </span><br><span class=\"line\"><span class=\"keyword\">var</span> city3 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'shenyang'</span>&#125;);  </span><br><span class=\"line\"><span class=\"keyword\">var</span> city4 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'dalian'</span>&#125;);  </span><br><span class=\"line\"><span class=\"comment\">//将子节点添加到父节点中  </span></span><br><span class=\"line\">shengfen1.appendChild(city1);  </span><br><span class=\"line\">shengfen1.appendChild(city2);  </span><br><span class=\"line\">shengfen2.appendChild(city3);  </span><br><span class=\"line\">shengfen2.appendChild(city4);  </span><br><span class=\"line\"><span class=\"comment\">//将子节点添加到父节点中  </span></span><br><span class=\"line\">root.appendChild(shengfen1);  </span><br><span class=\"line\">root.appendChild(shengfen2);  </span><br><span class=\"line\"><span class=\"comment\">//将root节点设置为根节点  </span></span><br><span class=\"line\">tree.setRootNode(root);  </span><br><span class=\"line\"><span class=\"comment\">//使这棵树显示在div标签中  </span></span><br><span class=\"line\">tree.render();  </span><br><span class=\"line\"><span class=\"comment\">//展开节点事件  </span></span><br><span class=\"line\">tree.on(<span class=\"string\">\"expandnode\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>)</span>&#123;  </span><br><span class=\"line\"> alert(<span class=\"string\">\"[\"</span>+node.text+<span class=\"string\">\"]open\"</span>);  </span><br><span class=\"line\">&#125;);  </span><br><span class=\"line\"><span class=\"comment\">//折叠节点事件  </span></span><br><span class=\"line\">tree.on(<span class=\"string\">\"collapsenode\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>)</span>&#123;  </span><br><span class=\"line\"> alert(<span class=\"string\">\"[\"</span>+node.text+<span class=\"string\">\"]close\"</span>);  </span><br><span class=\"line\">&#125;);  </span><br><span class=\"line\"><span class=\"comment\">//单击节点事件  </span></span><br><span class=\"line\">tree.on(<span class=\"string\">\"click\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>)</span>&#123;  </span><br><span class=\"line\"> alert(<span class=\"string\">\"[\"</span>+node.text+<span class=\"string\">\"]click\"</span>);  </span><br><span class=\"line\">&#125;);  </span><br><span class=\"line\"><span class=\"comment\">//双击节点事件  </span></span><br><span class=\"line\">tree.on(<span class=\"string\">\"dblclick\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>)</span>&#123;  </span><br><span class=\"line\"> alert(<span class=\"string\">\"[\"</span>+node.text+<span class=\"string\">\"]double click\"</span>);  </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>由于单击和双击有冲突，所以我们在测试的时候可以先注释掉一个，单独测试。</p>\n<h2 id=\"可编辑的树\"><a href=\"#可编辑的树\" class=\"headerlink\" title=\"可编辑的树\"></a>可编辑的树</h2><p>有了前面我们ExtJS的基础我就直接上代码了。简单的功能我都在代码的注释里写了。下面的例子中都会用到TreeNodeServlet.Java这个类所以我把这个代码也贴出来。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNodeServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;  </span><br><span class=\"line\">         </span><br><span class=\"line\">    <span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@see</span> HttpServlet#HttpServlet() </span></span><br><span class=\"line\"><span class=\"comment\">     */</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TreeNodeServlet</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">super</span>();  </span><br><span class=\"line\">        <span class=\"comment\">// TODO Auto-generated constructor stub  </span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span>  </span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;  </span><br><span class=\"line\">      </span><br><span class=\"line\">        response.setContentType(<span class=\"string\">\"text/html;charset=utf-8\"</span>);  </span><br><span class=\"line\">        PrintWriter out = response.getWriter();  </span><br><span class=\"line\">        String node = request.getParameter(<span class=\"string\">\"node\"</span>);  </span><br><span class=\"line\">        String json = <span class=\"string\">\"\"</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"string\">\"0\"</span>.equals(node))&#123;  </span><br><span class=\"line\">              </span><br><span class=\"line\">            json += <span class=\"string\">\"[&#123;id:1,text:'节点1'&#125;,&#123;id:2,text:'节点2'&#125;]\"</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"string\">\"1\"</span>.equals(node))&#123;  </span><br><span class=\"line\">              </span><br><span class=\"line\">            json += <span class=\"string\">\"[&#123;id:11,text:'节点11',leaf:true&#125;,&#123;id:12,text:'节点12',leaf:true&#125;]\"</span>;  </span><br><span class=\"line\">              </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"string\">\"2\"</span>.equals(node))&#123;  </span><br><span class=\"line\">              </span><br><span class=\"line\">            json += <span class=\"string\">\"[&#123;id:21,text:'节点21'&#125;,&#123;id:22,text:'节点22',leaf:true&#125;]\"</span>;  </span><br><span class=\"line\">              </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"string\">\"21\"</span>.equals(node))&#123;  </span><br><span class=\"line\">              </span><br><span class=\"line\">            json += <span class=\"string\">\"[&#123;id:211,text:'节点211',leaf:true&#125;,&#123;id:212,text:'节点212',leaf:true&#125;]\"</span>;  </span><br><span class=\"line\">              </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">          </span><br><span class=\"line\">        out.write(json);  </span><br><span class=\"line\">          </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>前端代码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </span><br><span class=\"line\"> el:<span class=\"string\">'tree-div'</span>,  </span><br><span class=\"line\"> loader: <span class=\"keyword\">new</span> Ext.tree.TreeLoader(&#123;<span class=\"attr\">dataUrl</span>:<span class=\"string\">'../TreeNodeServlet'</span>&#125;)  </span><br><span class=\"line\">&#125;);  </span><br><span class=\"line\"><span class=\"keyword\">var</span> root = <span class=\"keyword\">new</span> Ext.tree.AsyncTreeNode(&#123;  </span><br><span class=\"line\"> id:<span class=\"string\">'0'</span>,<span class=\"attr\">text</span>: <span class=\"string\">'harbin'</span>  </span><br><span class=\"line\">&#125;);  </span><br><span class=\"line\">tree.setRootNode(root);  </span><br><span class=\"line\">tree.render();  </span><br><span class=\"line\"><span class=\"comment\">//设置该树可编辑  </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> treeEditor = <span class=\"keyword\">new</span> Ext.tree.TreeEditor(tree,&#123;<span class=\"attr\">allowBlank</span>:<span class=\"literal\">false</span>&#125;);  </span><br><span class=\"line\"><span class=\"comment\">//设置只有叶子节点可编辑  </span></span><br><span class=\"line\">treeEditor.on(<span class=\"string\">\"beforestartedit\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">treeEditor</span>)</span>&#123;  </span><br><span class=\"line\"> <span class=\"keyword\">return</span> treeEditor.editNode.isLeaf();  </span><br><span class=\"line\">&#125;);  </span><br><span class=\"line\">tree.on(<span class=\"string\">\"click\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>)</span>&#123;  </span><br><span class=\"line\">   </span><br><span class=\"line\"> alert(<span class=\"string\">\"The name is:\"</span>+node.text+<span class=\"string\">\"***\"</span>+node.id);  </span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;);  </span><br><span class=\"line\"><span class=\"comment\">//此处将编辑的值输出  </span></span><br><span class=\"line\">treeEditor.on(<span class=\"string\">\"complete\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">treeEditor,newValue</span>)</span>&#123;  </span><br><span class=\"line\"> alert(<span class=\"string\">\"The name had been modified,the result is:\"</span>+newValue);  </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"可拖拽的树\"><a href=\"#可拖拽的树\" class=\"headerlink\" title=\"可拖拽的树\"></a>可拖拽的树</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </span><br><span class=\"line\"> el:<span class=\"string\">'tree-div'</span>,  </span><br><span class=\"line\"><span class=\"comment\">//设置可拖拽  </span></span><br><span class=\"line\"> enableDD:<span class=\"literal\">true</span>,  </span><br><span class=\"line\"> loader: <span class=\"keyword\">new</span> Ext.tree.TreeLoader(&#123;<span class=\"attr\">dataUrl</span>:<span class=\"string\">'../TreeNodeServlet'</span>&#125;)  </span><br><span class=\"line\">&#125;);  </span><br><span class=\"line\"><span class=\"keyword\">var</span> root = <span class=\"keyword\">new</span> Ext.tree.AsyncTreeNode(&#123;  </span><br><span class=\"line\"> id:<span class=\"string\">'0'</span>,  </span><br><span class=\"line\">    text: <span class=\"string\">'harbin'</span>  </span><br><span class=\"line\">&#125;);  </span><br><span class=\"line\">tree.setRootNode(root);  </span><br><span class=\"line\">tree.render();  </span><br><span class=\"line\"><span class=\"comment\">//设置叶子节点可追加元素  </span></span><br><span class=\"line\">tree.on(<span class=\"string\">\"nodedragover\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;  </span><br><span class=\"line\"> <span class=\"keyword\">var</span> node = e.target;  </span><br><span class=\"line\"> <span class=\"keyword\">if</span>(node.leaf)  </span><br><span class=\"line\">  node.leaf = <span class=\"literal\">false</span>;  </span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"异步加载树\"><a href=\"#异步加载树\" class=\"headerlink\" title=\"异步加载树\"></a>异步加载树</h2><p>异步加载树是非常常用的，因为我们页面上生成的树往往都是从数据库中查出来的数据，有时候我们的数据量很大，如果每次都全加载那么很浪费资源，所以我们就用到了异步加载的树。所谓异步加载的树就是：我们点击哪个节点，就只加载这个节点下的元素，并不查询其他元素。但数据量大，并且树的层次特别多的时候就非常好用了，下面我们就实现一个异步加载的树。我将所有代码都粘出来，方便大家直接运行测试。</p>\n<ul>\n<li>准备数据库的数据。这个我们就用在第二节给的数据就可以了。</li>\n<li><p>vo也就是JavaBean的写法，我们也在第二节将过了，下面是代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tree</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String text;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> leaf;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Tree</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">          </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Tree</span><span class=\"params\">(<span class=\"keyword\">int</span> id,String text,<span class=\"keyword\">boolean</span> leaf)</span></span>&#123;  </span><br><span class=\"line\">          </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = id;  </span><br><span class=\"line\">          </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.text = text;  </span><br><span class=\"line\">          </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.leaf = leaf;  </span><br><span class=\"line\">          </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> id;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = id;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getText</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> text;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setText</span><span class=\"params\">(String text)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.text = text;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isLeaf</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> leaf;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setLeaf</span><span class=\"params\">(<span class=\"keyword\">boolean</span> leaf)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.leaf = leaf;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>接着是查询的DAO，其实也和第二节的差不多，只不过第二节用的是查询所有，而这里我们只是查询点击的节点下的数据，所以我们就根据传递过来的id进行查询部分数据进行显示。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DAO</span> </span>&#123;  </span><br><span class=\"line\">    Connection conn;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    PreparedStatement pstate;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    ResultSet rs;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List <span class=\"title\">findAll</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span></span>&#123;  </span><br><span class=\"line\">          </span><br><span class=\"line\">        List list = <span class=\"keyword\">new</span> ArrayList();  </span><br><span class=\"line\">          </span><br><span class=\"line\">        String sql = <span class=\"string\">\" select deptid,deptname from dept where higherDept = \"</span>+id ;  </span><br><span class=\"line\">          </span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;  </span><br><span class=\"line\">              </span><br><span class=\"line\">            conn = DBConn.getConn();  </span><br><span class=\"line\">              </span><br><span class=\"line\">            pstate = conn.prepareStatement(sql);  </span><br><span class=\"line\">              </span><br><span class=\"line\">            rs = pstate.executeQuery();  </span><br><span class=\"line\">              </span><br><span class=\"line\">            <span class=\"keyword\">while</span>(rs.next())&#123;  </span><br><span class=\"line\">                  </span><br><span class=\"line\">                Tree vo = <span class=\"keyword\">new</span> Tree();  </span><br><span class=\"line\">                  </span><br><span class=\"line\">                vo.setId(rs.getInt(<span class=\"string\">\"deptid\"</span>));  </span><br><span class=\"line\">                vo.setText(rs.getString(<span class=\"string\">\"deptname\"</span>));  </span><br><span class=\"line\">                vo.setLeaf(<span class=\"keyword\">false</span>);  </span><br><span class=\"line\">                list.add(vo);  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">              </span><br><span class=\"line\">              </span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span>(Exception e)&#123;  </span><br><span class=\"line\">              </span><br><span class=\"line\">            e.printStackTrace();  </span><br><span class=\"line\">              </span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span>&#123;  </span><br><span class=\"line\">              </span><br><span class=\"line\">            DBConn.closeRs(rs);  </span><br><span class=\"line\">              </span><br><span class=\"line\">            DBConn.closePreState(pstate);  </span><br><span class=\"line\">              </span><br><span class=\"line\">            DBConn.closeConn(conn);  </span><br><span class=\"line\">              </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">          </span><br><span class=\"line\">        <span class=\"keyword\">return</span> list;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这里涉及到了另外一个工具类，就是连接数据库用的类，这个非常简单大家都应该没有问题。</p>\n<ul>\n<li><p>然后是servlet，servlet里我们也简单的处理一下，就是接收一下页面传递过来的节点id，并根据这个id查询数据。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;  </span><br><span class=\"line\">         </span><br><span class=\"line\">    <span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@see</span> HttpServlet#HttpServlet() </span></span><br><span class=\"line\"><span class=\"comment\">     */</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TreeServlet</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">super</span>();  </span><br><span class=\"line\">        <span class=\"comment\">// TODO Auto-generated constructor stub  </span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span>  </span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;  </span><br><span class=\"line\">        response.setContentType(<span class=\"string\">\"text/html;charset=utf-8\"</span>);  </span><br><span class=\"line\">        PrintWriter out = response.getWriter();  </span><br><span class=\"line\">        String node = request.getParameter(<span class=\"string\">\"pid\"</span>);  </span><br><span class=\"line\">          </span><br><span class=\"line\">        <span class=\"keyword\">int</span> id = Integer.parseInt(node);  </span><br><span class=\"line\">          </span><br><span class=\"line\">        DAO dao = <span class=\"keyword\">new</span> DAO();  </span><br><span class=\"line\">        List list = <span class=\"keyword\">new</span> ArrayList();  </span><br><span class=\"line\">          </span><br><span class=\"line\">        list = dao.findAll(id);  </span><br><span class=\"line\">                response.getWriter().write(JSONTools.getJsonArray(list).toString());  </span><br><span class=\"line\">          </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>下面就是页面js文件了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </span><br><span class=\"line\"> el:<span class=\"string\">'tree-div'</span>,  </span><br><span class=\"line\"> loader: <span class=\"keyword\">new</span>   </span><br><span class=\"line\"><span class=\"comment\">//第一次访问的时候只加载根节点下的数据  </span></span><br><span class=\"line\">Ext.tree.TreeLoader(&#123;<span class=\"attr\">dataUrl</span>:<span class=\"string\">'../TreeServlet?pid=23010000'</span>&#125;)  </span><br><span class=\"line\">&#125;);  </span><br><span class=\"line\"><span class=\"keyword\">var</span> root = <span class=\"keyword\">new</span> Ext.tree.AsyncTreeNode(&#123;  </span><br><span class=\"line\">    text: <span class=\"string\">'harbin'</span>,  </span><br><span class=\"line\">    draggable:<span class=\"literal\">false</span>,  </span><br><span class=\"line\">    id:<span class=\"string\">'23010000'</span>  </span><br><span class=\"line\">&#125;);  </span><br><span class=\"line\">tree.setRootNode(root);  </span><br><span class=\"line\">tree.render();  </span><br><span class=\"line\"><span class=\"comment\">//根据点击的节点加载该节点下的数据,点击哪个节点就加载哪个节点的数据  </span></span><br><span class=\"line\">tree.on(<span class=\"string\">'beforeload'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>)</span>&#123;     </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node.id != <span class=\"string\">'23010000'</span>)&#123;    </span><br><span class=\"line\">        tree.loader.dataUrl = <span class=\"string\">'../TreeServlet?pid='</span>+node.id;           </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这样整个异步加载的树也就完成了。完成了异步加载的树，那么ExtJS Tree这块的主要内容也就差不多了，还有一些细节大家研究研究就可以了。如果哪有错误或不足希望指出。</p>\n","site":{"data":{}},"excerpt":"<p>前两次我介绍了静态树和根据数据库加载的数据生成的树，今天我就把ExtJS Tree这剩的一些主要的东西说一说，剩下的主要就是：树的事件处理、可编辑的树和可拖拽的树，最后再实现一下异步加载的树。","more":"</p>\n<h2 id=\"树的事件处理\"><a href=\"#树的事件处理\" class=\"headerlink\" title=\"树的事件处理\"></a>树的事件处理</h2><p>树的事件主要有：1、展开节点事件。2、折叠节点事件。3、单击节点事件。4、双击节点事件。下面我们以一个静态树来测试树的主要事件。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//普通的静态树  </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </span><br><span class=\"line\"> el:<span class=\"string\">'tree-div'</span>  </span><br><span class=\"line\">&#125;);  </span><br><span class=\"line\"><span class=\"comment\">//创建根节点  </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> root = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'AllShengFen'</span>&#125;);  </span><br><span class=\"line\"><span class=\"comment\">//创建父节点  </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> shengfen1 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'HeiLongJiang'</span>&#125;);  </span><br><span class=\"line\"><span class=\"keyword\">var</span> shengfen2 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'LiaoNing'</span>&#125;);  </span><br><span class=\"line\"><span class=\"keyword\">var</span> city1 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'harbin'</span>&#125;);  </span><br><span class=\"line\"><span class=\"keyword\">var</span> city2 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'daqiang'</span>&#125;);  </span><br><span class=\"line\"><span class=\"keyword\">var</span> city3 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'shenyang'</span>&#125;);  </span><br><span class=\"line\"><span class=\"keyword\">var</span> city4 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'dalian'</span>&#125;);  </span><br><span class=\"line\"><span class=\"comment\">//将子节点添加到父节点中  </span></span><br><span class=\"line\">shengfen1.appendChild(city1);  </span><br><span class=\"line\">shengfen1.appendChild(city2);  </span><br><span class=\"line\">shengfen2.appendChild(city3);  </span><br><span class=\"line\">shengfen2.appendChild(city4);  </span><br><span class=\"line\"><span class=\"comment\">//将子节点添加到父节点中  </span></span><br><span class=\"line\">root.appendChild(shengfen1);  </span><br><span class=\"line\">root.appendChild(shengfen2);  </span><br><span class=\"line\"><span class=\"comment\">//将root节点设置为根节点  </span></span><br><span class=\"line\">tree.setRootNode(root);  </span><br><span class=\"line\"><span class=\"comment\">//使这棵树显示在div标签中  </span></span><br><span class=\"line\">tree.render();  </span><br><span class=\"line\"><span class=\"comment\">//展开节点事件  </span></span><br><span class=\"line\">tree.on(<span class=\"string\">\"expandnode\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>)</span>&#123;  </span><br><span class=\"line\"> alert(<span class=\"string\">\"[\"</span>+node.text+<span class=\"string\">\"]open\"</span>);  </span><br><span class=\"line\">&#125;);  </span><br><span class=\"line\"><span class=\"comment\">//折叠节点事件  </span></span><br><span class=\"line\">tree.on(<span class=\"string\">\"collapsenode\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>)</span>&#123;  </span><br><span class=\"line\"> alert(<span class=\"string\">\"[\"</span>+node.text+<span class=\"string\">\"]close\"</span>);  </span><br><span class=\"line\">&#125;);  </span><br><span class=\"line\"><span class=\"comment\">//单击节点事件  </span></span><br><span class=\"line\">tree.on(<span class=\"string\">\"click\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>)</span>&#123;  </span><br><span class=\"line\"> alert(<span class=\"string\">\"[\"</span>+node.text+<span class=\"string\">\"]click\"</span>);  </span><br><span class=\"line\">&#125;);  </span><br><span class=\"line\"><span class=\"comment\">//双击节点事件  </span></span><br><span class=\"line\">tree.on(<span class=\"string\">\"dblclick\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>)</span>&#123;  </span><br><span class=\"line\"> alert(<span class=\"string\">\"[\"</span>+node.text+<span class=\"string\">\"]double click\"</span>);  </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>由于单击和双击有冲突，所以我们在测试的时候可以先注释掉一个，单独测试。</p>\n<h2 id=\"可编辑的树\"><a href=\"#可编辑的树\" class=\"headerlink\" title=\"可编辑的树\"></a>可编辑的树</h2><p>有了前面我们ExtJS的基础我就直接上代码了。简单的功能我都在代码的注释里写了。下面的例子中都会用到TreeNodeServlet.Java这个类所以我把这个代码也贴出来。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNodeServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;  </span><br><span class=\"line\">         </span><br><span class=\"line\">    <span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@see</span> HttpServlet#HttpServlet() </span></span><br><span class=\"line\"><span class=\"comment\">     */</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TreeNodeServlet</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">super</span>();  </span><br><span class=\"line\">        <span class=\"comment\">// TODO Auto-generated constructor stub  </span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span>  </span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;  </span><br><span class=\"line\">      </span><br><span class=\"line\">        response.setContentType(<span class=\"string\">\"text/html;charset=utf-8\"</span>);  </span><br><span class=\"line\">        PrintWriter out = response.getWriter();  </span><br><span class=\"line\">        String node = request.getParameter(<span class=\"string\">\"node\"</span>);  </span><br><span class=\"line\">        String json = <span class=\"string\">\"\"</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"string\">\"0\"</span>.equals(node))&#123;  </span><br><span class=\"line\">              </span><br><span class=\"line\">            json += <span class=\"string\">\"[&#123;id:1,text:'节点1'&#125;,&#123;id:2,text:'节点2'&#125;]\"</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"string\">\"1\"</span>.equals(node))&#123;  </span><br><span class=\"line\">              </span><br><span class=\"line\">            json += <span class=\"string\">\"[&#123;id:11,text:'节点11',leaf:true&#125;,&#123;id:12,text:'节点12',leaf:true&#125;]\"</span>;  </span><br><span class=\"line\">              </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"string\">\"2\"</span>.equals(node))&#123;  </span><br><span class=\"line\">              </span><br><span class=\"line\">            json += <span class=\"string\">\"[&#123;id:21,text:'节点21'&#125;,&#123;id:22,text:'节点22',leaf:true&#125;]\"</span>;  </span><br><span class=\"line\">              </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"string\">\"21\"</span>.equals(node))&#123;  </span><br><span class=\"line\">              </span><br><span class=\"line\">            json += <span class=\"string\">\"[&#123;id:211,text:'节点211',leaf:true&#125;,&#123;id:212,text:'节点212',leaf:true&#125;]\"</span>;  </span><br><span class=\"line\">              </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">          </span><br><span class=\"line\">        out.write(json);  </span><br><span class=\"line\">          </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>前端代码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </span><br><span class=\"line\"> el:<span class=\"string\">'tree-div'</span>,  </span><br><span class=\"line\"> loader: <span class=\"keyword\">new</span> Ext.tree.TreeLoader(&#123;<span class=\"attr\">dataUrl</span>:<span class=\"string\">'../TreeNodeServlet'</span>&#125;)  </span><br><span class=\"line\">&#125;);  </span><br><span class=\"line\"><span class=\"keyword\">var</span> root = <span class=\"keyword\">new</span> Ext.tree.AsyncTreeNode(&#123;  </span><br><span class=\"line\"> id:<span class=\"string\">'0'</span>,<span class=\"attr\">text</span>: <span class=\"string\">'harbin'</span>  </span><br><span class=\"line\">&#125;);  </span><br><span class=\"line\">tree.setRootNode(root);  </span><br><span class=\"line\">tree.render();  </span><br><span class=\"line\"><span class=\"comment\">//设置该树可编辑  </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> treeEditor = <span class=\"keyword\">new</span> Ext.tree.TreeEditor(tree,&#123;<span class=\"attr\">allowBlank</span>:<span class=\"literal\">false</span>&#125;);  </span><br><span class=\"line\"><span class=\"comment\">//设置只有叶子节点可编辑  </span></span><br><span class=\"line\">treeEditor.on(<span class=\"string\">\"beforestartedit\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">treeEditor</span>)</span>&#123;  </span><br><span class=\"line\"> <span class=\"keyword\">return</span> treeEditor.editNode.isLeaf();  </span><br><span class=\"line\">&#125;);  </span><br><span class=\"line\">tree.on(<span class=\"string\">\"click\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>)</span>&#123;  </span><br><span class=\"line\">   </span><br><span class=\"line\"> alert(<span class=\"string\">\"The name is:\"</span>+node.text+<span class=\"string\">\"***\"</span>+node.id);  </span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;);  </span><br><span class=\"line\"><span class=\"comment\">//此处将编辑的值输出  </span></span><br><span class=\"line\">treeEditor.on(<span class=\"string\">\"complete\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">treeEditor,newValue</span>)</span>&#123;  </span><br><span class=\"line\"> alert(<span class=\"string\">\"The name had been modified,the result is:\"</span>+newValue);  </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"可拖拽的树\"><a href=\"#可拖拽的树\" class=\"headerlink\" title=\"可拖拽的树\"></a>可拖拽的树</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </span><br><span class=\"line\"> el:<span class=\"string\">'tree-div'</span>,  </span><br><span class=\"line\"><span class=\"comment\">//设置可拖拽  </span></span><br><span class=\"line\"> enableDD:<span class=\"literal\">true</span>,  </span><br><span class=\"line\"> loader: <span class=\"keyword\">new</span> Ext.tree.TreeLoader(&#123;<span class=\"attr\">dataUrl</span>:<span class=\"string\">'../TreeNodeServlet'</span>&#125;)  </span><br><span class=\"line\">&#125;);  </span><br><span class=\"line\"><span class=\"keyword\">var</span> root = <span class=\"keyword\">new</span> Ext.tree.AsyncTreeNode(&#123;  </span><br><span class=\"line\"> id:<span class=\"string\">'0'</span>,  </span><br><span class=\"line\">    text: <span class=\"string\">'harbin'</span>  </span><br><span class=\"line\">&#125;);  </span><br><span class=\"line\">tree.setRootNode(root);  </span><br><span class=\"line\">tree.render();  </span><br><span class=\"line\"><span class=\"comment\">//设置叶子节点可追加元素  </span></span><br><span class=\"line\">tree.on(<span class=\"string\">\"nodedragover\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;  </span><br><span class=\"line\"> <span class=\"keyword\">var</span> node = e.target;  </span><br><span class=\"line\"> <span class=\"keyword\">if</span>(node.leaf)  </span><br><span class=\"line\">  node.leaf = <span class=\"literal\">false</span>;  </span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"异步加载树\"><a href=\"#异步加载树\" class=\"headerlink\" title=\"异步加载树\"></a>异步加载树</h2><p>异步加载树是非常常用的，因为我们页面上生成的树往往都是从数据库中查出来的数据，有时候我们的数据量很大，如果每次都全加载那么很浪费资源，所以我们就用到了异步加载的树。所谓异步加载的树就是：我们点击哪个节点，就只加载这个节点下的元素，并不查询其他元素。但数据量大，并且树的层次特别多的时候就非常好用了，下面我们就实现一个异步加载的树。我将所有代码都粘出来，方便大家直接运行测试。</p>\n<ul>\n<li>准备数据库的数据。这个我们就用在第二节给的数据就可以了。</li>\n<li><p>vo也就是JavaBean的写法，我们也在第二节将过了，下面是代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tree</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String text;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> leaf;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Tree</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">          </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Tree</span><span class=\"params\">(<span class=\"keyword\">int</span> id,String text,<span class=\"keyword\">boolean</span> leaf)</span></span>&#123;  </span><br><span class=\"line\">          </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = id;  </span><br><span class=\"line\">          </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.text = text;  </span><br><span class=\"line\">          </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.leaf = leaf;  </span><br><span class=\"line\">          </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> id;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = id;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getText</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> text;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setText</span><span class=\"params\">(String text)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.text = text;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isLeaf</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> leaf;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setLeaf</span><span class=\"params\">(<span class=\"keyword\">boolean</span> leaf)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.leaf = leaf;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>接着是查询的DAO，其实也和第二节的差不多，只不过第二节用的是查询所有，而这里我们只是查询点击的节点下的数据，所以我们就根据传递过来的id进行查询部分数据进行显示。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DAO</span> </span>&#123;  </span><br><span class=\"line\">    Connection conn;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    PreparedStatement pstate;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    ResultSet rs;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List <span class=\"title\">findAll</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span></span>&#123;  </span><br><span class=\"line\">          </span><br><span class=\"line\">        List list = <span class=\"keyword\">new</span> ArrayList();  </span><br><span class=\"line\">          </span><br><span class=\"line\">        String sql = <span class=\"string\">\" select deptid,deptname from dept where higherDept = \"</span>+id ;  </span><br><span class=\"line\">          </span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;  </span><br><span class=\"line\">              </span><br><span class=\"line\">            conn = DBConn.getConn();  </span><br><span class=\"line\">              </span><br><span class=\"line\">            pstate = conn.prepareStatement(sql);  </span><br><span class=\"line\">              </span><br><span class=\"line\">            rs = pstate.executeQuery();  </span><br><span class=\"line\">              </span><br><span class=\"line\">            <span class=\"keyword\">while</span>(rs.next())&#123;  </span><br><span class=\"line\">                  </span><br><span class=\"line\">                Tree vo = <span class=\"keyword\">new</span> Tree();  </span><br><span class=\"line\">                  </span><br><span class=\"line\">                vo.setId(rs.getInt(<span class=\"string\">\"deptid\"</span>));  </span><br><span class=\"line\">                vo.setText(rs.getString(<span class=\"string\">\"deptname\"</span>));  </span><br><span class=\"line\">                vo.setLeaf(<span class=\"keyword\">false</span>);  </span><br><span class=\"line\">                list.add(vo);  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">              </span><br><span class=\"line\">              </span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span>(Exception e)&#123;  </span><br><span class=\"line\">              </span><br><span class=\"line\">            e.printStackTrace();  </span><br><span class=\"line\">              </span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span>&#123;  </span><br><span class=\"line\">              </span><br><span class=\"line\">            DBConn.closeRs(rs);  </span><br><span class=\"line\">              </span><br><span class=\"line\">            DBConn.closePreState(pstate);  </span><br><span class=\"line\">              </span><br><span class=\"line\">            DBConn.closeConn(conn);  </span><br><span class=\"line\">              </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">          </span><br><span class=\"line\">        <span class=\"keyword\">return</span> list;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这里涉及到了另外一个工具类，就是连接数据库用的类，这个非常简单大家都应该没有问题。</p>\n<ul>\n<li><p>然后是servlet，servlet里我们也简单的处理一下，就是接收一下页面传递过来的节点id，并根据这个id查询数据。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;  </span><br><span class=\"line\">         </span><br><span class=\"line\">    <span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@see</span> HttpServlet#HttpServlet() </span></span><br><span class=\"line\"><span class=\"comment\">     */</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TreeServlet</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">super</span>();  </span><br><span class=\"line\">        <span class=\"comment\">// TODO Auto-generated constructor stub  </span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span>  </span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;  </span><br><span class=\"line\">        response.setContentType(<span class=\"string\">\"text/html;charset=utf-8\"</span>);  </span><br><span class=\"line\">        PrintWriter out = response.getWriter();  </span><br><span class=\"line\">        String node = request.getParameter(<span class=\"string\">\"pid\"</span>);  </span><br><span class=\"line\">          </span><br><span class=\"line\">        <span class=\"keyword\">int</span> id = Integer.parseInt(node);  </span><br><span class=\"line\">          </span><br><span class=\"line\">        DAO dao = <span class=\"keyword\">new</span> DAO();  </span><br><span class=\"line\">        List list = <span class=\"keyword\">new</span> ArrayList();  </span><br><span class=\"line\">          </span><br><span class=\"line\">        list = dao.findAll(id);  </span><br><span class=\"line\">                response.getWriter().write(JSONTools.getJsonArray(list).toString());  </span><br><span class=\"line\">          </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>下面就是页面js文件了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </span><br><span class=\"line\"> el:<span class=\"string\">'tree-div'</span>,  </span><br><span class=\"line\"> loader: <span class=\"keyword\">new</span>   </span><br><span class=\"line\"><span class=\"comment\">//第一次访问的时候只加载根节点下的数据  </span></span><br><span class=\"line\">Ext.tree.TreeLoader(&#123;<span class=\"attr\">dataUrl</span>:<span class=\"string\">'../TreeServlet?pid=23010000'</span>&#125;)  </span><br><span class=\"line\">&#125;);  </span><br><span class=\"line\"><span class=\"keyword\">var</span> root = <span class=\"keyword\">new</span> Ext.tree.AsyncTreeNode(&#123;  </span><br><span class=\"line\">    text: <span class=\"string\">'harbin'</span>,  </span><br><span class=\"line\">    draggable:<span class=\"literal\">false</span>,  </span><br><span class=\"line\">    id:<span class=\"string\">'23010000'</span>  </span><br><span class=\"line\">&#125;);  </span><br><span class=\"line\">tree.setRootNode(root);  </span><br><span class=\"line\">tree.render();  </span><br><span class=\"line\"><span class=\"comment\">//根据点击的节点加载该节点下的数据,点击哪个节点就加载哪个节点的数据  </span></span><br><span class=\"line\">tree.on(<span class=\"string\">'beforeload'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>)</span>&#123;     </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node.id != <span class=\"string\">'23010000'</span>)&#123;    </span><br><span class=\"line\">        tree.loader.dataUrl = <span class=\"string\">'../TreeServlet?pid='</span>+node.id;           </span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这样整个异步加载的树也就完成了。完成了异步加载的树，那么ExtJS Tree这块的主要内容也就差不多了，还有一些细节大家研究研究就可以了。如果哪有错误或不足希望指出。</p>"},{"title":"WebService复杂类型数据传输-dom4j方式","date":"2016-11-27T11:39:57.000Z","_content":"WebService在传递数据的时候只能传递字符串，当我们返回一些简单的字符串时我们可以直接返回，但是当我们想返回比如List，Map等复杂类型的数据时拼接字符串就是个很麻烦的工作，这时我们就用到了dom4j这个工具。\n\n当我们从数据库中查询出很多个对象类型时，我们一般都存放在List中。像这种数据就很难用拼接字符串的形式进行传递。我的解决办法就是利用dom4j把它写成一个xml格式的字符串，然后在客户端再利用dom4j解释。\n<!--more-->\n假如我们从数据库中查询的是一个Student对象，该对象有name和agel两个属性，我们将大量的Student对象储存在List中。下面我们想利用dom4j把List数据变成如下格式的xml文件类型的字符串：  \n``` xml\n\t<?xml version=\"1.0\" encoding=\"UTF-8\"?>  \n    <root>  \n        <student>  \n            <name>张三</name>  \n            <age>26</age>  \n        </student>  \n        <student>  \n            <name>赵四</name>  \n            <age>34</age>  \n        </student>  \n    </root> \n```\nwebservice端Java代码如下：  \n``` java\nimport java.util.List;  \nimport org.dom4j.Document;  \nimport org.dom4j.DocumentHelper;  \nimport org.dom4j.Element;  \nimport org.dom4j.io.OutputFormat;  \nimport vo.UnitPO;  \nimport DAO.unitDao;  \npublic class Service02 {     \n    public String method(){  \n         \n        Document document = DocumentHelper.createDocument();  \n        Element root = document.addElement(\"root\");  \n         \n        Element stuElement = null;  \n        Element nameElement = null;  \n        Element ageElement = null;  \n         \n        //第一个student节点  \n        stuElement = root.addElement(\"student\");  \n        //添加两个子节点  \n        nameElement = stuElement.addElement(\"name\");  \n        ageElement = stuElement.addElement(\"age\");     \n        //向两个子节点中添加文本内容  \n        nameElement.addText(\"张三\");  \n        ageElement.addText(\"26\");  \n         \n        //同理第二个student节点  \n        stuElement = root.addElement(\"student\");         \n        nameElement = stuElement.addElement(\"name\");  \n        ageElement = stuElement.addElement(\"age\");     \n        nameElement.addText(\"赵四\");  \n        ageElement.addText(\"34\");  \n        try {  \n            OutputFormat format = OutputFormat.createPrettyPrint();  \n            // 设置XML文件的编码格式  \n            format.setEncoding(\"UTF-8\");  \n            return document.asXML();  \n        } catch (Exception e) {  \n            System.out.println(e.getMessage());  \n            return \"error\";  \n        }  \n    }  \n} \n```\n这样就将我们想传送的复杂数据变成了xml格式是字符串，下面在客户端就可以解释出我们想要的数据了。client端java代码如下：\n``` java\nimport java.io.StringReader;  \nimport java.util.List;  \nimport org.dom4j.Document;  \nimport org.dom4j.Element;  \nimport org.dom4j.io.SAXReader;  \nimport webservice.Service02Proxy;  \npublic class Test {  \n    public static void main(String[] args) {         \n        try{  \n            //创建代理类  \n            Service02Proxy proxy = new Service02Proxy();  \n            //接受传过来的XML字符串  \n            String str = proxy.method();  \n            //解释该字符串  \n            StringReader read = new StringReader(str);  \n            SAXReader reader = new SAXReader();  \n            Document doc = reader.read(read);   \n            Element root = doc.getRootElement();  \n            //该节点由多个student构成，所以返回值是List类型  \n            List list = root.elements(\"student\");   \n             \n            for(int i = 0;i < list.size();i++){  \n                 \n                Element student = (Element)list.get(i);  \n                Element name = student.element(\"name\");  \n                Element age = student.element(\"age\");  \n                 \n                //打印得到的数据  \n                System.out.println(name.getTextTrim()+\":\"+age.getTextTrim());  \n                 \n            }  \n     \n        }catch(Exception e){  \n             \n            e.printStackTrace();  \n             \n        }  \n    }  \n}\n```\n控制台输出为：\n> **张三:26\n赵四:34 **\n\n每种编程语言可能接受时用的类型不同，但方法大同小异。代码如有问题，欢迎给予评价。","source":"_posts/WebService复杂类型数据传输-dom4j方式.md","raw":"---\ntitle: WebService复杂类型数据传输-dom4j方式\ndate: 2016-11-27 19:39:57\ntags: ［WebService,java］\ncategories: java\n---\nWebService在传递数据的时候只能传递字符串，当我们返回一些简单的字符串时我们可以直接返回，但是当我们想返回比如List，Map等复杂类型的数据时拼接字符串就是个很麻烦的工作，这时我们就用到了dom4j这个工具。\n\n当我们从数据库中查询出很多个对象类型时，我们一般都存放在List中。像这种数据就很难用拼接字符串的形式进行传递。我的解决办法就是利用dom4j把它写成一个xml格式的字符串，然后在客户端再利用dom4j解释。\n<!--more-->\n假如我们从数据库中查询的是一个Student对象，该对象有name和agel两个属性，我们将大量的Student对象储存在List中。下面我们想利用dom4j把List数据变成如下格式的xml文件类型的字符串：  \n``` xml\n\t<?xml version=\"1.0\" encoding=\"UTF-8\"?>  \n    <root>  \n        <student>  \n            <name>张三</name>  \n            <age>26</age>  \n        </student>  \n        <student>  \n            <name>赵四</name>  \n            <age>34</age>  \n        </student>  \n    </root> \n```\nwebservice端Java代码如下：  \n``` java\nimport java.util.List;  \nimport org.dom4j.Document;  \nimport org.dom4j.DocumentHelper;  \nimport org.dom4j.Element;  \nimport org.dom4j.io.OutputFormat;  \nimport vo.UnitPO;  \nimport DAO.unitDao;  \npublic class Service02 {     \n    public String method(){  \n         \n        Document document = DocumentHelper.createDocument();  \n        Element root = document.addElement(\"root\");  \n         \n        Element stuElement = null;  \n        Element nameElement = null;  \n        Element ageElement = null;  \n         \n        //第一个student节点  \n        stuElement = root.addElement(\"student\");  \n        //添加两个子节点  \n        nameElement = stuElement.addElement(\"name\");  \n        ageElement = stuElement.addElement(\"age\");     \n        //向两个子节点中添加文本内容  \n        nameElement.addText(\"张三\");  \n        ageElement.addText(\"26\");  \n         \n        //同理第二个student节点  \n        stuElement = root.addElement(\"student\");         \n        nameElement = stuElement.addElement(\"name\");  \n        ageElement = stuElement.addElement(\"age\");     \n        nameElement.addText(\"赵四\");  \n        ageElement.addText(\"34\");  \n        try {  \n            OutputFormat format = OutputFormat.createPrettyPrint();  \n            // 设置XML文件的编码格式  \n            format.setEncoding(\"UTF-8\");  \n            return document.asXML();  \n        } catch (Exception e) {  \n            System.out.println(e.getMessage());  \n            return \"error\";  \n        }  \n    }  \n} \n```\n这样就将我们想传送的复杂数据变成了xml格式是字符串，下面在客户端就可以解释出我们想要的数据了。client端java代码如下：\n``` java\nimport java.io.StringReader;  \nimport java.util.List;  \nimport org.dom4j.Document;  \nimport org.dom4j.Element;  \nimport org.dom4j.io.SAXReader;  \nimport webservice.Service02Proxy;  \npublic class Test {  \n    public static void main(String[] args) {         \n        try{  \n            //创建代理类  \n            Service02Proxy proxy = new Service02Proxy();  \n            //接受传过来的XML字符串  \n            String str = proxy.method();  \n            //解释该字符串  \n            StringReader read = new StringReader(str);  \n            SAXReader reader = new SAXReader();  \n            Document doc = reader.read(read);   \n            Element root = doc.getRootElement();  \n            //该节点由多个student构成，所以返回值是List类型  \n            List list = root.elements(\"student\");   \n             \n            for(int i = 0;i < list.size();i++){  \n                 \n                Element student = (Element)list.get(i);  \n                Element name = student.element(\"name\");  \n                Element age = student.element(\"age\");  \n                 \n                //打印得到的数据  \n                System.out.println(name.getTextTrim()+\":\"+age.getTextTrim());  \n                 \n            }  \n     \n        }catch(Exception e){  \n             \n            e.printStackTrace();  \n             \n        }  \n    }  \n}\n```\n控制台输出为：\n> **张三:26\n赵四:34 **\n\n每种编程语言可能接受时用的类型不同，但方法大同小异。代码如有问题，欢迎给予评价。","slug":"WebService复杂类型数据传输-dom4j方式","published":1,"updated":"2019-07-01T12:35:47.381Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjycv1m3k000eok9mj7dvfoba","content":"<p>WebService在传递数据的时候只能传递字符串，当我们返回一些简单的字符串时我们可以直接返回，但是当我们想返回比如List，Map等复杂类型的数据时拼接字符串就是个很麻烦的工作，这时我们就用到了dom4j这个工具。</p>\n<p>当我们从数据库中查询出很多个对象类型时，我们一般都存放在List中。像这种数据就很难用拼接字符串的形式进行传递。我的解决办法就是利用dom4j把它写成一个xml格式的字符串，然后在客户端再利用dom4j解释。<br><a id=\"more\"></a><br>假如我们从数据库中查询的是一个Student对象，该对象有name和agel两个属性，我们将大量的Student对象储存在List中。下面我们想利用dom4j把List数据变成如下格式的xml文件类型的字符串：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>  </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">root</span>&gt;</span>  </span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">student</span>&gt;</span>  </span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>张三<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>  </span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">age</span>&gt;</span>26<span class=\"tag\">&lt;/<span class=\"name\">age</span>&gt;</span>  </span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">student</span>&gt;</span>  </span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">student</span>&gt;</span>  </span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>赵四<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>  </span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">age</span>&gt;</span>34<span class=\"tag\">&lt;/<span class=\"name\">age</span>&gt;</span>  </span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">student</span>&gt;</span>  </span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>webservice端Java代码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;  </span><br><span class=\"line\"><span class=\"keyword\">import</span> org.dom4j.Document;  </span><br><span class=\"line\"><span class=\"keyword\">import</span> org.dom4j.DocumentHelper;  </span><br><span class=\"line\"><span class=\"keyword\">import</span> org.dom4j.Element;  </span><br><span class=\"line\"><span class=\"keyword\">import</span> org.dom4j.io.OutputFormat;  </span><br><span class=\"line\"><span class=\"keyword\">import</span> vo.UnitPO;  </span><br><span class=\"line\"><span class=\"keyword\">import</span> DAO.unitDao;  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Service02</span> </span>&#123;     </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">method</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">         </span><br><span class=\"line\">        Document document = DocumentHelper.createDocument();  </span><br><span class=\"line\">        Element root = document.addElement(<span class=\"string\">\"root\"</span>);  </span><br><span class=\"line\">         </span><br><span class=\"line\">        Element stuElement = <span class=\"keyword\">null</span>;  </span><br><span class=\"line\">        Element nameElement = <span class=\"keyword\">null</span>;  </span><br><span class=\"line\">        Element ageElement = <span class=\"keyword\">null</span>;  </span><br><span class=\"line\">         </span><br><span class=\"line\">        <span class=\"comment\">//第一个student节点  </span></span><br><span class=\"line\">        stuElement = root.addElement(<span class=\"string\">\"student\"</span>);  </span><br><span class=\"line\">        <span class=\"comment\">//添加两个子节点  </span></span><br><span class=\"line\">        nameElement = stuElement.addElement(<span class=\"string\">\"name\"</span>);  </span><br><span class=\"line\">        ageElement = stuElement.addElement(<span class=\"string\">\"age\"</span>);     </span><br><span class=\"line\">        <span class=\"comment\">//向两个子节点中添加文本内容  </span></span><br><span class=\"line\">        nameElement.addText(<span class=\"string\">\"张三\"</span>);  </span><br><span class=\"line\">        ageElement.addText(<span class=\"string\">\"26\"</span>);  </span><br><span class=\"line\">         </span><br><span class=\"line\">        <span class=\"comment\">//同理第二个student节点  </span></span><br><span class=\"line\">        stuElement = root.addElement(<span class=\"string\">\"student\"</span>);         </span><br><span class=\"line\">        nameElement = stuElement.addElement(<span class=\"string\">\"name\"</span>);  </span><br><span class=\"line\">        ageElement = stuElement.addElement(<span class=\"string\">\"age\"</span>);     </span><br><span class=\"line\">        nameElement.addText(<span class=\"string\">\"赵四\"</span>);  </span><br><span class=\"line\">        ageElement.addText(<span class=\"string\">\"34\"</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;  </span><br><span class=\"line\">            OutputFormat format = OutputFormat.createPrettyPrint();  </span><br><span class=\"line\">            <span class=\"comment\">// 设置XML文件的编码格式  </span></span><br><span class=\"line\">            format.setEncoding(<span class=\"string\">\"UTF-8\"</span>);  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> document.asXML();  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;  </span><br><span class=\"line\">            System.out.println(e.getMessage());  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"error\"</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这样就将我们想传送的复杂数据变成了xml格式是字符串，下面在客户端就可以解释出我们想要的数据了。client端java代码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.StringReader;  </span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;  </span><br><span class=\"line\"><span class=\"keyword\">import</span> org.dom4j.Document;  </span><br><span class=\"line\"><span class=\"keyword\">import</span> org.dom4j.Element;  </span><br><span class=\"line\"><span class=\"keyword\">import</span> org.dom4j.io.SAXReader;  </span><br><span class=\"line\"><span class=\"keyword\">import</span> webservice.Service02Proxy;  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;         </span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;  </span><br><span class=\"line\">            <span class=\"comment\">//创建代理类  </span></span><br><span class=\"line\">            Service02Proxy proxy = <span class=\"keyword\">new</span> Service02Proxy();  </span><br><span class=\"line\">            <span class=\"comment\">//接受传过来的XML字符串  </span></span><br><span class=\"line\">            String str = proxy.method();  </span><br><span class=\"line\">            <span class=\"comment\">//解释该字符串  </span></span><br><span class=\"line\">            StringReader read = <span class=\"keyword\">new</span> StringReader(str);  </span><br><span class=\"line\">            SAXReader reader = <span class=\"keyword\">new</span> SAXReader();  </span><br><span class=\"line\">            Document doc = reader.read(read);   </span><br><span class=\"line\">            Element root = doc.getRootElement();  </span><br><span class=\"line\">            <span class=\"comment\">//该节点由多个student构成，所以返回值是List类型  </span></span><br><span class=\"line\">            List list = root.elements(<span class=\"string\">\"student\"</span>);   </span><br><span class=\"line\">             </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; list.size();i++)&#123;  </span><br><span class=\"line\">                 </span><br><span class=\"line\">                Element student = (Element)list.get(i);  </span><br><span class=\"line\">                Element name = student.element(<span class=\"string\">\"name\"</span>);  </span><br><span class=\"line\">                Element age = student.element(<span class=\"string\">\"age\"</span>);  </span><br><span class=\"line\">                 </span><br><span class=\"line\">                <span class=\"comment\">//打印得到的数据  </span></span><br><span class=\"line\">                System.out.println(name.getTextTrim()+<span class=\"string\">\":\"</span>+age.getTextTrim());  </span><br><span class=\"line\">                 </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">     </span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span>(Exception e)&#123;  </span><br><span class=\"line\">             </span><br><span class=\"line\">            e.printStackTrace();  </span><br><span class=\"line\">             </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>控制台输出为：</p>\n<blockquote>\n<p><strong>张三:26<br>赵四:34 </strong></p>\n</blockquote>\n<p>每种编程语言可能接受时用的类型不同，但方法大同小异。代码如有问题，欢迎给予评价。</p>\n","site":{"data":{}},"excerpt":"<p>WebService在传递数据的时候只能传递字符串，当我们返回一些简单的字符串时我们可以直接返回，但是当我们想返回比如List，Map等复杂类型的数据时拼接字符串就是个很麻烦的工作，这时我们就用到了dom4j这个工具。</p>\n<p>当我们从数据库中查询出很多个对象类型时，我们一般都存放在List中。像这种数据就很难用拼接字符串的形式进行传递。我的解决办法就是利用dom4j把它写成一个xml格式的字符串，然后在客户端再利用dom4j解释。<br>","more":"<br>假如我们从数据库中查询的是一个Student对象，该对象有name和agel两个属性，我们将大量的Student对象储存在List中。下面我们想利用dom4j把List数据变成如下格式的xml文件类型的字符串：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>  </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">root</span>&gt;</span>  </span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">student</span>&gt;</span>  </span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>张三<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>  </span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">age</span>&gt;</span>26<span class=\"tag\">&lt;/<span class=\"name\">age</span>&gt;</span>  </span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">student</span>&gt;</span>  </span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">student</span>&gt;</span>  </span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>赵四<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>  </span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">age</span>&gt;</span>34<span class=\"tag\">&lt;/<span class=\"name\">age</span>&gt;</span>  </span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">student</span>&gt;</span>  </span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>webservice端Java代码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;  </span><br><span class=\"line\"><span class=\"keyword\">import</span> org.dom4j.Document;  </span><br><span class=\"line\"><span class=\"keyword\">import</span> org.dom4j.DocumentHelper;  </span><br><span class=\"line\"><span class=\"keyword\">import</span> org.dom4j.Element;  </span><br><span class=\"line\"><span class=\"keyword\">import</span> org.dom4j.io.OutputFormat;  </span><br><span class=\"line\"><span class=\"keyword\">import</span> vo.UnitPO;  </span><br><span class=\"line\"><span class=\"keyword\">import</span> DAO.unitDao;  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Service02</span> </span>&#123;     </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">method</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">         </span><br><span class=\"line\">        Document document = DocumentHelper.createDocument();  </span><br><span class=\"line\">        Element root = document.addElement(<span class=\"string\">\"root\"</span>);  </span><br><span class=\"line\">         </span><br><span class=\"line\">        Element stuElement = <span class=\"keyword\">null</span>;  </span><br><span class=\"line\">        Element nameElement = <span class=\"keyword\">null</span>;  </span><br><span class=\"line\">        Element ageElement = <span class=\"keyword\">null</span>;  </span><br><span class=\"line\">         </span><br><span class=\"line\">        <span class=\"comment\">//第一个student节点  </span></span><br><span class=\"line\">        stuElement = root.addElement(<span class=\"string\">\"student\"</span>);  </span><br><span class=\"line\">        <span class=\"comment\">//添加两个子节点  </span></span><br><span class=\"line\">        nameElement = stuElement.addElement(<span class=\"string\">\"name\"</span>);  </span><br><span class=\"line\">        ageElement = stuElement.addElement(<span class=\"string\">\"age\"</span>);     </span><br><span class=\"line\">        <span class=\"comment\">//向两个子节点中添加文本内容  </span></span><br><span class=\"line\">        nameElement.addText(<span class=\"string\">\"张三\"</span>);  </span><br><span class=\"line\">        ageElement.addText(<span class=\"string\">\"26\"</span>);  </span><br><span class=\"line\">         </span><br><span class=\"line\">        <span class=\"comment\">//同理第二个student节点  </span></span><br><span class=\"line\">        stuElement = root.addElement(<span class=\"string\">\"student\"</span>);         </span><br><span class=\"line\">        nameElement = stuElement.addElement(<span class=\"string\">\"name\"</span>);  </span><br><span class=\"line\">        ageElement = stuElement.addElement(<span class=\"string\">\"age\"</span>);     </span><br><span class=\"line\">        nameElement.addText(<span class=\"string\">\"赵四\"</span>);  </span><br><span class=\"line\">        ageElement.addText(<span class=\"string\">\"34\"</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;  </span><br><span class=\"line\">            OutputFormat format = OutputFormat.createPrettyPrint();  </span><br><span class=\"line\">            <span class=\"comment\">// 设置XML文件的编码格式  </span></span><br><span class=\"line\">            format.setEncoding(<span class=\"string\">\"UTF-8\"</span>);  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> document.asXML();  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;  </span><br><span class=\"line\">            System.out.println(e.getMessage());  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"error\"</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这样就将我们想传送的复杂数据变成了xml格式是字符串，下面在客户端就可以解释出我们想要的数据了。client端java代码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.StringReader;  </span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;  </span><br><span class=\"line\"><span class=\"keyword\">import</span> org.dom4j.Document;  </span><br><span class=\"line\"><span class=\"keyword\">import</span> org.dom4j.Element;  </span><br><span class=\"line\"><span class=\"keyword\">import</span> org.dom4j.io.SAXReader;  </span><br><span class=\"line\"><span class=\"keyword\">import</span> webservice.Service02Proxy;  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;         </span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;  </span><br><span class=\"line\">            <span class=\"comment\">//创建代理类  </span></span><br><span class=\"line\">            Service02Proxy proxy = <span class=\"keyword\">new</span> Service02Proxy();  </span><br><span class=\"line\">            <span class=\"comment\">//接受传过来的XML字符串  </span></span><br><span class=\"line\">            String str = proxy.method();  </span><br><span class=\"line\">            <span class=\"comment\">//解释该字符串  </span></span><br><span class=\"line\">            StringReader read = <span class=\"keyword\">new</span> StringReader(str);  </span><br><span class=\"line\">            SAXReader reader = <span class=\"keyword\">new</span> SAXReader();  </span><br><span class=\"line\">            Document doc = reader.read(read);   </span><br><span class=\"line\">            Element root = doc.getRootElement();  </span><br><span class=\"line\">            <span class=\"comment\">//该节点由多个student构成，所以返回值是List类型  </span></span><br><span class=\"line\">            List list = root.elements(<span class=\"string\">\"student\"</span>);   </span><br><span class=\"line\">             </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; list.size();i++)&#123;  </span><br><span class=\"line\">                 </span><br><span class=\"line\">                Element student = (Element)list.get(i);  </span><br><span class=\"line\">                Element name = student.element(<span class=\"string\">\"name\"</span>);  </span><br><span class=\"line\">                Element age = student.element(<span class=\"string\">\"age\"</span>);  </span><br><span class=\"line\">                 </span><br><span class=\"line\">                <span class=\"comment\">//打印得到的数据  </span></span><br><span class=\"line\">                System.out.println(name.getTextTrim()+<span class=\"string\">\":\"</span>+age.getTextTrim());  </span><br><span class=\"line\">                 </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">     </span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span>(Exception e)&#123;  </span><br><span class=\"line\">             </span><br><span class=\"line\">            e.printStackTrace();  </span><br><span class=\"line\">             </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>控制台输出为：</p>\n<blockquote>\n<p><strong>张三:26<br>赵四:34 </strong></p>\n</blockquote>\n<p>每种编程语言可能接受时用的类型不同，但方法大同小异。代码如有问题，欢迎给予评价。</p>"},{"title":"cocos2d-x游戏中的性能优化和内存优化","date":"2017-01-06T15:14:36.000Z","_content":"在游行开发的中后期所有的团队基本都会遇到两个通性问题：卡顿和崩溃。造成卡顿也就是迪奥帧的原因主要是CPU计算量和GPU渲染压力过大。造成程序崩溃的原因基本也是两种情况，一种是代码错误造成的崩溃，另一种是我们主要讨论的内存过高造成的崩溃。下面就对游戏中遇到的这两个问题进行讨论，讨论的游戏主要是针对2D游戏，当然很多情况是2D和3D游戏中共同存在的。<!--more-->\n\n- __载入纹理时按照从大到小的顺序，并且分帧加载。__因为cocos2dx中加载一张纹理，要占用两倍的纹理空间，多余的内存会在这帧结束时释放掉，所以从大到小，分帧加载的策略可以高效的使用内存防止内存峰值过高造成崩溃。需要注意的是避免使用超大纹理。\n- __资源格式的选择。__主要有3个因素会影响纹理内存，即纹理格式（压缩还是非压缩）、颜色深度和大小。我们可以使用PVR格式纹理减少内存使用。推荐纹理格式为pvr.ccz。纹理使用的每种颜色位数越多，图像质量越好，但是越耗内存。所以我们可以使用颜色深度为RGB4444的纹理代替RGB8888，这样内存消耗会降低一半。如果图片不需要透明通道就不要加上透明通道，这样还可以节省内存的使用。同时pvr格式的纹理在上传到gpu时的速度也要比其他格式更快一些。\n- __减少绘制调用和上传gpu压力。__首先纹理需要上传到gpu中渲染绘制，越小的纹理上传的速度越快，所以要控制避免有较大的纹理一次上传到显存中，上面说过pvr格式的纹理上传速度会快些，同时大量的纹理上传会造成程序瞬间卡顿，因为纹理上传是占用主线程的，所以低一点中的分帧加载在这里也适用。还有就是绘制的压力，同屏中显示对象的数量会影响绘制的性能，所以在合理的情况下要尽量减少显示对象的数量。同时我们要尽量将散图打到一张整图中，因为在cocos2dx引擎的底层中，在同一张纹理上的显示对象只会调用一次绘制命令，相当于BatchNode。这里需要特别注意的是减少绘制要打到整图中和为了加快纹理上传速度要减小纹理大小是个相悖的条件，所以我们要根据实际情况来衡量这两点。一般情况下每帧上传一张1024*1024的rgba8888格式的纹理是不会出现卡顿的，所以建议每次上传不要超过这个大小。如果是rgb4444的纹理那么大小会减少一半，上传会更快一些。\n- __降低UI复杂度。__降低复杂度有很多方式，第一种方式是减少显示对象数量，比如拿文本框来说，经常在游戏中会有显示金币的地方，例如：“金币：99”。有很多人在ui里会将标题和数量分开，定义两个文本框，这里如果没有特殊表现的话，就应该合并成一个文本框，这样就减少了一个对象的绘制。同理有很多东西都可以减少，例如Sprite等，项目中具体情况具体对待。第二种方式是降低UI树的复杂度，上一点中减少数量也会达到一个降低UIU树复杂度的效果，在这个同时，我们还要尽量降低UI树的深度，降低树的深度可以有效的提高绘制遍历的速度，在设计ui的时候，我们往往为了易于管理，会创建很多空面板，或节点，来达到管理ui中各个部件的作用，但是有时我们会增加的过于复杂，这里尽量降低这种复杂度就可以提高绘制效率。最后我们还要控制资源的规格，首先游戏中很多ui是通用的，比如通用的按钮，图标，面板等，我们打到一张贴图上，作为通用资源常驻内存，然后每个ui独特的资源单独打成贴图，在使用的时候加载到内存中，使用结束后释放掉。\n- __UI设计的时候要提高UI通用资源的使用率。__优化资源到最小，比如使用九宫格图片，采用旋转缩放等丰富资源表现力等。\n- __动画文件的处理。__动画一般有两种选择，帧动画和骨骼动画。帧动画的优点就是运算不耗性能，并且表现较好，缺点就是当帧数较多时，资源量比较大，并且占用内存较高，所以不太适合做过于复杂的动画，比如动作和技能较多的ARPG角色如果纯用帧动画来实现，会使用很多资源，在加载时就不能加载过多的角色，这样就局限了游戏的设计，同场景角色数量不能过多。与之相对应的就是骨骼动画，骨骼动画的特点就是节省资源，一套骨骼可以做很多套动作，新增动作也不会对文件大小有明显的增加，缺点也比较明显，就是因为骨骼动画是通过计算，然后进行旋转，位移等实现的，所以当动画比较复杂，骨骼数量较多时，计算量就会很大，对CPU的计算增加了压力，压力过大时就会掉帧卡顿。当团队技术较好，并且美术程序沟通配合默契的团队可以采用帧动画与骨骼动画相结合的方案。美术在设计时动作大部分采用骨骼，局部需要表现效果的地方使用帧动画到处的贴图来实现，美术人员在设计时要充分考虑到资源利用，利用旋转缩放功能丰富动画，同时还要考虑骨骼数量、节点深度等队性能等影响。\n- __游戏音效的规格及优化。__游戏音效在使用中也有很多问题，音效占用的资源空间、运行时内存和加载效率等。首先需要考虑使用资源的格式，在各个平台下，资源格式的支持也都不同，平台及支持的常见文件格式如下：  \nAndroid ：mp3, mid, oggg, wav  \niOS ：mac, caf, mp3, m4a, wav  \nWindows ： mid, mp3, wav  \n通常我在项目中会针对不同平台加载不通资源，一般android常用oggg，iOS中常用caf，windows下一般都是调试用的，也没怎么优化过，直接用的mp3格式。同时音效资源也需要处理，音频优化,3个因素会影响音频文件的内存使用，即音频文件数据格式、比特率及采样率。推荐使用MP3数据格式的音频文件，因为Android平台和iOS平台均支持MP3格式，此外MP3格式经过压缩和硬件加速。背景音乐文件大小应该低于800KB，最简单的方法就是减少背景音乐时间然后重复播放。音频文件采样率大约在96-128kbps为佳，比特率44kHz就够了。\n- __游戏逻辑的相关优化。__在代码中，不要在主循环中做复杂的逻辑处理，例如for循环更新、查找等，可以利用缓冲等技术，解决和优化在主循环中每帧的效能。部分不重要的逻辑，或者要求即时反馈不高的逻辑可以适当的采取抽帧，也就是不是每帧都进行运算和刷新，这样可以降低很多运算量。同时游戏的玩法逻辑也有很多可以优化的地方，比如射击游戏的子弹可以做缓存，减少频繁的创建和销毁对象；RPG游戏中的地图可以做成异步分块加载，不显示的可以不去加载渲染等。\n- __代码级别的优化。__这点比较简单，在编写程序时，算法最优，并且不要有内存泄漏等。\n- __最后就是引擎级别的优化。__我们使用的是cocos2dx进行的项目开发，在该引擎中，存在的bug、性能等问题也有很多可以优化的地方。在我们项目中，就修改过spine的内存泄漏问题、ui加载速度问题、还有关于对象拷贝的性能问题等。修改引擎要对引擎比较了解，并且修改后引擎的版本再次升级是还要把修改合并过去，这里也建议大家发现问题可以到引擎的Github上提交request。如果对渲染比较了解的还可以对渲染级别进行优化。\n\n\n\n\n","source":"_posts/cocos2dx-xingneng.md","raw":"---\ntitle: cocos2d-x游戏中的性能优化和内存优化\ndate: 2017-01-06 23:14:36\ntags: cocos2d-x,性能优化\ncategories: cocos2d-x\n---\n在游行开发的中后期所有的团队基本都会遇到两个通性问题：卡顿和崩溃。造成卡顿也就是迪奥帧的原因主要是CPU计算量和GPU渲染压力过大。造成程序崩溃的原因基本也是两种情况，一种是代码错误造成的崩溃，另一种是我们主要讨论的内存过高造成的崩溃。下面就对游戏中遇到的这两个问题进行讨论，讨论的游戏主要是针对2D游戏，当然很多情况是2D和3D游戏中共同存在的。<!--more-->\n\n- __载入纹理时按照从大到小的顺序，并且分帧加载。__因为cocos2dx中加载一张纹理，要占用两倍的纹理空间，多余的内存会在这帧结束时释放掉，所以从大到小，分帧加载的策略可以高效的使用内存防止内存峰值过高造成崩溃。需要注意的是避免使用超大纹理。\n- __资源格式的选择。__主要有3个因素会影响纹理内存，即纹理格式（压缩还是非压缩）、颜色深度和大小。我们可以使用PVR格式纹理减少内存使用。推荐纹理格式为pvr.ccz。纹理使用的每种颜色位数越多，图像质量越好，但是越耗内存。所以我们可以使用颜色深度为RGB4444的纹理代替RGB8888，这样内存消耗会降低一半。如果图片不需要透明通道就不要加上透明通道，这样还可以节省内存的使用。同时pvr格式的纹理在上传到gpu时的速度也要比其他格式更快一些。\n- __减少绘制调用和上传gpu压力。__首先纹理需要上传到gpu中渲染绘制，越小的纹理上传的速度越快，所以要控制避免有较大的纹理一次上传到显存中，上面说过pvr格式的纹理上传速度会快些，同时大量的纹理上传会造成程序瞬间卡顿，因为纹理上传是占用主线程的，所以低一点中的分帧加载在这里也适用。还有就是绘制的压力，同屏中显示对象的数量会影响绘制的性能，所以在合理的情况下要尽量减少显示对象的数量。同时我们要尽量将散图打到一张整图中，因为在cocos2dx引擎的底层中，在同一张纹理上的显示对象只会调用一次绘制命令，相当于BatchNode。这里需要特别注意的是减少绘制要打到整图中和为了加快纹理上传速度要减小纹理大小是个相悖的条件，所以我们要根据实际情况来衡量这两点。一般情况下每帧上传一张1024*1024的rgba8888格式的纹理是不会出现卡顿的，所以建议每次上传不要超过这个大小。如果是rgb4444的纹理那么大小会减少一半，上传会更快一些。\n- __降低UI复杂度。__降低复杂度有很多方式，第一种方式是减少显示对象数量，比如拿文本框来说，经常在游戏中会有显示金币的地方，例如：“金币：99”。有很多人在ui里会将标题和数量分开，定义两个文本框，这里如果没有特殊表现的话，就应该合并成一个文本框，这样就减少了一个对象的绘制。同理有很多东西都可以减少，例如Sprite等，项目中具体情况具体对待。第二种方式是降低UI树的复杂度，上一点中减少数量也会达到一个降低UIU树复杂度的效果，在这个同时，我们还要尽量降低UI树的深度，降低树的深度可以有效的提高绘制遍历的速度，在设计ui的时候，我们往往为了易于管理，会创建很多空面板，或节点，来达到管理ui中各个部件的作用，但是有时我们会增加的过于复杂，这里尽量降低这种复杂度就可以提高绘制效率。最后我们还要控制资源的规格，首先游戏中很多ui是通用的，比如通用的按钮，图标，面板等，我们打到一张贴图上，作为通用资源常驻内存，然后每个ui独特的资源单独打成贴图，在使用的时候加载到内存中，使用结束后释放掉。\n- __UI设计的时候要提高UI通用资源的使用率。__优化资源到最小，比如使用九宫格图片，采用旋转缩放等丰富资源表现力等。\n- __动画文件的处理。__动画一般有两种选择，帧动画和骨骼动画。帧动画的优点就是运算不耗性能，并且表现较好，缺点就是当帧数较多时，资源量比较大，并且占用内存较高，所以不太适合做过于复杂的动画，比如动作和技能较多的ARPG角色如果纯用帧动画来实现，会使用很多资源，在加载时就不能加载过多的角色，这样就局限了游戏的设计，同场景角色数量不能过多。与之相对应的就是骨骼动画，骨骼动画的特点就是节省资源，一套骨骼可以做很多套动作，新增动作也不会对文件大小有明显的增加，缺点也比较明显，就是因为骨骼动画是通过计算，然后进行旋转，位移等实现的，所以当动画比较复杂，骨骼数量较多时，计算量就会很大，对CPU的计算增加了压力，压力过大时就会掉帧卡顿。当团队技术较好，并且美术程序沟通配合默契的团队可以采用帧动画与骨骼动画相结合的方案。美术在设计时动作大部分采用骨骼，局部需要表现效果的地方使用帧动画到处的贴图来实现，美术人员在设计时要充分考虑到资源利用，利用旋转缩放功能丰富动画，同时还要考虑骨骼数量、节点深度等队性能等影响。\n- __游戏音效的规格及优化。__游戏音效在使用中也有很多问题，音效占用的资源空间、运行时内存和加载效率等。首先需要考虑使用资源的格式，在各个平台下，资源格式的支持也都不同，平台及支持的常见文件格式如下：  \nAndroid ：mp3, mid, oggg, wav  \niOS ：mac, caf, mp3, m4a, wav  \nWindows ： mid, mp3, wav  \n通常我在项目中会针对不同平台加载不通资源，一般android常用oggg，iOS中常用caf，windows下一般都是调试用的，也没怎么优化过，直接用的mp3格式。同时音效资源也需要处理，音频优化,3个因素会影响音频文件的内存使用，即音频文件数据格式、比特率及采样率。推荐使用MP3数据格式的音频文件，因为Android平台和iOS平台均支持MP3格式，此外MP3格式经过压缩和硬件加速。背景音乐文件大小应该低于800KB，最简单的方法就是减少背景音乐时间然后重复播放。音频文件采样率大约在96-128kbps为佳，比特率44kHz就够了。\n- __游戏逻辑的相关优化。__在代码中，不要在主循环中做复杂的逻辑处理，例如for循环更新、查找等，可以利用缓冲等技术，解决和优化在主循环中每帧的效能。部分不重要的逻辑，或者要求即时反馈不高的逻辑可以适当的采取抽帧，也就是不是每帧都进行运算和刷新，这样可以降低很多运算量。同时游戏的玩法逻辑也有很多可以优化的地方，比如射击游戏的子弹可以做缓存，减少频繁的创建和销毁对象；RPG游戏中的地图可以做成异步分块加载，不显示的可以不去加载渲染等。\n- __代码级别的优化。__这点比较简单，在编写程序时，算法最优，并且不要有内存泄漏等。\n- __最后就是引擎级别的优化。__我们使用的是cocos2dx进行的项目开发，在该引擎中，存在的bug、性能等问题也有很多可以优化的地方。在我们项目中，就修改过spine的内存泄漏问题、ui加载速度问题、还有关于对象拷贝的性能问题等。修改引擎要对引擎比较了解，并且修改后引擎的版本再次升级是还要把修改合并过去，这里也建议大家发现问题可以到引擎的Github上提交request。如果对渲染比较了解的还可以对渲染级别进行优化。\n\n\n\n\n","slug":"cocos2dx-xingneng","published":1,"updated":"2019-07-01T12:35:47.382Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjycv1m3k000fok9mi8gttwtz","content":"<p>在游行开发的中后期所有的团队基本都会遇到两个通性问题：卡顿和崩溃。造成卡顿也就是迪奥帧的原因主要是CPU计算量和GPU渲染压力过大。造成程序崩溃的原因基本也是两种情况，一种是代码错误造成的崩溃，另一种是我们主要讨论的内存过高造成的崩溃。下面就对游戏中遇到的这两个问题进行讨论，讨论的游戏主要是针对2D游戏，当然很多情况是2D和3D游戏中共同存在的。<a id=\"more\"></a></p>\n<ul>\n<li><strong>载入纹理时按照从大到小的顺序，并且分帧加载。</strong>因为cocos2dx中加载一张纹理，要占用两倍的纹理空间，多余的内存会在这帧结束时释放掉，所以从大到小，分帧加载的策略可以高效的使用内存防止内存峰值过高造成崩溃。需要注意的是避免使用超大纹理。</li>\n<li><strong>资源格式的选择。</strong>主要有3个因素会影响纹理内存，即纹理格式（压缩还是非压缩）、颜色深度和大小。我们可以使用PVR格式纹理减少内存使用。推荐纹理格式为pvr.ccz。纹理使用的每种颜色位数越多，图像质量越好，但是越耗内存。所以我们可以使用颜色深度为RGB4444的纹理代替RGB8888，这样内存消耗会降低一半。如果图片不需要透明通道就不要加上透明通道，这样还可以节省内存的使用。同时pvr格式的纹理在上传到gpu时的速度也要比其他格式更快一些。</li>\n<li><strong>减少绘制调用和上传gpu压力。</strong>首先纹理需要上传到gpu中渲染绘制，越小的纹理上传的速度越快，所以要控制避免有较大的纹理一次上传到显存中，上面说过pvr格式的纹理上传速度会快些，同时大量的纹理上传会造成程序瞬间卡顿，因为纹理上传是占用主线程的，所以低一点中的分帧加载在这里也适用。还有就是绘制的压力，同屏中显示对象的数量会影响绘制的性能，所以在合理的情况下要尽量减少显示对象的数量。同时我们要尽量将散图打到一张整图中，因为在cocos2dx引擎的底层中，在同一张纹理上的显示对象只会调用一次绘制命令，相当于BatchNode。这里需要特别注意的是减少绘制要打到整图中和为了加快纹理上传速度要减小纹理大小是个相悖的条件，所以我们要根据实际情况来衡量这两点。一般情况下每帧上传一张1024*1024的rgba8888格式的纹理是不会出现卡顿的，所以建议每次上传不要超过这个大小。如果是rgb4444的纹理那么大小会减少一半，上传会更快一些。</li>\n<li><strong>降低UI复杂度。</strong>降低复杂度有很多方式，第一种方式是减少显示对象数量，比如拿文本框来说，经常在游戏中会有显示金币的地方，例如：“金币：99”。有很多人在ui里会将标题和数量分开，定义两个文本框，这里如果没有特殊表现的话，就应该合并成一个文本框，这样就减少了一个对象的绘制。同理有很多东西都可以减少，例如Sprite等，项目中具体情况具体对待。第二种方式是降低UI树的复杂度，上一点中减少数量也会达到一个降低UIU树复杂度的效果，在这个同时，我们还要尽量降低UI树的深度，降低树的深度可以有效的提高绘制遍历的速度，在设计ui的时候，我们往往为了易于管理，会创建很多空面板，或节点，来达到管理ui中各个部件的作用，但是有时我们会增加的过于复杂，这里尽量降低这种复杂度就可以提高绘制效率。最后我们还要控制资源的规格，首先游戏中很多ui是通用的，比如通用的按钮，图标，面板等，我们打到一张贴图上，作为通用资源常驻内存，然后每个ui独特的资源单独打成贴图，在使用的时候加载到内存中，使用结束后释放掉。</li>\n<li><strong>UI设计的时候要提高UI通用资源的使用率。</strong>优化资源到最小，比如使用九宫格图片，采用旋转缩放等丰富资源表现力等。</li>\n<li><strong>动画文件的处理。</strong>动画一般有两种选择，帧动画和骨骼动画。帧动画的优点就是运算不耗性能，并且表现较好，缺点就是当帧数较多时，资源量比较大，并且占用内存较高，所以不太适合做过于复杂的动画，比如动作和技能较多的ARPG角色如果纯用帧动画来实现，会使用很多资源，在加载时就不能加载过多的角色，这样就局限了游戏的设计，同场景角色数量不能过多。与之相对应的就是骨骼动画，骨骼动画的特点就是节省资源，一套骨骼可以做很多套动作，新增动作也不会对文件大小有明显的增加，缺点也比较明显，就是因为骨骼动画是通过计算，然后进行旋转，位移等实现的，所以当动画比较复杂，骨骼数量较多时，计算量就会很大，对CPU的计算增加了压力，压力过大时就会掉帧卡顿。当团队技术较好，并且美术程序沟通配合默契的团队可以采用帧动画与骨骼动画相结合的方案。美术在设计时动作大部分采用骨骼，局部需要表现效果的地方使用帧动画到处的贴图来实现，美术人员在设计时要充分考虑到资源利用，利用旋转缩放功能丰富动画，同时还要考虑骨骼数量、节点深度等队性能等影响。</li>\n<li><strong>游戏音效的规格及优化。</strong>游戏音效在使用中也有很多问题，音效占用的资源空间、运行时内存和加载效率等。首先需要考虑使用资源的格式，在各个平台下，资源格式的支持也都不同，平台及支持的常见文件格式如下：<br>Android ：mp3, mid, oggg, wav<br>iOS ：mac, caf, mp3, m4a, wav<br>Windows ： mid, mp3, wav<br>通常我在项目中会针对不同平台加载不通资源，一般android常用oggg，iOS中常用caf，windows下一般都是调试用的，也没怎么优化过，直接用的mp3格式。同时音效资源也需要处理，音频优化,3个因素会影响音频文件的内存使用，即音频文件数据格式、比特率及采样率。推荐使用MP3数据格式的音频文件，因为Android平台和iOS平台均支持MP3格式，此外MP3格式经过压缩和硬件加速。背景音乐文件大小应该低于800KB，最简单的方法就是减少背景音乐时间然后重复播放。音频文件采样率大约在96-128kbps为佳，比特率44kHz就够了。</li>\n<li><strong>游戏逻辑的相关优化。</strong>在代码中，不要在主循环中做复杂的逻辑处理，例如for循环更新、查找等，可以利用缓冲等技术，解决和优化在主循环中每帧的效能。部分不重要的逻辑，或者要求即时反馈不高的逻辑可以适当的采取抽帧，也就是不是每帧都进行运算和刷新，这样可以降低很多运算量。同时游戏的玩法逻辑也有很多可以优化的地方，比如射击游戏的子弹可以做缓存，减少频繁的创建和销毁对象；RPG游戏中的地图可以做成异步分块加载，不显示的可以不去加载渲染等。</li>\n<li><strong>代码级别的优化。</strong>这点比较简单，在编写程序时，算法最优，并且不要有内存泄漏等。</li>\n<li><strong>最后就是引擎级别的优化。</strong>我们使用的是cocos2dx进行的项目开发，在该引擎中，存在的bug、性能等问题也有很多可以优化的地方。在我们项目中，就修改过spine的内存泄漏问题、ui加载速度问题、还有关于对象拷贝的性能问题等。修改引擎要对引擎比较了解，并且修改后引擎的版本再次升级是还要把修改合并过去，这里也建议大家发现问题可以到引擎的Github上提交request。如果对渲染比较了解的还可以对渲染级别进行优化。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>在游行开发的中后期所有的团队基本都会遇到两个通性问题：卡顿和崩溃。造成卡顿也就是迪奥帧的原因主要是CPU计算量和GPU渲染压力过大。造成程序崩溃的原因基本也是两种情况，一种是代码错误造成的崩溃，另一种是我们主要讨论的内存过高造成的崩溃。下面就对游戏中遇到的这两个问题进行讨论，讨论的游戏主要是针对2D游戏，当然很多情况是2D和3D游戏中共同存在的。","more":"</p>\n<ul>\n<li><strong>载入纹理时按照从大到小的顺序，并且分帧加载。</strong>因为cocos2dx中加载一张纹理，要占用两倍的纹理空间，多余的内存会在这帧结束时释放掉，所以从大到小，分帧加载的策略可以高效的使用内存防止内存峰值过高造成崩溃。需要注意的是避免使用超大纹理。</li>\n<li><strong>资源格式的选择。</strong>主要有3个因素会影响纹理内存，即纹理格式（压缩还是非压缩）、颜色深度和大小。我们可以使用PVR格式纹理减少内存使用。推荐纹理格式为pvr.ccz。纹理使用的每种颜色位数越多，图像质量越好，但是越耗内存。所以我们可以使用颜色深度为RGB4444的纹理代替RGB8888，这样内存消耗会降低一半。如果图片不需要透明通道就不要加上透明通道，这样还可以节省内存的使用。同时pvr格式的纹理在上传到gpu时的速度也要比其他格式更快一些。</li>\n<li><strong>减少绘制调用和上传gpu压力。</strong>首先纹理需要上传到gpu中渲染绘制，越小的纹理上传的速度越快，所以要控制避免有较大的纹理一次上传到显存中，上面说过pvr格式的纹理上传速度会快些，同时大量的纹理上传会造成程序瞬间卡顿，因为纹理上传是占用主线程的，所以低一点中的分帧加载在这里也适用。还有就是绘制的压力，同屏中显示对象的数量会影响绘制的性能，所以在合理的情况下要尽量减少显示对象的数量。同时我们要尽量将散图打到一张整图中，因为在cocos2dx引擎的底层中，在同一张纹理上的显示对象只会调用一次绘制命令，相当于BatchNode。这里需要特别注意的是减少绘制要打到整图中和为了加快纹理上传速度要减小纹理大小是个相悖的条件，所以我们要根据实际情况来衡量这两点。一般情况下每帧上传一张1024*1024的rgba8888格式的纹理是不会出现卡顿的，所以建议每次上传不要超过这个大小。如果是rgb4444的纹理那么大小会减少一半，上传会更快一些。</li>\n<li><strong>降低UI复杂度。</strong>降低复杂度有很多方式，第一种方式是减少显示对象数量，比如拿文本框来说，经常在游戏中会有显示金币的地方，例如：“金币：99”。有很多人在ui里会将标题和数量分开，定义两个文本框，这里如果没有特殊表现的话，就应该合并成一个文本框，这样就减少了一个对象的绘制。同理有很多东西都可以减少，例如Sprite等，项目中具体情况具体对待。第二种方式是降低UI树的复杂度，上一点中减少数量也会达到一个降低UIU树复杂度的效果，在这个同时，我们还要尽量降低UI树的深度，降低树的深度可以有效的提高绘制遍历的速度，在设计ui的时候，我们往往为了易于管理，会创建很多空面板，或节点，来达到管理ui中各个部件的作用，但是有时我们会增加的过于复杂，这里尽量降低这种复杂度就可以提高绘制效率。最后我们还要控制资源的规格，首先游戏中很多ui是通用的，比如通用的按钮，图标，面板等，我们打到一张贴图上，作为通用资源常驻内存，然后每个ui独特的资源单独打成贴图，在使用的时候加载到内存中，使用结束后释放掉。</li>\n<li><strong>UI设计的时候要提高UI通用资源的使用率。</strong>优化资源到最小，比如使用九宫格图片，采用旋转缩放等丰富资源表现力等。</li>\n<li><strong>动画文件的处理。</strong>动画一般有两种选择，帧动画和骨骼动画。帧动画的优点就是运算不耗性能，并且表现较好，缺点就是当帧数较多时，资源量比较大，并且占用内存较高，所以不太适合做过于复杂的动画，比如动作和技能较多的ARPG角色如果纯用帧动画来实现，会使用很多资源，在加载时就不能加载过多的角色，这样就局限了游戏的设计，同场景角色数量不能过多。与之相对应的就是骨骼动画，骨骼动画的特点就是节省资源，一套骨骼可以做很多套动作，新增动作也不会对文件大小有明显的增加，缺点也比较明显，就是因为骨骼动画是通过计算，然后进行旋转，位移等实现的，所以当动画比较复杂，骨骼数量较多时，计算量就会很大，对CPU的计算增加了压力，压力过大时就会掉帧卡顿。当团队技术较好，并且美术程序沟通配合默契的团队可以采用帧动画与骨骼动画相结合的方案。美术在设计时动作大部分采用骨骼，局部需要表现效果的地方使用帧动画到处的贴图来实现，美术人员在设计时要充分考虑到资源利用，利用旋转缩放功能丰富动画，同时还要考虑骨骼数量、节点深度等队性能等影响。</li>\n<li><strong>游戏音效的规格及优化。</strong>游戏音效在使用中也有很多问题，音效占用的资源空间、运行时内存和加载效率等。首先需要考虑使用资源的格式，在各个平台下，资源格式的支持也都不同，平台及支持的常见文件格式如下：<br>Android ：mp3, mid, oggg, wav<br>iOS ：mac, caf, mp3, m4a, wav<br>Windows ： mid, mp3, wav<br>通常我在项目中会针对不同平台加载不通资源，一般android常用oggg，iOS中常用caf，windows下一般都是调试用的，也没怎么优化过，直接用的mp3格式。同时音效资源也需要处理，音频优化,3个因素会影响音频文件的内存使用，即音频文件数据格式、比特率及采样率。推荐使用MP3数据格式的音频文件，因为Android平台和iOS平台均支持MP3格式，此外MP3格式经过压缩和硬件加速。背景音乐文件大小应该低于800KB，最简单的方法就是减少背景音乐时间然后重复播放。音频文件采样率大约在96-128kbps为佳，比特率44kHz就够了。</li>\n<li><strong>游戏逻辑的相关优化。</strong>在代码中，不要在主循环中做复杂的逻辑处理，例如for循环更新、查找等，可以利用缓冲等技术，解决和优化在主循环中每帧的效能。部分不重要的逻辑，或者要求即时反馈不高的逻辑可以适当的采取抽帧，也就是不是每帧都进行运算和刷新，这样可以降低很多运算量。同时游戏的玩法逻辑也有很多可以优化的地方，比如射击游戏的子弹可以做缓存，减少频繁的创建和销毁对象；RPG游戏中的地图可以做成异步分块加载，不显示的可以不去加载渲染等。</li>\n<li><strong>代码级别的优化。</strong>这点比较简单，在编写程序时，算法最优，并且不要有内存泄漏等。</li>\n<li><strong>最后就是引擎级别的优化。</strong>我们使用的是cocos2dx进行的项目开发，在该引擎中，存在的bug、性能等问题也有很多可以优化的地方。在我们项目中，就修改过spine的内存泄漏问题、ui加载速度问题、还有关于对象拷贝的性能问题等。修改引擎要对引擎比较了解，并且修改后引擎的版本再次升级是还要把修改合并过去，这里也建议大家发现问题可以到引擎的Github上提交request。如果对渲染比较了解的还可以对渲染级别进行优化。</li>\n</ul>"},{"title":"番茄工作法体验总结(The Pomodoro Technique)","date":"2017-01-19T11:14:28.000Z","_content":"番茄工作法是由弗朗西斯科·西里洛于1992年创立的一种相对于GTD更微观的时间管理方法。使用番茄工作法，选择一个待完成的任务，将番茄时间设为25分钟，专注工作，中途不允许做任何与该任务无关的事，直到番茄时钟响起，每个番茄钟之间可以短暂休息两分钟，三到四个番茄钟后可以休息的时间长些。<!--more-->  \n半年前就接触了番茄工作法，并读了**《番茄工作法图解》**这本薄薄的并且都是插图的书，但是并没有重视这种工作方法，最近工作时感觉效率并不是很高，偶然间又看到了有人提起番茄工作法，于是开始了体验之旅。写这篇文章之前，刚刚完整的体验了一周，先展示一下一周的数据：  \n![pomodoro](/images/pomodoro_technique.png)\n我这里并没有完全按照番茄工作法的工作方式进行使用，而是加了一些变通，比如关于打断的判断，独自一人工作时，打断很容易判定，只要是打断了正在做的工作，那么这个番茄钟内就会记录一个打断。但是在一个**多人沟通合作**的工作环境中，不被打断是不可能的，那么我对打断的定义就是，被与工作无关的事情打断时才算是有效的打断，比如有同事找你闲聊、口渴去打水、被网络或者通讯软件吸引走神等。在一个番茄钟内我不会去看任何QQ、微信或者邮件等消息，**避免自己的思路被打断**，尤其是编程这项工作，打断后需要很高的成本再回到主线程。其实也不用怕错过什么重要的消息，在上面的那些通讯工具中发的消息，肯定不会查这25分钟，如果真的有紧急情况发生，对方肯定会打电话或者直接过来进行沟通。最后对打断数据进行分析可以看到自己集中注意力的自控能力。   \n对我一周的数据进行分析后如下:  \n![pomodoro](/images/pomodoro_data.png)\n通过计算，得出个人的工作效率：**上午 > 下午 > 晚上**   \n### 根据我的工作性质及数据结论我做出了调整。\n将大的功能模块开发安排到上午进行，然后下午进行小的功能修改及与其他人员进行工作内容沟通和讨论，最后晚一些去修改bug及一些琐碎的小事。同时工作内容的重要程度也是按照**上午 > 下午 > 晚上**这个级别进行排序。\n\n使用番茄工作法后，发现自己的注意力及工作效率不断的再提高，后续会继续使用这种工作方式来提高自己的工作效率。  \n不仅是工作，包括学习也可以采用番茄工作法，比如读书或者写博客等，番茄工作法可以有效的锻炼个人控制注意力的能力，来提高工作或学习的效率。","source":"_posts/PomodoroTechnique.md","raw":"---\ntitle: 番茄工作法体验总结(The Pomodoro Technique)\ndate: 2017-01-19 19:14:28\ntags: 番茄工作法\ncategories: 经验总结\n---\n番茄工作法是由弗朗西斯科·西里洛于1992年创立的一种相对于GTD更微观的时间管理方法。使用番茄工作法，选择一个待完成的任务，将番茄时间设为25分钟，专注工作，中途不允许做任何与该任务无关的事，直到番茄时钟响起，每个番茄钟之间可以短暂休息两分钟，三到四个番茄钟后可以休息的时间长些。<!--more-->  \n半年前就接触了番茄工作法，并读了**《番茄工作法图解》**这本薄薄的并且都是插图的书，但是并没有重视这种工作方法，最近工作时感觉效率并不是很高，偶然间又看到了有人提起番茄工作法，于是开始了体验之旅。写这篇文章之前，刚刚完整的体验了一周，先展示一下一周的数据：  \n![pomodoro](/images/pomodoro_technique.png)\n我这里并没有完全按照番茄工作法的工作方式进行使用，而是加了一些变通，比如关于打断的判断，独自一人工作时，打断很容易判定，只要是打断了正在做的工作，那么这个番茄钟内就会记录一个打断。但是在一个**多人沟通合作**的工作环境中，不被打断是不可能的，那么我对打断的定义就是，被与工作无关的事情打断时才算是有效的打断，比如有同事找你闲聊、口渴去打水、被网络或者通讯软件吸引走神等。在一个番茄钟内我不会去看任何QQ、微信或者邮件等消息，**避免自己的思路被打断**，尤其是编程这项工作，打断后需要很高的成本再回到主线程。其实也不用怕错过什么重要的消息，在上面的那些通讯工具中发的消息，肯定不会查这25分钟，如果真的有紧急情况发生，对方肯定会打电话或者直接过来进行沟通。最后对打断数据进行分析可以看到自己集中注意力的自控能力。   \n对我一周的数据进行分析后如下:  \n![pomodoro](/images/pomodoro_data.png)\n通过计算，得出个人的工作效率：**上午 > 下午 > 晚上**   \n### 根据我的工作性质及数据结论我做出了调整。\n将大的功能模块开发安排到上午进行，然后下午进行小的功能修改及与其他人员进行工作内容沟通和讨论，最后晚一些去修改bug及一些琐碎的小事。同时工作内容的重要程度也是按照**上午 > 下午 > 晚上**这个级别进行排序。\n\n使用番茄工作法后，发现自己的注意力及工作效率不断的再提高，后续会继续使用这种工作方式来提高自己的工作效率。  \n不仅是工作，包括学习也可以采用番茄工作法，比如读书或者写博客等，番茄工作法可以有效的锻炼个人控制注意力的能力，来提高工作或学习的效率。","slug":"PomodoroTechnique","published":1,"updated":"2019-07-01T12:35:47.380Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjycv1m3l000gok9mcvlyuck7","content":"<p>番茄工作法是由弗朗西斯科·西里洛于1992年创立的一种相对于GTD更微观的时间管理方法。使用番茄工作法，选择一个待完成的任务，将番茄时间设为25分钟，专注工作，中途不允许做任何与该任务无关的事，直到番茄时钟响起，每个番茄钟之间可以短暂休息两分钟，三到四个番茄钟后可以休息的时间长些。<a id=\"more\"></a><br>半年前就接触了番茄工作法，并读了<strong>《番茄工作法图解》</strong>这本薄薄的并且都是插图的书，但是并没有重视这种工作方法，最近工作时感觉效率并不是很高，偶然间又看到了有人提起番茄工作法，于是开始了体验之旅。写这篇文章之前，刚刚完整的体验了一周，先展示一下一周的数据：<br><img src=\"/images/pomodoro_technique.png\" alt=\"pomodoro\"><br>我这里并没有完全按照番茄工作法的工作方式进行使用，而是加了一些变通，比如关于打断的判断，独自一人工作时，打断很容易判定，只要是打断了正在做的工作，那么这个番茄钟内就会记录一个打断。但是在一个<strong>多人沟通合作</strong>的工作环境中，不被打断是不可能的，那么我对打断的定义就是，被与工作无关的事情打断时才算是有效的打断，比如有同事找你闲聊、口渴去打水、被网络或者通讯软件吸引走神等。在一个番茄钟内我不会去看任何QQ、微信或者邮件等消息，<strong>避免自己的思路被打断</strong>，尤其是编程这项工作，打断后需要很高的成本再回到主线程。其实也不用怕错过什么重要的消息，在上面的那些通讯工具中发的消息，肯定不会查这25分钟，如果真的有紧急情况发生，对方肯定会打电话或者直接过来进行沟通。最后对打断数据进行分析可以看到自己集中注意力的自控能力。<br>对我一周的数据进行分析后如下:<br><img src=\"/images/pomodoro_data.png\" alt=\"pomodoro\"><br>通过计算，得出个人的工作效率：<strong>上午 &gt; 下午 &gt; 晚上</strong>   </p>\n<h3 id=\"根据我的工作性质及数据结论我做出了调整。\"><a href=\"#根据我的工作性质及数据结论我做出了调整。\" class=\"headerlink\" title=\"根据我的工作性质及数据结论我做出了调整。\"></a>根据我的工作性质及数据结论我做出了调整。</h3><p>将大的功能模块开发安排到上午进行，然后下午进行小的功能修改及与其他人员进行工作内容沟通和讨论，最后晚一些去修改bug及一些琐碎的小事。同时工作内容的重要程度也是按照<strong>上午 &gt; 下午 &gt; 晚上</strong>这个级别进行排序。</p>\n<p>使用番茄工作法后，发现自己的注意力及工作效率不断的再提高，后续会继续使用这种工作方式来提高自己的工作效率。<br>不仅是工作，包括学习也可以采用番茄工作法，比如读书或者写博客等，番茄工作法可以有效的锻炼个人控制注意力的能力，来提高工作或学习的效率。</p>\n","site":{"data":{}},"excerpt":"<p>番茄工作法是由弗朗西斯科·西里洛于1992年创立的一种相对于GTD更微观的时间管理方法。使用番茄工作法，选择一个待完成的任务，将番茄时间设为25分钟，专注工作，中途不允许做任何与该任务无关的事，直到番茄时钟响起，每个番茄钟之间可以短暂休息两分钟，三到四个番茄钟后可以休息的时间长些。","more":"<br>半年前就接触了番茄工作法，并读了<strong>《番茄工作法图解》</strong>这本薄薄的并且都是插图的书，但是并没有重视这种工作方法，最近工作时感觉效率并不是很高，偶然间又看到了有人提起番茄工作法，于是开始了体验之旅。写这篇文章之前，刚刚完整的体验了一周，先展示一下一周的数据：<br><img src=\"/images/pomodoro_technique.png\" alt=\"pomodoro\"><br>我这里并没有完全按照番茄工作法的工作方式进行使用，而是加了一些变通，比如关于打断的判断，独自一人工作时，打断很容易判定，只要是打断了正在做的工作，那么这个番茄钟内就会记录一个打断。但是在一个<strong>多人沟通合作</strong>的工作环境中，不被打断是不可能的，那么我对打断的定义就是，被与工作无关的事情打断时才算是有效的打断，比如有同事找你闲聊、口渴去打水、被网络或者通讯软件吸引走神等。在一个番茄钟内我不会去看任何QQ、微信或者邮件等消息，<strong>避免自己的思路被打断</strong>，尤其是编程这项工作，打断后需要很高的成本再回到主线程。其实也不用怕错过什么重要的消息，在上面的那些通讯工具中发的消息，肯定不会查这25分钟，如果真的有紧急情况发生，对方肯定会打电话或者直接过来进行沟通。最后对打断数据进行分析可以看到自己集中注意力的自控能力。<br>对我一周的数据进行分析后如下:<br><img src=\"/images/pomodoro_data.png\" alt=\"pomodoro\"><br>通过计算，得出个人的工作效率：<strong>上午 &gt; 下午 &gt; 晚上</strong>   </p>\n<h3 id=\"根据我的工作性质及数据结论我做出了调整。\"><a href=\"#根据我的工作性质及数据结论我做出了调整。\" class=\"headerlink\" title=\"根据我的工作性质及数据结论我做出了调整。\"></a>根据我的工作性质及数据结论我做出了调整。</h3><p>将大的功能模块开发安排到上午进行，然后下午进行小的功能修改及与其他人员进行工作内容沟通和讨论，最后晚一些去修改bug及一些琐碎的小事。同时工作内容的重要程度也是按照<strong>上午 &gt; 下午 &gt; 晚上</strong>这个级别进行排序。</p>\n<p>使用番茄工作法后，发现自己的注意力及工作效率不断的再提高，后续会继续使用这种工作方式来提高自己的工作效率。<br>不仅是工作，包括学习也可以采用番茄工作法，比如读书或者写博客等，番茄工作法可以有效的锻炼个人控制注意力的能力，来提高工作或学习的效率。</p>"},{"title":"编程与性格的关系","date":"2017-07-19T03:19:36.000Z","_content":"# 33 个人性格\n## 33.1 个人性格是否和编程相关\n- 软件开发过程中，人们很少注意个人性格问题，然而却是非常重要的一点，重要到取决定性作用。\n- 编程工作本质上是一项无法监督的工作，老板或上司无法强迫你成为好的程序员，很多时候他甚至无法判断你是否合格。如果你想有所成就，只能全凭自己，这涉及到个人性格问题。\n- 你无法提升自己的聪明程度，但性格在一定程度上可以改进。事实证明，个人性格对于造就出出色的程序员有决定性作用。\n\n## 33.2 聪明和谦虚\n- 成为出色的开发人员，高智商并不是必备条件，谦虚的性格和总结经验的习惯能让你事半功倍。\n- 很多好的编程做法可以减轻你的脑力负担：\n    - 将系统“分解”，使之易于理解。\n    - 进行复查工作，减少犯错几率。\n    - 将子程序编写的简短明了，减轻理解负担。\n    - 通过各种规范来避免错误和把控代码质量（编程规范）。\n\n## 33.3 求知欲\n- 在开发过程中建立自我意识：从琐碎的工作中找到自己的不足和短板，从项目中挖掘关键点。\n- 实验：对编程和开发过程做实验，是学习的有效途径之一。\n- 阅读解决问题的有关方法：解决问题是开发中的核心行为，同时也是个人成长中最有效的行为。\n- 在行动之前做分析和计划：很多程序员在写一个功能的时候没有认真思考这个功能就开始了编码，首先应该先分解功能，列出重点再开始编码。\n- 学习成功的项目开发经验：研究高手的程序，分析他的设计和想法，找出他的优点和不足。积极主动的找专家评论你的代码。\n- 阅读其它资料：书籍、博客、github、论坛、资讯等。\n- 同专业人士交流：多和身边的同行交流、在论坛交流、加入群组交流、帮助别人解决问题等。\n- 向专业级别看齐：把自己定位在较高的目标，如技术负责人。要明白技术负责人的编程工作只有20%，其余都是与人打交道。作为技术带头人写代码是写给他人看的，而非机器。\n- 再厉害的程序员不重视代码的可读性，通常也只能算是熟练工种。\n\n## 33.4 诚实\n- 不是高手时不假装是高手：不要不懂装懂，或者以为自己好像懂了。\n- 乐于承认错误：要承认自己观点的错误，接受他人的正确观点。\n- 透彻的理解自己写的代码，而不是只要编译运行没问题就算完了。有很多程序员写代码试着把与改成非，运行一下发现恰巧好了，这种情况只能说明你的程序可以实现功能了，不代表没有问题。\n- 提供实际的状况报告：这个是对自己有清醒认识的表现。\n\n## 33.5 交流与合作\n- 真正优秀的程序员知道怎样同别人融洽的工作和娱乐。\n\n## 33.6 创造力和纪律\n- 新入行的年轻人崇尚创造力，这没有问题，应该鼓励，但是创造力不代表没有纪律。安全稳定的程序必然会要求会有很多规范和限制。\n\n## 33.7 懒惰\n- 拖延不喜欢的任务：这种行为没有任何益处。公司不会喜欢你这样的员工，对于你自己也不会有任何提高。\n- 迅速做完不喜欢的任务，以拍拖之：不喜欢的任务，并没有想象的那么麻烦，养成立即快速干完的习惯，然后去做自己喜欢的事情，这是“合理懒”，因为从结果上看是解决了问题。\n- 编写某个工具来完成不喜欢的任务，以便以后可以摆脱这类事情：这是最具价值的“高级懒”，有效编程中最重要的工作是思考，而人思考的时候通常不会看上去很忙，如果一个程序员总是忙个不停，那他肯定不是一个优秀的程序员。\n\n## 33.8 不如你想象中那样起作用的性格因素\n- 坚持：在开发过程中总会遇到一些奇葩问题，怎么都找不到原因，如果你这时候坚持要突破它，当你耗费大量时间和精力解决后，固然很有成就感，但是真的有效吗？我们不妨另辟蹊径，尝试换个思路，绕过这个问题，以后回头再试这个问题，可能回头再看的时候就会豁然开朗，这是很常见的。\n- 经验：不要固守经验，要适应变化，敢于尝试。\n\n## 33.9 习惯\n- 好习惯很重要，因为程序员写代码的好多行为都是无意识完成的。比如代码规范，缩进、空行、注释等，不是想着要去加的，优秀的程序员都是习惯就完成了这些的。任何有成就的优秀程序员，前几年就做的很好，有优秀的编程习惯、学习习惯等。\n- 如何改掉已经形成的坏习惯这是个大话题，不是这里讨论的。\n- 还有一种方式是练习新习惯，有了新习惯，老习惯就自然会消失。\n\n## 33 要点总结\n- 人个性格对其编程能力有直接影响。\n- 最有关系的性格为：谦虚、求知欲、诚实、创造性和纪律、已经高明的偷懒。\n- 小聪明、经验、坚持和疯狂有时候害处往往比益处大。\n- 学习新知识，而且必须是在工作之外的学习才是真正的提高。\n- 好性格与培养正确的习惯关系很大。","source":"_posts/coding-xingge.md","raw":"---\ntitle: 编程与性格的关系\ndate: 2017-07-19 11:19:36\ntags: 编程与性格\ncategories: 经验总结\n---\n# 33 个人性格\n## 33.1 个人性格是否和编程相关\n- 软件开发过程中，人们很少注意个人性格问题，然而却是非常重要的一点，重要到取决定性作用。\n- 编程工作本质上是一项无法监督的工作，老板或上司无法强迫你成为好的程序员，很多时候他甚至无法判断你是否合格。如果你想有所成就，只能全凭自己，这涉及到个人性格问题。\n- 你无法提升自己的聪明程度，但性格在一定程度上可以改进。事实证明，个人性格对于造就出出色的程序员有决定性作用。\n\n## 33.2 聪明和谦虚\n- 成为出色的开发人员，高智商并不是必备条件，谦虚的性格和总结经验的习惯能让你事半功倍。\n- 很多好的编程做法可以减轻你的脑力负担：\n    - 将系统“分解”，使之易于理解。\n    - 进行复查工作，减少犯错几率。\n    - 将子程序编写的简短明了，减轻理解负担。\n    - 通过各种规范来避免错误和把控代码质量（编程规范）。\n\n## 33.3 求知欲\n- 在开发过程中建立自我意识：从琐碎的工作中找到自己的不足和短板，从项目中挖掘关键点。\n- 实验：对编程和开发过程做实验，是学习的有效途径之一。\n- 阅读解决问题的有关方法：解决问题是开发中的核心行为，同时也是个人成长中最有效的行为。\n- 在行动之前做分析和计划：很多程序员在写一个功能的时候没有认真思考这个功能就开始了编码，首先应该先分解功能，列出重点再开始编码。\n- 学习成功的项目开发经验：研究高手的程序，分析他的设计和想法，找出他的优点和不足。积极主动的找专家评论你的代码。\n- 阅读其它资料：书籍、博客、github、论坛、资讯等。\n- 同专业人士交流：多和身边的同行交流、在论坛交流、加入群组交流、帮助别人解决问题等。\n- 向专业级别看齐：把自己定位在较高的目标，如技术负责人。要明白技术负责人的编程工作只有20%，其余都是与人打交道。作为技术带头人写代码是写给他人看的，而非机器。\n- 再厉害的程序员不重视代码的可读性，通常也只能算是熟练工种。\n\n## 33.4 诚实\n- 不是高手时不假装是高手：不要不懂装懂，或者以为自己好像懂了。\n- 乐于承认错误：要承认自己观点的错误，接受他人的正确观点。\n- 透彻的理解自己写的代码，而不是只要编译运行没问题就算完了。有很多程序员写代码试着把与改成非，运行一下发现恰巧好了，这种情况只能说明你的程序可以实现功能了，不代表没有问题。\n- 提供实际的状况报告：这个是对自己有清醒认识的表现。\n\n## 33.5 交流与合作\n- 真正优秀的程序员知道怎样同别人融洽的工作和娱乐。\n\n## 33.6 创造力和纪律\n- 新入行的年轻人崇尚创造力，这没有问题，应该鼓励，但是创造力不代表没有纪律。安全稳定的程序必然会要求会有很多规范和限制。\n\n## 33.7 懒惰\n- 拖延不喜欢的任务：这种行为没有任何益处。公司不会喜欢你这样的员工，对于你自己也不会有任何提高。\n- 迅速做完不喜欢的任务，以拍拖之：不喜欢的任务，并没有想象的那么麻烦，养成立即快速干完的习惯，然后去做自己喜欢的事情，这是“合理懒”，因为从结果上看是解决了问题。\n- 编写某个工具来完成不喜欢的任务，以便以后可以摆脱这类事情：这是最具价值的“高级懒”，有效编程中最重要的工作是思考，而人思考的时候通常不会看上去很忙，如果一个程序员总是忙个不停，那他肯定不是一个优秀的程序员。\n\n## 33.8 不如你想象中那样起作用的性格因素\n- 坚持：在开发过程中总会遇到一些奇葩问题，怎么都找不到原因，如果你这时候坚持要突破它，当你耗费大量时间和精力解决后，固然很有成就感，但是真的有效吗？我们不妨另辟蹊径，尝试换个思路，绕过这个问题，以后回头再试这个问题，可能回头再看的时候就会豁然开朗，这是很常见的。\n- 经验：不要固守经验，要适应变化，敢于尝试。\n\n## 33.9 习惯\n- 好习惯很重要，因为程序员写代码的好多行为都是无意识完成的。比如代码规范，缩进、空行、注释等，不是想着要去加的，优秀的程序员都是习惯就完成了这些的。任何有成就的优秀程序员，前几年就做的很好，有优秀的编程习惯、学习习惯等。\n- 如何改掉已经形成的坏习惯这是个大话题，不是这里讨论的。\n- 还有一种方式是练习新习惯，有了新习惯，老习惯就自然会消失。\n\n## 33 要点总结\n- 人个性格对其编程能力有直接影响。\n- 最有关系的性格为：谦虚、求知欲、诚实、创造性和纪律、已经高明的偷懒。\n- 小聪明、经验、坚持和疯狂有时候害处往往比益处大。\n- 学习新知识，而且必须是在工作之外的学习才是真正的提高。\n- 好性格与培养正确的习惯关系很大。","slug":"coding-xingge","published":1,"updated":"2019-07-01T12:35:47.382Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjycv1m3l000hok9m5zirdzc7","content":"<h1 id=\"33-个人性格\"><a href=\"#33-个人性格\" class=\"headerlink\" title=\"33 个人性格\"></a>33 个人性格</h1><h2 id=\"33-1-个人性格是否和编程相关\"><a href=\"#33-1-个人性格是否和编程相关\" class=\"headerlink\" title=\"33.1 个人性格是否和编程相关\"></a>33.1 个人性格是否和编程相关</h2><ul>\n<li>软件开发过程中，人们很少注意个人性格问题，然而却是非常重要的一点，重要到取决定性作用。</li>\n<li>编程工作本质上是一项无法监督的工作，老板或上司无法强迫你成为好的程序员，很多时候他甚至无法判断你是否合格。如果你想有所成就，只能全凭自己，这涉及到个人性格问题。</li>\n<li>你无法提升自己的聪明程度，但性格在一定程度上可以改进。事实证明，个人性格对于造就出出色的程序员有决定性作用。</li>\n</ul>\n<h2 id=\"33-2-聪明和谦虚\"><a href=\"#33-2-聪明和谦虚\" class=\"headerlink\" title=\"33.2 聪明和谦虚\"></a>33.2 聪明和谦虚</h2><ul>\n<li>成为出色的开发人员，高智商并不是必备条件，谦虚的性格和总结经验的习惯能让你事半功倍。</li>\n<li>很多好的编程做法可以减轻你的脑力负担：<ul>\n<li>将系统“分解”，使之易于理解。</li>\n<li>进行复查工作，减少犯错几率。</li>\n<li>将子程序编写的简短明了，减轻理解负担。</li>\n<li>通过各种规范来避免错误和把控代码质量（编程规范）。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"33-3-求知欲\"><a href=\"#33-3-求知欲\" class=\"headerlink\" title=\"33.3 求知欲\"></a>33.3 求知欲</h2><ul>\n<li>在开发过程中建立自我意识：从琐碎的工作中找到自己的不足和短板，从项目中挖掘关键点。</li>\n<li>实验：对编程和开发过程做实验，是学习的有效途径之一。</li>\n<li>阅读解决问题的有关方法：解决问题是开发中的核心行为，同时也是个人成长中最有效的行为。</li>\n<li>在行动之前做分析和计划：很多程序员在写一个功能的时候没有认真思考这个功能就开始了编码，首先应该先分解功能，列出重点再开始编码。</li>\n<li>学习成功的项目开发经验：研究高手的程序，分析他的设计和想法，找出他的优点和不足。积极主动的找专家评论你的代码。</li>\n<li>阅读其它资料：书籍、博客、github、论坛、资讯等。</li>\n<li>同专业人士交流：多和身边的同行交流、在论坛交流、加入群组交流、帮助别人解决问题等。</li>\n<li>向专业级别看齐：把自己定位在较高的目标，如技术负责人。要明白技术负责人的编程工作只有20%，其余都是与人打交道。作为技术带头人写代码是写给他人看的，而非机器。</li>\n<li>再厉害的程序员不重视代码的可读性，通常也只能算是熟练工种。</li>\n</ul>\n<h2 id=\"33-4-诚实\"><a href=\"#33-4-诚实\" class=\"headerlink\" title=\"33.4 诚实\"></a>33.4 诚实</h2><ul>\n<li>不是高手时不假装是高手：不要不懂装懂，或者以为自己好像懂了。</li>\n<li>乐于承认错误：要承认自己观点的错误，接受他人的正确观点。</li>\n<li>透彻的理解自己写的代码，而不是只要编译运行没问题就算完了。有很多程序员写代码试着把与改成非，运行一下发现恰巧好了，这种情况只能说明你的程序可以实现功能了，不代表没有问题。</li>\n<li>提供实际的状况报告：这个是对自己有清醒认识的表现。</li>\n</ul>\n<h2 id=\"33-5-交流与合作\"><a href=\"#33-5-交流与合作\" class=\"headerlink\" title=\"33.5 交流与合作\"></a>33.5 交流与合作</h2><ul>\n<li>真正优秀的程序员知道怎样同别人融洽的工作和娱乐。</li>\n</ul>\n<h2 id=\"33-6-创造力和纪律\"><a href=\"#33-6-创造力和纪律\" class=\"headerlink\" title=\"33.6 创造力和纪律\"></a>33.6 创造力和纪律</h2><ul>\n<li>新入行的年轻人崇尚创造力，这没有问题，应该鼓励，但是创造力不代表没有纪律。安全稳定的程序必然会要求会有很多规范和限制。</li>\n</ul>\n<h2 id=\"33-7-懒惰\"><a href=\"#33-7-懒惰\" class=\"headerlink\" title=\"33.7 懒惰\"></a>33.7 懒惰</h2><ul>\n<li>拖延不喜欢的任务：这种行为没有任何益处。公司不会喜欢你这样的员工，对于你自己也不会有任何提高。</li>\n<li>迅速做完不喜欢的任务，以拍拖之：不喜欢的任务，并没有想象的那么麻烦，养成立即快速干完的习惯，然后去做自己喜欢的事情，这是“合理懒”，因为从结果上看是解决了问题。</li>\n<li>编写某个工具来完成不喜欢的任务，以便以后可以摆脱这类事情：这是最具价值的“高级懒”，有效编程中最重要的工作是思考，而人思考的时候通常不会看上去很忙，如果一个程序员总是忙个不停，那他肯定不是一个优秀的程序员。</li>\n</ul>\n<h2 id=\"33-8-不如你想象中那样起作用的性格因素\"><a href=\"#33-8-不如你想象中那样起作用的性格因素\" class=\"headerlink\" title=\"33.8 不如你想象中那样起作用的性格因素\"></a>33.8 不如你想象中那样起作用的性格因素</h2><ul>\n<li>坚持：在开发过程中总会遇到一些奇葩问题，怎么都找不到原因，如果你这时候坚持要突破它，当你耗费大量时间和精力解决后，固然很有成就感，但是真的有效吗？我们不妨另辟蹊径，尝试换个思路，绕过这个问题，以后回头再试这个问题，可能回头再看的时候就会豁然开朗，这是很常见的。</li>\n<li>经验：不要固守经验，要适应变化，敢于尝试。</li>\n</ul>\n<h2 id=\"33-9-习惯\"><a href=\"#33-9-习惯\" class=\"headerlink\" title=\"33.9 习惯\"></a>33.9 习惯</h2><ul>\n<li>好习惯很重要，因为程序员写代码的好多行为都是无意识完成的。比如代码规范，缩进、空行、注释等，不是想着要去加的，优秀的程序员都是习惯就完成了这些的。任何有成就的优秀程序员，前几年就做的很好，有优秀的编程习惯、学习习惯等。</li>\n<li>如何改掉已经形成的坏习惯这是个大话题，不是这里讨论的。</li>\n<li>还有一种方式是练习新习惯，有了新习惯，老习惯就自然会消失。</li>\n</ul>\n<h2 id=\"33-要点总结\"><a href=\"#33-要点总结\" class=\"headerlink\" title=\"33 要点总结\"></a>33 要点总结</h2><ul>\n<li>人个性格对其编程能力有直接影响。</li>\n<li>最有关系的性格为：谦虚、求知欲、诚实、创造性和纪律、已经高明的偷懒。</li>\n<li>小聪明、经验、坚持和疯狂有时候害处往往比益处大。</li>\n<li>学习新知识，而且必须是在工作之外的学习才是真正的提高。</li>\n<li>好性格与培养正确的习惯关系很大。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"33-个人性格\"><a href=\"#33-个人性格\" class=\"headerlink\" title=\"33 个人性格\"></a>33 个人性格</h1><h2 id=\"33-1-个人性格是否和编程相关\"><a href=\"#33-1-个人性格是否和编程相关\" class=\"headerlink\" title=\"33.1 个人性格是否和编程相关\"></a>33.1 个人性格是否和编程相关</h2><ul>\n<li>软件开发过程中，人们很少注意个人性格问题，然而却是非常重要的一点，重要到取决定性作用。</li>\n<li>编程工作本质上是一项无法监督的工作，老板或上司无法强迫你成为好的程序员，很多时候他甚至无法判断你是否合格。如果你想有所成就，只能全凭自己，这涉及到个人性格问题。</li>\n<li>你无法提升自己的聪明程度，但性格在一定程度上可以改进。事实证明，个人性格对于造就出出色的程序员有决定性作用。</li>\n</ul>\n<h2 id=\"33-2-聪明和谦虚\"><a href=\"#33-2-聪明和谦虚\" class=\"headerlink\" title=\"33.2 聪明和谦虚\"></a>33.2 聪明和谦虚</h2><ul>\n<li>成为出色的开发人员，高智商并不是必备条件，谦虚的性格和总结经验的习惯能让你事半功倍。</li>\n<li>很多好的编程做法可以减轻你的脑力负担：<ul>\n<li>将系统“分解”，使之易于理解。</li>\n<li>进行复查工作，减少犯错几率。</li>\n<li>将子程序编写的简短明了，减轻理解负担。</li>\n<li>通过各种规范来避免错误和把控代码质量（编程规范）。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"33-3-求知欲\"><a href=\"#33-3-求知欲\" class=\"headerlink\" title=\"33.3 求知欲\"></a>33.3 求知欲</h2><ul>\n<li>在开发过程中建立自我意识：从琐碎的工作中找到自己的不足和短板，从项目中挖掘关键点。</li>\n<li>实验：对编程和开发过程做实验，是学习的有效途径之一。</li>\n<li>阅读解决问题的有关方法：解决问题是开发中的核心行为，同时也是个人成长中最有效的行为。</li>\n<li>在行动之前做分析和计划：很多程序员在写一个功能的时候没有认真思考这个功能就开始了编码，首先应该先分解功能，列出重点再开始编码。</li>\n<li>学习成功的项目开发经验：研究高手的程序，分析他的设计和想法，找出他的优点和不足。积极主动的找专家评论你的代码。</li>\n<li>阅读其它资料：书籍、博客、github、论坛、资讯等。</li>\n<li>同专业人士交流：多和身边的同行交流、在论坛交流、加入群组交流、帮助别人解决问题等。</li>\n<li>向专业级别看齐：把自己定位在较高的目标，如技术负责人。要明白技术负责人的编程工作只有20%，其余都是与人打交道。作为技术带头人写代码是写给他人看的，而非机器。</li>\n<li>再厉害的程序员不重视代码的可读性，通常也只能算是熟练工种。</li>\n</ul>\n<h2 id=\"33-4-诚实\"><a href=\"#33-4-诚实\" class=\"headerlink\" title=\"33.4 诚实\"></a>33.4 诚实</h2><ul>\n<li>不是高手时不假装是高手：不要不懂装懂，或者以为自己好像懂了。</li>\n<li>乐于承认错误：要承认自己观点的错误，接受他人的正确观点。</li>\n<li>透彻的理解自己写的代码，而不是只要编译运行没问题就算完了。有很多程序员写代码试着把与改成非，运行一下发现恰巧好了，这种情况只能说明你的程序可以实现功能了，不代表没有问题。</li>\n<li>提供实际的状况报告：这个是对自己有清醒认识的表现。</li>\n</ul>\n<h2 id=\"33-5-交流与合作\"><a href=\"#33-5-交流与合作\" class=\"headerlink\" title=\"33.5 交流与合作\"></a>33.5 交流与合作</h2><ul>\n<li>真正优秀的程序员知道怎样同别人融洽的工作和娱乐。</li>\n</ul>\n<h2 id=\"33-6-创造力和纪律\"><a href=\"#33-6-创造力和纪律\" class=\"headerlink\" title=\"33.6 创造力和纪律\"></a>33.6 创造力和纪律</h2><ul>\n<li>新入行的年轻人崇尚创造力，这没有问题，应该鼓励，但是创造力不代表没有纪律。安全稳定的程序必然会要求会有很多规范和限制。</li>\n</ul>\n<h2 id=\"33-7-懒惰\"><a href=\"#33-7-懒惰\" class=\"headerlink\" title=\"33.7 懒惰\"></a>33.7 懒惰</h2><ul>\n<li>拖延不喜欢的任务：这种行为没有任何益处。公司不会喜欢你这样的员工，对于你自己也不会有任何提高。</li>\n<li>迅速做完不喜欢的任务，以拍拖之：不喜欢的任务，并没有想象的那么麻烦，养成立即快速干完的习惯，然后去做自己喜欢的事情，这是“合理懒”，因为从结果上看是解决了问题。</li>\n<li>编写某个工具来完成不喜欢的任务，以便以后可以摆脱这类事情：这是最具价值的“高级懒”，有效编程中最重要的工作是思考，而人思考的时候通常不会看上去很忙，如果一个程序员总是忙个不停，那他肯定不是一个优秀的程序员。</li>\n</ul>\n<h2 id=\"33-8-不如你想象中那样起作用的性格因素\"><a href=\"#33-8-不如你想象中那样起作用的性格因素\" class=\"headerlink\" title=\"33.8 不如你想象中那样起作用的性格因素\"></a>33.8 不如你想象中那样起作用的性格因素</h2><ul>\n<li>坚持：在开发过程中总会遇到一些奇葩问题，怎么都找不到原因，如果你这时候坚持要突破它，当你耗费大量时间和精力解决后，固然很有成就感，但是真的有效吗？我们不妨另辟蹊径，尝试换个思路，绕过这个问题，以后回头再试这个问题，可能回头再看的时候就会豁然开朗，这是很常见的。</li>\n<li>经验：不要固守经验，要适应变化，敢于尝试。</li>\n</ul>\n<h2 id=\"33-9-习惯\"><a href=\"#33-9-习惯\" class=\"headerlink\" title=\"33.9 习惯\"></a>33.9 习惯</h2><ul>\n<li>好习惯很重要，因为程序员写代码的好多行为都是无意识完成的。比如代码规范，缩进、空行、注释等，不是想着要去加的，优秀的程序员都是习惯就完成了这些的。任何有成就的优秀程序员，前几年就做的很好，有优秀的编程习惯、学习习惯等。</li>\n<li>如何改掉已经形成的坏习惯这是个大话题，不是这里讨论的。</li>\n<li>还有一种方式是练习新习惯，有了新习惯，老习惯就自然会消失。</li>\n</ul>\n<h2 id=\"33-要点总结\"><a href=\"#33-要点总结\" class=\"headerlink\" title=\"33 要点总结\"></a>33 要点总结</h2><ul>\n<li>人个性格对其编程能力有直接影响。</li>\n<li>最有关系的性格为：谦虚、求知欲、诚实、创造性和纪律、已经高明的偷懒。</li>\n<li>小聪明、经验、坚持和疯狂有时候害处往往比益处大。</li>\n<li>学习新知识，而且必须是在工作之外的学习才是真正的提高。</li>\n<li>好性格与培养正确的习惯关系很大。</li>\n</ul>\n"},{"title":"设计模式在游戏开发中的应用之观察者模式","date":"2016-12-01T14:41:17.000Z","_content":"# 观察者模式\n## 通俗的定义\n触发事件的一方不关心谁来处理，处理事件的一方不关心事件是从哪里来的。观察者模式就是让观察者与被观察者彻底解耦。\n## 结构图如下\n![observer](/images/design_2_observer.png)\n<!--more-->\n## 游戏开发中的使用\n当我们设计一个成就系统的时候，往往要在各个系统都要增加判断，比如杀死某种怪物多少只，新手往往可能这么写：\n``` java\npublic static KILL_1009_COUNT = 0;  \nmain () {  \n    //killMonster是杀死一个怪物，返回杀死怪物的id  \n    int id = killMonster();  \n    //如果杀死的怪物是1009那么数量加一，超过100次达成成就  \n    if (id == \"1009\") {  \n        KILL_1009_COUNT++;  \n        if (KILL_1009_COUNT > 100) {  \n            print(\"达成成就！杀死1009怪物100次！\");  \n        }  \n    }  \n}  \n```\n如果这样写下去，后果将不堪设想：各个类直接将会超级耦合，成就判断将会蔓延到整个项目的每个角落！观察者模式就是为了解决这个问题而出现的。观察者模式让代码彻底解耦，还是上面的那个例子：\n``` java\nmain () {  \n    //killMonster是杀死一个怪物，返回杀死怪物的id  \n    int id = killMonster();  \n    //发送消息，杀死怪物，并将杀死的怪物id一起发送  \n    notify(EVENT_KILL_MONSTER, id);  \n}  \n```\n这样代码的各个功能就不用关心成就相关的逻辑，只是通知我做了这样一件事情就可以了。同样，游戏中这样的例子到处都是，比如增加经验时，我们发送增加经验的消息，接收消息的地方来处理到底升没升级，因为可以增加经验的地方有很多，这样我们就不用导出判断是否升级了。下面看一下观察者的实现：\n``` java\n//处理观察者与被观察者  \nclass Notification {  \n    //一个可变的观察者列表  \n    private List observerList = null;  \n    //该类是单例（后面我们会单独讲单例模式）  \n    private static Notification _instance = null;     \n    public static getInstance() {  \n        if (_instance == null) {  \n            _instance = new Notification();  \n            //初始化列表容器  \n            observerList = new ArrayList();  \n        }  \n        return _instance;  \n    }  \n    //添加观察者  \n    public void addObserver(Observer obs) {  \n        if (!observerList.isExistobs {  \n            observerList.add(obs);  \n        }  \n    }  \n    //删除观察者  \n    public void removeObserver(Observer obs) {  \n        observerList.remove(obs);  \n    }  \n      \n    //广播消息  \n    public void sendMsg(String event, ..) {  \n        for (Observer obs : observerList) {  \n            if (obs.event == event) {  \n                obs.onNotify(..);  \n            }  \n        }  \n    }  \n}  \n  \n//观察者基类  \nclass Observer {  \n    String event;  \n    //接收消息函数，event是消息类型，后面是参数  \n    void onNotify(..)  \n    //添加观察者  \n    void addObserver(String event) {  \n        event = event;  \n        Notification.getInstance().addObserver(this);  \n    }  \n}  \n  \n//杀怪成就观察者  \nclass AchievementObserver extends Observer {  \n    void onNotify(id) {  \n        if (id == 1009) {  \n            //处理杀1009怪的成就逻辑  \n        } else if (id == 1010) {  \n            //处理杀1010怪的成就逻辑  \n        }  \n    }  \n}  \n  \nmain () {  \n    //killMonster是杀死一个怪物，返回杀死怪物的id  \n    int id = killMonster();  \n    //发送消息，杀死怪物，并将杀死的怪物id一起发送  \n    Notification.getInstance().sendMsg(EVENT_KILL_MONSTER, id);  \n}\n```\n然后在写一个成就管理类来管理各种成就观察者，这样各个成就直接也可以解耦。\n## 其他问题\n- 引用销毁问题：这个问题容易造成内存泄漏，就是在这个观察者不再使用时，一定记得将其remove，否则这个观察者一直在引用着，不会被释放。\n- 同步异步问题：sendMsg这个函数中是在主线程按加入顺序进行发送的，在特殊情况下根据需要可以使用多线程来实现。\n- 其他应用：观察者模式在MVC这种结构下也经常使用，control来处理逻辑，通过观察者来相应UI事件。\n观察者模式的优点就是可以做到完全的解耦；缺点就是使用不当会让程序难以维护和调试。","source":"_posts/design-observer.md","raw":"---\ntitle: 设计模式在游戏开发中的应用之观察者模式\ndate: 2016-12-01 22:41:17\ntags: 观察者模式\ncategories: 设计模式\n---\n# 观察者模式\n## 通俗的定义\n触发事件的一方不关心谁来处理，处理事件的一方不关心事件是从哪里来的。观察者模式就是让观察者与被观察者彻底解耦。\n## 结构图如下\n![observer](/images/design_2_observer.png)\n<!--more-->\n## 游戏开发中的使用\n当我们设计一个成就系统的时候，往往要在各个系统都要增加判断，比如杀死某种怪物多少只，新手往往可能这么写：\n``` java\npublic static KILL_1009_COUNT = 0;  \nmain () {  \n    //killMonster是杀死一个怪物，返回杀死怪物的id  \n    int id = killMonster();  \n    //如果杀死的怪物是1009那么数量加一，超过100次达成成就  \n    if (id == \"1009\") {  \n        KILL_1009_COUNT++;  \n        if (KILL_1009_COUNT > 100) {  \n            print(\"达成成就！杀死1009怪物100次！\");  \n        }  \n    }  \n}  \n```\n如果这样写下去，后果将不堪设想：各个类直接将会超级耦合，成就判断将会蔓延到整个项目的每个角落！观察者模式就是为了解决这个问题而出现的。观察者模式让代码彻底解耦，还是上面的那个例子：\n``` java\nmain () {  \n    //killMonster是杀死一个怪物，返回杀死怪物的id  \n    int id = killMonster();  \n    //发送消息，杀死怪物，并将杀死的怪物id一起发送  \n    notify(EVENT_KILL_MONSTER, id);  \n}  \n```\n这样代码的各个功能就不用关心成就相关的逻辑，只是通知我做了这样一件事情就可以了。同样，游戏中这样的例子到处都是，比如增加经验时，我们发送增加经验的消息，接收消息的地方来处理到底升没升级，因为可以增加经验的地方有很多，这样我们就不用导出判断是否升级了。下面看一下观察者的实现：\n``` java\n//处理观察者与被观察者  \nclass Notification {  \n    //一个可变的观察者列表  \n    private List observerList = null;  \n    //该类是单例（后面我们会单独讲单例模式）  \n    private static Notification _instance = null;     \n    public static getInstance() {  \n        if (_instance == null) {  \n            _instance = new Notification();  \n            //初始化列表容器  \n            observerList = new ArrayList();  \n        }  \n        return _instance;  \n    }  \n    //添加观察者  \n    public void addObserver(Observer obs) {  \n        if (!observerList.isExistobs {  \n            observerList.add(obs);  \n        }  \n    }  \n    //删除观察者  \n    public void removeObserver(Observer obs) {  \n        observerList.remove(obs);  \n    }  \n      \n    //广播消息  \n    public void sendMsg(String event, ..) {  \n        for (Observer obs : observerList) {  \n            if (obs.event == event) {  \n                obs.onNotify(..);  \n            }  \n        }  \n    }  \n}  \n  \n//观察者基类  \nclass Observer {  \n    String event;  \n    //接收消息函数，event是消息类型，后面是参数  \n    void onNotify(..)  \n    //添加观察者  \n    void addObserver(String event) {  \n        event = event;  \n        Notification.getInstance().addObserver(this);  \n    }  \n}  \n  \n//杀怪成就观察者  \nclass AchievementObserver extends Observer {  \n    void onNotify(id) {  \n        if (id == 1009) {  \n            //处理杀1009怪的成就逻辑  \n        } else if (id == 1010) {  \n            //处理杀1010怪的成就逻辑  \n        }  \n    }  \n}  \n  \nmain () {  \n    //killMonster是杀死一个怪物，返回杀死怪物的id  \n    int id = killMonster();  \n    //发送消息，杀死怪物，并将杀死的怪物id一起发送  \n    Notification.getInstance().sendMsg(EVENT_KILL_MONSTER, id);  \n}\n```\n然后在写一个成就管理类来管理各种成就观察者，这样各个成就直接也可以解耦。\n## 其他问题\n- 引用销毁问题：这个问题容易造成内存泄漏，就是在这个观察者不再使用时，一定记得将其remove，否则这个观察者一直在引用着，不会被释放。\n- 同步异步问题：sendMsg这个函数中是在主线程按加入顺序进行发送的，在特殊情况下根据需要可以使用多线程来实现。\n- 其他应用：观察者模式在MVC这种结构下也经常使用，control来处理逻辑，通过观察者来相应UI事件。\n观察者模式的优点就是可以做到完全的解耦；缺点就是使用不当会让程序难以维护和调试。","slug":"design-observer","published":1,"updated":"2019-07-01T12:35:47.382Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjycv1m3m000iok9m2j77tua7","content":"<h1 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h1><h2 id=\"通俗的定义\"><a href=\"#通俗的定义\" class=\"headerlink\" title=\"通俗的定义\"></a>通俗的定义</h2><p>触发事件的一方不关心谁来处理，处理事件的一方不关心事件是从哪里来的。观察者模式就是让观察者与被观察者彻底解耦。</p>\n<h2 id=\"结构图如下\"><a href=\"#结构图如下\" class=\"headerlink\" title=\"结构图如下\"></a>结构图如下</h2><p><img src=\"/images/design_2_observer.png\" alt=\"observer\"><br><a id=\"more\"></a></p>\n<h2 id=\"游戏开发中的使用\"><a href=\"#游戏开发中的使用\" class=\"headerlink\" title=\"游戏开发中的使用\"></a>游戏开发中的使用</h2><p>当我们设计一个成就系统的时候，往往要在各个系统都要增加判断，比如杀死某种怪物多少只，新手往往可能这么写：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> KILL_1009_COUNT = <span class=\"number\">0</span>;  </span><br><span class=\"line\">main () &#123;  </span><br><span class=\"line\">    <span class=\"comment\">//killMonster是杀死一个怪物，返回杀死怪物的id  </span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> id = killMonster();  </span><br><span class=\"line\">    <span class=\"comment\">//如果杀死的怪物是1009那么数量加一，超过100次达成成就  </span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (id == <span class=\"string\">\"1009\"</span>) &#123;  </span><br><span class=\"line\">        KILL_1009_COUNT++;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (KILL_1009_COUNT &gt; <span class=\"number\">100</span>) &#123;  </span><br><span class=\"line\">            print(<span class=\"string\">\"达成成就！杀死1009怪物100次！\"</span>);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果这样写下去，后果将不堪设想：各个类直接将会超级耦合，成就判断将会蔓延到整个项目的每个角落！观察者模式就是为了解决这个问题而出现的。观察者模式让代码彻底解耦，还是上面的那个例子：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main () &#123;  </span><br><span class=\"line\">    <span class=\"comment\">//killMonster是杀死一个怪物，返回杀死怪物的id  </span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> id = killMonster();  </span><br><span class=\"line\">    <span class=\"comment\">//发送消息，杀死怪物，并将杀死的怪物id一起发送  </span></span><br><span class=\"line\">    notify(EVENT_KILL_MONSTER, id);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这样代码的各个功能就不用关心成就相关的逻辑，只是通知我做了这样一件事情就可以了。同样，游戏中这样的例子到处都是，比如增加经验时，我们发送增加经验的消息，接收消息的地方来处理到底升没升级，因为可以增加经验的地方有很多，这样我们就不用导出判断是否升级了。下面看一下观察者的实现：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//处理观察者与被观察者  </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Notification</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"comment\">//一个可变的观察者列表  </span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List observerList = <span class=\"keyword\">null</span>;  </span><br><span class=\"line\">    <span class=\"comment\">//该类是单例（后面我们会单独讲单例模式）  </span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Notification _instance = <span class=\"keyword\">null</span>;     </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_instance == <span class=\"keyword\">null</span>) &#123;  </span><br><span class=\"line\">            _instance = <span class=\"keyword\">new</span> Notification();  </span><br><span class=\"line\">            <span class=\"comment\">//初始化列表容器  </span></span><br><span class=\"line\">            observerList = <span class=\"keyword\">new</span> ArrayList();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> _instance;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"comment\">//添加观察者  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addObserver</span><span class=\"params\">(Observer obs)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!observerList.isExistobs &#123;  </span><br><span class=\"line\">            observerList.add(obs);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"comment\">//删除观察者  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeObserver</span><span class=\"params\">(Observer obs)</span> </span>&#123;  </span><br><span class=\"line\">        observerList.remove(obs);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"comment\">//广播消息  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sendMsg</span><span class=\"params\">(String event, ..)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Observer obs : observerList) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (obs.event == event) &#123;  </span><br><span class=\"line\">                obs.onNotify(..);  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//观察者基类  </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer</span> </span>&#123;  </span><br><span class=\"line\">    String event;  </span><br><span class=\"line\">    <span class=\"comment\">//接收消息函数，event是消息类型，后面是参数  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onNotify</span><span class=\"params\">(..)</span>  </span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"comment\">//添加观察者  </span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">void</span> <span class=\"title\">addObserver</span><span class=\"params\">(String event)</span> </span>&#123;  </span><br><span class=\"line\">        event = event;  </span><br><span class=\"line\">        Notification.getInstance().addObserver(<span class=\"keyword\">this</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//杀怪成就观察者  </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AchievementObserver</span> <span class=\"keyword\">extends</span> <span class=\"title\">Observer</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onNotify</span><span class=\"params\">(id)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (id == <span class=\"number\">1009</span>) &#123;  </span><br><span class=\"line\">            <span class=\"comment\">//处理杀1009怪的成就逻辑  </span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (id == <span class=\"number\">1010</span>) &#123;  </span><br><span class=\"line\">            <span class=\"comment\">//处理杀1010怪的成就逻辑  </span></span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">main () &#123;  </span><br><span class=\"line\">    <span class=\"comment\">//killMonster是杀死一个怪物，返回杀死怪物的id  </span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> id = killMonster();  </span><br><span class=\"line\">    <span class=\"comment\">//发送消息，杀死怪物，并将杀死的怪物id一起发送  </span></span><br><span class=\"line\">    Notification.getInstance().sendMsg(EVENT_KILL_MONSTER, id);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后在写一个成就管理类来管理各种成就观察者，这样各个成就直接也可以解耦。</p>\n<h2 id=\"其他问题\"><a href=\"#其他问题\" class=\"headerlink\" title=\"其他问题\"></a>其他问题</h2><ul>\n<li>引用销毁问题：这个问题容易造成内存泄漏，就是在这个观察者不再使用时，一定记得将其remove，否则这个观察者一直在引用着，不会被释放。</li>\n<li>同步异步问题：sendMsg这个函数中是在主线程按加入顺序进行发送的，在特殊情况下根据需要可以使用多线程来实现。</li>\n<li>其他应用：观察者模式在MVC这种结构下也经常使用，control来处理逻辑，通过观察者来相应UI事件。<br>观察者模式的优点就是可以做到完全的解耦；缺点就是使用不当会让程序难以维护和调试。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h1><h2 id=\"通俗的定义\"><a href=\"#通俗的定义\" class=\"headerlink\" title=\"通俗的定义\"></a>通俗的定义</h2><p>触发事件的一方不关心谁来处理，处理事件的一方不关心事件是从哪里来的。观察者模式就是让观察者与被观察者彻底解耦。</p>\n<h2 id=\"结构图如下\"><a href=\"#结构图如下\" class=\"headerlink\" title=\"结构图如下\"></a>结构图如下</h2><p><img src=\"/images/design_2_observer.png\" alt=\"observer\"><br>","more":"</p>\n<h2 id=\"游戏开发中的使用\"><a href=\"#游戏开发中的使用\" class=\"headerlink\" title=\"游戏开发中的使用\"></a>游戏开发中的使用</h2><p>当我们设计一个成就系统的时候，往往要在各个系统都要增加判断，比如杀死某种怪物多少只，新手往往可能这么写：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> KILL_1009_COUNT = <span class=\"number\">0</span>;  </span><br><span class=\"line\">main () &#123;  </span><br><span class=\"line\">    <span class=\"comment\">//killMonster是杀死一个怪物，返回杀死怪物的id  </span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> id = killMonster();  </span><br><span class=\"line\">    <span class=\"comment\">//如果杀死的怪物是1009那么数量加一，超过100次达成成就  </span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (id == <span class=\"string\">\"1009\"</span>) &#123;  </span><br><span class=\"line\">        KILL_1009_COUNT++;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (KILL_1009_COUNT &gt; <span class=\"number\">100</span>) &#123;  </span><br><span class=\"line\">            print(<span class=\"string\">\"达成成就！杀死1009怪物100次！\"</span>);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果这样写下去，后果将不堪设想：各个类直接将会超级耦合，成就判断将会蔓延到整个项目的每个角落！观察者模式就是为了解决这个问题而出现的。观察者模式让代码彻底解耦，还是上面的那个例子：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main () &#123;  </span><br><span class=\"line\">    <span class=\"comment\">//killMonster是杀死一个怪物，返回杀死怪物的id  </span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> id = killMonster();  </span><br><span class=\"line\">    <span class=\"comment\">//发送消息，杀死怪物，并将杀死的怪物id一起发送  </span></span><br><span class=\"line\">    notify(EVENT_KILL_MONSTER, id);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这样代码的各个功能就不用关心成就相关的逻辑，只是通知我做了这样一件事情就可以了。同样，游戏中这样的例子到处都是，比如增加经验时，我们发送增加经验的消息，接收消息的地方来处理到底升没升级，因为可以增加经验的地方有很多，这样我们就不用导出判断是否升级了。下面看一下观察者的实现：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//处理观察者与被观察者  </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Notification</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"comment\">//一个可变的观察者列表  </span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List observerList = <span class=\"keyword\">null</span>;  </span><br><span class=\"line\">    <span class=\"comment\">//该类是单例（后面我们会单独讲单例模式）  </span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Notification _instance = <span class=\"keyword\">null</span>;     </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_instance == <span class=\"keyword\">null</span>) &#123;  </span><br><span class=\"line\">            _instance = <span class=\"keyword\">new</span> Notification();  </span><br><span class=\"line\">            <span class=\"comment\">//初始化列表容器  </span></span><br><span class=\"line\">            observerList = <span class=\"keyword\">new</span> ArrayList();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> _instance;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"comment\">//添加观察者  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addObserver</span><span class=\"params\">(Observer obs)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!observerList.isExistobs &#123;  </span><br><span class=\"line\">            observerList.add(obs);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"comment\">//删除观察者  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeObserver</span><span class=\"params\">(Observer obs)</span> </span>&#123;  </span><br><span class=\"line\">        observerList.remove(obs);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"comment\">//广播消息  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sendMsg</span><span class=\"params\">(String event, ..)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Observer obs : observerList) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (obs.event == event) &#123;  </span><br><span class=\"line\">                obs.onNotify(..);  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//观察者基类  </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer</span> </span>&#123;  </span><br><span class=\"line\">    String event;  </span><br><span class=\"line\">    <span class=\"comment\">//接收消息函数，event是消息类型，后面是参数  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onNotify</span><span class=\"params\">(..)</span>  </span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"comment\">//添加观察者  </span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">void</span> <span class=\"title\">addObserver</span><span class=\"params\">(String event)</span> </span>&#123;  </span><br><span class=\"line\">        event = event;  </span><br><span class=\"line\">        Notification.getInstance().addObserver(<span class=\"keyword\">this</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//杀怪成就观察者  </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AchievementObserver</span> <span class=\"keyword\">extends</span> <span class=\"title\">Observer</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onNotify</span><span class=\"params\">(id)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (id == <span class=\"number\">1009</span>) &#123;  </span><br><span class=\"line\">            <span class=\"comment\">//处理杀1009怪的成就逻辑  </span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (id == <span class=\"number\">1010</span>) &#123;  </span><br><span class=\"line\">            <span class=\"comment\">//处理杀1010怪的成就逻辑  </span></span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">main () &#123;  </span><br><span class=\"line\">    <span class=\"comment\">//killMonster是杀死一个怪物，返回杀死怪物的id  </span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> id = killMonster();  </span><br><span class=\"line\">    <span class=\"comment\">//发送消息，杀死怪物，并将杀死的怪物id一起发送  </span></span><br><span class=\"line\">    Notification.getInstance().sendMsg(EVENT_KILL_MONSTER, id);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后在写一个成就管理类来管理各种成就观察者，这样各个成就直接也可以解耦。</p>\n<h2 id=\"其他问题\"><a href=\"#其他问题\" class=\"headerlink\" title=\"其他问题\"></a>其他问题</h2><ul>\n<li>引用销毁问题：这个问题容易造成内存泄漏，就是在这个观察者不再使用时，一定记得将其remove，否则这个观察者一直在引用着，不会被释放。</li>\n<li>同步异步问题：sendMsg这个函数中是在主线程按加入顺序进行发送的，在特殊情况下根据需要可以使用多线程来实现。</li>\n<li>其他应用：观察者模式在MVC这种结构下也经常使用，control来处理逻辑，通过观察者来相应UI事件。<br>观察者模式的优点就是可以做到完全的解耦；缺点就是使用不当会让程序难以维护和调试。</li>\n</ul>"},{"title":"设计模式在游戏开发中的应用之命令模式","date":"2016-11-29T06:13:45.000Z","_content":"设计模式在一些大型的软件系统中非常常用，用来处理复杂的结构和逻辑。游戏其实也是一个软件系统，也会有庞大的系统，复杂的逻辑关系，对设计模式的合理使用可以帮助我们更好的去组织各个系统模块，优化逻辑关系，使之可以更好的维护和拓展。本文对常用的设计模式在游戏中的应用进行讨论，而不对设计模式的原理进行过多的阐述了。本文的例子代码也是伪代码，不能够运行。<!--more-->\n\n# 命令模式\n## 通俗的定义  \n将一组行为抽象为对象，使用不同的组合方式来执行命令，以实现解耦。本文介绍的命令模式可能与GoF上的稍有不同，是我自己对游戏开发中设计模式应用的理解。  \n## 结构图：\n![commond](/images/design_1_commond.png)\n## 游戏开发中的使用\n考虑以下场景，假如我们在设计一款RPG游戏，在野外地图肯定会有野怪，野怪会有一些AI逻辑，我们打算设计一套合理的怪物模块。大概如下：\n``` java\n//怪物基类  \nclass Monster {  \n    //行走巡逻  \n    public walk();  \n    //攻击  \n    public attack();  \n    //逃跑  \n    public escape();  \n}\n``` 大体设计包含了怪物行走、攻击和逃跑三个通用的行为特征。很快策划提出了新需求，要加入精英怪物类型，并且精英怪物有他自己独特的逻辑。嗯，幸好我们抽象出了怪物基类，只要继承过来，再增加新的行为即可，新增的精英怪物如下：\n``` java\n//精英怪物  \nclass EliteMonster extends Monster {  \n    //精英怪物独有的行为  \n    public eliteBehavior()  \n}  \n```\n这样就很快的实现了新的需求，EliteMonster继承了Monster基础行为，并且增加了新的行为。接着没过多久策划又提出我们要有BOSS，是的，游戏怎么能没有BOSS呢，好吧我们来添加，毕竟我们设计好了基础行为，只要继承过来，在添加新的行为就好了：\n``` java\n//BOSS  \nclass BossMonster extends Monster {  \n    //BOSS独有的行为  \n    public bossBehavior()  \n}  \n```\n看来我们的代码还是挺健壮的，每次都可以快速的增加新的怪物。但是紧接着新都修改需求提出来了：我们要让BOSS拥有精英怪物的行为。怎么办？还好，我们的程序足够健壮，修改一下继承关系就好了，我们让BossMonster来继承EliteMonster，虽然修改继承关系看起来很危险，但是我们还是完美的解决了问题，BOSS拥有了新的行为。经过一段时间，我们有设计了新的怪物：\n``` java\n//普通怪物  \nclass SimpleMonster extends Monster {  \n    //普通怪物独有的行为  \n    public simpleBehavior()  \n} \n```\n这时不幸的消息传来了：我们想让BOSS同时拥有精英怪物和普通怪物的行为！现在我们有几种解决方案：\n- 把精英怪物的行为和普通怪物的行为，封装到Monster里，作为基础行为，但是这样的话，就是所有怪物都会继承这两种行为，这种多余的基础是我们不想看到的。\n- 就是把SimpleMonster的行为复制一份给BOSS，让BOSS在继承EliteMonster的同时拥有SimpleMonster的行为，但是这样就会有代码的冗余，后面我们修改这种行为的时候就要在两个地方修改。\n- 期望你使用的语言可以多继承。然而多继承并不是一个好的特性和方案。\n\n这时我们想一想，算了，代码冗余就冗余一下吧，毕竟大多数需求我们还是可以很好的实现的。就在我们觉得可以满足需求时，更糟糕的需求又提交过来了：我们需要挂机功能，玩家的角色需要实现一部分AI功能，这时就麻烦了，我们怎么调整这个继承关系，让Player继承谁？看起来继承谁都不太合理。这时我们就要思考一下到底该怎么设计行为这部分，才能让我们适应各种需求的改动。看一下下面这种设计：\n``` java\n//游戏中行为对象的基类  \nclass GameActor {  \n}  \n//玩家对象  \nclass Player extends GameActor {  \n  \n}  \n//命令抽象接口  \ninterface ICommond {  \n    public execute(GameActor ga);  \n}  \n//攻击命令  \nclass AttackCommond {  \n    //参数可以是任何一个行为对象  \n    public execute(GameActor ga);  \n}  \n//执行命令的类  \nclass CommondInvoke {  \n    public addCommond(ICommond commond);  \n    public execute();  \n}  \n//创建一个玩家对象  \nPlayer p = new Player();  \n//创建一个攻击命令  \nICommond attackCommond = new AttackCommond(p);  \n//让玩家执行攻击命令  \nCommondInvoke invoke = new CommondInvoke();  \ninvoke.addCommond(attackCommond);  \ninvoke.execute() \n```\n行为对象都继承GameActor，可以随时增加新的对象。行为命令需要传入一个行为对象来执行行为动作，这里命令与对象进行了解耦，命令与对象可以随意增加与组合。CommondInvoke也可以进一步优化，可以执行多条命令，可以倒序或顺序执行，可以同步或异步，甚至可以随时添加、删除和修改。多个命令的组合也是命令模式的一个特点。此外命令模式还可以处理事务回滚：\n``` java\n//命令抽象接口  \ninterface ICommond {  \n    public execute(GameActor ga);  \n    //撤销函数  \n    public undo();  \n}  \n```\n事务回滚这个特性在服务器中比较常用，比如玩家的一次购买行为，肯定是要保障金钱扣除，道具添加同时打成，否则就算是事务失败，要把修改的内容还原，这时就可以调用undo进行回滚。命令模式暂时介绍这些，下一篇会介绍观察者模式。\n\n","source":"_posts/design-commond.md","raw":"---\ntitle: 设计模式在游戏开发中的应用之命令模式\ndate: 2016-11-29 14:13:45\ntags: 命令模式\ncategories: 设计模式\n---\n设计模式在一些大型的软件系统中非常常用，用来处理复杂的结构和逻辑。游戏其实也是一个软件系统，也会有庞大的系统，复杂的逻辑关系，对设计模式的合理使用可以帮助我们更好的去组织各个系统模块，优化逻辑关系，使之可以更好的维护和拓展。本文对常用的设计模式在游戏中的应用进行讨论，而不对设计模式的原理进行过多的阐述了。本文的例子代码也是伪代码，不能够运行。<!--more-->\n\n# 命令模式\n## 通俗的定义  \n将一组行为抽象为对象，使用不同的组合方式来执行命令，以实现解耦。本文介绍的命令模式可能与GoF上的稍有不同，是我自己对游戏开发中设计模式应用的理解。  \n## 结构图：\n![commond](/images/design_1_commond.png)\n## 游戏开发中的使用\n考虑以下场景，假如我们在设计一款RPG游戏，在野外地图肯定会有野怪，野怪会有一些AI逻辑，我们打算设计一套合理的怪物模块。大概如下：\n``` java\n//怪物基类  \nclass Monster {  \n    //行走巡逻  \n    public walk();  \n    //攻击  \n    public attack();  \n    //逃跑  \n    public escape();  \n}\n``` 大体设计包含了怪物行走、攻击和逃跑三个通用的行为特征。很快策划提出了新需求，要加入精英怪物类型，并且精英怪物有他自己独特的逻辑。嗯，幸好我们抽象出了怪物基类，只要继承过来，再增加新的行为即可，新增的精英怪物如下：\n``` java\n//精英怪物  \nclass EliteMonster extends Monster {  \n    //精英怪物独有的行为  \n    public eliteBehavior()  \n}  \n```\n这样就很快的实现了新的需求，EliteMonster继承了Monster基础行为，并且增加了新的行为。接着没过多久策划又提出我们要有BOSS，是的，游戏怎么能没有BOSS呢，好吧我们来添加，毕竟我们设计好了基础行为，只要继承过来，在添加新的行为就好了：\n``` java\n//BOSS  \nclass BossMonster extends Monster {  \n    //BOSS独有的行为  \n    public bossBehavior()  \n}  \n```\n看来我们的代码还是挺健壮的，每次都可以快速的增加新的怪物。但是紧接着新都修改需求提出来了：我们要让BOSS拥有精英怪物的行为。怎么办？还好，我们的程序足够健壮，修改一下继承关系就好了，我们让BossMonster来继承EliteMonster，虽然修改继承关系看起来很危险，但是我们还是完美的解决了问题，BOSS拥有了新的行为。经过一段时间，我们有设计了新的怪物：\n``` java\n//普通怪物  \nclass SimpleMonster extends Monster {  \n    //普通怪物独有的行为  \n    public simpleBehavior()  \n} \n```\n这时不幸的消息传来了：我们想让BOSS同时拥有精英怪物和普通怪物的行为！现在我们有几种解决方案：\n- 把精英怪物的行为和普通怪物的行为，封装到Monster里，作为基础行为，但是这样的话，就是所有怪物都会继承这两种行为，这种多余的基础是我们不想看到的。\n- 就是把SimpleMonster的行为复制一份给BOSS，让BOSS在继承EliteMonster的同时拥有SimpleMonster的行为，但是这样就会有代码的冗余，后面我们修改这种行为的时候就要在两个地方修改。\n- 期望你使用的语言可以多继承。然而多继承并不是一个好的特性和方案。\n\n这时我们想一想，算了，代码冗余就冗余一下吧，毕竟大多数需求我们还是可以很好的实现的。就在我们觉得可以满足需求时，更糟糕的需求又提交过来了：我们需要挂机功能，玩家的角色需要实现一部分AI功能，这时就麻烦了，我们怎么调整这个继承关系，让Player继承谁？看起来继承谁都不太合理。这时我们就要思考一下到底该怎么设计行为这部分，才能让我们适应各种需求的改动。看一下下面这种设计：\n``` java\n//游戏中行为对象的基类  \nclass GameActor {  \n}  \n//玩家对象  \nclass Player extends GameActor {  \n  \n}  \n//命令抽象接口  \ninterface ICommond {  \n    public execute(GameActor ga);  \n}  \n//攻击命令  \nclass AttackCommond {  \n    //参数可以是任何一个行为对象  \n    public execute(GameActor ga);  \n}  \n//执行命令的类  \nclass CommondInvoke {  \n    public addCommond(ICommond commond);  \n    public execute();  \n}  \n//创建一个玩家对象  \nPlayer p = new Player();  \n//创建一个攻击命令  \nICommond attackCommond = new AttackCommond(p);  \n//让玩家执行攻击命令  \nCommondInvoke invoke = new CommondInvoke();  \ninvoke.addCommond(attackCommond);  \ninvoke.execute() \n```\n行为对象都继承GameActor，可以随时增加新的对象。行为命令需要传入一个行为对象来执行行为动作，这里命令与对象进行了解耦，命令与对象可以随意增加与组合。CommondInvoke也可以进一步优化，可以执行多条命令，可以倒序或顺序执行，可以同步或异步，甚至可以随时添加、删除和修改。多个命令的组合也是命令模式的一个特点。此外命令模式还可以处理事务回滚：\n``` java\n//命令抽象接口  \ninterface ICommond {  \n    public execute(GameActor ga);  \n    //撤销函数  \n    public undo();  \n}  \n```\n事务回滚这个特性在服务器中比较常用，比如玩家的一次购买行为，肯定是要保障金钱扣除，道具添加同时打成，否则就算是事务失败，要把修改的内容还原，这时就可以调用undo进行回滚。命令模式暂时介绍这些，下一篇会介绍观察者模式。\n\n","slug":"design-commond","published":1,"updated":"2019-07-01T12:35:47.382Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjycv1m3m000jok9mrspt4q0f","content":"<p>设计模式在一些大型的软件系统中非常常用，用来处理复杂的结构和逻辑。游戏其实也是一个软件系统，也会有庞大的系统，复杂的逻辑关系，对设计模式的合理使用可以帮助我们更好的去组织各个系统模块，优化逻辑关系，使之可以更好的维护和拓展。本文对常用的设计模式在游戏中的应用进行讨论，而不对设计模式的原理进行过多的阐述了。本文的例子代码也是伪代码，不能够运行。<a id=\"more\"></a></p>\n<h1 id=\"命令模式\"><a href=\"#命令模式\" class=\"headerlink\" title=\"命令模式\"></a>命令模式</h1><h2 id=\"通俗的定义\"><a href=\"#通俗的定义\" class=\"headerlink\" title=\"通俗的定义\"></a>通俗的定义</h2><p>将一组行为抽象为对象，使用不同的组合方式来执行命令，以实现解耦。本文介绍的命令模式可能与GoF上的稍有不同，是我自己对游戏开发中设计模式应用的理解。  </p>\n<h2 id=\"结构图：\"><a href=\"#结构图：\" class=\"headerlink\" title=\"结构图：\"></a>结构图：</h2><p><img src=\"/images/design_1_commond.png\" alt=\"commond\"></p>\n<h2 id=\"游戏开发中的使用\"><a href=\"#游戏开发中的使用\" class=\"headerlink\" title=\"游戏开发中的使用\"></a>游戏开发中的使用</h2><p>考虑以下场景，假如我们在设计一款RPG游戏，在野外地图肯定会有野怪，野怪会有一些AI逻辑，我们打算设计一套合理的怪物模块。大概如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//怪物基类  </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Monster</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"comment\">//行走巡逻  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">walk</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">    <span class=\"comment\">//攻击  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">attack</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">    <span class=\"comment\">//逃跑  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">escape</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">``` 大体设计包含了怪物行走、攻击和逃跑三个通用的行为特征。很快策划提出了新需求，要加入精英怪物类型，并且精英怪物有他自己独特的逻辑。嗯，幸好我们抽象出了怪物基类，只要继承过来，再增加新的行为即可，新增的精英怪物如下：</span><br><span class=\"line\">``` java</span><br><span class=\"line\"><span class=\"comment\">//精英怪物  </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EliteMonster</span> <span class=\"keyword\">extends</span> <span class=\"title\">Monster</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"comment\">//精英怪物独有的行为  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">eliteBehavior</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>这样就很快的实现了新的需求，EliteMonster继承了Monster基础行为，并且增加了新的行为。接着没过多久策划又提出我们要有BOSS，是的，游戏怎么能没有BOSS呢，好吧我们来添加，毕竟我们设计好了基础行为，只要继承过来，在添加新的行为就好了：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//BOSS  </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BossMonster</span> <span class=\"keyword\">extends</span> <span class=\"title\">Monster</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"comment\">//BOSS独有的行为  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">bossBehavior</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>看来我们的代码还是挺健壮的，每次都可以快速的增加新的怪物。但是紧接着新都修改需求提出来了：我们要让BOSS拥有精英怪物的行为。怎么办？还好，我们的程序足够健壮，修改一下继承关系就好了，我们让BossMonster来继承EliteMonster，虽然修改继承关系看起来很危险，但是我们还是完美的解决了问题，BOSS拥有了新的行为。经过一段时间，我们有设计了新的怪物：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//普通怪物  </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleMonster</span> <span class=\"keyword\">extends</span> <span class=\"title\">Monster</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"comment\">//普通怪物独有的行为  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">simpleBehavior</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>这时不幸的消息传来了：我们想让BOSS同时拥有精英怪物和普通怪物的行为！现在我们有几种解决方案：</p>\n<ul>\n<li>把精英怪物的行为和普通怪物的行为，封装到Monster里，作为基础行为，但是这样的话，就是所有怪物都会继承这两种行为，这种多余的基础是我们不想看到的。</li>\n<li>就是把SimpleMonster的行为复制一份给BOSS，让BOSS在继承EliteMonster的同时拥有SimpleMonster的行为，但是这样就会有代码的冗余，后面我们修改这种行为的时候就要在两个地方修改。</li>\n<li>期望你使用的语言可以多继承。然而多继承并不是一个好的特性和方案。</li>\n</ul>\n<p>这时我们想一想，算了，代码冗余就冗余一下吧，毕竟大多数需求我们还是可以很好的实现的。就在我们觉得可以满足需求时，更糟糕的需求又提交过来了：我们需要挂机功能，玩家的角色需要实现一部分AI功能，这时就麻烦了，我们怎么调整这个继承关系，让Player继承谁？看起来继承谁都不太合理。这时我们就要思考一下到底该怎么设计行为这部分，才能让我们适应各种需求的改动。看一下下面这种设计：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//游戏中行为对象的基类  </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GameActor</span> </span>&#123;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"comment\">//玩家对象  </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Player</span> <span class=\"keyword\">extends</span> <span class=\"title\">GameActor</span> </span>&#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"comment\">//命令抽象接口  </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ICommond</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">execute</span><span class=\"params\">(GameActor ga)</span></span>;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"comment\">//攻击命令  </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AttackCommond</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"comment\">//参数可以是任何一个行为对象  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">execute</span><span class=\"params\">(GameActor ga)</span></span>;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"comment\">//执行命令的类  </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommondInvoke</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">addCommond</span><span class=\"params\">(ICommond commond)</span></span>;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">execute</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"comment\">//创建一个玩家对象  </span></span><br><span class=\"line\">Player p = <span class=\"keyword\">new</span> Player();  </span><br><span class=\"line\"><span class=\"comment\">//创建一个攻击命令  </span></span><br><span class=\"line\">ICommond attackCommond = <span class=\"keyword\">new</span> AttackCommond(p);  </span><br><span class=\"line\"><span class=\"comment\">//让玩家执行攻击命令  </span></span><br><span class=\"line\">CommondInvoke invoke = <span class=\"keyword\">new</span> CommondInvoke();  </span><br><span class=\"line\">invoke.addCommond(attackCommond);  </span><br><span class=\"line\">invoke.execute()</span><br></pre></td></tr></table></figure></p>\n<p>行为对象都继承GameActor，可以随时增加新的对象。行为命令需要传入一个行为对象来执行行为动作，这里命令与对象进行了解耦，命令与对象可以随意增加与组合。CommondInvoke也可以进一步优化，可以执行多条命令，可以倒序或顺序执行，可以同步或异步，甚至可以随时添加、删除和修改。多个命令的组合也是命令模式的一个特点。此外命令模式还可以处理事务回滚：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//命令抽象接口  </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ICommond</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">execute</span><span class=\"params\">(GameActor ga)</span></span>;  </span><br><span class=\"line\">    <span class=\"comment\">//撤销函数  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">undo</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>事务回滚这个特性在服务器中比较常用，比如玩家的一次购买行为，肯定是要保障金钱扣除，道具添加同时打成，否则就算是事务失败，要把修改的内容还原，这时就可以调用undo进行回滚。命令模式暂时介绍这些，下一篇会介绍观察者模式。</p>\n","site":{"data":{}},"excerpt":"<p>设计模式在一些大型的软件系统中非常常用，用来处理复杂的结构和逻辑。游戏其实也是一个软件系统，也会有庞大的系统，复杂的逻辑关系，对设计模式的合理使用可以帮助我们更好的去组织各个系统模块，优化逻辑关系，使之可以更好的维护和拓展。本文对常用的设计模式在游戏中的应用进行讨论，而不对设计模式的原理进行过多的阐述了。本文的例子代码也是伪代码，不能够运行。","more":"</p>\n<h1 id=\"命令模式\"><a href=\"#命令模式\" class=\"headerlink\" title=\"命令模式\"></a>命令模式</h1><h2 id=\"通俗的定义\"><a href=\"#通俗的定义\" class=\"headerlink\" title=\"通俗的定义\"></a>通俗的定义</h2><p>将一组行为抽象为对象，使用不同的组合方式来执行命令，以实现解耦。本文介绍的命令模式可能与GoF上的稍有不同，是我自己对游戏开发中设计模式应用的理解。  </p>\n<h2 id=\"结构图：\"><a href=\"#结构图：\" class=\"headerlink\" title=\"结构图：\"></a>结构图：</h2><p><img src=\"/images/design_1_commond.png\" alt=\"commond\"></p>\n<h2 id=\"游戏开发中的使用\"><a href=\"#游戏开发中的使用\" class=\"headerlink\" title=\"游戏开发中的使用\"></a>游戏开发中的使用</h2><p>考虑以下场景，假如我们在设计一款RPG游戏，在野外地图肯定会有野怪，野怪会有一些AI逻辑，我们打算设计一套合理的怪物模块。大概如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//怪物基类  </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Monster</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"comment\">//行走巡逻  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">walk</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">    <span class=\"comment\">//攻击  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">attack</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">    <span class=\"comment\">//逃跑  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">escape</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">``` 大体设计包含了怪物行走、攻击和逃跑三个通用的行为特征。很快策划提出了新需求，要加入精英怪物类型，并且精英怪物有他自己独特的逻辑。嗯，幸好我们抽象出了怪物基类，只要继承过来，再增加新的行为即可，新增的精英怪物如下：</span><br><span class=\"line\">``` java</span><br><span class=\"line\"><span class=\"comment\">//精英怪物  </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EliteMonster</span> <span class=\"keyword\">extends</span> <span class=\"title\">Monster</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"comment\">//精英怪物独有的行为  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">eliteBehavior</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>这样就很快的实现了新的需求，EliteMonster继承了Monster基础行为，并且增加了新的行为。接着没过多久策划又提出我们要有BOSS，是的，游戏怎么能没有BOSS呢，好吧我们来添加，毕竟我们设计好了基础行为，只要继承过来，在添加新的行为就好了：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//BOSS  </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BossMonster</span> <span class=\"keyword\">extends</span> <span class=\"title\">Monster</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"comment\">//BOSS独有的行为  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">bossBehavior</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>看来我们的代码还是挺健壮的，每次都可以快速的增加新的怪物。但是紧接着新都修改需求提出来了：我们要让BOSS拥有精英怪物的行为。怎么办？还好，我们的程序足够健壮，修改一下继承关系就好了，我们让BossMonster来继承EliteMonster，虽然修改继承关系看起来很危险，但是我们还是完美的解决了问题，BOSS拥有了新的行为。经过一段时间，我们有设计了新的怪物：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//普通怪物  </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleMonster</span> <span class=\"keyword\">extends</span> <span class=\"title\">Monster</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"comment\">//普通怪物独有的行为  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">simpleBehavior</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>这时不幸的消息传来了：我们想让BOSS同时拥有精英怪物和普通怪物的行为！现在我们有几种解决方案：</p>\n<ul>\n<li>把精英怪物的行为和普通怪物的行为，封装到Monster里，作为基础行为，但是这样的话，就是所有怪物都会继承这两种行为，这种多余的基础是我们不想看到的。</li>\n<li>就是把SimpleMonster的行为复制一份给BOSS，让BOSS在继承EliteMonster的同时拥有SimpleMonster的行为，但是这样就会有代码的冗余，后面我们修改这种行为的时候就要在两个地方修改。</li>\n<li>期望你使用的语言可以多继承。然而多继承并不是一个好的特性和方案。</li>\n</ul>\n<p>这时我们想一想，算了，代码冗余就冗余一下吧，毕竟大多数需求我们还是可以很好的实现的。就在我们觉得可以满足需求时，更糟糕的需求又提交过来了：我们需要挂机功能，玩家的角色需要实现一部分AI功能，这时就麻烦了，我们怎么调整这个继承关系，让Player继承谁？看起来继承谁都不太合理。这时我们就要思考一下到底该怎么设计行为这部分，才能让我们适应各种需求的改动。看一下下面这种设计：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//游戏中行为对象的基类  </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GameActor</span> </span>&#123;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"comment\">//玩家对象  </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Player</span> <span class=\"keyword\">extends</span> <span class=\"title\">GameActor</span> </span>&#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"comment\">//命令抽象接口  </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ICommond</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">execute</span><span class=\"params\">(GameActor ga)</span></span>;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"comment\">//攻击命令  </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AttackCommond</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"comment\">//参数可以是任何一个行为对象  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">execute</span><span class=\"params\">(GameActor ga)</span></span>;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"comment\">//执行命令的类  </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommondInvoke</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">addCommond</span><span class=\"params\">(ICommond commond)</span></span>;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">execute</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"comment\">//创建一个玩家对象  </span></span><br><span class=\"line\">Player p = <span class=\"keyword\">new</span> Player();  </span><br><span class=\"line\"><span class=\"comment\">//创建一个攻击命令  </span></span><br><span class=\"line\">ICommond attackCommond = <span class=\"keyword\">new</span> AttackCommond(p);  </span><br><span class=\"line\"><span class=\"comment\">//让玩家执行攻击命令  </span></span><br><span class=\"line\">CommondInvoke invoke = <span class=\"keyword\">new</span> CommondInvoke();  </span><br><span class=\"line\">invoke.addCommond(attackCommond);  </span><br><span class=\"line\">invoke.execute()</span><br></pre></td></tr></table></figure></p>\n<p>行为对象都继承GameActor，可以随时增加新的对象。行为命令需要传入一个行为对象来执行行为动作，这里命令与对象进行了解耦，命令与对象可以随意增加与组合。CommondInvoke也可以进一步优化，可以执行多条命令，可以倒序或顺序执行，可以同步或异步，甚至可以随时添加、删除和修改。多个命令的组合也是命令模式的一个特点。此外命令模式还可以处理事务回滚：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//命令抽象接口  </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ICommond</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">execute</span><span class=\"params\">(GameActor ga)</span></span>;  </span><br><span class=\"line\">    <span class=\"comment\">//撤销函数  </span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">undo</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>事务回滚这个特性在服务器中比较常用，比如玩家的一次购买行为，肯定是要保障金钱扣除，道具添加同时打成，否则就算是事务失败，要把修改的内容还原，这时就可以调用undo进行回滚。命令模式暂时介绍这些，下一篇会介绍观察者模式。</p>"},{"title":"js性能优化","date":"2017-03-27T12:54:22.000Z","_content":"### JavaScript性能优化总结\n- +=运算符比+运算符效率高。\n- 数字转换成字符串\n```\n(\"\" +) > String() > .toString() > new String()\n```\n- 展开循环：当循环次数是确定的，消除循环并使用多次函数调用，虽然会让代码看起来不够高端，但是速度往往会更快。\n- 减值迭代:在循环中，减值要比增值效率高。\n```\n//增值迭代\nfor (var i = 0; i < 1000; i++) {\n    //TODO ...\n}\n//减值迭代较优\nfor (var i = 999; i >=0; i--) {\n    //TODO ...\n}\n```\n- 使用switch优于if：在分支大于2并且允许使用switch的时候用switch的效率是很高的，因为switch是随机访问的。\n- 重复值:任何在多处用到的值都应该抽取为一个常量\n```\nvar result = (obj.value.value2 + obj.value.value3)*obj.value.value1;\n//较优的写法\nvar value = obj.value;\nvar result = (value.value2 + value.value3)*value.value1;\n```\n- 遍历数组时，缓存数组长度\n```\nvar len = arr.length;\nfor (var i = len - 1; i > 0; i--) {\n    //TODO ...\n}\n```\n- 释放对象：  \n```\n//对象\nobj = null  \n对象属性：delete obj.myproperty  \n数组item：使用数组的splice方法释放数组中不用的item  \n```\n- 位运算较快：&、|、!、>>、<<\n```\n//按位与(&):判断一个数是奇数还是偶数\nif (n & 1) {\n    console.log(\"n是奇数\");\n} else {\n    console.log(\"n是偶数\");\n}\n\n//按位或(|):对浮点数向下求整\nvar num = 1.1 | 0; // 1\n\n//左移(<<) \nvar num = 2 << 1; // 4\n//右移(>>)\nvar num = 64 >> 1; // 32\n```\n- 巧用||和&&布尔运算符\n```\nif (myobj) {\n    doSomething(myobj);\n}\n//可以替换为：\nmyobj && doSomething(myobj);\n```\n- 避免与null进行比较\n```\nif (obj == null) {\n    //todo\n}\n//替换为\nif (!obj) {\n    //todo\n}\n```","source":"_posts/js-perfor.md","raw":"---\ntitle: js性能优化\ndate: 2017-03-27 20:54:22\ntags: js性能优化\ncategories: javascript\n---\n### JavaScript性能优化总结\n- +=运算符比+运算符效率高。\n- 数字转换成字符串\n```\n(\"\" +) > String() > .toString() > new String()\n```\n- 展开循环：当循环次数是确定的，消除循环并使用多次函数调用，虽然会让代码看起来不够高端，但是速度往往会更快。\n- 减值迭代:在循环中，减值要比增值效率高。\n```\n//增值迭代\nfor (var i = 0; i < 1000; i++) {\n    //TODO ...\n}\n//减值迭代较优\nfor (var i = 999; i >=0; i--) {\n    //TODO ...\n}\n```\n- 使用switch优于if：在分支大于2并且允许使用switch的时候用switch的效率是很高的，因为switch是随机访问的。\n- 重复值:任何在多处用到的值都应该抽取为一个常量\n```\nvar result = (obj.value.value2 + obj.value.value3)*obj.value.value1;\n//较优的写法\nvar value = obj.value;\nvar result = (value.value2 + value.value3)*value.value1;\n```\n- 遍历数组时，缓存数组长度\n```\nvar len = arr.length;\nfor (var i = len - 1; i > 0; i--) {\n    //TODO ...\n}\n```\n- 释放对象：  \n```\n//对象\nobj = null  \n对象属性：delete obj.myproperty  \n数组item：使用数组的splice方法释放数组中不用的item  \n```\n- 位运算较快：&、|、!、>>、<<\n```\n//按位与(&):判断一个数是奇数还是偶数\nif (n & 1) {\n    console.log(\"n是奇数\");\n} else {\n    console.log(\"n是偶数\");\n}\n\n//按位或(|):对浮点数向下求整\nvar num = 1.1 | 0; // 1\n\n//左移(<<) \nvar num = 2 << 1; // 4\n//右移(>>)\nvar num = 64 >> 1; // 32\n```\n- 巧用||和&&布尔运算符\n```\nif (myobj) {\n    doSomething(myobj);\n}\n//可以替换为：\nmyobj && doSomething(myobj);\n```\n- 避免与null进行比较\n```\nif (obj == null) {\n    //todo\n}\n//替换为\nif (!obj) {\n    //todo\n}\n```","slug":"js-perfor","published":1,"updated":"2019-07-01T12:35:47.383Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjycv1m3n000kok9mnm4j1l4x","content":"<h3 id=\"JavaScript性能优化总结\"><a href=\"#JavaScript性能优化总结\" class=\"headerlink\" title=\"JavaScript性能优化总结\"></a>JavaScript性能优化总结</h3><ul>\n<li>+=运算符比+运算符效率高。</li>\n<li><p>数字转换成字符串</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(&quot;&quot; +) &gt; String() &gt; .toString() &gt; new String()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>展开循环：当循环次数是确定的，消除循环并使用多次函数调用，虽然会让代码看起来不够高端，但是速度往往会更快。</p>\n</li>\n<li><p>减值迭代:在循环中，减值要比增值效率高。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//增值迭代</span><br><span class=\"line\">for (var i = 0; i &lt; 1000; i++) &#123;</span><br><span class=\"line\">    //TODO ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//减值迭代较优</span><br><span class=\"line\">for (var i = 999; i &gt;=0; i--) &#123;</span><br><span class=\"line\">    //TODO ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用switch优于if：在分支大于2并且允许使用switch的时候用switch的效率是很高的，因为switch是随机访问的。</p>\n</li>\n<li><p>重复值:任何在多处用到的值都应该抽取为一个常量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var result = (obj.value.value2 + obj.value.value3)*obj.value.value1;</span><br><span class=\"line\">//较优的写法</span><br><span class=\"line\">var value = obj.value;</span><br><span class=\"line\">var result = (value.value2 + value.value3)*value.value1;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>遍历数组时，缓存数组长度</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var len = arr.length;</span><br><span class=\"line\">for (var i = len - 1; i &gt; 0; i--) &#123;</span><br><span class=\"line\">    //TODO ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>释放对象：  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//对象</span><br><span class=\"line\">obj = null  </span><br><span class=\"line\">对象属性：delete obj.myproperty  </span><br><span class=\"line\">数组item：使用数组的splice方法释放数组中不用的item</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>位运算较快：&amp;、|、!、&gt;&gt;、&lt;&lt;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//按位与(&amp;):判断一个数是奇数还是偶数</span><br><span class=\"line\">if (n &amp; 1) &#123;</span><br><span class=\"line\">    console.log(&quot;n是奇数&quot;);</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">    console.log(&quot;n是偶数&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//按位或(|):对浮点数向下求整</span><br><span class=\"line\">var num = 1.1 | 0; // 1</span><br><span class=\"line\"></span><br><span class=\"line\">//左移(&lt;&lt;) </span><br><span class=\"line\">var num = 2 &lt;&lt; 1; // 4</span><br><span class=\"line\">//右移(&gt;&gt;)</span><br><span class=\"line\">var num = 64 &gt;&gt; 1; // 32</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>巧用||和&amp;&amp;布尔运算符</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (myobj) &#123;</span><br><span class=\"line\">    doSomething(myobj);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//可以替换为：</span><br><span class=\"line\">myobj &amp;&amp; doSomething(myobj);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>避免与null进行比较</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (obj == null) &#123;</span><br><span class=\"line\">    //todo</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//替换为</span><br><span class=\"line\">if (!obj) &#123;</span><br><span class=\"line\">    //todo</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"JavaScript性能优化总结\"><a href=\"#JavaScript性能优化总结\" class=\"headerlink\" title=\"JavaScript性能优化总结\"></a>JavaScript性能优化总结</h3><ul>\n<li>+=运算符比+运算符效率高。</li>\n<li><p>数字转换成字符串</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(&quot;&quot; +) &gt; String() &gt; .toString() &gt; new String()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>展开循环：当循环次数是确定的，消除循环并使用多次函数调用，虽然会让代码看起来不够高端，但是速度往往会更快。</p>\n</li>\n<li><p>减值迭代:在循环中，减值要比增值效率高。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//增值迭代</span><br><span class=\"line\">for (var i = 0; i &lt; 1000; i++) &#123;</span><br><span class=\"line\">    //TODO ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//减值迭代较优</span><br><span class=\"line\">for (var i = 999; i &gt;=0; i--) &#123;</span><br><span class=\"line\">    //TODO ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用switch优于if：在分支大于2并且允许使用switch的时候用switch的效率是很高的，因为switch是随机访问的。</p>\n</li>\n<li><p>重复值:任何在多处用到的值都应该抽取为一个常量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var result = (obj.value.value2 + obj.value.value3)*obj.value.value1;</span><br><span class=\"line\">//较优的写法</span><br><span class=\"line\">var value = obj.value;</span><br><span class=\"line\">var result = (value.value2 + value.value3)*value.value1;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>遍历数组时，缓存数组长度</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var len = arr.length;</span><br><span class=\"line\">for (var i = len - 1; i &gt; 0; i--) &#123;</span><br><span class=\"line\">    //TODO ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>释放对象：  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//对象</span><br><span class=\"line\">obj = null  </span><br><span class=\"line\">对象属性：delete obj.myproperty  </span><br><span class=\"line\">数组item：使用数组的splice方法释放数组中不用的item</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>位运算较快：&amp;、|、!、&gt;&gt;、&lt;&lt;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//按位与(&amp;):判断一个数是奇数还是偶数</span><br><span class=\"line\">if (n &amp; 1) &#123;</span><br><span class=\"line\">    console.log(&quot;n是奇数&quot;);</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">    console.log(&quot;n是偶数&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//按位或(|):对浮点数向下求整</span><br><span class=\"line\">var num = 1.1 | 0; // 1</span><br><span class=\"line\"></span><br><span class=\"line\">//左移(&lt;&lt;) </span><br><span class=\"line\">var num = 2 &lt;&lt; 1; // 4</span><br><span class=\"line\">//右移(&gt;&gt;)</span><br><span class=\"line\">var num = 64 &gt;&gt; 1; // 32</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>巧用||和&amp;&amp;布尔运算符</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (myobj) &#123;</span><br><span class=\"line\">    doSomething(myobj);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//可以替换为：</span><br><span class=\"line\">myobj &amp;&amp; doSomething(myobj);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>避免与null进行比较</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (obj == null) &#123;</span><br><span class=\"line\">    //todo</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//替换为</span><br><span class=\"line\">if (!obj) &#123;</span><br><span class=\"line\">    //todo</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"设计模式在游戏开发中的应用之单例模式","date":"2016-12-01T15:07:14.000Z","_content":"# 单例模式\n## 通俗的定义\n是指在运行中只有一个实例对象存在。\n## 结构图如下\n![single](/images/design_3_single.png)\n<!--more-->\n## 游戏开发中的使用\n游戏开发中单例模式的使用也是非常普遍的，比如在Cocos2d-x中的Director就是一个单例。比如游戏中的很多工具类都是做成单例或者静态类的方式来使用。单例还有一种写法，很少有人使用，然而这种写法在做游戏开发时却很好用。比如，我们在需要分享时，往往都需要每个平台都有单独的功能和实现方式，很多时候我们都这么写：\n``` java\nclass ShareUtils {  \n    private _instance = new ShareUtils();  \n  \n    private ShareUtils() {  \n    }  \n  \n    public getInstance() {  \n        return _instance;  \n    }  \n      \n    public void shareToIOS () {  \n        //todo iOS share  \n    }  \n      \n    public void shareToAndroid () {  \n        //todo android share  \n    }  \n}  \n```\n然后再根据不同平台调用不同的函数。其实我们完全可以写的再优雅一些：\n``` java\nclass ShareUtils {  \n    private ShareUtils _instance = null;  \n  \n    private ShareUtils() {  \n    }  \n  \n    public getInstance() {  \n        if (_instance == null) {  \n            if (PLATFORM == IOS) {  \n                _instance = new IOSShare()  \n            } else if (PLATFORM == ANDROID) {  \n                _instance = new AndroidShare()  \n            }  \n        }  \n        return _instance;  \n    }  \n      \n    public void share();  \n}  \n  \nclass IOSShare extends ShareUtils {  \n    public void share() {  \n        //todo ios share  \n    }  \n}  \n  \nclass AndroidShare extends ShareUtils {  \n    public void share() {  \n        //todo android share  \n    }  \n}  \n```\n其实这里我们更重要的是要讨论一下单例模式的问题。\n## 单例模式的问题\n最大问题之一就是它本身是一个全局变量。全局变量会让人很难阅读和理解，当我们去查找一个别人写的代码中的bug时，如果这里没有使用全局变量的话，我们只要理解这个函数体内的代码和传递的参数就可以了。然而当这里充斥着全局变量的时候，性质就不一样了，你要全局搜索这个全局变量都在哪里引用了，做了什么修改，为什么这么修改，理解和修改的代价就会变得特别大。同时全局变量还增加了代码的耦合性，这也是个问题。在很多项目中我们都能看见这样的类：SoundManager,GameManager,DataUtils等等，各种各样的Manager和Utils，大多数时候它们很管用，但是当你要创建这么一个类的时候，你应该思考一下真的需要一个单例的类么？在《游戏编程模式》中有下面这个例子：\n``` java\nclass Bullet  \n{  \npublic:  \n  int getX() const { return x_; }  \n  int getY() const { return y_; }  \n  \n  void setX(int x) { x_ = x; }  \n  void setY(int y) { y_ = y; }  \n  \nprivate:  \n  int x_, y_;  \n};  \n  \nclass BulletManager  \n{  \npublic:  \n  Bullet* create(int x, int y)  \n  {  \n    Bullet* bullet = new Bullet();  \n    bullet->setX(x);  \n    bullet->setY(y);  \n  \n    return bullet;  \n  }  \n  \n  bool isOnScreen(Bullet& bullet)  \n  {  \n    return bullet.getX() >= 0 &&  \n           bullet.getX() < SCREEN_WIDTH &&  \n           bullet.getY() >= 0 &&  \n           bullet.getY() < SCREEN_HEIGHT;  \n  }  \n  \n  void move(Bullet& bullet)  \n  {  \n    bullet.setX(bullet.getX() + 5);  \n  }  \n}; \n```\n这里的BulletManager就是一个管理Bullet的单例类，看起来这里很合理，但是真的需要吗？答案是不需要：\n``` java\nclass Bullet  \n{  \npublic:  \n  Bullet(int x, int y) : x_(x), y_(y) {}  \n  \n  bool isOnScreen()  \n  {  \n    return x_ >= 0 && x_ < SCREEN_WIDTH &&  \n           y_ >= 0 && y_ < SCREEN_HEIGHT;  \n  }  \n  \n  void move() { x_ += 5; }  \n  \nprivate:  \n  int x_, y_;  \n};  \n```\n总之，单例是很方便，有时也很管用，但是要慎用，如果项目中充斥着大量的单例，那么这个项目肯定是难以维护的。","source":"_posts/design-single.md","raw":"---\ntitle: 设计模式在游戏开发中的应用之单例模式\ndate: 2016-12-01 23:07:14\ntags: 单例模式\ncategories: 设计模式\n---\n# 单例模式\n## 通俗的定义\n是指在运行中只有一个实例对象存在。\n## 结构图如下\n![single](/images/design_3_single.png)\n<!--more-->\n## 游戏开发中的使用\n游戏开发中单例模式的使用也是非常普遍的，比如在Cocos2d-x中的Director就是一个单例。比如游戏中的很多工具类都是做成单例或者静态类的方式来使用。单例还有一种写法，很少有人使用，然而这种写法在做游戏开发时却很好用。比如，我们在需要分享时，往往都需要每个平台都有单独的功能和实现方式，很多时候我们都这么写：\n``` java\nclass ShareUtils {  \n    private _instance = new ShareUtils();  \n  \n    private ShareUtils() {  \n    }  \n  \n    public getInstance() {  \n        return _instance;  \n    }  \n      \n    public void shareToIOS () {  \n        //todo iOS share  \n    }  \n      \n    public void shareToAndroid () {  \n        //todo android share  \n    }  \n}  \n```\n然后再根据不同平台调用不同的函数。其实我们完全可以写的再优雅一些：\n``` java\nclass ShareUtils {  \n    private ShareUtils _instance = null;  \n  \n    private ShareUtils() {  \n    }  \n  \n    public getInstance() {  \n        if (_instance == null) {  \n            if (PLATFORM == IOS) {  \n                _instance = new IOSShare()  \n            } else if (PLATFORM == ANDROID) {  \n                _instance = new AndroidShare()  \n            }  \n        }  \n        return _instance;  \n    }  \n      \n    public void share();  \n}  \n  \nclass IOSShare extends ShareUtils {  \n    public void share() {  \n        //todo ios share  \n    }  \n}  \n  \nclass AndroidShare extends ShareUtils {  \n    public void share() {  \n        //todo android share  \n    }  \n}  \n```\n其实这里我们更重要的是要讨论一下单例模式的问题。\n## 单例模式的问题\n最大问题之一就是它本身是一个全局变量。全局变量会让人很难阅读和理解，当我们去查找一个别人写的代码中的bug时，如果这里没有使用全局变量的话，我们只要理解这个函数体内的代码和传递的参数就可以了。然而当这里充斥着全局变量的时候，性质就不一样了，你要全局搜索这个全局变量都在哪里引用了，做了什么修改，为什么这么修改，理解和修改的代价就会变得特别大。同时全局变量还增加了代码的耦合性，这也是个问题。在很多项目中我们都能看见这样的类：SoundManager,GameManager,DataUtils等等，各种各样的Manager和Utils，大多数时候它们很管用，但是当你要创建这么一个类的时候，你应该思考一下真的需要一个单例的类么？在《游戏编程模式》中有下面这个例子：\n``` java\nclass Bullet  \n{  \npublic:  \n  int getX() const { return x_; }  \n  int getY() const { return y_; }  \n  \n  void setX(int x) { x_ = x; }  \n  void setY(int y) { y_ = y; }  \n  \nprivate:  \n  int x_, y_;  \n};  \n  \nclass BulletManager  \n{  \npublic:  \n  Bullet* create(int x, int y)  \n  {  \n    Bullet* bullet = new Bullet();  \n    bullet->setX(x);  \n    bullet->setY(y);  \n  \n    return bullet;  \n  }  \n  \n  bool isOnScreen(Bullet& bullet)  \n  {  \n    return bullet.getX() >= 0 &&  \n           bullet.getX() < SCREEN_WIDTH &&  \n           bullet.getY() >= 0 &&  \n           bullet.getY() < SCREEN_HEIGHT;  \n  }  \n  \n  void move(Bullet& bullet)  \n  {  \n    bullet.setX(bullet.getX() + 5);  \n  }  \n}; \n```\n这里的BulletManager就是一个管理Bullet的单例类，看起来这里很合理，但是真的需要吗？答案是不需要：\n``` java\nclass Bullet  \n{  \npublic:  \n  Bullet(int x, int y) : x_(x), y_(y) {}  \n  \n  bool isOnScreen()  \n  {  \n    return x_ >= 0 && x_ < SCREEN_WIDTH &&  \n           y_ >= 0 && y_ < SCREEN_HEIGHT;  \n  }  \n  \n  void move() { x_ += 5; }  \n  \nprivate:  \n  int x_, y_;  \n};  \n```\n总之，单例是很方便，有时也很管用，但是要慎用，如果项目中充斥着大量的单例，那么这个项目肯定是难以维护的。","slug":"design-single","published":1,"updated":"2019-07-01T12:35:47.383Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjycv1m3n000lok9m7ophwos2","content":"<h1 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h1><h2 id=\"通俗的定义\"><a href=\"#通俗的定义\" class=\"headerlink\" title=\"通俗的定义\"></a>通俗的定义</h2><p>是指在运行中只有一个实例对象存在。</p>\n<h2 id=\"结构图如下\"><a href=\"#结构图如下\" class=\"headerlink\" title=\"结构图如下\"></a>结构图如下</h2><p><img src=\"/images/design_3_single.png\" alt=\"single\"><br><a id=\"more\"></a></p>\n<h2 id=\"游戏开发中的使用\"><a href=\"#游戏开发中的使用\" class=\"headerlink\" title=\"游戏开发中的使用\"></a>游戏开发中的使用</h2><p>游戏开发中单例模式的使用也是非常普遍的，比如在Cocos2d-x中的Director就是一个单例。比如游戏中的很多工具类都是做成单例或者静态类的方式来使用。单例还有一种写法，很少有人使用，然而这种写法在做游戏开发时却很好用。比如，我们在需要分享时，往往都需要每个平台都有单独的功能和实现方式，很多时候我们都这么写：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShareUtils</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> _instance = <span class=\"keyword\">new</span> ShareUtils();  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">ShareUtils</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> _instance;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shareToIOS</span> <span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"comment\">//todo iOS share  </span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shareToAndroid</span> <span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"comment\">//todo android share  </span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后再根据不同平台调用不同的函数。其实我们完全可以写的再优雅一些：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShareUtils</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> ShareUtils _instance = <span class=\"keyword\">null</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">ShareUtils</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_instance == <span class=\"keyword\">null</span>) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (PLATFORM == IOS) &#123;  </span><br><span class=\"line\">                _instance = <span class=\"keyword\">new</span> IOSShare()  </span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (PLATFORM == ANDROID) &#123;  </span><br><span class=\"line\">                _instance = <span class=\"keyword\">new</span> AndroidShare()  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> _instance;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">share</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IOSShare</span> <span class=\"keyword\">extends</span> <span class=\"title\">ShareUtils</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">share</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"comment\">//todo ios share  </span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AndroidShare</span> <span class=\"keyword\">extends</span> <span class=\"title\">ShareUtils</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">share</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"comment\">//todo android share  </span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>其实这里我们更重要的是要讨论一下单例模式的问题。</p>\n<h2 id=\"单例模式的问题\"><a href=\"#单例模式的问题\" class=\"headerlink\" title=\"单例模式的问题\"></a>单例模式的问题</h2><p>最大问题之一就是它本身是一个全局变量。全局变量会让人很难阅读和理解，当我们去查找一个别人写的代码中的bug时，如果这里没有使用全局变量的话，我们只要理解这个函数体内的代码和传递的参数就可以了。然而当这里充斥着全局变量的时候，性质就不一样了，你要全局搜索这个全局变量都在哪里引用了，做了什么修改，为什么这么修改，理解和修改的代价就会变得特别大。同时全局变量还增加了代码的耦合性，这也是个问题。在很多项目中我们都能看见这样的类：SoundManager,GameManager,DataUtils等等，各种各样的Manager和Utils，大多数时候它们很管用，但是当你要创建这么一个类的时候，你应该思考一下真的需要一个单例的类么？在《游戏编程模式》中有下面这个例子：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bullet</span>  </span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;  </span><br><span class=\"line\"><span class=\"keyword\">public</span>:  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getX</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123; <span class=\"keyword\">return</span> x_; &#125;  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getY</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123; <span class=\"keyword\">return</span> y_; &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setX</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123; x_ = x; &#125;  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setY</span><span class=\"params\">(<span class=\"keyword\">int</span> y)</span> </span>&#123; y_ = y; &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">private</span>:  </span><br><span class=\"line\">  <span class=\"keyword\">int</span> x_, y_;  </span><br><span class=\"line\">&#125;;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BulletManager</span>  </span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;  </span><br><span class=\"line\"><span class=\"keyword\">public</span>:  </span><br><span class=\"line\">  Bullet* create(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)  </span><br><span class=\"line\">  &#123;  </span><br><span class=\"line\">    Bullet* bullet = <span class=\"keyword\">new</span> Bullet();  </span><br><span class=\"line\">    bullet-&gt;setX(x);  </span><br><span class=\"line\">    bullet-&gt;setY(y);  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> bullet;  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\">bool <span class=\"title\">isOnScreen</span><span class=\"params\">(Bullet&amp; bullet)</span>  </span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> bullet.getX() &gt;= <span class=\"number\">0</span> &amp;&amp;  </span><br><span class=\"line\">           bullet.getX() &lt; SCREEN_WIDTH &amp;&amp;  </span><br><span class=\"line\">           bullet.getY() &gt;= <span class=\"number\">0</span> &amp;&amp;  </span><br><span class=\"line\">           bullet.getY() &lt; SCREEN_HEIGHT;  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">move</span><span class=\"params\">(Bullet&amp; bullet)</span>  </span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;  </span><br><span class=\"line\">    bullet.setX(bullet.getX() + <span class=\"number\">5</span>);  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>这里的BulletManager就是一个管理Bullet的单例类，看起来这里很合理，但是真的需要吗？答案是不需要：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bullet</span>  </span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;  </span><br><span class=\"line\"><span class=\"keyword\">public</span>:  </span><br><span class=\"line\">  Bullet(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y) : x_(x), y_(y) &#123;&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\">bool <span class=\"title\">isOnScreen</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> x_ &gt;= <span class=\"number\">0</span> &amp;&amp; x_ &lt; SCREEN_WIDTH &amp;&amp;  </span><br><span class=\"line\">           y_ &gt;= <span class=\"number\">0</span> &amp;&amp; y_ &lt; SCREEN_HEIGHT;  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">move</span><span class=\"params\">()</span> </span>&#123; x_ += <span class=\"number\">5</span>; &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">private</span>:  </span><br><span class=\"line\">  <span class=\"keyword\">int</span> x_, y_;  </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>总之，单例是很方便，有时也很管用，但是要慎用，如果项目中充斥着大量的单例，那么这个项目肯定是难以维护的。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h1><h2 id=\"通俗的定义\"><a href=\"#通俗的定义\" class=\"headerlink\" title=\"通俗的定义\"></a>通俗的定义</h2><p>是指在运行中只有一个实例对象存在。</p>\n<h2 id=\"结构图如下\"><a href=\"#结构图如下\" class=\"headerlink\" title=\"结构图如下\"></a>结构图如下</h2><p><img src=\"/images/design_3_single.png\" alt=\"single\"><br>","more":"</p>\n<h2 id=\"游戏开发中的使用\"><a href=\"#游戏开发中的使用\" class=\"headerlink\" title=\"游戏开发中的使用\"></a>游戏开发中的使用</h2><p>游戏开发中单例模式的使用也是非常普遍的，比如在Cocos2d-x中的Director就是一个单例。比如游戏中的很多工具类都是做成单例或者静态类的方式来使用。单例还有一种写法，很少有人使用，然而这种写法在做游戏开发时却很好用。比如，我们在需要分享时，往往都需要每个平台都有单独的功能和实现方式，很多时候我们都这么写：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShareUtils</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> _instance = <span class=\"keyword\">new</span> ShareUtils();  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">ShareUtils</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> _instance;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shareToIOS</span> <span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"comment\">//todo iOS share  </span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shareToAndroid</span> <span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"comment\">//todo android share  </span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后再根据不同平台调用不同的函数。其实我们完全可以写的再优雅一些：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShareUtils</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> ShareUtils _instance = <span class=\"keyword\">null</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">ShareUtils</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_instance == <span class=\"keyword\">null</span>) &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (PLATFORM == IOS) &#123;  </span><br><span class=\"line\">                _instance = <span class=\"keyword\">new</span> IOSShare()  </span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (PLATFORM == ANDROID) &#123;  </span><br><span class=\"line\">                _instance = <span class=\"keyword\">new</span> AndroidShare()  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> _instance;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">share</span><span class=\"params\">()</span></span>;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IOSShare</span> <span class=\"keyword\">extends</span> <span class=\"title\">ShareUtils</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">share</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"comment\">//todo ios share  </span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AndroidShare</span> <span class=\"keyword\">extends</span> <span class=\"title\">ShareUtils</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">share</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"comment\">//todo android share  </span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>其实这里我们更重要的是要讨论一下单例模式的问题。</p>\n<h2 id=\"单例模式的问题\"><a href=\"#单例模式的问题\" class=\"headerlink\" title=\"单例模式的问题\"></a>单例模式的问题</h2><p>最大问题之一就是它本身是一个全局变量。全局变量会让人很难阅读和理解，当我们去查找一个别人写的代码中的bug时，如果这里没有使用全局变量的话，我们只要理解这个函数体内的代码和传递的参数就可以了。然而当这里充斥着全局变量的时候，性质就不一样了，你要全局搜索这个全局变量都在哪里引用了，做了什么修改，为什么这么修改，理解和修改的代价就会变得特别大。同时全局变量还增加了代码的耦合性，这也是个问题。在很多项目中我们都能看见这样的类：SoundManager,GameManager,DataUtils等等，各种各样的Manager和Utils，大多数时候它们很管用，但是当你要创建这么一个类的时候，你应该思考一下真的需要一个单例的类么？在《游戏编程模式》中有下面这个例子：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bullet</span>  </span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;  </span><br><span class=\"line\"><span class=\"keyword\">public</span>:  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getX</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123; <span class=\"keyword\">return</span> x_; &#125;  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getY</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123; <span class=\"keyword\">return</span> y_; &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setX</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123; x_ = x; &#125;  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setY</span><span class=\"params\">(<span class=\"keyword\">int</span> y)</span> </span>&#123; y_ = y; &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">private</span>:  </span><br><span class=\"line\">  <span class=\"keyword\">int</span> x_, y_;  </span><br><span class=\"line\">&#125;;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BulletManager</span>  </span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;  </span><br><span class=\"line\"><span class=\"keyword\">public</span>:  </span><br><span class=\"line\">  Bullet* create(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)  </span><br><span class=\"line\">  &#123;  </span><br><span class=\"line\">    Bullet* bullet = <span class=\"keyword\">new</span> Bullet();  </span><br><span class=\"line\">    bullet-&gt;setX(x);  </span><br><span class=\"line\">    bullet-&gt;setY(y);  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> bullet;  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\">bool <span class=\"title\">isOnScreen</span><span class=\"params\">(Bullet&amp; bullet)</span>  </span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> bullet.getX() &gt;= <span class=\"number\">0</span> &amp;&amp;  </span><br><span class=\"line\">           bullet.getX() &lt; SCREEN_WIDTH &amp;&amp;  </span><br><span class=\"line\">           bullet.getY() &gt;= <span class=\"number\">0</span> &amp;&amp;  </span><br><span class=\"line\">           bullet.getY() &lt; SCREEN_HEIGHT;  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">move</span><span class=\"params\">(Bullet&amp; bullet)</span>  </span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;  </span><br><span class=\"line\">    bullet.setX(bullet.getX() + <span class=\"number\">5</span>);  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>这里的BulletManager就是一个管理Bullet的单例类，看起来这里很合理，但是真的需要吗？答案是不需要：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bullet</span>  </span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;  </span><br><span class=\"line\"><span class=\"keyword\">public</span>:  </span><br><span class=\"line\">  Bullet(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y) : x_(x), y_(y) &#123;&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\">bool <span class=\"title\">isOnScreen</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> x_ &gt;= <span class=\"number\">0</span> &amp;&amp; x_ &lt; SCREEN_WIDTH &amp;&amp;  </span><br><span class=\"line\">           y_ &gt;= <span class=\"number\">0</span> &amp;&amp; y_ &lt; SCREEN_HEIGHT;  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">move</span><span class=\"params\">()</span> </span>&#123; x_ += <span class=\"number\">5</span>; &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">private</span>:  </span><br><span class=\"line\">  <span class=\"keyword\">int</span> x_, y_;  </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>总之，单例是很方便，有时也很管用，但是要慎用，如果项目中充斥着大量的单例，那么这个项目肯定是难以维护的。</p>"},{"title":"JavaScript性能优化总结","date":"2017-03-06T15:14:36.000Z","_content":"### JavaScript性能优化总结\n- +=运算符比+运算符效率高。\n- 数字转换成字符串\n```\n(\"\" +) > String() > .toString() > new String()\n```\n- 展开循环：当循环次数是确定的，消除循环并使用多次函数调用，虽然会让代码看起来不够高端，但是速度往往会更快。\n- 减值迭代:在循环中，减值要比增值效率高。\n```\n//增值迭代\nfor (var i = 0; i < 1000; i++) {\n    //TODO ...\n}\n//减值迭代较优\nfor (var i = 999; i >=0; i--) {\n    //TODO ...\n}\n```\n- 使用switch优于if：在分支大于2并且允许使用switch的时候用switch的效率是很高的，因为switch是随机访问的。\n- 重复值:任何在多处用到的值都应该抽取为一个常量\n```\nvar result = (obj.value.value2 + obj.value.value3)*obj.value.value1;\n//较优的写法\nvar value = obj.value;\nvar result = (value.value2 + value.value3)*value.value1;\n```\n- 遍历数组时，缓存数组长度\n```\nvar len = arr.length;\nfor (var i = len - 1; i > 0; i--) {\n    //TODO ...\n}\n```\n- 释放对象：  \n```\n//对象\nobj = null  \n对象属性：delete obj.myproperty  \n数组item：使用数组的splice方法释放数组中不用的item  \n```\n- 位运算较快：&、|、!、>>、<<\n```\n//按位与(&):判断一个数是奇数还是偶数\nif (n & 1) {\n    console.log(\"n是奇数\");\n} else {\n    console.log(\"n是偶数\");\n}\n\n//按位或(|):对浮点数向下求整\nvar num = 1.1 | 0; // 1\n\n//左移(<<) \nvar num = 2 << 1; // 4\n//右移(>>)\nvar num = 64 >> 1; // 32\n```\n- 巧用||和&&布尔运算符\n```\nif (myobj) {\n    doSomething(myobj);\n}\n//可以替换为：\nmyobj && doSomething(myobj);\n```\n- 避免与null进行比较\n```\nif (obj == null) {\n    //todo\n}\n//替换为\nif (!obj) {\n    //todo\n}\n```\n\n\n\n\n\n","source":"_posts/js-performance-optimize.md","raw":"---\ntitle: JavaScript性能优化总结\ndate: 2017-03-06 23:14:36\ntags: javascript,性能优化\ncategories: javascript\n---\n### JavaScript性能优化总结\n- +=运算符比+运算符效率高。\n- 数字转换成字符串\n```\n(\"\" +) > String() > .toString() > new String()\n```\n- 展开循环：当循环次数是确定的，消除循环并使用多次函数调用，虽然会让代码看起来不够高端，但是速度往往会更快。\n- 减值迭代:在循环中，减值要比增值效率高。\n```\n//增值迭代\nfor (var i = 0; i < 1000; i++) {\n    //TODO ...\n}\n//减值迭代较优\nfor (var i = 999; i >=0; i--) {\n    //TODO ...\n}\n```\n- 使用switch优于if：在分支大于2并且允许使用switch的时候用switch的效率是很高的，因为switch是随机访问的。\n- 重复值:任何在多处用到的值都应该抽取为一个常量\n```\nvar result = (obj.value.value2 + obj.value.value3)*obj.value.value1;\n//较优的写法\nvar value = obj.value;\nvar result = (value.value2 + value.value3)*value.value1;\n```\n- 遍历数组时，缓存数组长度\n```\nvar len = arr.length;\nfor (var i = len - 1; i > 0; i--) {\n    //TODO ...\n}\n```\n- 释放对象：  \n```\n//对象\nobj = null  \n对象属性：delete obj.myproperty  \n数组item：使用数组的splice方法释放数组中不用的item  \n```\n- 位运算较快：&、|、!、>>、<<\n```\n//按位与(&):判断一个数是奇数还是偶数\nif (n & 1) {\n    console.log(\"n是奇数\");\n} else {\n    console.log(\"n是偶数\");\n}\n\n//按位或(|):对浮点数向下求整\nvar num = 1.1 | 0; // 1\n\n//左移(<<) \nvar num = 2 << 1; // 4\n//右移(>>)\nvar num = 64 >> 1; // 32\n```\n- 巧用||和&&布尔运算符\n```\nif (myobj) {\n    doSomething(myobj);\n}\n//可以替换为：\nmyobj && doSomething(myobj);\n```\n- 避免与null进行比较\n```\nif (obj == null) {\n    //todo\n}\n//替换为\nif (!obj) {\n    //todo\n}\n```\n\n\n\n\n\n","slug":"js-performance-optimize","published":1,"updated":"2019-07-01T12:35:47.383Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjycv1m3o000mok9md8h5euhg","content":"<h3 id=\"JavaScript性能优化总结\"><a href=\"#JavaScript性能优化总结\" class=\"headerlink\" title=\"JavaScript性能优化总结\"></a>JavaScript性能优化总结</h3><ul>\n<li>+=运算符比+运算符效率高。</li>\n<li><p>数字转换成字符串</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(&quot;&quot; +) &gt; String() &gt; .toString() &gt; new String()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>展开循环：当循环次数是确定的，消除循环并使用多次函数调用，虽然会让代码看起来不够高端，但是速度往往会更快。</p>\n</li>\n<li><p>减值迭代:在循环中，减值要比增值效率高。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//增值迭代</span><br><span class=\"line\">for (var i = 0; i &lt; 1000; i++) &#123;</span><br><span class=\"line\">    //TODO ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//减值迭代较优</span><br><span class=\"line\">for (var i = 999; i &gt;=0; i--) &#123;</span><br><span class=\"line\">    //TODO ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用switch优于if：在分支大于2并且允许使用switch的时候用switch的效率是很高的，因为switch是随机访问的。</p>\n</li>\n<li><p>重复值:任何在多处用到的值都应该抽取为一个常量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var result = (obj.value.value2 + obj.value.value3)*obj.value.value1;</span><br><span class=\"line\">//较优的写法</span><br><span class=\"line\">var value = obj.value;</span><br><span class=\"line\">var result = (value.value2 + value.value3)*value.value1;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>遍历数组时，缓存数组长度</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var len = arr.length;</span><br><span class=\"line\">for (var i = len - 1; i &gt; 0; i--) &#123;</span><br><span class=\"line\">    //TODO ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>释放对象：  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//对象</span><br><span class=\"line\">obj = null  </span><br><span class=\"line\">对象属性：delete obj.myproperty  </span><br><span class=\"line\">数组item：使用数组的splice方法释放数组中不用的item</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>位运算较快：&amp;、|、!、&gt;&gt;、&lt;&lt;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//按位与(&amp;):判断一个数是奇数还是偶数</span><br><span class=\"line\">if (n &amp; 1) &#123;</span><br><span class=\"line\">    console.log(&quot;n是奇数&quot;);</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">    console.log(&quot;n是偶数&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//按位或(|):对浮点数向下求整</span><br><span class=\"line\">var num = 1.1 | 0; // 1</span><br><span class=\"line\"></span><br><span class=\"line\">//左移(&lt;&lt;) </span><br><span class=\"line\">var num = 2 &lt;&lt; 1; // 4</span><br><span class=\"line\">//右移(&gt;&gt;)</span><br><span class=\"line\">var num = 64 &gt;&gt; 1; // 32</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>巧用||和&amp;&amp;布尔运算符</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (myobj) &#123;</span><br><span class=\"line\">    doSomething(myobj);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//可以替换为：</span><br><span class=\"line\">myobj &amp;&amp; doSomething(myobj);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>避免与null进行比较</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (obj == null) &#123;</span><br><span class=\"line\">    //todo</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//替换为</span><br><span class=\"line\">if (!obj) &#123;</span><br><span class=\"line\">    //todo</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"JavaScript性能优化总结\"><a href=\"#JavaScript性能优化总结\" class=\"headerlink\" title=\"JavaScript性能优化总结\"></a>JavaScript性能优化总结</h3><ul>\n<li>+=运算符比+运算符效率高。</li>\n<li><p>数字转换成字符串</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(&quot;&quot; +) &gt; String() &gt; .toString() &gt; new String()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>展开循环：当循环次数是确定的，消除循环并使用多次函数调用，虽然会让代码看起来不够高端，但是速度往往会更快。</p>\n</li>\n<li><p>减值迭代:在循环中，减值要比增值效率高。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//增值迭代</span><br><span class=\"line\">for (var i = 0; i &lt; 1000; i++) &#123;</span><br><span class=\"line\">    //TODO ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//减值迭代较优</span><br><span class=\"line\">for (var i = 999; i &gt;=0; i--) &#123;</span><br><span class=\"line\">    //TODO ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用switch优于if：在分支大于2并且允许使用switch的时候用switch的效率是很高的，因为switch是随机访问的。</p>\n</li>\n<li><p>重复值:任何在多处用到的值都应该抽取为一个常量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var result = (obj.value.value2 + obj.value.value3)*obj.value.value1;</span><br><span class=\"line\">//较优的写法</span><br><span class=\"line\">var value = obj.value;</span><br><span class=\"line\">var result = (value.value2 + value.value3)*value.value1;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>遍历数组时，缓存数组长度</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var len = arr.length;</span><br><span class=\"line\">for (var i = len - 1; i &gt; 0; i--) &#123;</span><br><span class=\"line\">    //TODO ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>释放对象：  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//对象</span><br><span class=\"line\">obj = null  </span><br><span class=\"line\">对象属性：delete obj.myproperty  </span><br><span class=\"line\">数组item：使用数组的splice方法释放数组中不用的item</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>位运算较快：&amp;、|、!、&gt;&gt;、&lt;&lt;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//按位与(&amp;):判断一个数是奇数还是偶数</span><br><span class=\"line\">if (n &amp; 1) &#123;</span><br><span class=\"line\">    console.log(&quot;n是奇数&quot;);</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">    console.log(&quot;n是偶数&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//按位或(|):对浮点数向下求整</span><br><span class=\"line\">var num = 1.1 | 0; // 1</span><br><span class=\"line\"></span><br><span class=\"line\">//左移(&lt;&lt;) </span><br><span class=\"line\">var num = 2 &lt;&lt; 1; // 4</span><br><span class=\"line\">//右移(&gt;&gt;)</span><br><span class=\"line\">var num = 64 &gt;&gt; 1; // 32</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>巧用||和&amp;&amp;布尔运算符</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (myobj) &#123;</span><br><span class=\"line\">    doSomething(myobj);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//可以替换为：</span><br><span class=\"line\">myobj &amp;&amp; doSomething(myobj);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>避免与null进行比较</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (obj == null) &#123;</span><br><span class=\"line\">    //todo</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//替换为</span><br><span class=\"line\">if (!obj) &#123;</span><br><span class=\"line\">    //todo</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"JS闭包总结","date":"2017-02-02T08:04:34.000Z","_content":"## 闭包的用途\n#### 1.防止全局变量污染\n在JavaScript中全局变量是个不小的毒瘤，全局变量有时是很方便，但是很多项目滥用全局变量成灾，维护起来非常困难。所以这里的作用就是防止全局变量污染，例子如下：\n```javascript\nvar add = (function() {    \n    var i = 0;   \n    return function add () {       \n        i++;        \n        cc.log(i); // 1    \n    }\n})();\n\nadd();\n```\n<!--more-->\n这个例子实现的功能就是，减少了全局变量的滥用，同时这个功能也是达到了下面的用途，就是访问局部变量。\n#### 2.局部变量访问\n上面防止全局变量污染的例子中i是一个局部变量，但是在函数外依然可以间接的访问控制，就是达到了在作用域外访问局部变量。\n#### 3.匿名初始化\n匿名初始化很简单，有时我们需要一个界面打开做一些初始化，只需要执行一遍，可以采用这种形式：\n```javascript\n(function () {    \n    cc.log(\"init something...\");\n})();\n```\n这样在加载时直接就执行了匿名函数里的东西，有效的防止了，一些在不知情的情况下重复的调用了初始化函数。\n#### 4.私有成员封装\n这个是比较常用的，JavaScript中并没有很多语言中拥有的访问控制，所以我们可以使用闭包来达到私有化的目的：\n```javascript\nvar person = (function () {    \n    var age = 18;    \n    return {        \n        getAge:function () {            \n            return age;       \n        },        \n        setAge:function (a) {           \n            age = a;        \n        }    \n    }\n})();\n\ncc.log(person.getAge()); // 18\nperson.setAge(99);\ncc.log(person.getAge()); // 99\n```\n这样在外部就不能访问age变量，只能通过getAge和setAge来访问，达到了私有化和封装的目的，这点在开发中比较常用。\n#### 5.制作缓存池\n这个用途是使用了闭包里的局部变量不会被销毁的特点，实现缓冲池的方法有很多，使用闭包只是其中一种，大家可以看自己的情况来使用，下面是使用闭包来实现缓存池简单大意的例子：\n```javascript\nvar person = (function () {    \n    var pool = null;    \n    return {        \n        getObj:function (key) {            \n            return pool[key];        \n        },        \n        setObj:function (key, obj) {            \n            pool[key] = obj;        \n        }    \n    }\n})();\n```\n#### 6.循环中保存索引\n开发过程中在循环里注册回调很常见，但是刚接触js的同学常常会遇到注册完了回调，发现索引值不对，可以看下面的例子：\n```javascript\nvar arr = [];\nvar show = function () {    \n    for (var i = 0; i < 3; i++) {        \n        arr[i] = function test () {            \n            cc.log(i);        \n        }    \n    }\n}\n\nshow();\n\narr[0](); // 3\narr[1](); // 3\narr[2](); // 3\n```\n运行会发现，输出的都是最后一个索引，这种情况是因为，内部函数并没有立即执行，而且内部函数中只是对这个变量进行了引用，所以最后记录的都是这个引用地址中的最终值。要想得到我们想要的效果就需要让内部函数立即执行，捕捉当时索引值，可做如下改动：\n```javascript\nvar arr = [];\nvar show = function () {    \n    for (var i = 0; i < 3; i++) {        \n        arr[i] = (function (j){            \n            return function () {                \n                cc.log(j);            \n            }        \n        })(i);    \n    }\n}\n\nshow();\n\narr[0](); // 0\narr[1](); // 1\narr[2](); // 2\n```\n这样就获得了我们想要的结果。  \n#### 7.闭包的其他问题  \n- 因为闭包中的局部变量不会释放，所以闭包和全局变量一样会占用大量内存。\n- 闭包中变量引用由于不会释放，很有可能造成内存泄露。\n- 大量的闭包使用可能会降低程序的可读性，增加维护成本。\n\n总之闭包有很多地方用起来很方便，闭包的特性也能帮助我们实现很多巧妙的设计，但是闭包也会引起很多问题，所以在开发过程中应该尽量少用闭包。","source":"_posts/js-closure.md","raw":"---\ntitle: JS闭包总结\ndate: 2017-02-02 16:04:34\ntags: 闭包\ncategories: javascript\n---\n## 闭包的用途\n#### 1.防止全局变量污染\n在JavaScript中全局变量是个不小的毒瘤，全局变量有时是很方便，但是很多项目滥用全局变量成灾，维护起来非常困难。所以这里的作用就是防止全局变量污染，例子如下：\n```javascript\nvar add = (function() {    \n    var i = 0;   \n    return function add () {       \n        i++;        \n        cc.log(i); // 1    \n    }\n})();\n\nadd();\n```\n<!--more-->\n这个例子实现的功能就是，减少了全局变量的滥用，同时这个功能也是达到了下面的用途，就是访问局部变量。\n#### 2.局部变量访问\n上面防止全局变量污染的例子中i是一个局部变量，但是在函数外依然可以间接的访问控制，就是达到了在作用域外访问局部变量。\n#### 3.匿名初始化\n匿名初始化很简单，有时我们需要一个界面打开做一些初始化，只需要执行一遍，可以采用这种形式：\n```javascript\n(function () {    \n    cc.log(\"init something...\");\n})();\n```\n这样在加载时直接就执行了匿名函数里的东西，有效的防止了，一些在不知情的情况下重复的调用了初始化函数。\n#### 4.私有成员封装\n这个是比较常用的，JavaScript中并没有很多语言中拥有的访问控制，所以我们可以使用闭包来达到私有化的目的：\n```javascript\nvar person = (function () {    \n    var age = 18;    \n    return {        \n        getAge:function () {            \n            return age;       \n        },        \n        setAge:function (a) {           \n            age = a;        \n        }    \n    }\n})();\n\ncc.log(person.getAge()); // 18\nperson.setAge(99);\ncc.log(person.getAge()); // 99\n```\n这样在外部就不能访问age变量，只能通过getAge和setAge来访问，达到了私有化和封装的目的，这点在开发中比较常用。\n#### 5.制作缓存池\n这个用途是使用了闭包里的局部变量不会被销毁的特点，实现缓冲池的方法有很多，使用闭包只是其中一种，大家可以看自己的情况来使用，下面是使用闭包来实现缓存池简单大意的例子：\n```javascript\nvar person = (function () {    \n    var pool = null;    \n    return {        \n        getObj:function (key) {            \n            return pool[key];        \n        },        \n        setObj:function (key, obj) {            \n            pool[key] = obj;        \n        }    \n    }\n})();\n```\n#### 6.循环中保存索引\n开发过程中在循环里注册回调很常见，但是刚接触js的同学常常会遇到注册完了回调，发现索引值不对，可以看下面的例子：\n```javascript\nvar arr = [];\nvar show = function () {    \n    for (var i = 0; i < 3; i++) {        \n        arr[i] = function test () {            \n            cc.log(i);        \n        }    \n    }\n}\n\nshow();\n\narr[0](); // 3\narr[1](); // 3\narr[2](); // 3\n```\n运行会发现，输出的都是最后一个索引，这种情况是因为，内部函数并没有立即执行，而且内部函数中只是对这个变量进行了引用，所以最后记录的都是这个引用地址中的最终值。要想得到我们想要的效果就需要让内部函数立即执行，捕捉当时索引值，可做如下改动：\n```javascript\nvar arr = [];\nvar show = function () {    \n    for (var i = 0; i < 3; i++) {        \n        arr[i] = (function (j){            \n            return function () {                \n                cc.log(j);            \n            }        \n        })(i);    \n    }\n}\n\nshow();\n\narr[0](); // 0\narr[1](); // 1\narr[2](); // 2\n```\n这样就获得了我们想要的结果。  \n#### 7.闭包的其他问题  \n- 因为闭包中的局部变量不会释放，所以闭包和全局变量一样会占用大量内存。\n- 闭包中变量引用由于不会释放，很有可能造成内存泄露。\n- 大量的闭包使用可能会降低程序的可读性，增加维护成本。\n\n总之闭包有很多地方用起来很方便，闭包的特性也能帮助我们实现很多巧妙的设计，但是闭包也会引起很多问题，所以在开发过程中应该尽量少用闭包。","slug":"js-closure","published":1,"updated":"2019-07-01T12:35:47.383Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjycv1m3o000nok9mls977sln","content":"<h2 id=\"闭包的用途\"><a href=\"#闭包的用途\" class=\"headerlink\" title=\"闭包的用途\"></a>闭包的用途</h2><h4 id=\"1-防止全局变量污染\"><a href=\"#1-防止全局变量污染\" class=\"headerlink\" title=\"1.防止全局变量污染\"></a>1.防止全局变量污染</h4><p>在JavaScript中全局变量是个不小的毒瘤，全局变量有时是很方便，但是很多项目滥用全局变量成灾，维护起来非常困难。所以这里的作用就是防止全局变量污染，例子如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> add = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;   </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span> (<span class=\"params\"></span>) </span>&#123;       </span><br><span class=\"line\">        i++;        </span><br><span class=\"line\">        cc.log(i); <span class=\"comment\">// 1    </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\">add();</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>这个例子实现的功能就是，减少了全局变量的滥用，同时这个功能也是达到了下面的用途，就是访问局部变量。</p>\n<h4 id=\"2-局部变量访问\"><a href=\"#2-局部变量访问\" class=\"headerlink\" title=\"2.局部变量访问\"></a>2.局部变量访问</h4><p>上面防止全局变量污染的例子中i是一个局部变量，但是在函数外依然可以间接的访问控制，就是达到了在作用域外访问局部变量。</p>\n<h4 id=\"3-匿名初始化\"><a href=\"#3-匿名初始化\" class=\"headerlink\" title=\"3.匿名初始化\"></a>3.匿名初始化</h4><p>匿名初始化很简单，有时我们需要一个界面打开做一些初始化，只需要执行一遍，可以采用这种形式：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;    </span><br><span class=\"line\">    cc.log(<span class=\"string\">\"init something...\"</span>);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure></p>\n<p>这样在加载时直接就执行了匿名函数里的东西，有效的防止了，一些在不知情的情况下重复的调用了初始化函数。</p>\n<h4 id=\"4-私有成员封装\"><a href=\"#4-私有成员封装\" class=\"headerlink\" title=\"4.私有成员封装\"></a>4.私有成员封装</h4><p>这个是比较常用的，JavaScript中并没有很多语言中拥有的访问控制，所以我们可以使用闭包来达到私有化的目的：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> age = <span class=\"number\">18</span>;    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;        </span><br><span class=\"line\">        getAge:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;            </span><br><span class=\"line\">            <span class=\"keyword\">return</span> age;       </span><br><span class=\"line\">        &#125;,        </span><br><span class=\"line\">        setAge:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a</span>) </span>&#123;           </span><br><span class=\"line\">            age = a;        </span><br><span class=\"line\">        &#125;    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\">cc.log(person.getAge()); <span class=\"comment\">// 18</span></span><br><span class=\"line\">person.setAge(<span class=\"number\">99</span>);</span><br><span class=\"line\">cc.log(person.getAge()); <span class=\"comment\">// 99</span></span><br></pre></td></tr></table></figure></p>\n<p>这样在外部就不能访问age变量，只能通过getAge和setAge来访问，达到了私有化和封装的目的，这点在开发中比较常用。</p>\n<h4 id=\"5-制作缓存池\"><a href=\"#5-制作缓存池\" class=\"headerlink\" title=\"5.制作缓存池\"></a>5.制作缓存池</h4><p>这个用途是使用了闭包里的局部变量不会被销毁的特点，实现缓冲池的方法有很多，使用闭包只是其中一种，大家可以看自己的情况来使用，下面是使用闭包来实现缓存池简单大意的例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> pool = <span class=\"literal\">null</span>;    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;        </span><br><span class=\"line\">        getObj:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">key</span>) </span>&#123;            </span><br><span class=\"line\">            <span class=\"keyword\">return</span> pool[key];        </span><br><span class=\"line\">        &#125;,        </span><br><span class=\"line\">        setObj:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">key, obj</span>) </span>&#123;            </span><br><span class=\"line\">            pool[key] = obj;        </span><br><span class=\"line\">        &#125;    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"6-循环中保存索引\"><a href=\"#6-循环中保存索引\" class=\"headerlink\" title=\"6.循环中保存索引\"></a>6.循环中保存索引</h4><p>开发过程中在循环里注册回调很常见，但是刚接触js的同学常常会遇到注册完了回调，发现索引值不对，可以看下面的例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\"><span class=\"keyword\">var</span> show = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;        </span><br><span class=\"line\">        arr[i] = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span> (<span class=\"params\"></span>) </span>&#123;            </span><br><span class=\"line\">            cc.log(i);        </span><br><span class=\"line\">        &#125;    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">show();</span><br><span class=\"line\"></span><br><span class=\"line\">arr[<span class=\"number\">0</span>](); <span class=\"comment\">// 3</span></span><br><span class=\"line\">arr[<span class=\"number\">1</span>](); <span class=\"comment\">// 3</span></span><br><span class=\"line\">arr[<span class=\"number\">2</span>](); <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure></p>\n<p>运行会发现，输出的都是最后一个索引，这种情况是因为，内部函数并没有立即执行，而且内部函数中只是对这个变量进行了引用，所以最后记录的都是这个引用地址中的最终值。要想得到我们想要的效果就需要让内部函数立即执行，捕捉当时索引值，可做如下改动：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\"><span class=\"keyword\">var</span> show = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;        </span><br><span class=\"line\">        arr[i] = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">j</span>)</span>&#123;            </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;                </span><br><span class=\"line\">                cc.log(j);            </span><br><span class=\"line\">            &#125;        </span><br><span class=\"line\">        &#125;)(i);    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">show();</span><br><span class=\"line\"></span><br><span class=\"line\">arr[<span class=\"number\">0</span>](); <span class=\"comment\">// 0</span></span><br><span class=\"line\">arr[<span class=\"number\">1</span>](); <span class=\"comment\">// 1</span></span><br><span class=\"line\">arr[<span class=\"number\">2</span>](); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure></p>\n<p>这样就获得了我们想要的结果。  </p>\n<h4 id=\"7-闭包的其他问题\"><a href=\"#7-闭包的其他问题\" class=\"headerlink\" title=\"7.闭包的其他问题\"></a>7.闭包的其他问题</h4><ul>\n<li>因为闭包中的局部变量不会释放，所以闭包和全局变量一样会占用大量内存。</li>\n<li>闭包中变量引用由于不会释放，很有可能造成内存泄露。</li>\n<li>大量的闭包使用可能会降低程序的可读性，增加维护成本。</li>\n</ul>\n<p>总之闭包有很多地方用起来很方便，闭包的特性也能帮助我们实现很多巧妙的设计，但是闭包也会引起很多问题，所以在开发过程中应该尽量少用闭包。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"闭包的用途\"><a href=\"#闭包的用途\" class=\"headerlink\" title=\"闭包的用途\"></a>闭包的用途</h2><h4 id=\"1-防止全局变量污染\"><a href=\"#1-防止全局变量污染\" class=\"headerlink\" title=\"1.防止全局变量污染\"></a>1.防止全局变量污染</h4><p>在JavaScript中全局变量是个不小的毒瘤，全局变量有时是很方便，但是很多项目滥用全局变量成灾，维护起来非常困难。所以这里的作用就是防止全局变量污染，例子如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> add = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;   </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span> (<span class=\"params\"></span>) </span>&#123;       </span><br><span class=\"line\">        i++;        </span><br><span class=\"line\">        cc.log(i); <span class=\"comment\">// 1    </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\">add();</span><br></pre></td></tr></table></figure></p>","more":"<p>这个例子实现的功能就是，减少了全局变量的滥用，同时这个功能也是达到了下面的用途，就是访问局部变量。</p>\n<h4 id=\"2-局部变量访问\"><a href=\"#2-局部变量访问\" class=\"headerlink\" title=\"2.局部变量访问\"></a>2.局部变量访问</h4><p>上面防止全局变量污染的例子中i是一个局部变量，但是在函数外依然可以间接的访问控制，就是达到了在作用域外访问局部变量。</p>\n<h4 id=\"3-匿名初始化\"><a href=\"#3-匿名初始化\" class=\"headerlink\" title=\"3.匿名初始化\"></a>3.匿名初始化</h4><p>匿名初始化很简单，有时我们需要一个界面打开做一些初始化，只需要执行一遍，可以采用这种形式：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;    </span><br><span class=\"line\">    cc.log(<span class=\"string\">\"init something...\"</span>);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure></p>\n<p>这样在加载时直接就执行了匿名函数里的东西，有效的防止了，一些在不知情的情况下重复的调用了初始化函数。</p>\n<h4 id=\"4-私有成员封装\"><a href=\"#4-私有成员封装\" class=\"headerlink\" title=\"4.私有成员封装\"></a>4.私有成员封装</h4><p>这个是比较常用的，JavaScript中并没有很多语言中拥有的访问控制，所以我们可以使用闭包来达到私有化的目的：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> age = <span class=\"number\">18</span>;    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;        </span><br><span class=\"line\">        getAge:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;            </span><br><span class=\"line\">            <span class=\"keyword\">return</span> age;       </span><br><span class=\"line\">        &#125;,        </span><br><span class=\"line\">        setAge:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a</span>) </span>&#123;           </span><br><span class=\"line\">            age = a;        </span><br><span class=\"line\">        &#125;    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\">cc.log(person.getAge()); <span class=\"comment\">// 18</span></span><br><span class=\"line\">person.setAge(<span class=\"number\">99</span>);</span><br><span class=\"line\">cc.log(person.getAge()); <span class=\"comment\">// 99</span></span><br></pre></td></tr></table></figure></p>\n<p>这样在外部就不能访问age变量，只能通过getAge和setAge来访问，达到了私有化和封装的目的，这点在开发中比较常用。</p>\n<h4 id=\"5-制作缓存池\"><a href=\"#5-制作缓存池\" class=\"headerlink\" title=\"5.制作缓存池\"></a>5.制作缓存池</h4><p>这个用途是使用了闭包里的局部变量不会被销毁的特点，实现缓冲池的方法有很多，使用闭包只是其中一种，大家可以看自己的情况来使用，下面是使用闭包来实现缓存池简单大意的例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> pool = <span class=\"literal\">null</span>;    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;        </span><br><span class=\"line\">        getObj:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">key</span>) </span>&#123;            </span><br><span class=\"line\">            <span class=\"keyword\">return</span> pool[key];        </span><br><span class=\"line\">        &#125;,        </span><br><span class=\"line\">        setObj:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">key, obj</span>) </span>&#123;            </span><br><span class=\"line\">            pool[key] = obj;        </span><br><span class=\"line\">        &#125;    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"6-循环中保存索引\"><a href=\"#6-循环中保存索引\" class=\"headerlink\" title=\"6.循环中保存索引\"></a>6.循环中保存索引</h4><p>开发过程中在循环里注册回调很常见，但是刚接触js的同学常常会遇到注册完了回调，发现索引值不对，可以看下面的例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\"><span class=\"keyword\">var</span> show = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;        </span><br><span class=\"line\">        arr[i] = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span> (<span class=\"params\"></span>) </span>&#123;            </span><br><span class=\"line\">            cc.log(i);        </span><br><span class=\"line\">        &#125;    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">show();</span><br><span class=\"line\"></span><br><span class=\"line\">arr[<span class=\"number\">0</span>](); <span class=\"comment\">// 3</span></span><br><span class=\"line\">arr[<span class=\"number\">1</span>](); <span class=\"comment\">// 3</span></span><br><span class=\"line\">arr[<span class=\"number\">2</span>](); <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure></p>\n<p>运行会发现，输出的都是最后一个索引，这种情况是因为，内部函数并没有立即执行，而且内部函数中只是对这个变量进行了引用，所以最后记录的都是这个引用地址中的最终值。要想得到我们想要的效果就需要让内部函数立即执行，捕捉当时索引值，可做如下改动：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [];</span><br><span class=\"line\"><span class=\"keyword\">var</span> show = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;        </span><br><span class=\"line\">        arr[i] = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">j</span>)</span>&#123;            </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;                </span><br><span class=\"line\">                cc.log(j);            </span><br><span class=\"line\">            &#125;        </span><br><span class=\"line\">        &#125;)(i);    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">show();</span><br><span class=\"line\"></span><br><span class=\"line\">arr[<span class=\"number\">0</span>](); <span class=\"comment\">// 0</span></span><br><span class=\"line\">arr[<span class=\"number\">1</span>](); <span class=\"comment\">// 1</span></span><br><span class=\"line\">arr[<span class=\"number\">2</span>](); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure></p>\n<p>这样就获得了我们想要的结果。  </p>\n<h4 id=\"7-闭包的其他问题\"><a href=\"#7-闭包的其他问题\" class=\"headerlink\" title=\"7.闭包的其他问题\"></a>7.闭包的其他问题</h4><ul>\n<li>因为闭包中的局部变量不会释放，所以闭包和全局变量一样会占用大量内存。</li>\n<li>闭包中变量引用由于不会释放，很有可能造成内存泄露。</li>\n<li>大量的闭包使用可能会降低程序的可读性，增加维护成本。</li>\n</ul>\n<p>总之闭包有很多地方用起来很方便，闭包的特性也能帮助我们实现很多巧妙的设计，但是闭包也会引起很多问题，所以在开发过程中应该尽量少用闭包。</p>"},{"title":"学会理财，创造财富－－读《富爸爸穷爸爸》","date":"2017-01-10T15:09:51.000Z","_content":"&nbsp;&nbsp;&nbsp;&nbsp;以往我看到理财这个词的时候，往往就是认为它就是让你记账，记下你的钱都去哪了，然后看看能从哪里剩下不该花的钱；还有就是买理财产品，就是把你剩下来的钱，存到银行或者购买理财基金。当我看了《富爸爸穷爸爸》这本书后，对理财有了新的理解。比如现在很多人最大的错误就是认为赚钱的技能才是富有的秘诀，然而富有的真正秘诀是如何花钱。还要很多人对资产与负债完全分不清，包括我自己，就是这些想法造成了我们无法积累财富现状。作者反复提到的一句话“离开学校是学习的起点，而不是终点。”是我们很多人没有意识到的，虽然离开学校后我一直在学习，但是从来没有学习过有关理财方面的知识，包括我们的教育体系也没有教大家怎么创造和积累财富，学校和父母只是告诉我们要好好学习。<!--more-->\n&nbsp;&nbsp;&nbsp;&nbsp;对理财的彻底认识非常重要，它包括赚了钱后如何处理这些钱？又怎样防止别人从你手中拿走这些钱？你能拥有这些钱多久？如何让钱生钱？我们很多人都是活在努力工作提高自己的收入，然而现实往往是这样，你的收入越高，你的贷款越多，负债越多，财务问题越严重，这也是没有分清资产与债务的造成的。债务可能很多人都了解，就是我们欠下的钱，需要还给银行或者他人的。那么资产是什么呢？车？房？金银珠宝？我之前的理解就是这些，我甚至认为我家里的iPad也是我的资产，因为他可以卖钱。我相信大多数人也是这么理解的，悲哀的是就是这种认知让90%的人一直奔波于“赚钱-花钱-还贷”的怪圈之中。真正的资产是能为你带来收入的东西，打个比方，你贷款买了一个房子，每月需要还贷款6000，租出去可以收房租4000，那么这个房子就是你的负债而不是资产，因为它不断的将你的现金流转移到了银行。如果你每月还贷4000，租出去收房租6000，那么这个房子每月为你带来2000元的收益，那么这部分投入的钱就是你的资产，因为它可以产生钱，而不是套牢你的首付，再不断的拿走你兜里的钱。这就是资产与首付的重要区别。\n&nbsp;&nbsp;&nbsp;&nbsp;资产的最大特点就是不需要你到场就可以正常运转，就可以不断的产生收入，不断的积累你的资产会使你获得财务自由。积累负债只会让你离自由越来越远。不能积累财富的人有一个特点是：动用积蓄去增加负债。富有的人特点是：动用继续去增加资产。我们也总是告诉自己，现在手上没有钱，等攒下一些钱后再进行投资，然而这种想法加上上面说的的习惯和思想会让你永远没有钱去投资。“想致富，走险路”这不是一个段子，将钱存入银行永远是最安全的办法，但也永远不能实现财富增长，现在的通货膨胀远比银行利率要高。要有胆量和勇气去投资，当然也不要盲目。这需要你有很多方面的知识和勤于关注世界的变化。关于这点，书里有个比较有趣的例子:每当超市大减价 ，如卫生纸打折时 ，消费者就会涌入超市抢购 。而当股票市场上出现股价下跌时 ，也就是大多数人所说的股市下挫或回调时 ，购买者却急于从中逃出 。当超市商品涨价时 ，人们转到其他商店购物 。而当股市上升时 ，购买者却大举买入股票 。\n&nbsp;&nbsp;&nbsp;&nbsp;大家应该重点关注自己的“收入-支出-负债-资产”这几项，将收入投入资产项，减少负债项，用资产项产生的收益去做你的支出项，能做到这样的科学良性循环，那么就能够跳离赚钱-花钱-还贷”的怪圈，实现财富自由了。\n如果在上学的时候就能学习到这些知识，认识到财富的秘诀，那么很多人都可以在30岁前实现经济独立，相对自由的生活方式。不过无论什么时候都不算晚，现在开始努力学习，提高自己的财务能力，打造自己的“收入-支出-负债-资产”表，实现财富自由。\n\n下面是书中一些我认为很有用的观点：\n1.贫穷和破产的区别是：破产是暂时的，贫穷是永远的。\n2.离开学校是学习的起点，而不是终点。\n3.如何赚钱不是发财的秘诀，发财的秘诀是如何花钱。\n4.理财：赚了钱后如何处理这些钱？又怎样防止别人从你手中拿走这些钱？你能拥有这些钱多久？如何让钱生钱？\n5.你的职业和你的事业有很大的区别。\n6.将收入变成资产才能获得真正的财务安全。\n7.拥有不需要你到场就可以正常运转的业务，会使你获得财务自由。\n8.“收入-纳税-支出”与“收入-支出-纳税”有很大的区别\n9.用税前收入支付开支\n10.没有从未亏过钱的富人，却有很多从未亏过钱的穷人。\n11.自律是积累财富中最重要的品质。\n12.开创事业最重要的几个能力分别是：现金流管理、人事管理、个人时间管理。\n13.不能积累财富的人有一个特点是：动用积蓄去增加负债。富有的人特点是：动用继续去增加资产。\n14.风险与收益并存。\n15.市场上有许多廉价交易 ，但只有存在变化 ，才能使廉价交易变得有利可图 。","source":"_posts/rich-father.md","raw":"---\ntitle: 学会理财，创造财富－－读《富爸爸穷爸爸》\ndate: 2017-01-10 23:09:51\ntags: 理财\ncategories: 读书笔记\n---\n&nbsp;&nbsp;&nbsp;&nbsp;以往我看到理财这个词的时候，往往就是认为它就是让你记账，记下你的钱都去哪了，然后看看能从哪里剩下不该花的钱；还有就是买理财产品，就是把你剩下来的钱，存到银行或者购买理财基金。当我看了《富爸爸穷爸爸》这本书后，对理财有了新的理解。比如现在很多人最大的错误就是认为赚钱的技能才是富有的秘诀，然而富有的真正秘诀是如何花钱。还要很多人对资产与负债完全分不清，包括我自己，就是这些想法造成了我们无法积累财富现状。作者反复提到的一句话“离开学校是学习的起点，而不是终点。”是我们很多人没有意识到的，虽然离开学校后我一直在学习，但是从来没有学习过有关理财方面的知识，包括我们的教育体系也没有教大家怎么创造和积累财富，学校和父母只是告诉我们要好好学习。<!--more-->\n&nbsp;&nbsp;&nbsp;&nbsp;对理财的彻底认识非常重要，它包括赚了钱后如何处理这些钱？又怎样防止别人从你手中拿走这些钱？你能拥有这些钱多久？如何让钱生钱？我们很多人都是活在努力工作提高自己的收入，然而现实往往是这样，你的收入越高，你的贷款越多，负债越多，财务问题越严重，这也是没有分清资产与债务的造成的。债务可能很多人都了解，就是我们欠下的钱，需要还给银行或者他人的。那么资产是什么呢？车？房？金银珠宝？我之前的理解就是这些，我甚至认为我家里的iPad也是我的资产，因为他可以卖钱。我相信大多数人也是这么理解的，悲哀的是就是这种认知让90%的人一直奔波于“赚钱-花钱-还贷”的怪圈之中。真正的资产是能为你带来收入的东西，打个比方，你贷款买了一个房子，每月需要还贷款6000，租出去可以收房租4000，那么这个房子就是你的负债而不是资产，因为它不断的将你的现金流转移到了银行。如果你每月还贷4000，租出去收房租6000，那么这个房子每月为你带来2000元的收益，那么这部分投入的钱就是你的资产，因为它可以产生钱，而不是套牢你的首付，再不断的拿走你兜里的钱。这就是资产与首付的重要区别。\n&nbsp;&nbsp;&nbsp;&nbsp;资产的最大特点就是不需要你到场就可以正常运转，就可以不断的产生收入，不断的积累你的资产会使你获得财务自由。积累负债只会让你离自由越来越远。不能积累财富的人有一个特点是：动用积蓄去增加负债。富有的人特点是：动用继续去增加资产。我们也总是告诉自己，现在手上没有钱，等攒下一些钱后再进行投资，然而这种想法加上上面说的的习惯和思想会让你永远没有钱去投资。“想致富，走险路”这不是一个段子，将钱存入银行永远是最安全的办法，但也永远不能实现财富增长，现在的通货膨胀远比银行利率要高。要有胆量和勇气去投资，当然也不要盲目。这需要你有很多方面的知识和勤于关注世界的变化。关于这点，书里有个比较有趣的例子:每当超市大减价 ，如卫生纸打折时 ，消费者就会涌入超市抢购 。而当股票市场上出现股价下跌时 ，也就是大多数人所说的股市下挫或回调时 ，购买者却急于从中逃出 。当超市商品涨价时 ，人们转到其他商店购物 。而当股市上升时 ，购买者却大举买入股票 。\n&nbsp;&nbsp;&nbsp;&nbsp;大家应该重点关注自己的“收入-支出-负债-资产”这几项，将收入投入资产项，减少负债项，用资产项产生的收益去做你的支出项，能做到这样的科学良性循环，那么就能够跳离赚钱-花钱-还贷”的怪圈，实现财富自由了。\n如果在上学的时候就能学习到这些知识，认识到财富的秘诀，那么很多人都可以在30岁前实现经济独立，相对自由的生活方式。不过无论什么时候都不算晚，现在开始努力学习，提高自己的财务能力，打造自己的“收入-支出-负债-资产”表，实现财富自由。\n\n下面是书中一些我认为很有用的观点：\n1.贫穷和破产的区别是：破产是暂时的，贫穷是永远的。\n2.离开学校是学习的起点，而不是终点。\n3.如何赚钱不是发财的秘诀，发财的秘诀是如何花钱。\n4.理财：赚了钱后如何处理这些钱？又怎样防止别人从你手中拿走这些钱？你能拥有这些钱多久？如何让钱生钱？\n5.你的职业和你的事业有很大的区别。\n6.将收入变成资产才能获得真正的财务安全。\n7.拥有不需要你到场就可以正常运转的业务，会使你获得财务自由。\n8.“收入-纳税-支出”与“收入-支出-纳税”有很大的区别\n9.用税前收入支付开支\n10.没有从未亏过钱的富人，却有很多从未亏过钱的穷人。\n11.自律是积累财富中最重要的品质。\n12.开创事业最重要的几个能力分别是：现金流管理、人事管理、个人时间管理。\n13.不能积累财富的人有一个特点是：动用积蓄去增加负债。富有的人特点是：动用继续去增加资产。\n14.风险与收益并存。\n15.市场上有许多廉价交易 ，但只有存在变化 ，才能使廉价交易变得有利可图 。","slug":"rich-father","published":1,"updated":"2019-07-01T12:35:47.383Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjycv1m3p000ook9mwx59517z","content":"<p>&nbsp;&nbsp;&nbsp;&nbsp;以往我看到理财这个词的时候，往往就是认为它就是让你记账，记下你的钱都去哪了，然后看看能从哪里剩下不该花的钱；还有就是买理财产品，就是把你剩下来的钱，存到银行或者购买理财基金。当我看了《富爸爸穷爸爸》这本书后，对理财有了新的理解。比如现在很多人最大的错误就是认为赚钱的技能才是富有的秘诀，然而富有的真正秘诀是如何花钱。还要很多人对资产与负债完全分不清，包括我自己，就是这些想法造成了我们无法积累财富现状。作者反复提到的一句话“离开学校是学习的起点，而不是终点。”是我们很多人没有意识到的，虽然离开学校后我一直在学习，但是从来没有学习过有关理财方面的知识，包括我们的教育体系也没有教大家怎么创造和积累财富，学校和父母只是告诉我们要好好学习。<a id=\"more\"></a><br>&nbsp;&nbsp;&nbsp;&nbsp;对理财的彻底认识非常重要，它包括赚了钱后如何处理这些钱？又怎样防止别人从你手中拿走这些钱？你能拥有这些钱多久？如何让钱生钱？我们很多人都是活在努力工作提高自己的收入，然而现实往往是这样，你的收入越高，你的贷款越多，负债越多，财务问题越严重，这也是没有分清资产与债务的造成的。债务可能很多人都了解，就是我们欠下的钱，需要还给银行或者他人的。那么资产是什么呢？车？房？金银珠宝？我之前的理解就是这些，我甚至认为我家里的iPad也是我的资产，因为他可以卖钱。我相信大多数人也是这么理解的，悲哀的是就是这种认知让90%的人一直奔波于“赚钱-花钱-还贷”的怪圈之中。真正的资产是能为你带来收入的东西，打个比方，你贷款买了一个房子，每月需要还贷款6000，租出去可以收房租4000，那么这个房子就是你的负债而不是资产，因为它不断的将你的现金流转移到了银行。如果你每月还贷4000，租出去收房租6000，那么这个房子每月为你带来2000元的收益，那么这部分投入的钱就是你的资产，因为它可以产生钱，而不是套牢你的首付，再不断的拿走你兜里的钱。这就是资产与首付的重要区别。<br>&nbsp;&nbsp;&nbsp;&nbsp;资产的最大特点就是不需要你到场就可以正常运转，就可以不断的产生收入，不断的积累你的资产会使你获得财务自由。积累负债只会让你离自由越来越远。不能积累财富的人有一个特点是：动用积蓄去增加负债。富有的人特点是：动用继续去增加资产。我们也总是告诉自己，现在手上没有钱，等攒下一些钱后再进行投资，然而这种想法加上上面说的的习惯和思想会让你永远没有钱去投资。“想致富，走险路”这不是一个段子，将钱存入银行永远是最安全的办法，但也永远不能实现财富增长，现在的通货膨胀远比银行利率要高。要有胆量和勇气去投资，当然也不要盲目。这需要你有很多方面的知识和勤于关注世界的变化。关于这点，书里有个比较有趣的例子:每当超市大减价 ，如卫生纸打折时 ，消费者就会涌入超市抢购 。而当股票市场上出现股价下跌时 ，也就是大多数人所说的股市下挫或回调时 ，购买者却急于从中逃出 。当超市商品涨价时 ，人们转到其他商店购物 。而当股市上升时 ，购买者却大举买入股票 。<br>&nbsp;&nbsp;&nbsp;&nbsp;大家应该重点关注自己的“收入-支出-负债-资产”这几项，将收入投入资产项，减少负债项，用资产项产生的收益去做你的支出项，能做到这样的科学良性循环，那么就能够跳离赚钱-花钱-还贷”的怪圈，实现财富自由了。<br>如果在上学的时候就能学习到这些知识，认识到财富的秘诀，那么很多人都可以在30岁前实现经济独立，相对自由的生活方式。不过无论什么时候都不算晚，现在开始努力学习，提高自己的财务能力，打造自己的“收入-支出-负债-资产”表，实现财富自由。</p>\n<p>下面是书中一些我认为很有用的观点：<br>1.贫穷和破产的区别是：破产是暂时的，贫穷是永远的。<br>2.离开学校是学习的起点，而不是终点。<br>3.如何赚钱不是发财的秘诀，发财的秘诀是如何花钱。<br>4.理财：赚了钱后如何处理这些钱？又怎样防止别人从你手中拿走这些钱？你能拥有这些钱多久？如何让钱生钱？<br>5.你的职业和你的事业有很大的区别。<br>6.将收入变成资产才能获得真正的财务安全。<br>7.拥有不需要你到场就可以正常运转的业务，会使你获得财务自由。<br>8.“收入-纳税-支出”与“收入-支出-纳税”有很大的区别<br>9.用税前收入支付开支<br>10.没有从未亏过钱的富人，却有很多从未亏过钱的穷人。<br>11.自律是积累财富中最重要的品质。<br>12.开创事业最重要的几个能力分别是：现金流管理、人事管理、个人时间管理。<br>13.不能积累财富的人有一个特点是：动用积蓄去增加负债。富有的人特点是：动用继续去增加资产。<br>14.风险与收益并存。<br>15.市场上有许多廉价交易 ，但只有存在变化 ，才能使廉价交易变得有利可图 。</p>\n","site":{"data":{}},"excerpt":"<p>&nbsp;&nbsp;&nbsp;&nbsp;以往我看到理财这个词的时候，往往就是认为它就是让你记账，记下你的钱都去哪了，然后看看能从哪里剩下不该花的钱；还有就是买理财产品，就是把你剩下来的钱，存到银行或者购买理财基金。当我看了《富爸爸穷爸爸》这本书后，对理财有了新的理解。比如现在很多人最大的错误就是认为赚钱的技能才是富有的秘诀，然而富有的真正秘诀是如何花钱。还要很多人对资产与负债完全分不清，包括我自己，就是这些想法造成了我们无法积累财富现状。作者反复提到的一句话“离开学校是学习的起点，而不是终点。”是我们很多人没有意识到的，虽然离开学校后我一直在学习，但是从来没有学习过有关理财方面的知识，包括我们的教育体系也没有教大家怎么创造和积累财富，学校和父母只是告诉我们要好好学习。","more":"<br>&nbsp;&nbsp;&nbsp;&nbsp;对理财的彻底认识非常重要，它包括赚了钱后如何处理这些钱？又怎样防止别人从你手中拿走这些钱？你能拥有这些钱多久？如何让钱生钱？我们很多人都是活在努力工作提高自己的收入，然而现实往往是这样，你的收入越高，你的贷款越多，负债越多，财务问题越严重，这也是没有分清资产与债务的造成的。债务可能很多人都了解，就是我们欠下的钱，需要还给银行或者他人的。那么资产是什么呢？车？房？金银珠宝？我之前的理解就是这些，我甚至认为我家里的iPad也是我的资产，因为他可以卖钱。我相信大多数人也是这么理解的，悲哀的是就是这种认知让90%的人一直奔波于“赚钱-花钱-还贷”的怪圈之中。真正的资产是能为你带来收入的东西，打个比方，你贷款买了一个房子，每月需要还贷款6000，租出去可以收房租4000，那么这个房子就是你的负债而不是资产，因为它不断的将你的现金流转移到了银行。如果你每月还贷4000，租出去收房租6000，那么这个房子每月为你带来2000元的收益，那么这部分投入的钱就是你的资产，因为它可以产生钱，而不是套牢你的首付，再不断的拿走你兜里的钱。这就是资产与首付的重要区别。<br>&nbsp;&nbsp;&nbsp;&nbsp;资产的最大特点就是不需要你到场就可以正常运转，就可以不断的产生收入，不断的积累你的资产会使你获得财务自由。积累负债只会让你离自由越来越远。不能积累财富的人有一个特点是：动用积蓄去增加负债。富有的人特点是：动用继续去增加资产。我们也总是告诉自己，现在手上没有钱，等攒下一些钱后再进行投资，然而这种想法加上上面说的的习惯和思想会让你永远没有钱去投资。“想致富，走险路”这不是一个段子，将钱存入银行永远是最安全的办法，但也永远不能实现财富增长，现在的通货膨胀远比银行利率要高。要有胆量和勇气去投资，当然也不要盲目。这需要你有很多方面的知识和勤于关注世界的变化。关于这点，书里有个比较有趣的例子:每当超市大减价 ，如卫生纸打折时 ，消费者就会涌入超市抢购 。而当股票市场上出现股价下跌时 ，也就是大多数人所说的股市下挫或回调时 ，购买者却急于从中逃出 。当超市商品涨价时 ，人们转到其他商店购物 。而当股市上升时 ，购买者却大举买入股票 。<br>&nbsp;&nbsp;&nbsp;&nbsp;大家应该重点关注自己的“收入-支出-负债-资产”这几项，将收入投入资产项，减少负债项，用资产项产生的收益去做你的支出项，能做到这样的科学良性循环，那么就能够跳离赚钱-花钱-还贷”的怪圈，实现财富自由了。<br>如果在上学的时候就能学习到这些知识，认识到财富的秘诀，那么很多人都可以在30岁前实现经济独立，相对自由的生活方式。不过无论什么时候都不算晚，现在开始努力学习，提高自己的财务能力，打造自己的“收入-支出-负债-资产”表，实现财富自由。</p>\n<p>下面是书中一些我认为很有用的观点：<br>1.贫穷和破产的区别是：破产是暂时的，贫穷是永远的。<br>2.离开学校是学习的起点，而不是终点。<br>3.如何赚钱不是发财的秘诀，发财的秘诀是如何花钱。<br>4.理财：赚了钱后如何处理这些钱？又怎样防止别人从你手中拿走这些钱？你能拥有这些钱多久？如何让钱生钱？<br>5.你的职业和你的事业有很大的区别。<br>6.将收入变成资产才能获得真正的财务安全。<br>7.拥有不需要你到场就可以正常运转的业务，会使你获得财务自由。<br>8.“收入-纳税-支出”与“收入-支出-纳税”有很大的区别<br>9.用税前收入支付开支<br>10.没有从未亏过钱的富人，却有很多从未亏过钱的穷人。<br>11.自律是积累财富中最重要的品质。<br>12.开创事业最重要的几个能力分别是：现金流管理、人事管理、个人时间管理。<br>13.不能积累财富的人有一个特点是：动用积蓄去增加负债。富有的人特点是：动用继续去增加资产。<br>14.风险与收益并存。<br>15.市场上有许多廉价交易 ，但只有存在变化 ，才能使廉价交易变得有利可图 。</p>"},{"title":"在cocos creator中用shader实现图片的渐变切换","date":"2018-05-02T12:07:12.000Z","_content":"# 在cocos creator中用shader实现图片的渐变切换\n## 功能介绍\n很多时候我们需要使用在场景中进行背景切换，或者图片的过渡等，需要一下过渡的效果，很多引擎都没有提供这种切换效果，使用遮罩来实现效果也并不是很好，所以这里使用shader来实现一下这个效果。本文中的shader是基于cocos creator来实现的，其中使用了cocos内置的变量，不过shader是基于标准的GLSL语言写的，很容易移植到其他引擎或者平台的。\n\n## 效果图如下\n![shader](/images/shader-transfer-1.gif)\n![shader](/images/shader-transfer-2.gif)\n<!--more-->\n\n## shader实现方案\n在图片中选取一条垂直竖线，竖线左边透明度逐渐变高，同时在update中不断调整竖线的位置，从最左边移动到最右边就实现了一个渐变的过渡切换效果，透明度渐变程度和渐变移动速度，包括渐变方向都可以自己修改参数调整。\n\n## 代码实现\n```\n// 顶点着色器，这里什么修改也不做。\npublic static TRANSFER_VERT:string = `\n    attribute vec4 a_position;\n    attribute vec2 a_texCoord;\n    attribute vec4 a_color;\n    varying vec4 v_fragmentColor; \n    varying vec2 v_texCoord; \n    void main() \n    { \n        gl_Position = CC_PMatrix * a_position;\n        v_fragmentColor = a_color; \n        v_texCoord = a_texCoord; \n    }\n    `;\n\n// 片段着色器，主要逻辑都是在片段着色器上实现\npublic static TRANSFER_FRAG:string = `\n    #ifdef GL_ES\n    precision lowp float;\n    #endif\n    \n\t/**\n\t * Uniform是一种从CPU中的应用向GPU中的着色器发送数据的方式，并且它是全局的，也就是说我们可以在代码中来修改这个变量。 \n\t * 这里我们使用这个特性来定义一个time，time值决定我们上面说的垂直竖线的位置，再通过外部访问来修改time的值，来达到移动的目的。\n\t */\n    uniform float time;\n\n    varying vec4 v_fragmentColor;\n    varying vec2 v_texCoord;\n    void main()\n    {\n        vec4 c = v_fragmentColor * texture2D(CC_Texture0, v_texCoord);\n        gl_FragColor = c;\n\n        float temp = v_texCoord.x - time;\n        if (temp <= 0.0) {\n            float temp2 = abs(temp);\n            if (temp2 <= 0.2) {\n                gl_FragColor.w = 1.0 - temp2/0.2;\n            } else {\n                gl_FragColor.w = 0.0;\n            }\n        } else {\n            gl_FragColor.w = 1.0;\n        }\n    }\n    `;\n\t\n// 下面开始是cocos的代码，来测试shader。\nprivate _program:any;\nprivate _time:number = 0;\n    \nstart () {\n    this.testShader();\n}\n\ntestShader() {\n    let bgSp:cc.Sprite = this.bgNode.getChildByName(\"bg\").getComponent(cc.Sprite);\n    this._program = new cc.GLProgram();\n    \n    if (cc.sys.isNative) {  \n        this._program.initWithString(StoryHandlerScript.TRANSFER_VERT, StoryHandlerScript.TRANSFER_FRAG);\n    } else {  \n        this._program.initWithVertexShaderByteArray(StoryHandlerScript.TRANSFER_VERT, StoryHandlerScript.TRANSFER_FRAG);\n        this._program.addAttribute(cc.macro.ATTRIBUTE_NAME_POSITION, cc.macro.VERTEX_ATTRIB_POSITION);  \n        this._program.addAttribute(cc.macro.ATTRIBUTE_NAME_COLOR, cc.macro.VERTEX_ATTRIB_COLOR);  \n        this._program.addAttribute(cc.macro.ATTRIBUTE_NAME_TEX_COORD, cc.macro.VERTEX_ATTRIB_TEX_COORDS);  \n    }\n    this._program.link();  \n    this._program.updateUniforms();\n    this._program.use();\n\n    if (cc.sys.isNative) {  \n        var glProgram_state = cc.GLProgramState.getOrCreateWithGLProgram(this._program);\n        glProgram_state.setUniformFloat( \"time\", this._time );    \n    } else {\n        let time = this._program.getUniformLocationForName(\"time\");\n        this._program.setUniformLocationWith1f(time, this._time);\n    }\n    bgSp._sgNode.setShaderProgram(this._program);\n}\n\n// 在update里来修改time的值\nupdate(dt){\n    this._time += 0.02;\n    if (this._program) {\n        this._program.use();\n        if (cc.sys.isNative) {\n            var glProgram_state = cc.GLProgramState.getOrCreateWithGLProgram(this._program);\n            glProgram_state.setUniformFloat( \"time\", this._time );    \n        } else {\n            let time = this._program.getUniformLocationForName(\"time\");\n            this._program.setUniformLocationWith1f(time, this._time);\n        }\n    }\n}\n```\n以上就是所有的代码实现，逻辑很简单，同时有一些简单的注释，应该很好理解。","source":"_posts/shader-transfer.md","raw":"---\ntitle: 在cocos creator中用shader实现图片的渐变切换\ndate: 2018-05-02 20:07:12\ntags: shader\ncategories: shader\n---\n# 在cocos creator中用shader实现图片的渐变切换\n## 功能介绍\n很多时候我们需要使用在场景中进行背景切换，或者图片的过渡等，需要一下过渡的效果，很多引擎都没有提供这种切换效果，使用遮罩来实现效果也并不是很好，所以这里使用shader来实现一下这个效果。本文中的shader是基于cocos creator来实现的，其中使用了cocos内置的变量，不过shader是基于标准的GLSL语言写的，很容易移植到其他引擎或者平台的。\n\n## 效果图如下\n![shader](/images/shader-transfer-1.gif)\n![shader](/images/shader-transfer-2.gif)\n<!--more-->\n\n## shader实现方案\n在图片中选取一条垂直竖线，竖线左边透明度逐渐变高，同时在update中不断调整竖线的位置，从最左边移动到最右边就实现了一个渐变的过渡切换效果，透明度渐变程度和渐变移动速度，包括渐变方向都可以自己修改参数调整。\n\n## 代码实现\n```\n// 顶点着色器，这里什么修改也不做。\npublic static TRANSFER_VERT:string = `\n    attribute vec4 a_position;\n    attribute vec2 a_texCoord;\n    attribute vec4 a_color;\n    varying vec4 v_fragmentColor; \n    varying vec2 v_texCoord; \n    void main() \n    { \n        gl_Position = CC_PMatrix * a_position;\n        v_fragmentColor = a_color; \n        v_texCoord = a_texCoord; \n    }\n    `;\n\n// 片段着色器，主要逻辑都是在片段着色器上实现\npublic static TRANSFER_FRAG:string = `\n    #ifdef GL_ES\n    precision lowp float;\n    #endif\n    \n\t/**\n\t * Uniform是一种从CPU中的应用向GPU中的着色器发送数据的方式，并且它是全局的，也就是说我们可以在代码中来修改这个变量。 \n\t * 这里我们使用这个特性来定义一个time，time值决定我们上面说的垂直竖线的位置，再通过外部访问来修改time的值，来达到移动的目的。\n\t */\n    uniform float time;\n\n    varying vec4 v_fragmentColor;\n    varying vec2 v_texCoord;\n    void main()\n    {\n        vec4 c = v_fragmentColor * texture2D(CC_Texture0, v_texCoord);\n        gl_FragColor = c;\n\n        float temp = v_texCoord.x - time;\n        if (temp <= 0.0) {\n            float temp2 = abs(temp);\n            if (temp2 <= 0.2) {\n                gl_FragColor.w = 1.0 - temp2/0.2;\n            } else {\n                gl_FragColor.w = 0.0;\n            }\n        } else {\n            gl_FragColor.w = 1.0;\n        }\n    }\n    `;\n\t\n// 下面开始是cocos的代码，来测试shader。\nprivate _program:any;\nprivate _time:number = 0;\n    \nstart () {\n    this.testShader();\n}\n\ntestShader() {\n    let bgSp:cc.Sprite = this.bgNode.getChildByName(\"bg\").getComponent(cc.Sprite);\n    this._program = new cc.GLProgram();\n    \n    if (cc.sys.isNative) {  \n        this._program.initWithString(StoryHandlerScript.TRANSFER_VERT, StoryHandlerScript.TRANSFER_FRAG);\n    } else {  \n        this._program.initWithVertexShaderByteArray(StoryHandlerScript.TRANSFER_VERT, StoryHandlerScript.TRANSFER_FRAG);\n        this._program.addAttribute(cc.macro.ATTRIBUTE_NAME_POSITION, cc.macro.VERTEX_ATTRIB_POSITION);  \n        this._program.addAttribute(cc.macro.ATTRIBUTE_NAME_COLOR, cc.macro.VERTEX_ATTRIB_COLOR);  \n        this._program.addAttribute(cc.macro.ATTRIBUTE_NAME_TEX_COORD, cc.macro.VERTEX_ATTRIB_TEX_COORDS);  \n    }\n    this._program.link();  \n    this._program.updateUniforms();\n    this._program.use();\n\n    if (cc.sys.isNative) {  \n        var glProgram_state = cc.GLProgramState.getOrCreateWithGLProgram(this._program);\n        glProgram_state.setUniformFloat( \"time\", this._time );    \n    } else {\n        let time = this._program.getUniformLocationForName(\"time\");\n        this._program.setUniformLocationWith1f(time, this._time);\n    }\n    bgSp._sgNode.setShaderProgram(this._program);\n}\n\n// 在update里来修改time的值\nupdate(dt){\n    this._time += 0.02;\n    if (this._program) {\n        this._program.use();\n        if (cc.sys.isNative) {\n            var glProgram_state = cc.GLProgramState.getOrCreateWithGLProgram(this._program);\n            glProgram_state.setUniformFloat( \"time\", this._time );    \n        } else {\n            let time = this._program.getUniformLocationForName(\"time\");\n            this._program.setUniformLocationWith1f(time, this._time);\n        }\n    }\n}\n```\n以上就是所有的代码实现，逻辑很简单，同时有一些简单的注释，应该很好理解。","slug":"shader-transfer","published":1,"updated":"2019-07-01T12:35:47.383Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjycv1m3p000pok9mhuk2dcdb","content":"<h1 id=\"在cocos-creator中用shader实现图片的渐变切换\"><a href=\"#在cocos-creator中用shader实现图片的渐变切换\" class=\"headerlink\" title=\"在cocos creator中用shader实现图片的渐变切换\"></a>在cocos creator中用shader实现图片的渐变切换</h1><h2 id=\"功能介绍\"><a href=\"#功能介绍\" class=\"headerlink\" title=\"功能介绍\"></a>功能介绍</h2><p>很多时候我们需要使用在场景中进行背景切换，或者图片的过渡等，需要一下过渡的效果，很多引擎都没有提供这种切换效果，使用遮罩来实现效果也并不是很好，所以这里使用shader来实现一下这个效果。本文中的shader是基于cocos creator来实现的，其中使用了cocos内置的变量，不过shader是基于标准的GLSL语言写的，很容易移植到其他引擎或者平台的。</p>\n<h2 id=\"效果图如下\"><a href=\"#效果图如下\" class=\"headerlink\" title=\"效果图如下\"></a>效果图如下</h2><p><img src=\"/images/shader-transfer-1.gif\" alt=\"shader\"><br><img src=\"/images/shader-transfer-2.gif\" alt=\"shader\"><br><a id=\"more\"></a></p>\n<h2 id=\"shader实现方案\"><a href=\"#shader实现方案\" class=\"headerlink\" title=\"shader实现方案\"></a>shader实现方案</h2><p>在图片中选取一条垂直竖线，竖线左边透明度逐渐变高，同时在update中不断调整竖线的位置，从最左边移动到最右边就实现了一个渐变的过渡切换效果，透明度渐变程度和渐变移动速度，包括渐变方向都可以自己修改参数调整。</p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 顶点着色器，这里什么修改也不做。</span><br><span class=\"line\">public static TRANSFER_VERT:string = `</span><br><span class=\"line\">    attribute vec4 a_position;</span><br><span class=\"line\">    attribute vec2 a_texCoord;</span><br><span class=\"line\">    attribute vec4 a_color;</span><br><span class=\"line\">    varying vec4 v_fragmentColor; </span><br><span class=\"line\">    varying vec2 v_texCoord; </span><br><span class=\"line\">    void main() </span><br><span class=\"line\">    &#123; </span><br><span class=\"line\">        gl_Position = CC_PMatrix * a_position;</span><br><span class=\"line\">        v_fragmentColor = a_color; </span><br><span class=\"line\">        v_texCoord = a_texCoord; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    `;</span><br><span class=\"line\"></span><br><span class=\"line\">// 片段着色器，主要逻辑都是在片段着色器上实现</span><br><span class=\"line\">public static TRANSFER_FRAG:string = `</span><br><span class=\"line\">    #ifdef GL_ES</span><br><span class=\"line\">    precision lowp float;</span><br><span class=\"line\">    #endif</span><br><span class=\"line\">    </span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * Uniform是一种从CPU中的应用向GPU中的着色器发送数据的方式，并且它是全局的，也就是说我们可以在代码中来修改这个变量。 </span><br><span class=\"line\">\t * 这里我们使用这个特性来定义一个time，time值决定我们上面说的垂直竖线的位置，再通过外部访问来修改time的值，来达到移动的目的。</span><br><span class=\"line\">\t */</span><br><span class=\"line\">    uniform float time;</span><br><span class=\"line\"></span><br><span class=\"line\">    varying vec4 v_fragmentColor;</span><br><span class=\"line\">    varying vec2 v_texCoord;</span><br><span class=\"line\">    void main()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        vec4 c = v_fragmentColor * texture2D(CC_Texture0, v_texCoord);</span><br><span class=\"line\">        gl_FragColor = c;</span><br><span class=\"line\"></span><br><span class=\"line\">        float temp = v_texCoord.x - time;</span><br><span class=\"line\">        if (temp &lt;= 0.0) &#123;</span><br><span class=\"line\">            float temp2 = abs(temp);</span><br><span class=\"line\">            if (temp2 &lt;= 0.2) &#123;</span><br><span class=\"line\">                gl_FragColor.w = 1.0 - temp2/0.2;</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                gl_FragColor.w = 0.0;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            gl_FragColor.w = 1.0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    `;</span><br><span class=\"line\">\t</span><br><span class=\"line\">// 下面开始是cocos的代码，来测试shader。</span><br><span class=\"line\">private _program:any;</span><br><span class=\"line\">private _time:number = 0;</span><br><span class=\"line\">    </span><br><span class=\"line\">start () &#123;</span><br><span class=\"line\">    this.testShader();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">testShader() &#123;</span><br><span class=\"line\">    let bgSp:cc.Sprite = this.bgNode.getChildByName(&quot;bg&quot;).getComponent(cc.Sprite);</span><br><span class=\"line\">    this._program = new cc.GLProgram();</span><br><span class=\"line\">    </span><br><span class=\"line\">    if (cc.sys.isNative) &#123;  </span><br><span class=\"line\">        this._program.initWithString(StoryHandlerScript.TRANSFER_VERT, StoryHandlerScript.TRANSFER_FRAG);</span><br><span class=\"line\">    &#125; else &#123;  </span><br><span class=\"line\">        this._program.initWithVertexShaderByteArray(StoryHandlerScript.TRANSFER_VERT, StoryHandlerScript.TRANSFER_FRAG);</span><br><span class=\"line\">        this._program.addAttribute(cc.macro.ATTRIBUTE_NAME_POSITION, cc.macro.VERTEX_ATTRIB_POSITION);  </span><br><span class=\"line\">        this._program.addAttribute(cc.macro.ATTRIBUTE_NAME_COLOR, cc.macro.VERTEX_ATTRIB_COLOR);  </span><br><span class=\"line\">        this._program.addAttribute(cc.macro.ATTRIBUTE_NAME_TEX_COORD, cc.macro.VERTEX_ATTRIB_TEX_COORDS);  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    this._program.link();  </span><br><span class=\"line\">    this._program.updateUniforms();</span><br><span class=\"line\">    this._program.use();</span><br><span class=\"line\"></span><br><span class=\"line\">    if (cc.sys.isNative) &#123;  </span><br><span class=\"line\">        var glProgram_state = cc.GLProgramState.getOrCreateWithGLProgram(this._program);</span><br><span class=\"line\">        glProgram_state.setUniformFloat( &quot;time&quot;, this._time );    </span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        let time = this._program.getUniformLocationForName(&quot;time&quot;);</span><br><span class=\"line\">        this._program.setUniformLocationWith1f(time, this._time);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    bgSp._sgNode.setShaderProgram(this._program);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 在update里来修改time的值</span><br><span class=\"line\">update(dt)&#123;</span><br><span class=\"line\">    this._time += 0.02;</span><br><span class=\"line\">    if (this._program) &#123;</span><br><span class=\"line\">        this._program.use();</span><br><span class=\"line\">        if (cc.sys.isNative) &#123;</span><br><span class=\"line\">            var glProgram_state = cc.GLProgramState.getOrCreateWithGLProgram(this._program);</span><br><span class=\"line\">            glProgram_state.setUniformFloat( &quot;time&quot;, this._time );    </span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            let time = this._program.getUniformLocationForName(&quot;time&quot;);</span><br><span class=\"line\">            this._program.setUniformLocationWith1f(time, this._time);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上就是所有的代码实现，逻辑很简单，同时有一些简单的注释，应该很好理解。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"在cocos-creator中用shader实现图片的渐变切换\"><a href=\"#在cocos-creator中用shader实现图片的渐变切换\" class=\"headerlink\" title=\"在cocos creator中用shader实现图片的渐变切换\"></a>在cocos creator中用shader实现图片的渐变切换</h1><h2 id=\"功能介绍\"><a href=\"#功能介绍\" class=\"headerlink\" title=\"功能介绍\"></a>功能介绍</h2><p>很多时候我们需要使用在场景中进行背景切换，或者图片的过渡等，需要一下过渡的效果，很多引擎都没有提供这种切换效果，使用遮罩来实现效果也并不是很好，所以这里使用shader来实现一下这个效果。本文中的shader是基于cocos creator来实现的，其中使用了cocos内置的变量，不过shader是基于标准的GLSL语言写的，很容易移植到其他引擎或者平台的。</p>\n<h2 id=\"效果图如下\"><a href=\"#效果图如下\" class=\"headerlink\" title=\"效果图如下\"></a>效果图如下</h2><p><img src=\"/images/shader-transfer-1.gif\" alt=\"shader\"><br><img src=\"/images/shader-transfer-2.gif\" alt=\"shader\"><br>","more":"</p>\n<h2 id=\"shader实现方案\"><a href=\"#shader实现方案\" class=\"headerlink\" title=\"shader实现方案\"></a>shader实现方案</h2><p>在图片中选取一条垂直竖线，竖线左边透明度逐渐变高，同时在update中不断调整竖线的位置，从最左边移动到最右边就实现了一个渐变的过渡切换效果，透明度渐变程度和渐变移动速度，包括渐变方向都可以自己修改参数调整。</p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 顶点着色器，这里什么修改也不做。</span><br><span class=\"line\">public static TRANSFER_VERT:string = `</span><br><span class=\"line\">    attribute vec4 a_position;</span><br><span class=\"line\">    attribute vec2 a_texCoord;</span><br><span class=\"line\">    attribute vec4 a_color;</span><br><span class=\"line\">    varying vec4 v_fragmentColor; </span><br><span class=\"line\">    varying vec2 v_texCoord; </span><br><span class=\"line\">    void main() </span><br><span class=\"line\">    &#123; </span><br><span class=\"line\">        gl_Position = CC_PMatrix * a_position;</span><br><span class=\"line\">        v_fragmentColor = a_color; </span><br><span class=\"line\">        v_texCoord = a_texCoord; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    `;</span><br><span class=\"line\"></span><br><span class=\"line\">// 片段着色器，主要逻辑都是在片段着色器上实现</span><br><span class=\"line\">public static TRANSFER_FRAG:string = `</span><br><span class=\"line\">    #ifdef GL_ES</span><br><span class=\"line\">    precision lowp float;</span><br><span class=\"line\">    #endif</span><br><span class=\"line\">    </span><br><span class=\"line\">\t/**</span><br><span class=\"line\">\t * Uniform是一种从CPU中的应用向GPU中的着色器发送数据的方式，并且它是全局的，也就是说我们可以在代码中来修改这个变量。 </span><br><span class=\"line\">\t * 这里我们使用这个特性来定义一个time，time值决定我们上面说的垂直竖线的位置，再通过外部访问来修改time的值，来达到移动的目的。</span><br><span class=\"line\">\t */</span><br><span class=\"line\">    uniform float time;</span><br><span class=\"line\"></span><br><span class=\"line\">    varying vec4 v_fragmentColor;</span><br><span class=\"line\">    varying vec2 v_texCoord;</span><br><span class=\"line\">    void main()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        vec4 c = v_fragmentColor * texture2D(CC_Texture0, v_texCoord);</span><br><span class=\"line\">        gl_FragColor = c;</span><br><span class=\"line\"></span><br><span class=\"line\">        float temp = v_texCoord.x - time;</span><br><span class=\"line\">        if (temp &lt;= 0.0) &#123;</span><br><span class=\"line\">            float temp2 = abs(temp);</span><br><span class=\"line\">            if (temp2 &lt;= 0.2) &#123;</span><br><span class=\"line\">                gl_FragColor.w = 1.0 - temp2/0.2;</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                gl_FragColor.w = 0.0;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            gl_FragColor.w = 1.0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    `;</span><br><span class=\"line\">\t</span><br><span class=\"line\">// 下面开始是cocos的代码，来测试shader。</span><br><span class=\"line\">private _program:any;</span><br><span class=\"line\">private _time:number = 0;</span><br><span class=\"line\">    </span><br><span class=\"line\">start () &#123;</span><br><span class=\"line\">    this.testShader();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">testShader() &#123;</span><br><span class=\"line\">    let bgSp:cc.Sprite = this.bgNode.getChildByName(&quot;bg&quot;).getComponent(cc.Sprite);</span><br><span class=\"line\">    this._program = new cc.GLProgram();</span><br><span class=\"line\">    </span><br><span class=\"line\">    if (cc.sys.isNative) &#123;  </span><br><span class=\"line\">        this._program.initWithString(StoryHandlerScript.TRANSFER_VERT, StoryHandlerScript.TRANSFER_FRAG);</span><br><span class=\"line\">    &#125; else &#123;  </span><br><span class=\"line\">        this._program.initWithVertexShaderByteArray(StoryHandlerScript.TRANSFER_VERT, StoryHandlerScript.TRANSFER_FRAG);</span><br><span class=\"line\">        this._program.addAttribute(cc.macro.ATTRIBUTE_NAME_POSITION, cc.macro.VERTEX_ATTRIB_POSITION);  </span><br><span class=\"line\">        this._program.addAttribute(cc.macro.ATTRIBUTE_NAME_COLOR, cc.macro.VERTEX_ATTRIB_COLOR);  </span><br><span class=\"line\">        this._program.addAttribute(cc.macro.ATTRIBUTE_NAME_TEX_COORD, cc.macro.VERTEX_ATTRIB_TEX_COORDS);  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    this._program.link();  </span><br><span class=\"line\">    this._program.updateUniforms();</span><br><span class=\"line\">    this._program.use();</span><br><span class=\"line\"></span><br><span class=\"line\">    if (cc.sys.isNative) &#123;  </span><br><span class=\"line\">        var glProgram_state = cc.GLProgramState.getOrCreateWithGLProgram(this._program);</span><br><span class=\"line\">        glProgram_state.setUniformFloat( &quot;time&quot;, this._time );    </span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        let time = this._program.getUniformLocationForName(&quot;time&quot;);</span><br><span class=\"line\">        this._program.setUniformLocationWith1f(time, this._time);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    bgSp._sgNode.setShaderProgram(this._program);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 在update里来修改time的值</span><br><span class=\"line\">update(dt)&#123;</span><br><span class=\"line\">    this._time += 0.02;</span><br><span class=\"line\">    if (this._program) &#123;</span><br><span class=\"line\">        this._program.use();</span><br><span class=\"line\">        if (cc.sys.isNative) &#123;</span><br><span class=\"line\">            var glProgram_state = cc.GLProgramState.getOrCreateWithGLProgram(this._program);</span><br><span class=\"line\">            glProgram_state.setUniformFloat( &quot;time&quot;, this._time );    </span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            let time = this._program.getUniformLocationForName(&quot;time&quot;);</span><br><span class=\"line\">            this._program.setUniformLocationWith1f(time, this._time);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上就是所有的代码实现，逻辑很简单，同时有一些简单的注释，应该很好理解。</p>"},{"title":"javascript原型与继承","date":"2019-07-01T12:08:01.000Z","_content":"对于使用过基于类的语言 (如 Java 或 C++) 的开发人员来说，JavaScript 有点令人困惑，因为它是动态的，并且本身不提供一个 class 实现。（在 ES2015/ES6 中引入了 class 关键字，但那只是语法糖，JavaScript 仍然是基于原型的）。  \n\n当谈到继承时，JavaScript 只有一种结构：对象。每个实例对象（ object ）都有一个私有属性（称之为 __proto__ ）指向它的构造函数的原型对象（prototype ）。该原型对象也有一个自己的原型对象( __proto__ ) ，层层向上直到一个对象的原型对象为 null。根据定义，null 没有原型，并作为这个原型链中的最后一个环节。  \n\n几乎所有 JavaScript 中的对象都是位于原型链顶端的 Object 的实例。  \n\n尽管这种原型继承通常被认为是 JavaScript 的弱点之一，但是原型继承模型本身实际上比经典模型更强大。例如，在原型模型的基础上构建经典模型相当简单。  \n<!--more-->\n\n---\n### 基于原型链的继承\n#### 继承属性\nJavaScript 对象是动态的属性“包”（指其自己的属性）。JavaScript 对象有一个指向一个原型对象的链。当试图访问一个对象的属性时，它不仅仅在该对象上搜寻，还会搜寻该对象的原型，以及该对象的原型的原型，依次层层向上搜索，直到找到一个名字匹配的属性或到达原型链的末尾。  \n> 遵循ECMAScript标准，someObject.[[Prototype]] 符号是用于指向 someObject 的原型。从 ECMAScript 6 开始，[[Prototype]] 可以通过 Object.getPrototypeOf() 和 Object.setPrototypeOf() 访问器来访问。这个等同于 JavaScript 的非标准但许多浏览器实现的属性 __proto__。\n但它不应该与构造函数 func 的 prototype 属性相混淆。被构造函数创建的实例对象的 [[prototype]] 指向 func 的 prototype 属性。Object.prototype 属性表示 Object 的原型对象。\n\n这里演示当尝试访问属性时会发生什么：\n``` javascript\n// 让我们从一个自身拥有属性a和b的函数里创建一个对象o：\nlet f = function() {\n   this.a = 1;\n   this.b = 2;\n}\n/* 这么写也一样\nfunction f() {\n  this.a = 1;\n  this.b = 2;\n}\n*/\nlet o = new f(); // {a: 1, b: 2}\n\n// 在f函数的原型上定义属性\nf.prototype.b = 3;\nf.prototype.c = 4;\n\n// 不要在 f 函数的原型上直接定义 f.prototype = {b:3,c:4};这样会直接打破原型链\n// o.[[Prototype]] 有属性 b 和 c\n//  (其实就是 o.__proto__ 或者 o.constructor.prototype)\n// o.[[Prototype]].[[Prototype]] 是 Object.prototype.\n// 最后o.[[Prototype]].[[Prototype]].[[Prototype]]是null\n// 这就是原型链的末尾，即 null，\n// 根据定义，null 就是没有 [[Prototype]]。\n\n// 综上，整个原型链如下: \n\n// {a:1, b:2} ---> {b:3, c:4} ---> Object.prototype---> null\n\nconsole.log(o.a); // 1\n// a是o的自身属性吗？是的，该属性的值为 1\n\nconsole.log(o.b); // 2\n// b是o的自身属性吗？是的，该属性的值为 2\n// 原型上也有一个'b'属性，但是它不会被访问到。\n// 这种情况被称为\"属性遮蔽 (property shadowing)\"\n\nconsole.log(o.c); // 4\n// c是o的自身属性吗？不是，那看看它的原型上有没有\n// c是o.[[Prototype]]的属性吗？是的，该属性的值为 4\n\nconsole.log(o.d); // undefined\n// d 是 o 的自身属性吗？不是，那看看它的原型上有没有\n// d 是 o.[[Prototype]] 的属性吗？不是，那看看它的原型上有没有\n// o.[[Prototype]].[[Prototype]] 为 null，停止搜索\n// 找不到 d 属性，返回 undefined\n```\n\n#### 继承方法\nJavaScript 并没有其他基于类的语言所定义的“方法”。在 JavaScript 里，任何函数都可以添加到对象上作为对象的属性。函数的继承与其他的属性继承没有差别，包括上面的“属性遮蔽”（这种情况相当于其他语言的方法重写）。  \n\n当继承的函数被调用时，this 指向的是当前继承的对象，而不是继承的函数所在的原型对象。\n```\nvar o = {\n  a: 2,\n  m: function(){\n    return this.a + 1;\n  }\n};\n\nconsole.log(o.m()); // 3\n// 当调用 o.m 时，'this' 指向了 o.\n\nvar p = Object.create(o);\n// p是一个继承自 o 的对象\n\np.a = 4; // 创建 p 的自身属性 'a'\nconsole.log(p.m()); // 5\n// 调用 p.m 时，'this' 指向了 p\n// 又因为 p 继承了 o 的 m 函数\n// 所以，此时的 'this.a' 即 p.a，就是 p 的自身属性 'a'\n```\n### 在 JavaScript 中使用原型\n下去，来仔细分析一下这些应用场景下， JavaScript 在背后做了哪些事情。  \n\n正如之前提到的，在 JavaScript 中，函数（function）是允许拥有属性的。所有的函数会有一个特别的属性 —— prototype 。请注意，以下的代码是独立的（出于严谨，假定页面没有其他的JavaScript代码）。为了最佳的学习体验，我们强烈建议阁下打开浏览器的控制台（在Chrome和火狐浏览器中，按Ctrl+Shift+I即可），进入“console”选项卡，然后把如下的JavaScript代码复制粘贴到窗口中，最后通过按下回车键运行代码。\n```\nfunction doSomething(){}\nconsole.log( doSomething.prototype );\n// 和声明函数的方式无关，\n// JavaScript 中的函数永远有一个默认原型属性。\nvar doSomething = function(){};\nconsole.log( doSomething.prototype );\n```\n在控制台显示的JavaScript代码块中，我们可以看到doSomething函数的一个默认属性prototype。而这段代码运行之后，控制台应该显示类似如下的结果：\n```\n{\n    constructor: ƒ doSomething(),\n    __proto__: {\n        constructor: ƒ Object(),\n        hasOwnProperty: ƒ hasOwnProperty(),\n        isPrototypeOf: ƒ isPrototypeOf(),\n        propertyIsEnumerable: ƒ propertyIsEnumerable(),\n        toLocaleString: ƒ toLocaleString(),\n        toString: ƒ toString(),\n        valueOf: ƒ valueOf()\n    }\n}\n```\n我们可以给doSomething函数的原型对象添加新属性，如下：\n```\nfunction doSomething(){}\ndoSomething.prototype.foo = \"bar\";\nconsole.log( doSomething.prototype );\n```\n可以看到运行后的结果如下：\n```\n{\n    foo: \"bar\",\n    constructor: ƒ doSomething(),\n    __proto__: {\n        constructor: ƒ Object(),\n        hasOwnProperty: ƒ hasOwnProperty(),\n        isPrototypeOf: ƒ isPrototypeOf(),\n        propertyIsEnumerable: ƒ propertyIsEnumerable(),\n        toLocaleString: ƒ toLocaleString(),\n        toString: ƒ toString(),\n        valueOf: ƒ valueOf()\n    }\n}\n```\n现在我们可以通过new操作符来创建基于这个原型对象的doSomething实例。使用new操作符，只需在调用doSomething函数语句之前添加new。这样，便可以获得这个函数的一个实例对象。一些属性就可以添加到该原型对象中。  \n\n请尝试运行以下代码：\n```\nfunction doSomething(){}\ndoSomething.prototype.foo = \"bar\"; // add a property onto the prototype\nvar doSomeInstancing = new doSomething();\ndoSomeInstancing.prop = \"some value\"; // add a property onto the object\nconsole.log( doSomeInstancing );\n```\n运行的结果类似于以下的语句。\n```\n{\n    prop: \"some value\",\n    __proto__: {\n        foo: \"bar\",\n        constructor: ƒ doSomething(),\n        __proto__: {\n            constructor: ƒ Object(),\n            hasOwnProperty: ƒ hasOwnProperty(),\n            isPrototypeOf: ƒ isPrototypeOf(),\n            propertyIsEnumerable: ƒ propertyIsEnumerable(),\n            toLocaleString: ƒ toLocaleString(),\n            toString: ƒ toString(),\n            valueOf: ƒ valueOf()\n        }\n    }\n}\n```\n如上所示, doSomeInstancing 中的__proto__是 doSomething.prototype. 但这是做什么的呢？当你访问doSomeInstancing 中的一个属性，浏览器首先会查看doSomeInstancing 中是否存在这个属性。  \n\n如果 doSomeInstancing 不包含属性信息, 那么浏览器会在 doSomeInstancing 的 __proto__ 中进行查找(同 doSomething.prototype). 如属性在 doSomeInstancing 的 __proto__ 中查找到，则使用 doSomeInstancing 中 __proto__ 的属性。  \n\n否则，如果 doSomeInstancing 中 __proto__ 不具有该属性，则检查doSomeInstancing 的 __proto__ 的  __proto__ 是否具有该属性。默认情况下，任何函数的原型属性 __proto__ 都是 window.Object.prototype. 因此, 通过doSomeInstancing 的 __proto__ 的  __proto__  ( 同 doSomething.prototype 的 __proto__ (同  Object.prototype)) 来查找要搜索的属性。  \n\n如果属性不存在 doSomeInstancing 的 __proto__ 的  __proto__ 中， 那么就会在doSomeInstancing 的 __proto__ 的  __proto__ 的  __proto__ 中查找。然而, 这里存在个问题：doSomeInstancing 的 __proto__ 的  __proto__ 的  __proto__ 其实不存在。因此，只有这样，在 __proto__ 的整个原型链被查看之后，这里没有更多的 __proto__ ， 浏览器断言该属性不存在，并给出属性值为 undefined 的结论。  \n\n让我们在控制台窗口中输入更多的代码，如下：\n```\nfunction doSomething(){}\ndoSomething.prototype.foo = \"bar\";\nvar doSomeInstancing = new doSomething();\ndoSomeInstancing.prop = \"some value\";\nconsole.log(\"doSomeInstancing.prop:      \" + doSomeInstancing.prop);\nconsole.log(\"doSomeInstancing.foo:       \" + doSomeInstancing.foo);\nconsole.log(\"doSomething.prop:           \" + doSomething.prop);\nconsole.log(\"doSomething.foo:            \" + doSomething.foo);\nconsole.log(\"doSomething.prototype.prop: \" + doSomething.prototype.prop);\nconsole.log(\"doSomething.prototype.foo:  \" + doSomething.prototype.foo);\n```\n结果如下：\n```\ndoSomeInstancing.prop:      some value\ndoSomeInstancing.foo:       bar\ndoSomething.prop:           undefined\ndoSomething.foo:            undefined\ndoSomething.prototype.prop: undefined\ndoSomething.prototype.foo:  bar\n```\n\n#### 性能\n在原型链上查找属性比较耗时，对性能有副作用，这在性能要求苛刻的情况下很重要。另外，试图访问不存在的属性时会遍历整个原型链。  \n\n遍历对象的属性时，原型链上的每个可枚举属性都会被枚举出来。要检查对象是否具有自己定义的属性，而不是其原型链上的某个属性，则必须使用所有对象从 Object.prototype 继承的 hasOwnProperty 方法。下面给出一个具体的例子来说明它：\n```\nconsole.log(g.hasOwnProperty('vertices'));\n// true\n\nconsole.log(g.hasOwnProperty('nope'));\n// false\n\nconsole.log(g.hasOwnProperty('addVertex'));\n// false\n\nconsole.log(g.__proto__.hasOwnProperty('addVertex'));\n// true\n```\nhasOwnProperty 是 JavaScript 中唯一一个处理属性并且不会遍历原型链的方法。（译者注：原文如此。另一种这样的方法：Object.keys()）  \n\n注意：检查属性是否为 undefined 是不能够检查其是否存在的。该属性可能已存在，但其值恰好被设置成了 undefined。\n\n### 结论\n在编写使用复杂代码之前，理解原型继承模型是至关重要的。此外，请注意代码中原型链的长度，并在必要时将其分解，以避免可能的性能问题。此外，原生原型不应该被扩展，除非它是为了与新的 JavaScript 特性兼容。  \n### 示例\nB 继承自 A：\n```\nfunction A(a){\n  this.varA = a;\n}\n\n// 以上函数 A 的定义中，既然 A.prototype.varA 总是会被 this.varA 遮蔽，\n// 那么将 varA 加入到原型（prototype）中的目的是什么？\nA.prototype = {\n  varA : null,\n/*\n既然它没有任何作用，干嘛不将 varA 从原型（prototype）去掉 ? \n也许作为一种在隐藏类中优化分配空间的考虑 ?\nhttps://developers.google.com/speed/articles/optimizing-javascript \n如果varA并不是在每个实例中都被初始化，那这样做将是有效果的。\n*/\n  doSomething : function(){\n    // ...\n  }\n}\n\nfunction B(a, b){\n  A.call(this, a);\n  this.varB = b;\n}\nB.prototype = Object.create(A.prototype, {\n  varB : {\n    value: null, \n    enumerable: true, \n    configurable: true, \n    writable: true \n  },\n  doSomething : { \n    value: function(){ // override\n      A.prototype.doSomething.apply(this, arguments); \n      // call super\n      // ...\n    },\n    enumerable: true,\n    configurable: true, \n    writable: true\n  }\n});\nB.prototype.constructor = B;\n\nvar b = new B();\nb.doSomething();\n```\n[原文链接](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain)","source":"_posts/javascript-propertype.md","raw":"---\ntitle: javascript原型与继承\ndate: 2019-07-01 20:08:01\ntags: [prototype, javascript]\ncategories: javascript\n---\n对于使用过基于类的语言 (如 Java 或 C++) 的开发人员来说，JavaScript 有点令人困惑，因为它是动态的，并且本身不提供一个 class 实现。（在 ES2015/ES6 中引入了 class 关键字，但那只是语法糖，JavaScript 仍然是基于原型的）。  \n\n当谈到继承时，JavaScript 只有一种结构：对象。每个实例对象（ object ）都有一个私有属性（称之为 __proto__ ）指向它的构造函数的原型对象（prototype ）。该原型对象也有一个自己的原型对象( __proto__ ) ，层层向上直到一个对象的原型对象为 null。根据定义，null 没有原型，并作为这个原型链中的最后一个环节。  \n\n几乎所有 JavaScript 中的对象都是位于原型链顶端的 Object 的实例。  \n\n尽管这种原型继承通常被认为是 JavaScript 的弱点之一，但是原型继承模型本身实际上比经典模型更强大。例如，在原型模型的基础上构建经典模型相当简单。  \n<!--more-->\n\n---\n### 基于原型链的继承\n#### 继承属性\nJavaScript 对象是动态的属性“包”（指其自己的属性）。JavaScript 对象有一个指向一个原型对象的链。当试图访问一个对象的属性时，它不仅仅在该对象上搜寻，还会搜寻该对象的原型，以及该对象的原型的原型，依次层层向上搜索，直到找到一个名字匹配的属性或到达原型链的末尾。  \n> 遵循ECMAScript标准，someObject.[[Prototype]] 符号是用于指向 someObject 的原型。从 ECMAScript 6 开始，[[Prototype]] 可以通过 Object.getPrototypeOf() 和 Object.setPrototypeOf() 访问器来访问。这个等同于 JavaScript 的非标准但许多浏览器实现的属性 __proto__。\n但它不应该与构造函数 func 的 prototype 属性相混淆。被构造函数创建的实例对象的 [[prototype]] 指向 func 的 prototype 属性。Object.prototype 属性表示 Object 的原型对象。\n\n这里演示当尝试访问属性时会发生什么：\n``` javascript\n// 让我们从一个自身拥有属性a和b的函数里创建一个对象o：\nlet f = function() {\n   this.a = 1;\n   this.b = 2;\n}\n/* 这么写也一样\nfunction f() {\n  this.a = 1;\n  this.b = 2;\n}\n*/\nlet o = new f(); // {a: 1, b: 2}\n\n// 在f函数的原型上定义属性\nf.prototype.b = 3;\nf.prototype.c = 4;\n\n// 不要在 f 函数的原型上直接定义 f.prototype = {b:3,c:4};这样会直接打破原型链\n// o.[[Prototype]] 有属性 b 和 c\n//  (其实就是 o.__proto__ 或者 o.constructor.prototype)\n// o.[[Prototype]].[[Prototype]] 是 Object.prototype.\n// 最后o.[[Prototype]].[[Prototype]].[[Prototype]]是null\n// 这就是原型链的末尾，即 null，\n// 根据定义，null 就是没有 [[Prototype]]。\n\n// 综上，整个原型链如下: \n\n// {a:1, b:2} ---> {b:3, c:4} ---> Object.prototype---> null\n\nconsole.log(o.a); // 1\n// a是o的自身属性吗？是的，该属性的值为 1\n\nconsole.log(o.b); // 2\n// b是o的自身属性吗？是的，该属性的值为 2\n// 原型上也有一个'b'属性，但是它不会被访问到。\n// 这种情况被称为\"属性遮蔽 (property shadowing)\"\n\nconsole.log(o.c); // 4\n// c是o的自身属性吗？不是，那看看它的原型上有没有\n// c是o.[[Prototype]]的属性吗？是的，该属性的值为 4\n\nconsole.log(o.d); // undefined\n// d 是 o 的自身属性吗？不是，那看看它的原型上有没有\n// d 是 o.[[Prototype]] 的属性吗？不是，那看看它的原型上有没有\n// o.[[Prototype]].[[Prototype]] 为 null，停止搜索\n// 找不到 d 属性，返回 undefined\n```\n\n#### 继承方法\nJavaScript 并没有其他基于类的语言所定义的“方法”。在 JavaScript 里，任何函数都可以添加到对象上作为对象的属性。函数的继承与其他的属性继承没有差别，包括上面的“属性遮蔽”（这种情况相当于其他语言的方法重写）。  \n\n当继承的函数被调用时，this 指向的是当前继承的对象，而不是继承的函数所在的原型对象。\n```\nvar o = {\n  a: 2,\n  m: function(){\n    return this.a + 1;\n  }\n};\n\nconsole.log(o.m()); // 3\n// 当调用 o.m 时，'this' 指向了 o.\n\nvar p = Object.create(o);\n// p是一个继承自 o 的对象\n\np.a = 4; // 创建 p 的自身属性 'a'\nconsole.log(p.m()); // 5\n// 调用 p.m 时，'this' 指向了 p\n// 又因为 p 继承了 o 的 m 函数\n// 所以，此时的 'this.a' 即 p.a，就是 p 的自身属性 'a'\n```\n### 在 JavaScript 中使用原型\n下去，来仔细分析一下这些应用场景下， JavaScript 在背后做了哪些事情。  \n\n正如之前提到的，在 JavaScript 中，函数（function）是允许拥有属性的。所有的函数会有一个特别的属性 —— prototype 。请注意，以下的代码是独立的（出于严谨，假定页面没有其他的JavaScript代码）。为了最佳的学习体验，我们强烈建议阁下打开浏览器的控制台（在Chrome和火狐浏览器中，按Ctrl+Shift+I即可），进入“console”选项卡，然后把如下的JavaScript代码复制粘贴到窗口中，最后通过按下回车键运行代码。\n```\nfunction doSomething(){}\nconsole.log( doSomething.prototype );\n// 和声明函数的方式无关，\n// JavaScript 中的函数永远有一个默认原型属性。\nvar doSomething = function(){};\nconsole.log( doSomething.prototype );\n```\n在控制台显示的JavaScript代码块中，我们可以看到doSomething函数的一个默认属性prototype。而这段代码运行之后，控制台应该显示类似如下的结果：\n```\n{\n    constructor: ƒ doSomething(),\n    __proto__: {\n        constructor: ƒ Object(),\n        hasOwnProperty: ƒ hasOwnProperty(),\n        isPrototypeOf: ƒ isPrototypeOf(),\n        propertyIsEnumerable: ƒ propertyIsEnumerable(),\n        toLocaleString: ƒ toLocaleString(),\n        toString: ƒ toString(),\n        valueOf: ƒ valueOf()\n    }\n}\n```\n我们可以给doSomething函数的原型对象添加新属性，如下：\n```\nfunction doSomething(){}\ndoSomething.prototype.foo = \"bar\";\nconsole.log( doSomething.prototype );\n```\n可以看到运行后的结果如下：\n```\n{\n    foo: \"bar\",\n    constructor: ƒ doSomething(),\n    __proto__: {\n        constructor: ƒ Object(),\n        hasOwnProperty: ƒ hasOwnProperty(),\n        isPrototypeOf: ƒ isPrototypeOf(),\n        propertyIsEnumerable: ƒ propertyIsEnumerable(),\n        toLocaleString: ƒ toLocaleString(),\n        toString: ƒ toString(),\n        valueOf: ƒ valueOf()\n    }\n}\n```\n现在我们可以通过new操作符来创建基于这个原型对象的doSomething实例。使用new操作符，只需在调用doSomething函数语句之前添加new。这样，便可以获得这个函数的一个实例对象。一些属性就可以添加到该原型对象中。  \n\n请尝试运行以下代码：\n```\nfunction doSomething(){}\ndoSomething.prototype.foo = \"bar\"; // add a property onto the prototype\nvar doSomeInstancing = new doSomething();\ndoSomeInstancing.prop = \"some value\"; // add a property onto the object\nconsole.log( doSomeInstancing );\n```\n运行的结果类似于以下的语句。\n```\n{\n    prop: \"some value\",\n    __proto__: {\n        foo: \"bar\",\n        constructor: ƒ doSomething(),\n        __proto__: {\n            constructor: ƒ Object(),\n            hasOwnProperty: ƒ hasOwnProperty(),\n            isPrototypeOf: ƒ isPrototypeOf(),\n            propertyIsEnumerable: ƒ propertyIsEnumerable(),\n            toLocaleString: ƒ toLocaleString(),\n            toString: ƒ toString(),\n            valueOf: ƒ valueOf()\n        }\n    }\n}\n```\n如上所示, doSomeInstancing 中的__proto__是 doSomething.prototype. 但这是做什么的呢？当你访问doSomeInstancing 中的一个属性，浏览器首先会查看doSomeInstancing 中是否存在这个属性。  \n\n如果 doSomeInstancing 不包含属性信息, 那么浏览器会在 doSomeInstancing 的 __proto__ 中进行查找(同 doSomething.prototype). 如属性在 doSomeInstancing 的 __proto__ 中查找到，则使用 doSomeInstancing 中 __proto__ 的属性。  \n\n否则，如果 doSomeInstancing 中 __proto__ 不具有该属性，则检查doSomeInstancing 的 __proto__ 的  __proto__ 是否具有该属性。默认情况下，任何函数的原型属性 __proto__ 都是 window.Object.prototype. 因此, 通过doSomeInstancing 的 __proto__ 的  __proto__  ( 同 doSomething.prototype 的 __proto__ (同  Object.prototype)) 来查找要搜索的属性。  \n\n如果属性不存在 doSomeInstancing 的 __proto__ 的  __proto__ 中， 那么就会在doSomeInstancing 的 __proto__ 的  __proto__ 的  __proto__ 中查找。然而, 这里存在个问题：doSomeInstancing 的 __proto__ 的  __proto__ 的  __proto__ 其实不存在。因此，只有这样，在 __proto__ 的整个原型链被查看之后，这里没有更多的 __proto__ ， 浏览器断言该属性不存在，并给出属性值为 undefined 的结论。  \n\n让我们在控制台窗口中输入更多的代码，如下：\n```\nfunction doSomething(){}\ndoSomething.prototype.foo = \"bar\";\nvar doSomeInstancing = new doSomething();\ndoSomeInstancing.prop = \"some value\";\nconsole.log(\"doSomeInstancing.prop:      \" + doSomeInstancing.prop);\nconsole.log(\"doSomeInstancing.foo:       \" + doSomeInstancing.foo);\nconsole.log(\"doSomething.prop:           \" + doSomething.prop);\nconsole.log(\"doSomething.foo:            \" + doSomething.foo);\nconsole.log(\"doSomething.prototype.prop: \" + doSomething.prototype.prop);\nconsole.log(\"doSomething.prototype.foo:  \" + doSomething.prototype.foo);\n```\n结果如下：\n```\ndoSomeInstancing.prop:      some value\ndoSomeInstancing.foo:       bar\ndoSomething.prop:           undefined\ndoSomething.foo:            undefined\ndoSomething.prototype.prop: undefined\ndoSomething.prototype.foo:  bar\n```\n\n#### 性能\n在原型链上查找属性比较耗时，对性能有副作用，这在性能要求苛刻的情况下很重要。另外，试图访问不存在的属性时会遍历整个原型链。  \n\n遍历对象的属性时，原型链上的每个可枚举属性都会被枚举出来。要检查对象是否具有自己定义的属性，而不是其原型链上的某个属性，则必须使用所有对象从 Object.prototype 继承的 hasOwnProperty 方法。下面给出一个具体的例子来说明它：\n```\nconsole.log(g.hasOwnProperty('vertices'));\n// true\n\nconsole.log(g.hasOwnProperty('nope'));\n// false\n\nconsole.log(g.hasOwnProperty('addVertex'));\n// false\n\nconsole.log(g.__proto__.hasOwnProperty('addVertex'));\n// true\n```\nhasOwnProperty 是 JavaScript 中唯一一个处理属性并且不会遍历原型链的方法。（译者注：原文如此。另一种这样的方法：Object.keys()）  \n\n注意：检查属性是否为 undefined 是不能够检查其是否存在的。该属性可能已存在，但其值恰好被设置成了 undefined。\n\n### 结论\n在编写使用复杂代码之前，理解原型继承模型是至关重要的。此外，请注意代码中原型链的长度，并在必要时将其分解，以避免可能的性能问题。此外，原生原型不应该被扩展，除非它是为了与新的 JavaScript 特性兼容。  \n### 示例\nB 继承自 A：\n```\nfunction A(a){\n  this.varA = a;\n}\n\n// 以上函数 A 的定义中，既然 A.prototype.varA 总是会被 this.varA 遮蔽，\n// 那么将 varA 加入到原型（prototype）中的目的是什么？\nA.prototype = {\n  varA : null,\n/*\n既然它没有任何作用，干嘛不将 varA 从原型（prototype）去掉 ? \n也许作为一种在隐藏类中优化分配空间的考虑 ?\nhttps://developers.google.com/speed/articles/optimizing-javascript \n如果varA并不是在每个实例中都被初始化，那这样做将是有效果的。\n*/\n  doSomething : function(){\n    // ...\n  }\n}\n\nfunction B(a, b){\n  A.call(this, a);\n  this.varB = b;\n}\nB.prototype = Object.create(A.prototype, {\n  varB : {\n    value: null, \n    enumerable: true, \n    configurable: true, \n    writable: true \n  },\n  doSomething : { \n    value: function(){ // override\n      A.prototype.doSomething.apply(this, arguments); \n      // call super\n      // ...\n    },\n    enumerable: true,\n    configurable: true, \n    writable: true\n  }\n});\nB.prototype.constructor = B;\n\nvar b = new B();\nb.doSomething();\n```\n[原文链接](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain)","slug":"javascript-propertype","published":1,"updated":"2019-07-01T13:00:53.271Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjycv1m3q000qok9mzw87e7oa","content":"<p>对于使用过基于类的语言 (如 Java 或 C++) 的开发人员来说，JavaScript 有点令人困惑，因为它是动态的，并且本身不提供一个 class 实现。（在 ES2015/ES6 中引入了 class 关键字，但那只是语法糖，JavaScript 仍然是基于原型的）。  </p>\n<p>当谈到继承时，JavaScript 只有一种结构：对象。每个实例对象（ object ）都有一个私有属性（称之为 <strong>proto</strong> ）指向它的构造函数的原型对象（prototype ）。该原型对象也有一个自己的原型对象( <strong>proto</strong> ) ，层层向上直到一个对象的原型对象为 null。根据定义，null 没有原型，并作为这个原型链中的最后一个环节。  </p>\n<p>几乎所有 JavaScript 中的对象都是位于原型链顶端的 Object 的实例。  </p>\n<p>尽管这种原型继承通常被认为是 JavaScript 的弱点之一，但是原型继承模型本身实际上比经典模型更强大。例如，在原型模型的基础上构建经典模型相当简单。<br><a id=\"more\"></a></p>\n<hr>\n<h3 id=\"基于原型链的继承\"><a href=\"#基于原型链的继承\" class=\"headerlink\" title=\"基于原型链的继承\"></a>基于原型链的继承</h3><h4 id=\"继承属性\"><a href=\"#继承属性\" class=\"headerlink\" title=\"继承属性\"></a>继承属性</h4><p>JavaScript 对象是动态的属性“包”（指其自己的属性）。JavaScript 对象有一个指向一个原型对象的链。当试图访问一个对象的属性时，它不仅仅在该对象上搜寻，还会搜寻该对象的原型，以及该对象的原型的原型，依次层层向上搜索，直到找到一个名字匹配的属性或到达原型链的末尾。  </p>\n<blockquote>\n<p>遵循ECMAScript标准，someObject.[[Prototype]] 符号是用于指向 someObject 的原型。从 ECMAScript 6 开始，[[Prototype]] 可以通过 Object.getPrototypeOf() 和 Object.setPrototypeOf() 访问器来访问。这个等同于 JavaScript 的非标准但许多浏览器实现的属性 <strong>proto</strong>。<br>但它不应该与构造函数 func 的 prototype 属性相混淆。被构造函数创建的实例对象的 [[prototype]] 指向 func 的 prototype 属性。Object.prototype 属性表示 Object 的原型对象。</p>\n</blockquote>\n<p>这里演示当尝试访问属性时会发生什么：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 让我们从一个自身拥有属性a和b的函数里创建一个对象o：</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> f = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.a = <span class=\"number\">1</span>;</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.b = <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 这么写也一样</span></span><br><span class=\"line\"><span class=\"comment\">function f() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  this.a = 1;</span></span><br><span class=\"line\"><span class=\"comment\">  this.b = 2;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> o = <span class=\"keyword\">new</span> f(); <span class=\"comment\">// &#123;a: 1, b: 2&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在f函数的原型上定义属性</span></span><br><span class=\"line\">f.prototype.b = <span class=\"number\">3</span>;</span><br><span class=\"line\">f.prototype.c = <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不要在 f 函数的原型上直接定义 f.prototype = &#123;b:3,c:4&#125;;这样会直接打破原型链</span></span><br><span class=\"line\"><span class=\"comment\">// o.[[Prototype]] 有属性 b 和 c</span></span><br><span class=\"line\"><span class=\"comment\">//  (其实就是 o.__proto__ 或者 o.constructor.prototype)</span></span><br><span class=\"line\"><span class=\"comment\">// o.[[Prototype]].[[Prototype]] 是 Object.prototype.</span></span><br><span class=\"line\"><span class=\"comment\">// 最后o.[[Prototype]].[[Prototype]].[[Prototype]]是null</span></span><br><span class=\"line\"><span class=\"comment\">// 这就是原型链的末尾，即 null，</span></span><br><span class=\"line\"><span class=\"comment\">// 根据定义，null 就是没有 [[Prototype]]。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 综上，整个原型链如下: </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#123;a:1, b:2&#125; ---&gt; &#123;b:3, c:4&#125; ---&gt; Object.prototype---&gt; null</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o.a); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// a是o的自身属性吗？是的，该属性的值为 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o.b); <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// b是o的自身属性吗？是的，该属性的值为 2</span></span><br><span class=\"line\"><span class=\"comment\">// 原型上也有一个'b'属性，但是它不会被访问到。</span></span><br><span class=\"line\"><span class=\"comment\">// 这种情况被称为\"属性遮蔽 (property shadowing)\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o.c); <span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"comment\">// c是o的自身属性吗？不是，那看看它的原型上有没有</span></span><br><span class=\"line\"><span class=\"comment\">// c是o.[[Prototype]]的属性吗？是的，该属性的值为 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o.d); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"comment\">// d 是 o 的自身属性吗？不是，那看看它的原型上有没有</span></span><br><span class=\"line\"><span class=\"comment\">// d 是 o.[[Prototype]] 的属性吗？不是，那看看它的原型上有没有</span></span><br><span class=\"line\"><span class=\"comment\">// o.[[Prototype]].[[Prototype]] 为 null，停止搜索</span></span><br><span class=\"line\"><span class=\"comment\">// 找不到 d 属性，返回 undefined</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"继承方法\"><a href=\"#继承方法\" class=\"headerlink\" title=\"继承方法\"></a>继承方法</h4><p>JavaScript 并没有其他基于类的语言所定义的“方法”。在 JavaScript 里，任何函数都可以添加到对象上作为对象的属性。函数的继承与其他的属性继承没有差别，包括上面的“属性遮蔽”（这种情况相当于其他语言的方法重写）。  </p>\n<p>当继承的函数被调用时，this 指向的是当前继承的对象，而不是继承的函数所在的原型对象。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var o = &#123;</span><br><span class=\"line\">  a: 2,</span><br><span class=\"line\">  m: function()&#123;</span><br><span class=\"line\">    return this.a + 1;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(o.m()); // 3</span><br><span class=\"line\">// 当调用 o.m 时，&apos;this&apos; 指向了 o.</span><br><span class=\"line\"></span><br><span class=\"line\">var p = Object.create(o);</span><br><span class=\"line\">// p是一个继承自 o 的对象</span><br><span class=\"line\"></span><br><span class=\"line\">p.a = 4; // 创建 p 的自身属性 &apos;a&apos;</span><br><span class=\"line\">console.log(p.m()); // 5</span><br><span class=\"line\">// 调用 p.m 时，&apos;this&apos; 指向了 p</span><br><span class=\"line\">// 又因为 p 继承了 o 的 m 函数</span><br><span class=\"line\">// 所以，此时的 &apos;this.a&apos; 即 p.a，就是 p 的自身属性 &apos;a&apos;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"在-JavaScript-中使用原型\"><a href=\"#在-JavaScript-中使用原型\" class=\"headerlink\" title=\"在 JavaScript 中使用原型\"></a>在 JavaScript 中使用原型</h3><p>下去，来仔细分析一下这些应用场景下， JavaScript 在背后做了哪些事情。  </p>\n<p>正如之前提到的，在 JavaScript 中，函数（function）是允许拥有属性的。所有的函数会有一个特别的属性 —— prototype 。请注意，以下的代码是独立的（出于严谨，假定页面没有其他的JavaScript代码）。为了最佳的学习体验，我们强烈建议阁下打开浏览器的控制台（在Chrome和火狐浏览器中，按Ctrl+Shift+I即可），进入“console”选项卡，然后把如下的JavaScript代码复制粘贴到窗口中，最后通过按下回车键运行代码。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function doSomething()&#123;&#125;</span><br><span class=\"line\">console.log( doSomething.prototype );</span><br><span class=\"line\">// 和声明函数的方式无关，</span><br><span class=\"line\">// JavaScript 中的函数永远有一个默认原型属性。</span><br><span class=\"line\">var doSomething = function()&#123;&#125;;</span><br><span class=\"line\">console.log( doSomething.prototype );</span><br></pre></td></tr></table></figure></p>\n<p>在控制台显示的JavaScript代码块中，我们可以看到doSomething函数的一个默认属性prototype。而这段代码运行之后，控制台应该显示类似如下的结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    constructor: ƒ doSomething(),</span><br><span class=\"line\">    __proto__: &#123;</span><br><span class=\"line\">        constructor: ƒ Object(),</span><br><span class=\"line\">        hasOwnProperty: ƒ hasOwnProperty(),</span><br><span class=\"line\">        isPrototypeOf: ƒ isPrototypeOf(),</span><br><span class=\"line\">        propertyIsEnumerable: ƒ propertyIsEnumerable(),</span><br><span class=\"line\">        toLocaleString: ƒ toLocaleString(),</span><br><span class=\"line\">        toString: ƒ toString(),</span><br><span class=\"line\">        valueOf: ƒ valueOf()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们可以给doSomething函数的原型对象添加新属性，如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function doSomething()&#123;&#125;</span><br><span class=\"line\">doSomething.prototype.foo = &quot;bar&quot;;</span><br><span class=\"line\">console.log( doSomething.prototype );</span><br></pre></td></tr></table></figure></p>\n<p>可以看到运行后的结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    foo: &quot;bar&quot;,</span><br><span class=\"line\">    constructor: ƒ doSomething(),</span><br><span class=\"line\">    __proto__: &#123;</span><br><span class=\"line\">        constructor: ƒ Object(),</span><br><span class=\"line\">        hasOwnProperty: ƒ hasOwnProperty(),</span><br><span class=\"line\">        isPrototypeOf: ƒ isPrototypeOf(),</span><br><span class=\"line\">        propertyIsEnumerable: ƒ propertyIsEnumerable(),</span><br><span class=\"line\">        toLocaleString: ƒ toLocaleString(),</span><br><span class=\"line\">        toString: ƒ toString(),</span><br><span class=\"line\">        valueOf: ƒ valueOf()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>现在我们可以通过new操作符来创建基于这个原型对象的doSomething实例。使用new操作符，只需在调用doSomething函数语句之前添加new。这样，便可以获得这个函数的一个实例对象。一些属性就可以添加到该原型对象中。  </p>\n<p>请尝试运行以下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function doSomething()&#123;&#125;</span><br><span class=\"line\">doSomething.prototype.foo = &quot;bar&quot;; // add a property onto the prototype</span><br><span class=\"line\">var doSomeInstancing = new doSomething();</span><br><span class=\"line\">doSomeInstancing.prop = &quot;some value&quot;; // add a property onto the object</span><br><span class=\"line\">console.log( doSomeInstancing );</span><br></pre></td></tr></table></figure></p>\n<p>运行的结果类似于以下的语句。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    prop: &quot;some value&quot;,</span><br><span class=\"line\">    __proto__: &#123;</span><br><span class=\"line\">        foo: &quot;bar&quot;,</span><br><span class=\"line\">        constructor: ƒ doSomething(),</span><br><span class=\"line\">        __proto__: &#123;</span><br><span class=\"line\">            constructor: ƒ Object(),</span><br><span class=\"line\">            hasOwnProperty: ƒ hasOwnProperty(),</span><br><span class=\"line\">            isPrototypeOf: ƒ isPrototypeOf(),</span><br><span class=\"line\">            propertyIsEnumerable: ƒ propertyIsEnumerable(),</span><br><span class=\"line\">            toLocaleString: ƒ toLocaleString(),</span><br><span class=\"line\">            toString: ƒ toString(),</span><br><span class=\"line\">            valueOf: ƒ valueOf()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如上所示, doSomeInstancing 中的<strong>proto</strong>是 doSomething.prototype. 但这是做什么的呢？当你访问doSomeInstancing 中的一个属性，浏览器首先会查看doSomeInstancing 中是否存在这个属性。  </p>\n<p>如果 doSomeInstancing 不包含属性信息, 那么浏览器会在 doSomeInstancing 的 <strong>proto</strong> 中进行查找(同 doSomething.prototype). 如属性在 doSomeInstancing 的 <strong>proto</strong> 中查找到，则使用 doSomeInstancing 中 <strong>proto</strong> 的属性。  </p>\n<p>否则，如果 doSomeInstancing 中 <strong>proto</strong> 不具有该属性，则检查doSomeInstancing 的 <strong>proto</strong> 的  <strong>proto</strong> 是否具有该属性。默认情况下，任何函数的原型属性 <strong>proto</strong> 都是 window.Object.prototype. 因此, 通过doSomeInstancing 的 <strong>proto</strong> 的  <strong>proto</strong>  ( 同 doSomething.prototype 的 <strong>proto</strong> (同  Object.prototype)) 来查找要搜索的属性。  </p>\n<p>如果属性不存在 doSomeInstancing 的 <strong>proto</strong> 的  <strong>proto</strong> 中， 那么就会在doSomeInstancing 的 <strong>proto</strong> 的  <strong>proto</strong> 的  <strong>proto</strong> 中查找。然而, 这里存在个问题：doSomeInstancing 的 <strong>proto</strong> 的  <strong>proto</strong> 的  <strong>proto</strong> 其实不存在。因此，只有这样，在 <strong>proto</strong> 的整个原型链被查看之后，这里没有更多的 <strong>proto</strong> ， 浏览器断言该属性不存在，并给出属性值为 undefined 的结论。  </p>\n<p>让我们在控制台窗口中输入更多的代码，如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function doSomething()&#123;&#125;</span><br><span class=\"line\">doSomething.prototype.foo = &quot;bar&quot;;</span><br><span class=\"line\">var doSomeInstancing = new doSomething();</span><br><span class=\"line\">doSomeInstancing.prop = &quot;some value&quot;;</span><br><span class=\"line\">console.log(&quot;doSomeInstancing.prop:      &quot; + doSomeInstancing.prop);</span><br><span class=\"line\">console.log(&quot;doSomeInstancing.foo:       &quot; + doSomeInstancing.foo);</span><br><span class=\"line\">console.log(&quot;doSomething.prop:           &quot; + doSomething.prop);</span><br><span class=\"line\">console.log(&quot;doSomething.foo:            &quot; + doSomething.foo);</span><br><span class=\"line\">console.log(&quot;doSomething.prototype.prop: &quot; + doSomething.prototype.prop);</span><br><span class=\"line\">console.log(&quot;doSomething.prototype.foo:  &quot; + doSomething.prototype.foo);</span><br></pre></td></tr></table></figure></p>\n<p>结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doSomeInstancing.prop:      some value</span><br><span class=\"line\">doSomeInstancing.foo:       bar</span><br><span class=\"line\">doSomething.prop:           undefined</span><br><span class=\"line\">doSomething.foo:            undefined</span><br><span class=\"line\">doSomething.prototype.prop: undefined</span><br><span class=\"line\">doSomething.prototype.foo:  bar</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"性能\"><a href=\"#性能\" class=\"headerlink\" title=\"性能\"></a>性能</h4><p>在原型链上查找属性比较耗时，对性能有副作用，这在性能要求苛刻的情况下很重要。另外，试图访问不存在的属性时会遍历整个原型链。  </p>\n<p>遍历对象的属性时，原型链上的每个可枚举属性都会被枚举出来。要检查对象是否具有自己定义的属性，而不是其原型链上的某个属性，则必须使用所有对象从 Object.prototype 继承的 hasOwnProperty 方法。下面给出一个具体的例子来说明它：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(g.hasOwnProperty(&apos;vertices&apos;));</span><br><span class=\"line\">// true</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(g.hasOwnProperty(&apos;nope&apos;));</span><br><span class=\"line\">// false</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(g.hasOwnProperty(&apos;addVertex&apos;));</span><br><span class=\"line\">// false</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(g.__proto__.hasOwnProperty(&apos;addVertex&apos;));</span><br><span class=\"line\">// true</span><br></pre></td></tr></table></figure></p>\n<p>hasOwnProperty 是 JavaScript 中唯一一个处理属性并且不会遍历原型链的方法。（译者注：原文如此。另一种这样的方法：Object.keys()）  </p>\n<p>注意：检查属性是否为 undefined 是不能够检查其是否存在的。该属性可能已存在，但其值恰好被设置成了 undefined。</p>\n<h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><p>在编写使用复杂代码之前，理解原型继承模型是至关重要的。此外，请注意代码中原型链的长度，并在必要时将其分解，以避免可能的性能问题。此外，原生原型不应该被扩展，除非它是为了与新的 JavaScript 特性兼容。  </p>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>B 继承自 A：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function A(a)&#123;</span><br><span class=\"line\">  this.varA = a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 以上函数 A 的定义中，既然 A.prototype.varA 总是会被 this.varA 遮蔽，</span><br><span class=\"line\">// 那么将 varA 加入到原型（prototype）中的目的是什么？</span><br><span class=\"line\">A.prototype = &#123;</span><br><span class=\"line\">  varA : null,</span><br><span class=\"line\">/*</span><br><span class=\"line\">既然它没有任何作用，干嘛不将 varA 从原型（prototype）去掉 ? </span><br><span class=\"line\">也许作为一种在隐藏类中优化分配空间的考虑 ?</span><br><span class=\"line\">https://developers.google.com/speed/articles/optimizing-javascript </span><br><span class=\"line\">如果varA并不是在每个实例中都被初始化，那这样做将是有效果的。</span><br><span class=\"line\">*/</span><br><span class=\"line\">  doSomething : function()&#123;</span><br><span class=\"line\">    // ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function B(a, b)&#123;</span><br><span class=\"line\">  A.call(this, a);</span><br><span class=\"line\">  this.varB = b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">B.prototype = Object.create(A.prototype, &#123;</span><br><span class=\"line\">  varB : &#123;</span><br><span class=\"line\">    value: null, </span><br><span class=\"line\">    enumerable: true, </span><br><span class=\"line\">    configurable: true, </span><br><span class=\"line\">    writable: true </span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  doSomething : &#123; </span><br><span class=\"line\">    value: function()&#123; // override</span><br><span class=\"line\">      A.prototype.doSomething.apply(this, arguments); </span><br><span class=\"line\">      // call super</span><br><span class=\"line\">      // ...</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    enumerable: true,</span><br><span class=\"line\">    configurable: true, </span><br><span class=\"line\">    writable: true</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">B.prototype.constructor = B;</span><br><span class=\"line\"></span><br><span class=\"line\">var b = new B();</span><br><span class=\"line\">b.doSomething();</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\" target=\"_blank\" rel=\"noopener\">原文链接</a></p>\n","site":{"data":{}},"excerpt":"<p>对于使用过基于类的语言 (如 Java 或 C++) 的开发人员来说，JavaScript 有点令人困惑，因为它是动态的，并且本身不提供一个 class 实现。（在 ES2015/ES6 中引入了 class 关键字，但那只是语法糖，JavaScript 仍然是基于原型的）。  </p>\n<p>当谈到继承时，JavaScript 只有一种结构：对象。每个实例对象（ object ）都有一个私有属性（称之为 <strong>proto</strong> ）指向它的构造函数的原型对象（prototype ）。该原型对象也有一个自己的原型对象( <strong>proto</strong> ) ，层层向上直到一个对象的原型对象为 null。根据定义，null 没有原型，并作为这个原型链中的最后一个环节。  </p>\n<p>几乎所有 JavaScript 中的对象都是位于原型链顶端的 Object 的实例。  </p>\n<p>尽管这种原型继承通常被认为是 JavaScript 的弱点之一，但是原型继承模型本身实际上比经典模型更强大。例如，在原型模型的基础上构建经典模型相当简单。<br>","more":"</p>\n<hr>\n<h3 id=\"基于原型链的继承\"><a href=\"#基于原型链的继承\" class=\"headerlink\" title=\"基于原型链的继承\"></a>基于原型链的继承</h3><h4 id=\"继承属性\"><a href=\"#继承属性\" class=\"headerlink\" title=\"继承属性\"></a>继承属性</h4><p>JavaScript 对象是动态的属性“包”（指其自己的属性）。JavaScript 对象有一个指向一个原型对象的链。当试图访问一个对象的属性时，它不仅仅在该对象上搜寻，还会搜寻该对象的原型，以及该对象的原型的原型，依次层层向上搜索，直到找到一个名字匹配的属性或到达原型链的末尾。  </p>\n<blockquote>\n<p>遵循ECMAScript标准，someObject.[[Prototype]] 符号是用于指向 someObject 的原型。从 ECMAScript 6 开始，[[Prototype]] 可以通过 Object.getPrototypeOf() 和 Object.setPrototypeOf() 访问器来访问。这个等同于 JavaScript 的非标准但许多浏览器实现的属性 <strong>proto</strong>。<br>但它不应该与构造函数 func 的 prototype 属性相混淆。被构造函数创建的实例对象的 [[prototype]] 指向 func 的 prototype 属性。Object.prototype 属性表示 Object 的原型对象。</p>\n</blockquote>\n<p>这里演示当尝试访问属性时会发生什么：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 让我们从一个自身拥有属性a和b的函数里创建一个对象o：</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> f = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.a = <span class=\"number\">1</span>;</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.b = <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 这么写也一样</span></span><br><span class=\"line\"><span class=\"comment\">function f() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  this.a = 1;</span></span><br><span class=\"line\"><span class=\"comment\">  this.b = 2;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> o = <span class=\"keyword\">new</span> f(); <span class=\"comment\">// &#123;a: 1, b: 2&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在f函数的原型上定义属性</span></span><br><span class=\"line\">f.prototype.b = <span class=\"number\">3</span>;</span><br><span class=\"line\">f.prototype.c = <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不要在 f 函数的原型上直接定义 f.prototype = &#123;b:3,c:4&#125;;这样会直接打破原型链</span></span><br><span class=\"line\"><span class=\"comment\">// o.[[Prototype]] 有属性 b 和 c</span></span><br><span class=\"line\"><span class=\"comment\">//  (其实就是 o.__proto__ 或者 o.constructor.prototype)</span></span><br><span class=\"line\"><span class=\"comment\">// o.[[Prototype]].[[Prototype]] 是 Object.prototype.</span></span><br><span class=\"line\"><span class=\"comment\">// 最后o.[[Prototype]].[[Prototype]].[[Prototype]]是null</span></span><br><span class=\"line\"><span class=\"comment\">// 这就是原型链的末尾，即 null，</span></span><br><span class=\"line\"><span class=\"comment\">// 根据定义，null 就是没有 [[Prototype]]。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 综上，整个原型链如下: </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#123;a:1, b:2&#125; ---&gt; &#123;b:3, c:4&#125; ---&gt; Object.prototype---&gt; null</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o.a); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// a是o的自身属性吗？是的，该属性的值为 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o.b); <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// b是o的自身属性吗？是的，该属性的值为 2</span></span><br><span class=\"line\"><span class=\"comment\">// 原型上也有一个'b'属性，但是它不会被访问到。</span></span><br><span class=\"line\"><span class=\"comment\">// 这种情况被称为\"属性遮蔽 (property shadowing)\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o.c); <span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"comment\">// c是o的自身属性吗？不是，那看看它的原型上有没有</span></span><br><span class=\"line\"><span class=\"comment\">// c是o.[[Prototype]]的属性吗？是的，该属性的值为 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o.d); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"comment\">// d 是 o 的自身属性吗？不是，那看看它的原型上有没有</span></span><br><span class=\"line\"><span class=\"comment\">// d 是 o.[[Prototype]] 的属性吗？不是，那看看它的原型上有没有</span></span><br><span class=\"line\"><span class=\"comment\">// o.[[Prototype]].[[Prototype]] 为 null，停止搜索</span></span><br><span class=\"line\"><span class=\"comment\">// 找不到 d 属性，返回 undefined</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"继承方法\"><a href=\"#继承方法\" class=\"headerlink\" title=\"继承方法\"></a>继承方法</h4><p>JavaScript 并没有其他基于类的语言所定义的“方法”。在 JavaScript 里，任何函数都可以添加到对象上作为对象的属性。函数的继承与其他的属性继承没有差别，包括上面的“属性遮蔽”（这种情况相当于其他语言的方法重写）。  </p>\n<p>当继承的函数被调用时，this 指向的是当前继承的对象，而不是继承的函数所在的原型对象。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var o = &#123;</span><br><span class=\"line\">  a: 2,</span><br><span class=\"line\">  m: function()&#123;</span><br><span class=\"line\">    return this.a + 1;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(o.m()); // 3</span><br><span class=\"line\">// 当调用 o.m 时，&apos;this&apos; 指向了 o.</span><br><span class=\"line\"></span><br><span class=\"line\">var p = Object.create(o);</span><br><span class=\"line\">// p是一个继承自 o 的对象</span><br><span class=\"line\"></span><br><span class=\"line\">p.a = 4; // 创建 p 的自身属性 &apos;a&apos;</span><br><span class=\"line\">console.log(p.m()); // 5</span><br><span class=\"line\">// 调用 p.m 时，&apos;this&apos; 指向了 p</span><br><span class=\"line\">// 又因为 p 继承了 o 的 m 函数</span><br><span class=\"line\">// 所以，此时的 &apos;this.a&apos; 即 p.a，就是 p 的自身属性 &apos;a&apos;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"在-JavaScript-中使用原型\"><a href=\"#在-JavaScript-中使用原型\" class=\"headerlink\" title=\"在 JavaScript 中使用原型\"></a>在 JavaScript 中使用原型</h3><p>下去，来仔细分析一下这些应用场景下， JavaScript 在背后做了哪些事情。  </p>\n<p>正如之前提到的，在 JavaScript 中，函数（function）是允许拥有属性的。所有的函数会有一个特别的属性 —— prototype 。请注意，以下的代码是独立的（出于严谨，假定页面没有其他的JavaScript代码）。为了最佳的学习体验，我们强烈建议阁下打开浏览器的控制台（在Chrome和火狐浏览器中，按Ctrl+Shift+I即可），进入“console”选项卡，然后把如下的JavaScript代码复制粘贴到窗口中，最后通过按下回车键运行代码。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function doSomething()&#123;&#125;</span><br><span class=\"line\">console.log( doSomething.prototype );</span><br><span class=\"line\">// 和声明函数的方式无关，</span><br><span class=\"line\">// JavaScript 中的函数永远有一个默认原型属性。</span><br><span class=\"line\">var doSomething = function()&#123;&#125;;</span><br><span class=\"line\">console.log( doSomething.prototype );</span><br></pre></td></tr></table></figure></p>\n<p>在控制台显示的JavaScript代码块中，我们可以看到doSomething函数的一个默认属性prototype。而这段代码运行之后，控制台应该显示类似如下的结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    constructor: ƒ doSomething(),</span><br><span class=\"line\">    __proto__: &#123;</span><br><span class=\"line\">        constructor: ƒ Object(),</span><br><span class=\"line\">        hasOwnProperty: ƒ hasOwnProperty(),</span><br><span class=\"line\">        isPrototypeOf: ƒ isPrototypeOf(),</span><br><span class=\"line\">        propertyIsEnumerable: ƒ propertyIsEnumerable(),</span><br><span class=\"line\">        toLocaleString: ƒ toLocaleString(),</span><br><span class=\"line\">        toString: ƒ toString(),</span><br><span class=\"line\">        valueOf: ƒ valueOf()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们可以给doSomething函数的原型对象添加新属性，如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function doSomething()&#123;&#125;</span><br><span class=\"line\">doSomething.prototype.foo = &quot;bar&quot;;</span><br><span class=\"line\">console.log( doSomething.prototype );</span><br></pre></td></tr></table></figure></p>\n<p>可以看到运行后的结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    foo: &quot;bar&quot;,</span><br><span class=\"line\">    constructor: ƒ doSomething(),</span><br><span class=\"line\">    __proto__: &#123;</span><br><span class=\"line\">        constructor: ƒ Object(),</span><br><span class=\"line\">        hasOwnProperty: ƒ hasOwnProperty(),</span><br><span class=\"line\">        isPrototypeOf: ƒ isPrototypeOf(),</span><br><span class=\"line\">        propertyIsEnumerable: ƒ propertyIsEnumerable(),</span><br><span class=\"line\">        toLocaleString: ƒ toLocaleString(),</span><br><span class=\"line\">        toString: ƒ toString(),</span><br><span class=\"line\">        valueOf: ƒ valueOf()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>现在我们可以通过new操作符来创建基于这个原型对象的doSomething实例。使用new操作符，只需在调用doSomething函数语句之前添加new。这样，便可以获得这个函数的一个实例对象。一些属性就可以添加到该原型对象中。  </p>\n<p>请尝试运行以下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function doSomething()&#123;&#125;</span><br><span class=\"line\">doSomething.prototype.foo = &quot;bar&quot;; // add a property onto the prototype</span><br><span class=\"line\">var doSomeInstancing = new doSomething();</span><br><span class=\"line\">doSomeInstancing.prop = &quot;some value&quot;; // add a property onto the object</span><br><span class=\"line\">console.log( doSomeInstancing );</span><br></pre></td></tr></table></figure></p>\n<p>运行的结果类似于以下的语句。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    prop: &quot;some value&quot;,</span><br><span class=\"line\">    __proto__: &#123;</span><br><span class=\"line\">        foo: &quot;bar&quot;,</span><br><span class=\"line\">        constructor: ƒ doSomething(),</span><br><span class=\"line\">        __proto__: &#123;</span><br><span class=\"line\">            constructor: ƒ Object(),</span><br><span class=\"line\">            hasOwnProperty: ƒ hasOwnProperty(),</span><br><span class=\"line\">            isPrototypeOf: ƒ isPrototypeOf(),</span><br><span class=\"line\">            propertyIsEnumerable: ƒ propertyIsEnumerable(),</span><br><span class=\"line\">            toLocaleString: ƒ toLocaleString(),</span><br><span class=\"line\">            toString: ƒ toString(),</span><br><span class=\"line\">            valueOf: ƒ valueOf()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如上所示, doSomeInstancing 中的<strong>proto</strong>是 doSomething.prototype. 但这是做什么的呢？当你访问doSomeInstancing 中的一个属性，浏览器首先会查看doSomeInstancing 中是否存在这个属性。  </p>\n<p>如果 doSomeInstancing 不包含属性信息, 那么浏览器会在 doSomeInstancing 的 <strong>proto</strong> 中进行查找(同 doSomething.prototype). 如属性在 doSomeInstancing 的 <strong>proto</strong> 中查找到，则使用 doSomeInstancing 中 <strong>proto</strong> 的属性。  </p>\n<p>否则，如果 doSomeInstancing 中 <strong>proto</strong> 不具有该属性，则检查doSomeInstancing 的 <strong>proto</strong> 的  <strong>proto</strong> 是否具有该属性。默认情况下，任何函数的原型属性 <strong>proto</strong> 都是 window.Object.prototype. 因此, 通过doSomeInstancing 的 <strong>proto</strong> 的  <strong>proto</strong>  ( 同 doSomething.prototype 的 <strong>proto</strong> (同  Object.prototype)) 来查找要搜索的属性。  </p>\n<p>如果属性不存在 doSomeInstancing 的 <strong>proto</strong> 的  <strong>proto</strong> 中， 那么就会在doSomeInstancing 的 <strong>proto</strong> 的  <strong>proto</strong> 的  <strong>proto</strong> 中查找。然而, 这里存在个问题：doSomeInstancing 的 <strong>proto</strong> 的  <strong>proto</strong> 的  <strong>proto</strong> 其实不存在。因此，只有这样，在 <strong>proto</strong> 的整个原型链被查看之后，这里没有更多的 <strong>proto</strong> ， 浏览器断言该属性不存在，并给出属性值为 undefined 的结论。  </p>\n<p>让我们在控制台窗口中输入更多的代码，如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function doSomething()&#123;&#125;</span><br><span class=\"line\">doSomething.prototype.foo = &quot;bar&quot;;</span><br><span class=\"line\">var doSomeInstancing = new doSomething();</span><br><span class=\"line\">doSomeInstancing.prop = &quot;some value&quot;;</span><br><span class=\"line\">console.log(&quot;doSomeInstancing.prop:      &quot; + doSomeInstancing.prop);</span><br><span class=\"line\">console.log(&quot;doSomeInstancing.foo:       &quot; + doSomeInstancing.foo);</span><br><span class=\"line\">console.log(&quot;doSomething.prop:           &quot; + doSomething.prop);</span><br><span class=\"line\">console.log(&quot;doSomething.foo:            &quot; + doSomething.foo);</span><br><span class=\"line\">console.log(&quot;doSomething.prototype.prop: &quot; + doSomething.prototype.prop);</span><br><span class=\"line\">console.log(&quot;doSomething.prototype.foo:  &quot; + doSomething.prototype.foo);</span><br></pre></td></tr></table></figure></p>\n<p>结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doSomeInstancing.prop:      some value</span><br><span class=\"line\">doSomeInstancing.foo:       bar</span><br><span class=\"line\">doSomething.prop:           undefined</span><br><span class=\"line\">doSomething.foo:            undefined</span><br><span class=\"line\">doSomething.prototype.prop: undefined</span><br><span class=\"line\">doSomething.prototype.foo:  bar</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"性能\"><a href=\"#性能\" class=\"headerlink\" title=\"性能\"></a>性能</h4><p>在原型链上查找属性比较耗时，对性能有副作用，这在性能要求苛刻的情况下很重要。另外，试图访问不存在的属性时会遍历整个原型链。  </p>\n<p>遍历对象的属性时，原型链上的每个可枚举属性都会被枚举出来。要检查对象是否具有自己定义的属性，而不是其原型链上的某个属性，则必须使用所有对象从 Object.prototype 继承的 hasOwnProperty 方法。下面给出一个具体的例子来说明它：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(g.hasOwnProperty(&apos;vertices&apos;));</span><br><span class=\"line\">// true</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(g.hasOwnProperty(&apos;nope&apos;));</span><br><span class=\"line\">// false</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(g.hasOwnProperty(&apos;addVertex&apos;));</span><br><span class=\"line\">// false</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(g.__proto__.hasOwnProperty(&apos;addVertex&apos;));</span><br><span class=\"line\">// true</span><br></pre></td></tr></table></figure></p>\n<p>hasOwnProperty 是 JavaScript 中唯一一个处理属性并且不会遍历原型链的方法。（译者注：原文如此。另一种这样的方法：Object.keys()）  </p>\n<p>注意：检查属性是否为 undefined 是不能够检查其是否存在的。该属性可能已存在，但其值恰好被设置成了 undefined。</p>\n<h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><p>在编写使用复杂代码之前，理解原型继承模型是至关重要的。此外，请注意代码中原型链的长度，并在必要时将其分解，以避免可能的性能问题。此外，原生原型不应该被扩展，除非它是为了与新的 JavaScript 特性兼容。  </p>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>B 继承自 A：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function A(a)&#123;</span><br><span class=\"line\">  this.varA = a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 以上函数 A 的定义中，既然 A.prototype.varA 总是会被 this.varA 遮蔽，</span><br><span class=\"line\">// 那么将 varA 加入到原型（prototype）中的目的是什么？</span><br><span class=\"line\">A.prototype = &#123;</span><br><span class=\"line\">  varA : null,</span><br><span class=\"line\">/*</span><br><span class=\"line\">既然它没有任何作用，干嘛不将 varA 从原型（prototype）去掉 ? </span><br><span class=\"line\">也许作为一种在隐藏类中优化分配空间的考虑 ?</span><br><span class=\"line\">https://developers.google.com/speed/articles/optimizing-javascript </span><br><span class=\"line\">如果varA并不是在每个实例中都被初始化，那这样做将是有效果的。</span><br><span class=\"line\">*/</span><br><span class=\"line\">  doSomething : function()&#123;</span><br><span class=\"line\">    // ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function B(a, b)&#123;</span><br><span class=\"line\">  A.call(this, a);</span><br><span class=\"line\">  this.varB = b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">B.prototype = Object.create(A.prototype, &#123;</span><br><span class=\"line\">  varB : &#123;</span><br><span class=\"line\">    value: null, </span><br><span class=\"line\">    enumerable: true, </span><br><span class=\"line\">    configurable: true, </span><br><span class=\"line\">    writable: true </span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  doSomething : &#123; </span><br><span class=\"line\">    value: function()&#123; // override</span><br><span class=\"line\">      A.prototype.doSomething.apply(this, arguments); </span><br><span class=\"line\">      // call super</span><br><span class=\"line\">      // ...</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    enumerable: true,</span><br><span class=\"line\">    configurable: true, </span><br><span class=\"line\">    writable: true</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">B.prototype.constructor = B;</span><br><span class=\"line\"></span><br><span class=\"line\">var b = new B();</span><br><span class=\"line\">b.doSomething();</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\" target=\"_blank\" rel=\"noopener\">原文链接</a></p>"},{"title":"lightMVC:轻量级游戏开发框架(for cocos creator)","date":"2019-07-15T15:16:46.000Z","_content":"\n简易轻量级MVC框架，适用于中小型cocos creator项目使用。后续会拓展lightMVC_ex内容来适应大型项目的开发。这套轻量级MVC框架可以帮助开发者组织代码，以及业务结构，让项目更好维护和拓展，提高开发效率。examples目录下有完整的例子Demo。\n#### 架构图\n![架构图](/images/mvc.png)\n<!--more-->\n#### 节点功能\n- Facade:全局控制类，持有对MVC各层的管理对象。原则上来说，除了初始化框架调用init和运行第一个场景外，都不应该引用和调用Facada中的任何接口和属性。该类是个全局的单例对象，包含几个重要的接口如下：\n``` javascript\n/**\n * 初始化框架配置\n * @param {boolean} debug 是否是调试状态\n * @param {cc.Size} designResolution 设计分辨率\n * @param {boolean} fitHeight 是否高适配\n * @param {boolean} fitWidth 是否宽适配\n */\npublic init(debug: boolean, designResolution: cc.Size, fitHeight: boolean, fitWidth: boolean): void;\n\n/**\n * 运行场景\n * @param {{new(): BaseMediator}} mediator 场景mediator类型，类类型。\n * @param {{new(): BaseScene}} view 场景mediator类型，类类型。\n * @param {Object} data 自定义的任意类型透传数据。（可选）\n * @param {()=>void} cb 加载完成回调.\n */\npublic runScene(mediator: {new(): BaseMediator}, view: {new(): BaseScene}, data?: any, cb?: ()=>void): void;\n```\n- Model:数据对象，用于处理数据逻辑以及存储数据，常用来与服务器做数据交互，同时通过消息通知View层刷新显示。主要接口如下：\n``` javascript\n/** Model初始化时会调用的接口，可以用来初始化一些数据 */\npublic init(): void;\n/**\n * 发送消息接口，当数据变化时需要调用此接口发送消息刷新View层。\n * @param {string} noti 消息名称\n * @param {Object} data 消息数据\n */\npublic sendNoti(noti: string, data?: any): void;\n/** 清理接口，子类可以实现清理逻辑 */\npublic clear(): void;\n```\n- View:显示层，根据业务逻辑及数据显示，同时处理用户输入，通过事件与其他层交互。主要接口如下：\n``` javascript\n/** View创建时会被调用，子类可以重写 */\npublic init(): void;\n/**\n * 发送UI事件，逻辑层接收事件处理逻辑。\n * @param {string} event 事件名称\n * @param {Object} body 事件参数\n */\npublic sendEvent(event: string, body?: any): void;\n/** 关闭当前的界面 */\npublic closeView(): void;\n/** 关闭所有弹出的界面 */\npublic closeAllPopView(): void;\n/** 当界面被关闭时会被调用，子类可以重写该方法 */\npublic onClose(): void;\n/** 子类覆盖，返回UI的prefab路径,默认是空节点 */\npublic static path(): string;\n```\n- Mediator:逻辑层中介者，负责接收Model层通知来刷新View层显示，同时还要接收View层事件来处理用户输入，并通过Command处理数据层数据。主要接口如下：\n``` javascript\n/**\n * 初始化接口,此时视图还没有创建，如果想操作视图view请在viewDidAppear函数中进行。\n * @param {Object} data 自定义的任意类型透传数据。（可选）\n * @override\n * */\npublic init(data?: any): void;\n/**\n * 视图显示后会调用的接口\n * @override\n */\npublic viewDidAppear(): void;\n/**\n * 绑定UI事件，接收view层派发的事件\n * @param {string} name 事件名称\n * @param {(any)=>void} cb 事件回调\n * @param {BaseMediator} target 回调绑定对象\n */\npublic bindEvent(name: string, cb: (body: any)=>void, target: BaseMediator): void;\n/**\n * 注册消息监听\n * @param {string} noti 通知key值\n * @param {(data: any)=>void} cb 通知监听的回调函数\n * @param {Object} target 回调绑定的对象\n */\npublic registerNoti(noti: string, cb: (data: any)=>void, target: any): void;\n/**\n * 发送消息通知\n * @param {string} noti 通知key值\n * @param {Object} body 消息传递的参数\n */\npublic sendNoti(noti: string, body: any): void;\n/**\n * 发送命令接口\n * @param {{new (): BaseCommand}} cmd 命令类\n * @param {Object} data 命令参数\n */\npublic sendCmd<T extends BaseCommand>(cmd: {new (): T}, data?: any): void;\n/**\n * 打开新场景\n * @param data {Object} data 自定义的任意类型透传数据。（可选）\n */\npublic runScene(mediator: {new(): BaseMediator}, view: {new(): BaseScene}, data?: any): void;\n/**\n * 返回上一场景\n * @returns {boolean}是否存在上一个场景\n */\npublic backScene(): boolean;\n/**\n * 打开view界面\n * @param {{new(): BaseMediator}} mediator 界面mediator类型，类类型。\n * @param {{new(): BaseView}} view view 场景mediator类型，类类型。\n * @param {Object} data 自定义的任意类型透传数据。（可选）\n */\npublic popView(mediator: {new(): BaseMediator}, view: {new(): BaseView}, data?: any): void;\n/**\n * 添加层级\n * @param {{new(): BaseMediator}} mediator 界面mediator类型，类类型。\n * @param {{new(): BaseView}} view view 场景mediator类型，类类型。\n * @param {number} zOrder 层级。（可选）\n * @param {Object} data 自定义的任意类型透传数据。（可选）\n */\npublic addLayer(mediator: {new(): BaseMediator}, view: {new(): BaseView}, zOrder?: number, data?: any): void;\n/** 获取model对象 */\npublic getModel<T extends BaseModel>(model: {new (): T}): T;\n/** 销毁接口 */\npublic destroy(): void;\n```\n\n#### 使用方式\n1. 初始化框架：\n```javascript\n// 调试模式为false、设计分辨率为1080*2048、宽适配。\nFacade.getInstance().init(false, cc.size(1080, 2048), false, true);\n```\n2. 注册model数据对象：\n```javascript\n// 如果需要数据层，那么应该首先将所有需要的model在开始就都注册上。\nFacade.getInstance().registerModel(PlayerModel);\n```\n3. 运行第一个场景：\n```javascript\n// 运行第一个场景时调用Facade的runScene接口，传入要运行的Mediator和Scene，还可选传入参数。\nFacade.getInstance().runScene(DefaultSceneMediator, DefaultScene, \"测试参数999\");\n```\n4. 原则上说，除了上述三步需要引用Facade外，后面场景运行起来后就不需要再调用Facade了，在MVC的不同层级做对应的逻辑处理，父类接口都做了支持。\n5. 场景运行后，可以在场景Mediator中创建层级view，或者pop出view。Layer view与pop view的区别就是，他们是两个管理器在进行管理，我们认为Layer是场景内初始化创建并且不会关闭的view界面，而pop view是可以随时打开或者关闭的view界面，当然具体怎么使用可以灵活处理。例如在DefaultSceneMediator中：\n```javascript\n/**\n * 创建一个常驻的view界面FirstView \n * this.addLayer是BaseMediator中提供的基础功能接口（更多接口可以查看源码）。\n * 层级为1，并且传入参数：this._data\n * */\nthis.addLayer(FirstMediator, FirstView, 1, this._data);\n```\n6. View层的UI节点操作接口。在View里有个成员属性ui，该界面的UI节点会在初始化时自动初始化到这个成员属性上，在操作UI节点时可以通过这个属性进行操作，该属性类型是UIContainer，常用接口是getNode和getComponent，示例代码如下：\n```javascript\n// 获取node节点\nlet closeBtnNode = this.ui.getNode(\"close_btn\");\ncloseBtnNode.on(cc.Node.EventType.TOUCH_END, this.closeAllView, this);\n// 获取Component组件\nlet desLabel = this.ui.getComponent(\"des_label\", cc.Label);\ndesLabel.string = \"test\";\n```\n7. View层与Mediator层的事件交互。Mediator直接持有View的引用，所以可以直接调用View中的接口，而View与Mediator就需要通过事件（Event）来进行交互了。首先需要在Mediator中注册监听：\n```javascript\nthis.bindEvent(FirstView.OPEN_B, (str: string)=>{\n    // todo something...\n}, this);\n```\n然后在View中通过sendEvent接口发送事件来通知Mediator：\n```javascript\n// 第一个参数是事件名称，第二个参数是传递的参数。\nthis.sendEvent(FirstView.OPEN_B, \"BBB\");\n```\n8. Mediator操作Model数据。在Mediator中可以通过getModel接口获取到指定的Model对象，通过直接引用来读取Model中的数据。而在修改数据的时候有两种方式，一种是通过Model的引用直接进行修改，这种情况大多是比较简单直接修改某个数值等；另一种比较复杂，比如要获取多个Model的数据进行复杂的逻辑操作并且修改多个值的情况，这种就适合将逻辑封装到一个命令（Command）中，通过发送命令来处理数据，这样可以减少Mediator中逻辑复杂度和耦合度。例子如下：\n```javascript\n// 直接通过引用进行修改的情况\nlet playerModel = this.getModel(PlayerModel);\nthis.view.setLevelDisplay(playerModel.getPlayerLv());\n\n// 通过命令进行操作的情况\nthis.sendCmd(UpdateExpCommand, exp);\n```\n9. Model数据修改通知View刷新逻辑。大多数情况下，Model用来处理纯数据逻辑和与服务器交互的数据接口，当数据有变化时我们希望通知View刷新显示，这是我们只能通过抛出消息通知来告诉Mediator，然后通过Mediator来修改View显示，首先需要在Mediator中注册消息通知：\n```javascript\nthis.registerNoti(Notification.UPDATE_EXP_FINISH, ()=>{\n    // todo something ...\n}, this);\n```\n然后我们在Model中通过发送这个消息通知来告诉Mediator：\n```javascript\n// 该接口第二个参数可以传递参数\nthis.sendNoti(Notification.UPDATE_EXP_FINISH);\n```\n10. Mediator与Mediator之间的交互很简单，就是使用上面介绍Model向Mediator发送通知的方式。\n\n#### 其他\n简单的交互规则和接口调用介绍就这么多，还有就是代码结构的组织也很重要，这个就是看每个人或者项目的合理安排了，毕竟也是仁者见仁，智者见智的事情。**同时在examples目录下有完整的例子Demo**。\n\nlightMVC目前仅适合中小型项目使用，过于复杂的大型项目可能应付起来就会有些吃力，不过后续会继续维护并拓展到lightMVC_ex中来支持大型项目开发，lightMVC会始终保持简单轻量。  \n\n最后框架中有什么问题或者需要改进的问题欢迎反馈。\n\n---\n[项目地址：https://github.com/yue19870813/lightMVC](https://github.com/yue19870813/lightMVC)","source":"_posts/lightMVC-1.md","raw":"---\ntitle: lightMVC:轻量级游戏开发框架(for cocos creator)\ndate: 2019-07-15 23:16:46\ntags: mvc\ncategories: javascript\n---\n\n简易轻量级MVC框架，适用于中小型cocos creator项目使用。后续会拓展lightMVC_ex内容来适应大型项目的开发。这套轻量级MVC框架可以帮助开发者组织代码，以及业务结构，让项目更好维护和拓展，提高开发效率。examples目录下有完整的例子Demo。\n#### 架构图\n![架构图](/images/mvc.png)\n<!--more-->\n#### 节点功能\n- Facade:全局控制类，持有对MVC各层的管理对象。原则上来说，除了初始化框架调用init和运行第一个场景外，都不应该引用和调用Facada中的任何接口和属性。该类是个全局的单例对象，包含几个重要的接口如下：\n``` javascript\n/**\n * 初始化框架配置\n * @param {boolean} debug 是否是调试状态\n * @param {cc.Size} designResolution 设计分辨率\n * @param {boolean} fitHeight 是否高适配\n * @param {boolean} fitWidth 是否宽适配\n */\npublic init(debug: boolean, designResolution: cc.Size, fitHeight: boolean, fitWidth: boolean): void;\n\n/**\n * 运行场景\n * @param {{new(): BaseMediator}} mediator 场景mediator类型，类类型。\n * @param {{new(): BaseScene}} view 场景mediator类型，类类型。\n * @param {Object} data 自定义的任意类型透传数据。（可选）\n * @param {()=>void} cb 加载完成回调.\n */\npublic runScene(mediator: {new(): BaseMediator}, view: {new(): BaseScene}, data?: any, cb?: ()=>void): void;\n```\n- Model:数据对象，用于处理数据逻辑以及存储数据，常用来与服务器做数据交互，同时通过消息通知View层刷新显示。主要接口如下：\n``` javascript\n/** Model初始化时会调用的接口，可以用来初始化一些数据 */\npublic init(): void;\n/**\n * 发送消息接口，当数据变化时需要调用此接口发送消息刷新View层。\n * @param {string} noti 消息名称\n * @param {Object} data 消息数据\n */\npublic sendNoti(noti: string, data?: any): void;\n/** 清理接口，子类可以实现清理逻辑 */\npublic clear(): void;\n```\n- View:显示层，根据业务逻辑及数据显示，同时处理用户输入，通过事件与其他层交互。主要接口如下：\n``` javascript\n/** View创建时会被调用，子类可以重写 */\npublic init(): void;\n/**\n * 发送UI事件，逻辑层接收事件处理逻辑。\n * @param {string} event 事件名称\n * @param {Object} body 事件参数\n */\npublic sendEvent(event: string, body?: any): void;\n/** 关闭当前的界面 */\npublic closeView(): void;\n/** 关闭所有弹出的界面 */\npublic closeAllPopView(): void;\n/** 当界面被关闭时会被调用，子类可以重写该方法 */\npublic onClose(): void;\n/** 子类覆盖，返回UI的prefab路径,默认是空节点 */\npublic static path(): string;\n```\n- Mediator:逻辑层中介者，负责接收Model层通知来刷新View层显示，同时还要接收View层事件来处理用户输入，并通过Command处理数据层数据。主要接口如下：\n``` javascript\n/**\n * 初始化接口,此时视图还没有创建，如果想操作视图view请在viewDidAppear函数中进行。\n * @param {Object} data 自定义的任意类型透传数据。（可选）\n * @override\n * */\npublic init(data?: any): void;\n/**\n * 视图显示后会调用的接口\n * @override\n */\npublic viewDidAppear(): void;\n/**\n * 绑定UI事件，接收view层派发的事件\n * @param {string} name 事件名称\n * @param {(any)=>void} cb 事件回调\n * @param {BaseMediator} target 回调绑定对象\n */\npublic bindEvent(name: string, cb: (body: any)=>void, target: BaseMediator): void;\n/**\n * 注册消息监听\n * @param {string} noti 通知key值\n * @param {(data: any)=>void} cb 通知监听的回调函数\n * @param {Object} target 回调绑定的对象\n */\npublic registerNoti(noti: string, cb: (data: any)=>void, target: any): void;\n/**\n * 发送消息通知\n * @param {string} noti 通知key值\n * @param {Object} body 消息传递的参数\n */\npublic sendNoti(noti: string, body: any): void;\n/**\n * 发送命令接口\n * @param {{new (): BaseCommand}} cmd 命令类\n * @param {Object} data 命令参数\n */\npublic sendCmd<T extends BaseCommand>(cmd: {new (): T}, data?: any): void;\n/**\n * 打开新场景\n * @param data {Object} data 自定义的任意类型透传数据。（可选）\n */\npublic runScene(mediator: {new(): BaseMediator}, view: {new(): BaseScene}, data?: any): void;\n/**\n * 返回上一场景\n * @returns {boolean}是否存在上一个场景\n */\npublic backScene(): boolean;\n/**\n * 打开view界面\n * @param {{new(): BaseMediator}} mediator 界面mediator类型，类类型。\n * @param {{new(): BaseView}} view view 场景mediator类型，类类型。\n * @param {Object} data 自定义的任意类型透传数据。（可选）\n */\npublic popView(mediator: {new(): BaseMediator}, view: {new(): BaseView}, data?: any): void;\n/**\n * 添加层级\n * @param {{new(): BaseMediator}} mediator 界面mediator类型，类类型。\n * @param {{new(): BaseView}} view view 场景mediator类型，类类型。\n * @param {number} zOrder 层级。（可选）\n * @param {Object} data 自定义的任意类型透传数据。（可选）\n */\npublic addLayer(mediator: {new(): BaseMediator}, view: {new(): BaseView}, zOrder?: number, data?: any): void;\n/** 获取model对象 */\npublic getModel<T extends BaseModel>(model: {new (): T}): T;\n/** 销毁接口 */\npublic destroy(): void;\n```\n\n#### 使用方式\n1. 初始化框架：\n```javascript\n// 调试模式为false、设计分辨率为1080*2048、宽适配。\nFacade.getInstance().init(false, cc.size(1080, 2048), false, true);\n```\n2. 注册model数据对象：\n```javascript\n// 如果需要数据层，那么应该首先将所有需要的model在开始就都注册上。\nFacade.getInstance().registerModel(PlayerModel);\n```\n3. 运行第一个场景：\n```javascript\n// 运行第一个场景时调用Facade的runScene接口，传入要运行的Mediator和Scene，还可选传入参数。\nFacade.getInstance().runScene(DefaultSceneMediator, DefaultScene, \"测试参数999\");\n```\n4. 原则上说，除了上述三步需要引用Facade外，后面场景运行起来后就不需要再调用Facade了，在MVC的不同层级做对应的逻辑处理，父类接口都做了支持。\n5. 场景运行后，可以在场景Mediator中创建层级view，或者pop出view。Layer view与pop view的区别就是，他们是两个管理器在进行管理，我们认为Layer是场景内初始化创建并且不会关闭的view界面，而pop view是可以随时打开或者关闭的view界面，当然具体怎么使用可以灵活处理。例如在DefaultSceneMediator中：\n```javascript\n/**\n * 创建一个常驻的view界面FirstView \n * this.addLayer是BaseMediator中提供的基础功能接口（更多接口可以查看源码）。\n * 层级为1，并且传入参数：this._data\n * */\nthis.addLayer(FirstMediator, FirstView, 1, this._data);\n```\n6. View层的UI节点操作接口。在View里有个成员属性ui，该界面的UI节点会在初始化时自动初始化到这个成员属性上，在操作UI节点时可以通过这个属性进行操作，该属性类型是UIContainer，常用接口是getNode和getComponent，示例代码如下：\n```javascript\n// 获取node节点\nlet closeBtnNode = this.ui.getNode(\"close_btn\");\ncloseBtnNode.on(cc.Node.EventType.TOUCH_END, this.closeAllView, this);\n// 获取Component组件\nlet desLabel = this.ui.getComponent(\"des_label\", cc.Label);\ndesLabel.string = \"test\";\n```\n7. View层与Mediator层的事件交互。Mediator直接持有View的引用，所以可以直接调用View中的接口，而View与Mediator就需要通过事件（Event）来进行交互了。首先需要在Mediator中注册监听：\n```javascript\nthis.bindEvent(FirstView.OPEN_B, (str: string)=>{\n    // todo something...\n}, this);\n```\n然后在View中通过sendEvent接口发送事件来通知Mediator：\n```javascript\n// 第一个参数是事件名称，第二个参数是传递的参数。\nthis.sendEvent(FirstView.OPEN_B, \"BBB\");\n```\n8. Mediator操作Model数据。在Mediator中可以通过getModel接口获取到指定的Model对象，通过直接引用来读取Model中的数据。而在修改数据的时候有两种方式，一种是通过Model的引用直接进行修改，这种情况大多是比较简单直接修改某个数值等；另一种比较复杂，比如要获取多个Model的数据进行复杂的逻辑操作并且修改多个值的情况，这种就适合将逻辑封装到一个命令（Command）中，通过发送命令来处理数据，这样可以减少Mediator中逻辑复杂度和耦合度。例子如下：\n```javascript\n// 直接通过引用进行修改的情况\nlet playerModel = this.getModel(PlayerModel);\nthis.view.setLevelDisplay(playerModel.getPlayerLv());\n\n// 通过命令进行操作的情况\nthis.sendCmd(UpdateExpCommand, exp);\n```\n9. Model数据修改通知View刷新逻辑。大多数情况下，Model用来处理纯数据逻辑和与服务器交互的数据接口，当数据有变化时我们希望通知View刷新显示，这是我们只能通过抛出消息通知来告诉Mediator，然后通过Mediator来修改View显示，首先需要在Mediator中注册消息通知：\n```javascript\nthis.registerNoti(Notification.UPDATE_EXP_FINISH, ()=>{\n    // todo something ...\n}, this);\n```\n然后我们在Model中通过发送这个消息通知来告诉Mediator：\n```javascript\n// 该接口第二个参数可以传递参数\nthis.sendNoti(Notification.UPDATE_EXP_FINISH);\n```\n10. Mediator与Mediator之间的交互很简单，就是使用上面介绍Model向Mediator发送通知的方式。\n\n#### 其他\n简单的交互规则和接口调用介绍就这么多，还有就是代码结构的组织也很重要，这个就是看每个人或者项目的合理安排了，毕竟也是仁者见仁，智者见智的事情。**同时在examples目录下有完整的例子Demo**。\n\nlightMVC目前仅适合中小型项目使用，过于复杂的大型项目可能应付起来就会有些吃力，不过后续会继续维护并拓展到lightMVC_ex中来支持大型项目开发，lightMVC会始终保持简单轻量。  \n\n最后框架中有什么问题或者需要改进的问题欢迎反馈。\n\n---\n[项目地址：https://github.com/yue19870813/lightMVC](https://github.com/yue19870813/lightMVC)","slug":"lightMVC-1","published":1,"updated":"2019-07-15T16:41:07.880Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjycv1m3q000rok9m5t9mw3la","content":"<p>简易轻量级MVC框架，适用于中小型cocos creator项目使用。后续会拓展lightMVC_ex内容来适应大型项目的开发。这套轻量级MVC框架可以帮助开发者组织代码，以及业务结构，让项目更好维护和拓展，提高开发效率。examples目录下有完整的例子Demo。</p>\n<h4 id=\"架构图\"><a href=\"#架构图\" class=\"headerlink\" title=\"架构图\"></a>架构图</h4><p><img src=\"/images/mvc.png\" alt=\"架构图\"><br><a id=\"more\"></a></p>\n<h4 id=\"节点功能\"><a href=\"#节点功能\" class=\"headerlink\" title=\"节点功能\"></a>节点功能</h4><ul>\n<li><p>Facade:全局控制类，持有对MVC各层的管理对象。原则上来说，除了初始化框架调用init和运行第一个场景外，都不应该引用和调用Facada中的任何接口和属性。该类是个全局的单例对象，包含几个重要的接口如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 初始化框架配置</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;boolean&#125; debug 是否是调试状态</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;cc.Size&#125; designResolution 设计分辨率</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;boolean&#125; fitHeight 是否高适配</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;boolean&#125; fitWidth 是否宽适配</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">public init(debug: boolean, <span class=\"attr\">designResolution</span>: cc.Size, <span class=\"attr\">fitHeight</span>: boolean, <span class=\"attr\">fitWidth</span>: boolean): <span class=\"keyword\">void</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 运行场景</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;&#123;new(): BaseMediator&#125;&#125; mediator 场景mediator类型，类类型。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;&#123;new(): BaseScene&#125;&#125; view 场景mediator类型，类类型。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Object&#125; data 自定义的任意类型透传数据。（可选）</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;()=&gt;void&#125; cb 加载完成回调.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">public runScene(mediator: &#123;<span class=\"keyword\">new</span>(): BaseMediator&#125;, <span class=\"attr\">view</span>: &#123;<span class=\"keyword\">new</span>(): BaseScene&#125;, data?: any, cb?: <span class=\"function\"><span class=\"params\">()</span>=&gt;</span><span class=\"keyword\">void</span>): <span class=\"keyword\">void</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Model:数据对象，用于处理数据逻辑以及存储数据，常用来与服务器做数据交互，同时通过消息通知View层刷新显示。主要接口如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** Model初始化时会调用的接口，可以用来初始化一些数据 */</span></span><br><span class=\"line\">public init(): <span class=\"keyword\">void</span>;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 发送消息接口，当数据变化时需要调用此接口发送消息刷新View层。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; noti 消息名称</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Object&#125; data 消息数据</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">public sendNoti(noti: string, data?: any): <span class=\"keyword\">void</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 清理接口，子类可以实现清理逻辑 */</span></span><br><span class=\"line\">public clear(): <span class=\"keyword\">void</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>View:显示层，根据业务逻辑及数据显示，同时处理用户输入，通过事件与其他层交互。主要接口如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** View创建时会被调用，子类可以重写 */</span></span><br><span class=\"line\">public init(): <span class=\"keyword\">void</span>;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 发送UI事件，逻辑层接收事件处理逻辑。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; event 事件名称</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Object&#125; body 事件参数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">public sendEvent(event: string, body?: any): <span class=\"keyword\">void</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 关闭当前的界面 */</span></span><br><span class=\"line\">public closeView(): <span class=\"keyword\">void</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 关闭所有弹出的界面 */</span></span><br><span class=\"line\">public closeAllPopView(): <span class=\"keyword\">void</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 当界面被关闭时会被调用，子类可以重写该方法 */</span></span><br><span class=\"line\">public onClose(): <span class=\"keyword\">void</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 子类覆盖，返回UI的prefab路径,默认是空节点 */</span></span><br><span class=\"line\">public <span class=\"keyword\">static</span> path(): string;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Mediator:逻辑层中介者，负责接收Model层通知来刷新View层显示，同时还要接收View层事件来处理用户输入，并通过Command处理数据层数据。主要接口如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 初始化接口,此时视图还没有创建，如果想操作视图view请在viewDidAppear函数中进行。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Object&#125; data 自定义的任意类型透传数据。（可选）</span></span><br><span class=\"line\"><span class=\"comment\"> * @override</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\">public init(data?: any): <span class=\"keyword\">void</span>;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 视图显示后会调用的接口</span></span><br><span class=\"line\"><span class=\"comment\"> * @override</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">public viewDidAppear(): <span class=\"keyword\">void</span>;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 绑定UI事件，接收view层派发的事件</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; name 事件名称</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;(any)=&gt;void&#125; cb 事件回调</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;BaseMediator&#125; target 回调绑定对象</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">public bindEvent(name: string, <span class=\"attr\">cb</span>: <span class=\"function\">(<span class=\"params\">body: any</span>)=&gt;</span><span class=\"keyword\">void</span>, <span class=\"attr\">target</span>: BaseMediator): <span class=\"keyword\">void</span>;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 注册消息监听</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; noti 通知key值</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;(data: any)=&gt;void&#125; cb 通知监听的回调函数</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Object&#125; target 回调绑定的对象</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">public registerNoti(noti: string, <span class=\"attr\">cb</span>: <span class=\"function\">(<span class=\"params\">data: any</span>)=&gt;</span><span class=\"keyword\">void</span>, <span class=\"attr\">target</span>: any): <span class=\"keyword\">void</span>;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 发送消息通知</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; noti 通知key值</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Object&#125; body 消息传递的参数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">public sendNoti(noti: string, <span class=\"attr\">body</span>: any): <span class=\"keyword\">void</span>;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 发送命令接口</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;&#123;new (): BaseCommand&#125;&#125; cmd 命令类</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Object&#125; data 命令参数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">public sendCmd&lt;T extends BaseCommand&gt;(cmd: &#123;<span class=\"keyword\">new</span> (): T&#125;, data?: any): <span class=\"keyword\">void</span>;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 打开新场景</span></span><br><span class=\"line\"><span class=\"comment\"> * @param data &#123;Object&#125; data 自定义的任意类型透传数据。（可选）</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">public runScene(mediator: &#123;<span class=\"keyword\">new</span>(): BaseMediator&#125;, <span class=\"attr\">view</span>: &#123;<span class=\"keyword\">new</span>(): BaseScene&#125;, data?: any): <span class=\"keyword\">void</span>;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回上一场景</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns &#123;boolean&#125;是否存在上一个场景</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">public backScene(): boolean;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 打开view界面</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;&#123;new(): BaseMediator&#125;&#125; mediator 界面mediator类型，类类型。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;&#123;new(): BaseView&#125;&#125; view view 场景mediator类型，类类型。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Object&#125; data 自定义的任意类型透传数据。（可选）</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">public popView(mediator: &#123;<span class=\"keyword\">new</span>(): BaseMediator&#125;, <span class=\"attr\">view</span>: &#123;<span class=\"keyword\">new</span>(): BaseView&#125;, data?: any): <span class=\"keyword\">void</span>;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 添加层级</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;&#123;new(): BaseMediator&#125;&#125; mediator 界面mediator类型，类类型。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;&#123;new(): BaseView&#125;&#125; view view 场景mediator类型，类类型。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; zOrder 层级。（可选）</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Object&#125; data 自定义的任意类型透传数据。（可选）</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">public addLayer(mediator: &#123;<span class=\"keyword\">new</span>(): BaseMediator&#125;, <span class=\"attr\">view</span>: &#123;<span class=\"keyword\">new</span>(): BaseView&#125;, zOrder?: number, data?: any): <span class=\"keyword\">void</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 获取model对象 */</span></span><br><span class=\"line\">public getModel&lt;T extends BaseModel&gt;(model: &#123;<span class=\"keyword\">new</span> (): T&#125;): T;</span><br><span class=\"line\"><span class=\"comment\">/** 销毁接口 */</span></span><br><span class=\"line\">public destroy(): <span class=\"keyword\">void</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"使用方式\"><a href=\"#使用方式\" class=\"headerlink\" title=\"使用方式\"></a>使用方式</h4><ol>\n<li><p>初始化框架：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 调试模式为false、设计分辨率为1080*2048、宽适配。</span></span><br><span class=\"line\">Facade.getInstance().init(<span class=\"literal\">false</span>, cc.size(<span class=\"number\">1080</span>, <span class=\"number\">2048</span>), <span class=\"literal\">false</span>, <span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>注册model数据对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如果需要数据层，那么应该首先将所有需要的model在开始就都注册上。</span></span><br><span class=\"line\">Facade.getInstance().registerModel(PlayerModel);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行第一个场景：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 运行第一个场景时调用Facade的runScene接口，传入要运行的Mediator和Scene，还可选传入参数。</span></span><br><span class=\"line\">Facade.getInstance().runScene(DefaultSceneMediator, DefaultScene, <span class=\"string\">\"测试参数999\"</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>原则上说，除了上述三步需要引用Facade外，后面场景运行起来后就不需要再调用Facade了，在MVC的不同层级做对应的逻辑处理，父类接口都做了支持。</p>\n</li>\n<li><p>场景运行后，可以在场景Mediator中创建层级view，或者pop出view。Layer view与pop view的区别就是，他们是两个管理器在进行管理，我们认为Layer是场景内初始化创建并且不会关闭的view界面，而pop view是可以随时打开或者关闭的view界面，当然具体怎么使用可以灵活处理。例如在DefaultSceneMediator中：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建一个常驻的view界面FirstView </span></span><br><span class=\"line\"><span class=\"comment\"> * this.addLayer是BaseMediator中提供的基础功能接口（更多接口可以查看源码）。</span></span><br><span class=\"line\"><span class=\"comment\"> * 层级为1，并且传入参数：this._data</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.addLayer(FirstMediator, FirstView, <span class=\"number\">1</span>, <span class=\"keyword\">this</span>._data);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>View层的UI节点操作接口。在View里有个成员属性ui，该界面的UI节点会在初始化时自动初始化到这个成员属性上，在操作UI节点时可以通过这个属性进行操作，该属性类型是UIContainer，常用接口是getNode和getComponent，示例代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取node节点</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> closeBtnNode = <span class=\"keyword\">this</span>.ui.getNode(<span class=\"string\">\"close_btn\"</span>);</span><br><span class=\"line\">closeBtnNode.on(cc.Node.EventType.TOUCH_END, <span class=\"keyword\">this</span>.closeAllView, <span class=\"keyword\">this</span>);</span><br><span class=\"line\"><span class=\"comment\">// 获取Component组件</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> desLabel = <span class=\"keyword\">this</span>.ui.getComponent(<span class=\"string\">\"des_label\"</span>, cc.Label);</span><br><span class=\"line\">desLabel.string = <span class=\"string\">\"test\"</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>View层与Mediator层的事件交互。Mediator直接持有View的引用，所以可以直接调用View中的接口，而View与Mediator就需要通过事件（Event）来进行交互了。首先需要在Mediator中注册监听：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.bindEvent(FirstView.OPEN_B, (str: string)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"comment\">// todo something...</span></span><br><span class=\"line\">&#125;, <span class=\"keyword\">this</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>然后在View中通过sendEvent接口发送事件来通知Mediator：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一个参数是事件名称，第二个参数是传递的参数。</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.sendEvent(FirstView.OPEN_B, <span class=\"string\">\"BBB\"</span>);</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li><p>Mediator操作Model数据。在Mediator中可以通过getModel接口获取到指定的Model对象，通过直接引用来读取Model中的数据。而在修改数据的时候有两种方式，一种是通过Model的引用直接进行修改，这种情况大多是比较简单直接修改某个数值等；另一种比较复杂，比如要获取多个Model的数据进行复杂的逻辑操作并且修改多个值的情况，这种就适合将逻辑封装到一个命令（Command）中，通过发送命令来处理数据，这样可以减少Mediator中逻辑复杂度和耦合度。例子如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 直接通过引用进行修改的情况</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> playerModel = <span class=\"keyword\">this</span>.getModel(PlayerModel);</span><br><span class=\"line\"><span class=\"keyword\">this</span>.view.setLevelDisplay(playerModel.getPlayerLv());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过命令进行操作的情况</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.sendCmd(UpdateExpCommand, exp);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Model数据修改通知View刷新逻辑。大多数情况下，Model用来处理纯数据逻辑和与服务器交互的数据接口，当数据有变化时我们希望通知View刷新显示，这是我们只能通过抛出消息通知来告诉Mediator，然后通过Mediator来修改View显示，首先需要在Mediator中注册消息通知：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.registerNoti(Notification.UPDATE_EXP_FINISH, ()=&gt;&#123;</span><br><span class=\"line\">    <span class=\"comment\">// todo something ...</span></span><br><span class=\"line\">&#125;, <span class=\"keyword\">this</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>然后我们在Model中通过发送这个消息通知来告诉Mediator：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 该接口第二个参数可以传递参数</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.sendNoti(Notification.UPDATE_EXP_FINISH);</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li>Mediator与Mediator之间的交互很简单，就是使用上面介绍Model向Mediator发送通知的方式。</li>\n</ol>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><p>简单的交互规则和接口调用介绍就这么多，还有就是代码结构的组织也很重要，这个就是看每个人或者项目的合理安排了，毕竟也是仁者见仁，智者见智的事情。<strong>同时在examples目录下有完整的例子Demo</strong>。</p>\n<p>lightMVC目前仅适合中小型项目使用，过于复杂的大型项目可能应付起来就会有些吃力，不过后续会继续维护并拓展到lightMVC_ex中来支持大型项目开发，lightMVC会始终保持简单轻量。  </p>\n<p>最后框架中有什么问题或者需要改进的问题欢迎反馈。</p>\n<hr>\n<p><a href=\"https://github.com/yue19870813/lightMVC\" target=\"_blank\" rel=\"noopener\">项目地址：https://github.com/yue19870813/lightMVC</a></p>\n","site":{"data":{}},"excerpt":"<p>简易轻量级MVC框架，适用于中小型cocos creator项目使用。后续会拓展lightMVC_ex内容来适应大型项目的开发。这套轻量级MVC框架可以帮助开发者组织代码，以及业务结构，让项目更好维护和拓展，提高开发效率。examples目录下有完整的例子Demo。</p>\n<h4 id=\"架构图\"><a href=\"#架构图\" class=\"headerlink\" title=\"架构图\"></a>架构图</h4><p><img src=\"/images/mvc.png\" alt=\"架构图\"><br>","more":"</p>\n<h4 id=\"节点功能\"><a href=\"#节点功能\" class=\"headerlink\" title=\"节点功能\"></a>节点功能</h4><ul>\n<li><p>Facade:全局控制类，持有对MVC各层的管理对象。原则上来说，除了初始化框架调用init和运行第一个场景外，都不应该引用和调用Facada中的任何接口和属性。该类是个全局的单例对象，包含几个重要的接口如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 初始化框架配置</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;boolean&#125; debug 是否是调试状态</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;cc.Size&#125; designResolution 设计分辨率</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;boolean&#125; fitHeight 是否高适配</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;boolean&#125; fitWidth 是否宽适配</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">public init(debug: boolean, <span class=\"attr\">designResolution</span>: cc.Size, <span class=\"attr\">fitHeight</span>: boolean, <span class=\"attr\">fitWidth</span>: boolean): <span class=\"keyword\">void</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 运行场景</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;&#123;new(): BaseMediator&#125;&#125; mediator 场景mediator类型，类类型。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;&#123;new(): BaseScene&#125;&#125; view 场景mediator类型，类类型。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Object&#125; data 自定义的任意类型透传数据。（可选）</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;()=&gt;void&#125; cb 加载完成回调.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">public runScene(mediator: &#123;<span class=\"keyword\">new</span>(): BaseMediator&#125;, <span class=\"attr\">view</span>: &#123;<span class=\"keyword\">new</span>(): BaseScene&#125;, data?: any, cb?: <span class=\"function\"><span class=\"params\">()</span>=&gt;</span><span class=\"keyword\">void</span>): <span class=\"keyword\">void</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Model:数据对象，用于处理数据逻辑以及存储数据，常用来与服务器做数据交互，同时通过消息通知View层刷新显示。主要接口如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** Model初始化时会调用的接口，可以用来初始化一些数据 */</span></span><br><span class=\"line\">public init(): <span class=\"keyword\">void</span>;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 发送消息接口，当数据变化时需要调用此接口发送消息刷新View层。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; noti 消息名称</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Object&#125; data 消息数据</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">public sendNoti(noti: string, data?: any): <span class=\"keyword\">void</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 清理接口，子类可以实现清理逻辑 */</span></span><br><span class=\"line\">public clear(): <span class=\"keyword\">void</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>View:显示层，根据业务逻辑及数据显示，同时处理用户输入，通过事件与其他层交互。主要接口如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** View创建时会被调用，子类可以重写 */</span></span><br><span class=\"line\">public init(): <span class=\"keyword\">void</span>;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 发送UI事件，逻辑层接收事件处理逻辑。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; event 事件名称</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Object&#125; body 事件参数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">public sendEvent(event: string, body?: any): <span class=\"keyword\">void</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 关闭当前的界面 */</span></span><br><span class=\"line\">public closeView(): <span class=\"keyword\">void</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 关闭所有弹出的界面 */</span></span><br><span class=\"line\">public closeAllPopView(): <span class=\"keyword\">void</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 当界面被关闭时会被调用，子类可以重写该方法 */</span></span><br><span class=\"line\">public onClose(): <span class=\"keyword\">void</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 子类覆盖，返回UI的prefab路径,默认是空节点 */</span></span><br><span class=\"line\">public <span class=\"keyword\">static</span> path(): string;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Mediator:逻辑层中介者，负责接收Model层通知来刷新View层显示，同时还要接收View层事件来处理用户输入，并通过Command处理数据层数据。主要接口如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 初始化接口,此时视图还没有创建，如果想操作视图view请在viewDidAppear函数中进行。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Object&#125; data 自定义的任意类型透传数据。（可选）</span></span><br><span class=\"line\"><span class=\"comment\"> * @override</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\">public init(data?: any): <span class=\"keyword\">void</span>;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 视图显示后会调用的接口</span></span><br><span class=\"line\"><span class=\"comment\"> * @override</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">public viewDidAppear(): <span class=\"keyword\">void</span>;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 绑定UI事件，接收view层派发的事件</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; name 事件名称</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;(any)=&gt;void&#125; cb 事件回调</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;BaseMediator&#125; target 回调绑定对象</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">public bindEvent(name: string, <span class=\"attr\">cb</span>: <span class=\"function\">(<span class=\"params\">body: any</span>)=&gt;</span><span class=\"keyword\">void</span>, <span class=\"attr\">target</span>: BaseMediator): <span class=\"keyword\">void</span>;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 注册消息监听</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; noti 通知key值</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;(data: any)=&gt;void&#125; cb 通知监听的回调函数</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Object&#125; target 回调绑定的对象</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">public registerNoti(noti: string, <span class=\"attr\">cb</span>: <span class=\"function\">(<span class=\"params\">data: any</span>)=&gt;</span><span class=\"keyword\">void</span>, <span class=\"attr\">target</span>: any): <span class=\"keyword\">void</span>;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 发送消息通知</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; noti 通知key值</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Object&#125; body 消息传递的参数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">public sendNoti(noti: string, <span class=\"attr\">body</span>: any): <span class=\"keyword\">void</span>;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 发送命令接口</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;&#123;new (): BaseCommand&#125;&#125; cmd 命令类</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Object&#125; data 命令参数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">public sendCmd&lt;T extends BaseCommand&gt;(cmd: &#123;<span class=\"keyword\">new</span> (): T&#125;, data?: any): <span class=\"keyword\">void</span>;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 打开新场景</span></span><br><span class=\"line\"><span class=\"comment\"> * @param data &#123;Object&#125; data 自定义的任意类型透传数据。（可选）</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">public runScene(mediator: &#123;<span class=\"keyword\">new</span>(): BaseMediator&#125;, <span class=\"attr\">view</span>: &#123;<span class=\"keyword\">new</span>(): BaseScene&#125;, data?: any): <span class=\"keyword\">void</span>;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回上一场景</span></span><br><span class=\"line\"><span class=\"comment\"> * @returns &#123;boolean&#125;是否存在上一个场景</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">public backScene(): boolean;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 打开view界面</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;&#123;new(): BaseMediator&#125;&#125; mediator 界面mediator类型，类类型。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;&#123;new(): BaseView&#125;&#125; view view 场景mediator类型，类类型。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Object&#125; data 自定义的任意类型透传数据。（可选）</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">public popView(mediator: &#123;<span class=\"keyword\">new</span>(): BaseMediator&#125;, <span class=\"attr\">view</span>: &#123;<span class=\"keyword\">new</span>(): BaseView&#125;, data?: any): <span class=\"keyword\">void</span>;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 添加层级</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;&#123;new(): BaseMediator&#125;&#125; mediator 界面mediator类型，类类型。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;&#123;new(): BaseView&#125;&#125; view view 场景mediator类型，类类型。</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number&#125; zOrder 层级。（可选）</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Object&#125; data 自定义的任意类型透传数据。（可选）</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">public addLayer(mediator: &#123;<span class=\"keyword\">new</span>(): BaseMediator&#125;, <span class=\"attr\">view</span>: &#123;<span class=\"keyword\">new</span>(): BaseView&#125;, zOrder?: number, data?: any): <span class=\"keyword\">void</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 获取model对象 */</span></span><br><span class=\"line\">public getModel&lt;T extends BaseModel&gt;(model: &#123;<span class=\"keyword\">new</span> (): T&#125;): T;</span><br><span class=\"line\"><span class=\"comment\">/** 销毁接口 */</span></span><br><span class=\"line\">public destroy(): <span class=\"keyword\">void</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"使用方式\"><a href=\"#使用方式\" class=\"headerlink\" title=\"使用方式\"></a>使用方式</h4><ol>\n<li><p>初始化框架：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 调试模式为false、设计分辨率为1080*2048、宽适配。</span></span><br><span class=\"line\">Facade.getInstance().init(<span class=\"literal\">false</span>, cc.size(<span class=\"number\">1080</span>, <span class=\"number\">2048</span>), <span class=\"literal\">false</span>, <span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>注册model数据对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如果需要数据层，那么应该首先将所有需要的model在开始就都注册上。</span></span><br><span class=\"line\">Facade.getInstance().registerModel(PlayerModel);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行第一个场景：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 运行第一个场景时调用Facade的runScene接口，传入要运行的Mediator和Scene，还可选传入参数。</span></span><br><span class=\"line\">Facade.getInstance().runScene(DefaultSceneMediator, DefaultScene, <span class=\"string\">\"测试参数999\"</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>原则上说，除了上述三步需要引用Facade外，后面场景运行起来后就不需要再调用Facade了，在MVC的不同层级做对应的逻辑处理，父类接口都做了支持。</p>\n</li>\n<li><p>场景运行后，可以在场景Mediator中创建层级view，或者pop出view。Layer view与pop view的区别就是，他们是两个管理器在进行管理，我们认为Layer是场景内初始化创建并且不会关闭的view界面，而pop view是可以随时打开或者关闭的view界面，当然具体怎么使用可以灵活处理。例如在DefaultSceneMediator中：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建一个常驻的view界面FirstView </span></span><br><span class=\"line\"><span class=\"comment\"> * this.addLayer是BaseMediator中提供的基础功能接口（更多接口可以查看源码）。</span></span><br><span class=\"line\"><span class=\"comment\"> * 层级为1，并且传入参数：this._data</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.addLayer(FirstMediator, FirstView, <span class=\"number\">1</span>, <span class=\"keyword\">this</span>._data);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>View层的UI节点操作接口。在View里有个成员属性ui，该界面的UI节点会在初始化时自动初始化到这个成员属性上，在操作UI节点时可以通过这个属性进行操作，该属性类型是UIContainer，常用接口是getNode和getComponent，示例代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取node节点</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> closeBtnNode = <span class=\"keyword\">this</span>.ui.getNode(<span class=\"string\">\"close_btn\"</span>);</span><br><span class=\"line\">closeBtnNode.on(cc.Node.EventType.TOUCH_END, <span class=\"keyword\">this</span>.closeAllView, <span class=\"keyword\">this</span>);</span><br><span class=\"line\"><span class=\"comment\">// 获取Component组件</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> desLabel = <span class=\"keyword\">this</span>.ui.getComponent(<span class=\"string\">\"des_label\"</span>, cc.Label);</span><br><span class=\"line\">desLabel.string = <span class=\"string\">\"test\"</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>View层与Mediator层的事件交互。Mediator直接持有View的引用，所以可以直接调用View中的接口，而View与Mediator就需要通过事件（Event）来进行交互了。首先需要在Mediator中注册监听：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.bindEvent(FirstView.OPEN_B, (str: string)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"comment\">// todo something...</span></span><br><span class=\"line\">&#125;, <span class=\"keyword\">this</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>然后在View中通过sendEvent接口发送事件来通知Mediator：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一个参数是事件名称，第二个参数是传递的参数。</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.sendEvent(FirstView.OPEN_B, <span class=\"string\">\"BBB\"</span>);</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li><p>Mediator操作Model数据。在Mediator中可以通过getModel接口获取到指定的Model对象，通过直接引用来读取Model中的数据。而在修改数据的时候有两种方式，一种是通过Model的引用直接进行修改，这种情况大多是比较简单直接修改某个数值等；另一种比较复杂，比如要获取多个Model的数据进行复杂的逻辑操作并且修改多个值的情况，这种就适合将逻辑封装到一个命令（Command）中，通过发送命令来处理数据，这样可以减少Mediator中逻辑复杂度和耦合度。例子如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 直接通过引用进行修改的情况</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> playerModel = <span class=\"keyword\">this</span>.getModel(PlayerModel);</span><br><span class=\"line\"><span class=\"keyword\">this</span>.view.setLevelDisplay(playerModel.getPlayerLv());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过命令进行操作的情况</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.sendCmd(UpdateExpCommand, exp);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Model数据修改通知View刷新逻辑。大多数情况下，Model用来处理纯数据逻辑和与服务器交互的数据接口，当数据有变化时我们希望通知View刷新显示，这是我们只能通过抛出消息通知来告诉Mediator，然后通过Mediator来修改View显示，首先需要在Mediator中注册消息通知：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.registerNoti(Notification.UPDATE_EXP_FINISH, ()=&gt;&#123;</span><br><span class=\"line\">    <span class=\"comment\">// todo something ...</span></span><br><span class=\"line\">&#125;, <span class=\"keyword\">this</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>然后我们在Model中通过发送这个消息通知来告诉Mediator：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 该接口第二个参数可以传递参数</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.sendNoti(Notification.UPDATE_EXP_FINISH);</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li>Mediator与Mediator之间的交互很简单，就是使用上面介绍Model向Mediator发送通知的方式。</li>\n</ol>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><p>简单的交互规则和接口调用介绍就这么多，还有就是代码结构的组织也很重要，这个就是看每个人或者项目的合理安排了，毕竟也是仁者见仁，智者见智的事情。<strong>同时在examples目录下有完整的例子Demo</strong>。</p>\n<p>lightMVC目前仅适合中小型项目使用，过于复杂的大型项目可能应付起来就会有些吃力，不过后续会继续维护并拓展到lightMVC_ex中来支持大型项目开发，lightMVC会始终保持简单轻量。  </p>\n<p>最后框架中有什么问题或者需要改进的问题欢迎反馈。</p>\n<hr>\n<p><a href=\"https://github.com/yue19870813/lightMVC\" target=\"_blank\" rel=\"noopener\">项目地址：https://github.com/yue19870813/lightMVC</a></p>"},{"title":"项目前期准备的重要性","date":"2017-06-06T05:14:36.000Z","_content":"> ## **工欲善其事，必先利其器。**\n\n今天读《代码大全》的第3.1节（前期准备的重要性）后，感觉到项目的前期准备非常重要，但是仍然有很多管理者不重视项目的前期准备，往往上来就要求赶紧开发功能，速度出Demo。项目开发中总会有这种情况：项目开始一周后，程序仍然在搭底层，老板就会问“都一周了，怎么还一个功能都没出来？”，这种情况比比皆是，这里就要说一下项目前期准备的重要性。\n\n1. 其实在项目的**初期、中期、末期都应该强调质量**。初期应该注重底层架构和设计的质量，这里需要一个经验丰富的开发人员来反复的和产品确定需求和功能，然后从需求中提炼需求核心，再去设计底层框架，来保证项目的高效开发的同时还要保证项目后期易拓展、易维护。在项目中期更应该注重项目系统功能的正确性和质量，严格进行系统性测试，保证每个迭代功能的正确和完整。最后，在项目的末期更应该注重的是两方面质量，一个是项目的性能指标，另一个就是产品的体验细节。所以说在项目开发中的每个阶段质量都非常重要，只是侧重点不同，包括最重要的前期准备阶段。\n2. 前期准备工作的**核心目标就是规避和降低风险**。前期充分的准备工作包括认真去讨论和分析真实的需求，考虑讲来可能出现的拓展需求等。预先详细说明100%的需求和设计是不切实际的，不过“尽早的把哪些是最关键的需求要素和架构确定下来”是非常有价值的。前期的认真准备，可以让你更早的发现设计问题，软件开发中有这么一条宗旨：**发现错误的时间要尽可能接近引入该错误的时间**。 \n3. 针对于上一点中的**项目规划、分析出全面而准确的需求、创建高质量的架构**等活动都需要一定的专业技能和丰富的经验。这个不是靠讨论的多么详细能够决定的。\n4. 管理者们应该要明白：**软件开发不仅仅是写代码**（写功能）。开篇说了一个现象就是很多管理者都认为，项目一开始程序就是写功能，然则不是。就算排除功能分析这步，也还有架构这一步。高质量的架构就像稳定的地基，可以让摩天大楼稳如泰山一样，让你的项目可以安全并高效的开发，而不是时有问题出现。所以说开工前打地基很重要，除非你要搭的是一间茅草屋。其实只要做几个大项目，你就能体会到：**事先做好计划和架构能避免很多压力和风险**。\n5. 假如你的BOSS让你立刻写代码，你可能有下面几种方式处理：\n    - 断然拒绝。选择这种方式只能说你很勇敢，并且你兜里的钱很充裕，或者说你的工作机会很多很多（再多这样下去也要玩完），很显然这种办法很难让人接受，只会制造矛盾。\n    - 假装在写。事实上你在调研和设计，然后再投入开发，这么做你很为你的BOSS着想，因为从他的角度来看这就是“*无知是福*”。\n    - **教你的BOSS**：告诉他技术层次设计的微妙之处，设计有多么重要，这能增加世界上懂技术业务老板的数量，让项目进行更顺利。\n6. **清楚你要做的是什么**。很多情况下都是“先做一个错误的东西出来，然后扔掉，并从头来过”。越明确你要做的是什么，就越能降低项目的成本，提供效率。\n\n不仅仅软件开发领域中前期准备非常重要，其他各行各业都一样，准备充分才能走的更远。最后再一次引用论语中的一句话：**工欲善其事，必先利其器**。","source":"_posts/the-importance-of-project-prepa.md","raw":"---\ntitle: 项目前期准备的重要性\ndate: 2017-06-06 13:14:36\ntags: 前期准备\ncategories: 经验总结\n---\n> ## **工欲善其事，必先利其器。**\n\n今天读《代码大全》的第3.1节（前期准备的重要性）后，感觉到项目的前期准备非常重要，但是仍然有很多管理者不重视项目的前期准备，往往上来就要求赶紧开发功能，速度出Demo。项目开发中总会有这种情况：项目开始一周后，程序仍然在搭底层，老板就会问“都一周了，怎么还一个功能都没出来？”，这种情况比比皆是，这里就要说一下项目前期准备的重要性。\n\n1. 其实在项目的**初期、中期、末期都应该强调质量**。初期应该注重底层架构和设计的质量，这里需要一个经验丰富的开发人员来反复的和产品确定需求和功能，然后从需求中提炼需求核心，再去设计底层框架，来保证项目的高效开发的同时还要保证项目后期易拓展、易维护。在项目中期更应该注重项目系统功能的正确性和质量，严格进行系统性测试，保证每个迭代功能的正确和完整。最后，在项目的末期更应该注重的是两方面质量，一个是项目的性能指标，另一个就是产品的体验细节。所以说在项目开发中的每个阶段质量都非常重要，只是侧重点不同，包括最重要的前期准备阶段。\n2. 前期准备工作的**核心目标就是规避和降低风险**。前期充分的准备工作包括认真去讨论和分析真实的需求，考虑讲来可能出现的拓展需求等。预先详细说明100%的需求和设计是不切实际的，不过“尽早的把哪些是最关键的需求要素和架构确定下来”是非常有价值的。前期的认真准备，可以让你更早的发现设计问题，软件开发中有这么一条宗旨：**发现错误的时间要尽可能接近引入该错误的时间**。 \n3. 针对于上一点中的**项目规划、分析出全面而准确的需求、创建高质量的架构**等活动都需要一定的专业技能和丰富的经验。这个不是靠讨论的多么详细能够决定的。\n4. 管理者们应该要明白：**软件开发不仅仅是写代码**（写功能）。开篇说了一个现象就是很多管理者都认为，项目一开始程序就是写功能，然则不是。就算排除功能分析这步，也还有架构这一步。高质量的架构就像稳定的地基，可以让摩天大楼稳如泰山一样，让你的项目可以安全并高效的开发，而不是时有问题出现。所以说开工前打地基很重要，除非你要搭的是一间茅草屋。其实只要做几个大项目，你就能体会到：**事先做好计划和架构能避免很多压力和风险**。\n5. 假如你的BOSS让你立刻写代码，你可能有下面几种方式处理：\n    - 断然拒绝。选择这种方式只能说你很勇敢，并且你兜里的钱很充裕，或者说你的工作机会很多很多（再多这样下去也要玩完），很显然这种办法很难让人接受，只会制造矛盾。\n    - 假装在写。事实上你在调研和设计，然后再投入开发，这么做你很为你的BOSS着想，因为从他的角度来看这就是“*无知是福*”。\n    - **教你的BOSS**：告诉他技术层次设计的微妙之处，设计有多么重要，这能增加世界上懂技术业务老板的数量，让项目进行更顺利。\n6. **清楚你要做的是什么**。很多情况下都是“先做一个错误的东西出来，然后扔掉，并从头来过”。越明确你要做的是什么，就越能降低项目的成本，提供效率。\n\n不仅仅软件开发领域中前期准备非常重要，其他各行各业都一样，准备充分才能走的更远。最后再一次引用论语中的一句话：**工欲善其事，必先利其器**。","slug":"the-importance-of-project-prepa","published":1,"updated":"2019-07-01T12:35:47.383Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjycv1m3r000sok9mzcxgdiqy","content":"<blockquote>\n<h2 id=\"工欲善其事，必先利其器。\"><a href=\"#工欲善其事，必先利其器。\" class=\"headerlink\" title=\"工欲善其事，必先利其器。\"></a><strong>工欲善其事，必先利其器。</strong></h2></blockquote>\n<p>今天读《代码大全》的第3.1节（前期准备的重要性）后，感觉到项目的前期准备非常重要，但是仍然有很多管理者不重视项目的前期准备，往往上来就要求赶紧开发功能，速度出Demo。项目开发中总会有这种情况：项目开始一周后，程序仍然在搭底层，老板就会问“都一周了，怎么还一个功能都没出来？”，这种情况比比皆是，这里就要说一下项目前期准备的重要性。</p>\n<ol>\n<li>其实在项目的<strong>初期、中期、末期都应该强调质量</strong>。初期应该注重底层架构和设计的质量，这里需要一个经验丰富的开发人员来反复的和产品确定需求和功能，然后从需求中提炼需求核心，再去设计底层框架，来保证项目的高效开发的同时还要保证项目后期易拓展、易维护。在项目中期更应该注重项目系统功能的正确性和质量，严格进行系统性测试，保证每个迭代功能的正确和完整。最后，在项目的末期更应该注重的是两方面质量，一个是项目的性能指标，另一个就是产品的体验细节。所以说在项目开发中的每个阶段质量都非常重要，只是侧重点不同，包括最重要的前期准备阶段。</li>\n<li>前期准备工作的<strong>核心目标就是规避和降低风险</strong>。前期充分的准备工作包括认真去讨论和分析真实的需求，考虑讲来可能出现的拓展需求等。预先详细说明100%的需求和设计是不切实际的，不过“尽早的把哪些是最关键的需求要素和架构确定下来”是非常有价值的。前期的认真准备，可以让你更早的发现设计问题，软件开发中有这么一条宗旨：<strong>发现错误的时间要尽可能接近引入该错误的时间</strong>。 </li>\n<li>针对于上一点中的<strong>项目规划、分析出全面而准确的需求、创建高质量的架构</strong>等活动都需要一定的专业技能和丰富的经验。这个不是靠讨论的多么详细能够决定的。</li>\n<li>管理者们应该要明白：<strong>软件开发不仅仅是写代码</strong>（写功能）。开篇说了一个现象就是很多管理者都认为，项目一开始程序就是写功能，然则不是。就算排除功能分析这步，也还有架构这一步。高质量的架构就像稳定的地基，可以让摩天大楼稳如泰山一样，让你的项目可以安全并高效的开发，而不是时有问题出现。所以说开工前打地基很重要，除非你要搭的是一间茅草屋。其实只要做几个大项目，你就能体会到：<strong>事先做好计划和架构能避免很多压力和风险</strong>。</li>\n<li>假如你的BOSS让你立刻写代码，你可能有下面几种方式处理：<ul>\n<li>断然拒绝。选择这种方式只能说你很勇敢，并且你兜里的钱很充裕，或者说你的工作机会很多很多（再多这样下去也要玩完），很显然这种办法很难让人接受，只会制造矛盾。</li>\n<li>假装在写。事实上你在调研和设计，然后再投入开发，这么做你很为你的BOSS着想，因为从他的角度来看这就是“<em>无知是福</em>”。</li>\n<li><strong>教你的BOSS</strong>：告诉他技术层次设计的微妙之处，设计有多么重要，这能增加世界上懂技术业务老板的数量，让项目进行更顺利。</li>\n</ul>\n</li>\n<li><strong>清楚你要做的是什么</strong>。很多情况下都是“先做一个错误的东西出来，然后扔掉，并从头来过”。越明确你要做的是什么，就越能降低项目的成本，提供效率。</li>\n</ol>\n<p>不仅仅软件开发领域中前期准备非常重要，其他各行各业都一样，准备充分才能走的更远。最后再一次引用论语中的一句话：<strong>工欲善其事，必先利其器</strong>。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<h2 id=\"工欲善其事，必先利其器。\"><a href=\"#工欲善其事，必先利其器。\" class=\"headerlink\" title=\"工欲善其事，必先利其器。\"></a><strong>工欲善其事，必先利其器。</strong></h2></blockquote>\n<p>今天读《代码大全》的第3.1节（前期准备的重要性）后，感觉到项目的前期准备非常重要，但是仍然有很多管理者不重视项目的前期准备，往往上来就要求赶紧开发功能，速度出Demo。项目开发中总会有这种情况：项目开始一周后，程序仍然在搭底层，老板就会问“都一周了，怎么还一个功能都没出来？”，这种情况比比皆是，这里就要说一下项目前期准备的重要性。</p>\n<ol>\n<li>其实在项目的<strong>初期、中期、末期都应该强调质量</strong>。初期应该注重底层架构和设计的质量，这里需要一个经验丰富的开发人员来反复的和产品确定需求和功能，然后从需求中提炼需求核心，再去设计底层框架，来保证项目的高效开发的同时还要保证项目后期易拓展、易维护。在项目中期更应该注重项目系统功能的正确性和质量，严格进行系统性测试，保证每个迭代功能的正确和完整。最后，在项目的末期更应该注重的是两方面质量，一个是项目的性能指标，另一个就是产品的体验细节。所以说在项目开发中的每个阶段质量都非常重要，只是侧重点不同，包括最重要的前期准备阶段。</li>\n<li>前期准备工作的<strong>核心目标就是规避和降低风险</strong>。前期充分的准备工作包括认真去讨论和分析真实的需求，考虑讲来可能出现的拓展需求等。预先详细说明100%的需求和设计是不切实际的，不过“尽早的把哪些是最关键的需求要素和架构确定下来”是非常有价值的。前期的认真准备，可以让你更早的发现设计问题，软件开发中有这么一条宗旨：<strong>发现错误的时间要尽可能接近引入该错误的时间</strong>。 </li>\n<li>针对于上一点中的<strong>项目规划、分析出全面而准确的需求、创建高质量的架构</strong>等活动都需要一定的专业技能和丰富的经验。这个不是靠讨论的多么详细能够决定的。</li>\n<li>管理者们应该要明白：<strong>软件开发不仅仅是写代码</strong>（写功能）。开篇说了一个现象就是很多管理者都认为，项目一开始程序就是写功能，然则不是。就算排除功能分析这步，也还有架构这一步。高质量的架构就像稳定的地基，可以让摩天大楼稳如泰山一样，让你的项目可以安全并高效的开发，而不是时有问题出现。所以说开工前打地基很重要，除非你要搭的是一间茅草屋。其实只要做几个大项目，你就能体会到：<strong>事先做好计划和架构能避免很多压力和风险</strong>。</li>\n<li>假如你的BOSS让你立刻写代码，你可能有下面几种方式处理：<ul>\n<li>断然拒绝。选择这种方式只能说你很勇敢，并且你兜里的钱很充裕，或者说你的工作机会很多很多（再多这样下去也要玩完），很显然这种办法很难让人接受，只会制造矛盾。</li>\n<li>假装在写。事实上你在调研和设计，然后再投入开发，这么做你很为你的BOSS着想，因为从他的角度来看这就是“<em>无知是福</em>”。</li>\n<li><strong>教你的BOSS</strong>：告诉他技术层次设计的微妙之处，设计有多么重要，这能增加世界上懂技术业务老板的数量，让项目进行更顺利。</li>\n</ul>\n</li>\n<li><strong>清楚你要做的是什么</strong>。很多情况下都是“先做一个错误的东西出来，然后扔掉，并从头来过”。越明确你要做的是什么，就越能降低项目的成本，提供效率。</li>\n</ol>\n<p>不仅仅软件开发领域中前期准备非常重要，其他各行各业都一样，准备充分才能走的更远。最后再一次引用论语中的一句话：<strong>工欲善其事，必先利其器</strong>。</p>\n"},{"title":"Cocos Creator 2.x透明渐变效果实现","date":"2019-07-19T15:21:08.000Z","_content":"\n​之前写了个透明过渡动画实现是基于Cocos Creator 1.x的，鉴于现在大多数开发者都使用2.x了，并且2.x与1.x中shader的使用方式有很大的不同，这里就把这个效果移植到2.x中。[*原文链接：cocos creator 1.x透明渐变效果实现*](http://ituuz.com/2018/05/02/shader-transfer/)\n效果图如下：\n![cat](/images/cats.gif)<!--more-->\n在Cocos Creator 2.1中首先要先创建两个文件，分别是Material(材质)和Effect(特效)文件，创建方法如下图：\n![2222](/images/2222.jpg)\n创建完成效果就是这两个文件：\n![111](/images/111.png)\n在文件系统中分别是如下两个文件：\n![files](/images/files.png)\n在编辑器中选中mtl材质文件，effect选择我们自己创建的effect，钩上USE_TEXTURE选项，如下图所示：\n![ineditor](/images/ineditor.png)\n然后打开特效文件，我们shader的逻辑就是在这个文件里编写，打开文件，里面的内容不用删除，我们只修改frag shader部分就可以了，代码如下：\n``` javascript\n// 注意：当前版本的格式是实验性的，之后还会进行修改。\n// 后续版本的格式不保证兼容当前格式，可能需要手动升级到最新版本。，\n%{\n  techniques: [\n    {\n      passes: [\n        {\n          vert: vs\n          frag: fs\n          cullMode: none\n          blend: true\n        }\n      ]\n      layer: 0\n    }\n  ]\n  properties: {\n    texture: {\n      type: sampler2D\n      value: null\n    }\n    alphaThreshold: {\n      type: number\n​      value: 0.5\n    }\n  }\n%}\n%% vs {\n​\nprecision highp float;\nuniform mat4 cc_matViewProj;\n#if _USE_MODEL\n  uniform mat4 cc_matWorld;\n#endif\nattribute vec3 a_position;\nattribute lowp vec4 a_color;\n#if USE_TEXTURE\n  attribute mediump vec2 a_uv0;\n  varying mediump vec2 v_uv0;\n#endif\nvarying lowp vec4 v_color;\nvoid main () {\n  mat4 mvp;\n  #if _USE_MODEL\n    mvp = cc_matViewProj * cc_matWorld;\n  #else\n    mvp = cc_matViewProj;\n  #endif\n  #if USE_TEXTURE\n    v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = mvp * vec4(a_position, 1);\n}\n}\n%% fs {\nprecision highp float;\n#if USE_TEXTURE\n  uniform sampler2D texture;\n  varying mediump vec2 v_uv0;\n#endif\nuniform float time;\n#include <alpha-test>\nvarying lowp vec4 v_color;\nvoid main () {\n  vec4 color = v_color;\n  #if USE_TEXTURE\n    color *= texture2D(texture, v_uv0);\n    #if _USE_ETC1_TEXTURE\n      color.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n​\n  ALPHA_TEST(color);\n  gl_FragColor = color;\n  // 这里是新增的逻辑代码\n  float temp = v_uv0.x - time;\n  if (temp <= 0.0) {\n    float temp2 = abs(temp);\n    if (temp2 <= 0.2) {\n      gl_FragColor.w = 1.0 - temp2/0.2;\n    } else {\n      gl_FragColor.w = 0.0;\n    }\n  } else {\n    gl_FragColor.w = 1.0;\n  }\n}\n}\n```\n然后我们再看业务代码，这里就比1.x中使用起来简单多了：\n![code](/images/code.png)\n最后我们在编辑器中将它绑定到sprite上，选中要使用特效的sprite节点，将材质属性设置上我们刚刚新写的材质：\n![12132](/images/12132.png)\n运行就出现开头的效果了，下面再贴出上篇文章的效果图：\n![shader-transfer-1](/images/shader-transfer-1.gif)\n---\n[Demo地址:https://github.com/yue19870813/CocosDemo](https://github.com/yue19870813/CocosDemo)","source":"_posts/透明渐变过渡2-0.md","raw":"---\ntitle: Cocos Creator 2.x透明渐变效果实现\ndate: 2019-07-19 23:21:08\ntags: [shader,cocos creator]\ncategories: cocos creator\n---\n\n​之前写了个透明过渡动画实现是基于Cocos Creator 1.x的，鉴于现在大多数开发者都使用2.x了，并且2.x与1.x中shader的使用方式有很大的不同，这里就把这个效果移植到2.x中。[*原文链接：cocos creator 1.x透明渐变效果实现*](http://ituuz.com/2018/05/02/shader-transfer/)\n效果图如下：\n![cat](/images/cats.gif)<!--more-->\n在Cocos Creator 2.1中首先要先创建两个文件，分别是Material(材质)和Effect(特效)文件，创建方法如下图：\n![2222](/images/2222.jpg)\n创建完成效果就是这两个文件：\n![111](/images/111.png)\n在文件系统中分别是如下两个文件：\n![files](/images/files.png)\n在编辑器中选中mtl材质文件，effect选择我们自己创建的effect，钩上USE_TEXTURE选项，如下图所示：\n![ineditor](/images/ineditor.png)\n然后打开特效文件，我们shader的逻辑就是在这个文件里编写，打开文件，里面的内容不用删除，我们只修改frag shader部分就可以了，代码如下：\n``` javascript\n// 注意：当前版本的格式是实验性的，之后还会进行修改。\n// 后续版本的格式不保证兼容当前格式，可能需要手动升级到最新版本。，\n%{\n  techniques: [\n    {\n      passes: [\n        {\n          vert: vs\n          frag: fs\n          cullMode: none\n          blend: true\n        }\n      ]\n      layer: 0\n    }\n  ]\n  properties: {\n    texture: {\n      type: sampler2D\n      value: null\n    }\n    alphaThreshold: {\n      type: number\n​      value: 0.5\n    }\n  }\n%}\n%% vs {\n​\nprecision highp float;\nuniform mat4 cc_matViewProj;\n#if _USE_MODEL\n  uniform mat4 cc_matWorld;\n#endif\nattribute vec3 a_position;\nattribute lowp vec4 a_color;\n#if USE_TEXTURE\n  attribute mediump vec2 a_uv0;\n  varying mediump vec2 v_uv0;\n#endif\nvarying lowp vec4 v_color;\nvoid main () {\n  mat4 mvp;\n  #if _USE_MODEL\n    mvp = cc_matViewProj * cc_matWorld;\n  #else\n    mvp = cc_matViewProj;\n  #endif\n  #if USE_TEXTURE\n    v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = mvp * vec4(a_position, 1);\n}\n}\n%% fs {\nprecision highp float;\n#if USE_TEXTURE\n  uniform sampler2D texture;\n  varying mediump vec2 v_uv0;\n#endif\nuniform float time;\n#include <alpha-test>\nvarying lowp vec4 v_color;\nvoid main () {\n  vec4 color = v_color;\n  #if USE_TEXTURE\n    color *= texture2D(texture, v_uv0);\n    #if _USE_ETC1_TEXTURE\n      color.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n​\n  ALPHA_TEST(color);\n  gl_FragColor = color;\n  // 这里是新增的逻辑代码\n  float temp = v_uv0.x - time;\n  if (temp <= 0.0) {\n    float temp2 = abs(temp);\n    if (temp2 <= 0.2) {\n      gl_FragColor.w = 1.0 - temp2/0.2;\n    } else {\n      gl_FragColor.w = 0.0;\n    }\n  } else {\n    gl_FragColor.w = 1.0;\n  }\n}\n}\n```\n然后我们再看业务代码，这里就比1.x中使用起来简单多了：\n![code](/images/code.png)\n最后我们在编辑器中将它绑定到sprite上，选中要使用特效的sprite节点，将材质属性设置上我们刚刚新写的材质：\n![12132](/images/12132.png)\n运行就出现开头的效果了，下面再贴出上篇文章的效果图：\n![shader-transfer-1](/images/shader-transfer-1.gif)\n---\n[Demo地址:https://github.com/yue19870813/CocosDemo](https://github.com/yue19870813/CocosDemo)","slug":"透明渐变过渡2-0","published":1,"updated":"2019-07-19T15:42:55.815Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjycv1m3r000tok9mkt59o086","content":"<p>​之前写了个透明过渡动画实现是基于Cocos Creator 1.x的，鉴于现在大多数开发者都使用2.x了，并且2.x与1.x中shader的使用方式有很大的不同，这里就把这个效果移植到2.x中。<a href=\"http://ituuz.com/2018/05/02/shader-transfer/\"><em>原文链接：cocos creator 1.x透明渐变效果实现</em></a><br>效果图如下：<br><img src=\"/images/cats.gif\" alt=\"cat\"><a id=\"more\"></a><br>在Cocos Creator 2.1中首先要先创建两个文件，分别是Material(材质)和Effect(特效)文件，创建方法如下图：<br><img src=\"/images/2222.jpg\" alt=\"2222\"><br>创建完成效果就是这两个文件：<br><img src=\"/images/111.png\" alt=\"111\"><br>在文件系统中分别是如下两个文件：<br><img src=\"/images/files.png\" alt=\"files\"><br>在编辑器中选中mtl材质文件，effect选择我们自己创建的effect，钩上USE_TEXTURE选项，如下图所示：<br><img src=\"/images/ineditor.png\" alt=\"ineditor\"><br>然后打开特效文件，我们shader的逻辑就是在这个文件里编写，打开文件，里面的内容不用删除，我们只修改frag shader部分就可以了，代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 注意：当前版本的格式是实验性的，之后还会进行修改。</span></span><br><span class=\"line\"><span class=\"comment\">// 后续版本的格式不保证兼容当前格式，可能需要手动升级到最新版本。，</span></span><br><span class=\"line\">%&#123;</span><br><span class=\"line\">  techniques: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      passes: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          vert: vs</span><br><span class=\"line\">          frag: fs</span><br><span class=\"line\">          cullMode: none</span><br><span class=\"line\">          blend: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">      layer: <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">  properties: &#123;</span><br><span class=\"line\">    texture: &#123;</span><br><span class=\"line\">      type: sampler2D</span><br><span class=\"line\">      value: <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    alphaThreshold: &#123;</span><br><span class=\"line\">      type: number</span><br><span class=\"line\">​      value: <span class=\"number\">0.5</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">%&#125;</span><br><span class=\"line\">%% vs &#123;</span><br><span class=\"line\">​</span><br><span class=\"line\">precision highp float;</span><br><span class=\"line\">uniform mat4 cc_matViewProj;</span><br><span class=\"line\">#if _USE_MODEL</span><br><span class=\"line\">  uniform mat4 cc_matWorld;</span><br><span class=\"line\">#endif</span><br><span class=\"line\">attribute vec3 a_position;</span><br><span class=\"line\">attribute lowp vec4 a_color;</span><br><span class=\"line\">#if USE_TEXTURE</span><br><span class=\"line\">  attribute mediump vec2 a_uv0;</span><br><span class=\"line\">  varying mediump vec2 v_uv0;</span><br><span class=\"line\">#endif</span><br><span class=\"line\">varying lowp vec4 v_color;</span><br><span class=\"line\"><span class=\"keyword\">void</span> main () &#123;</span><br><span class=\"line\">  mat4 mvp;</span><br><span class=\"line\">  #if _USE_MODEL</span><br><span class=\"line\">    mvp = cc_matViewProj * cc_matWorld;</span><br><span class=\"line\">  #else</span><br><span class=\"line\">    mvp = cc_matViewProj;</span><br><span class=\"line\">  #endif</span><br><span class=\"line\">  #if USE_TEXTURE</span><br><span class=\"line\">    v_uv0 = a_uv0;</span><br><span class=\"line\">  #endif</span><br><span class=\"line\">  v_color = a_color;</span><br><span class=\"line\">  gl_Position = mvp * vec4(a_position, <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">%% fs &#123;</span><br><span class=\"line\">precision highp float;</span><br><span class=\"line\">#if USE_TEXTURE</span><br><span class=\"line\">  uniform sampler2D texture;</span><br><span class=\"line\">  varying mediump vec2 v_uv0;</span><br><span class=\"line\">#endif</span><br><span class=\"line\">uniform float time;</span><br><span class=\"line\">#include &lt;alpha-test&gt;</span><br><span class=\"line\">varying lowp vec4 v_color;</span><br><span class=\"line\"><span class=\"keyword\">void</span> main () &#123;</span><br><span class=\"line\">  vec4 color = v_color;</span><br><span class=\"line\">  #if USE_TEXTURE</span><br><span class=\"line\">    color *= texture2D(texture, v_uv0);</span><br><span class=\"line\">    #if _USE_ETC1_TEXTURE</span><br><span class=\"line\">      color.a *= texture2D(texture, v_uv0 + vec2(<span class=\"number\">0</span>, <span class=\"number\">0.5</span>)).r;</span><br><span class=\"line\">    #endif</span><br><span class=\"line\">  #endif</span><br><span class=\"line\">​</span><br><span class=\"line\">  ALPHA_TEST(color);</span><br><span class=\"line\">  gl_FragColor = color;</span><br><span class=\"line\">  <span class=\"comment\">// 这里是新增的逻辑代码</span></span><br><span class=\"line\">  float temp = v_uv0.x - time;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (temp &lt;= <span class=\"number\">0.0</span>) &#123;</span><br><span class=\"line\">    float temp2 = abs(temp);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (temp2 &lt;= <span class=\"number\">0.2</span>) &#123;</span><br><span class=\"line\">      gl_FragColor.w = <span class=\"number\">1.0</span> - temp2/<span class=\"number\">0.2</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      gl_FragColor.w = <span class=\"number\">0.0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    gl_FragColor.w = <span class=\"number\">1.0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后我们再看业务代码，这里就比1.x中使用起来简单多了：<br><img src=\"/images/code.png\" alt=\"code\"><br>最后我们在编辑器中将它绑定到sprite上，选中要使用特效的sprite节点，将材质属性设置上我们刚刚新写的材质：<br><img src=\"/images/12132.png\" alt=\"12132\"><br>运行就出现开头的效果了，下面再贴出上篇文章的效果图：</p>\n<h2 id><a href=\"#\" class=\"headerlink\" title></a><img src=\"/images/shader-transfer-1.gif\" alt=\"shader-transfer-1\"></h2><p><a href=\"https://github.com/yue19870813/CocosDemo\" target=\"_blank\" rel=\"noopener\">Demo地址:https://github.com/yue19870813/CocosDemo</a></p>\n","site":{"data":{}},"excerpt":"<p>​之前写了个透明过渡动画实现是基于Cocos Creator 1.x的，鉴于现在大多数开发者都使用2.x了，并且2.x与1.x中shader的使用方式有很大的不同，这里就把这个效果移植到2.x中。<a href=\"http://ituuz.com/2018/05/02/shader-transfer/\"><em>原文链接：cocos creator 1.x透明渐变效果实现</em></a><br>效果图如下：<br><img src=\"/images/cats.gif\" alt=\"cat\">","more":"<br>在Cocos Creator 2.1中首先要先创建两个文件，分别是Material(材质)和Effect(特效)文件，创建方法如下图：<br><img src=\"/images/2222.jpg\" alt=\"2222\"><br>创建完成效果就是这两个文件：<br><img src=\"/images/111.png\" alt=\"111\"><br>在文件系统中分别是如下两个文件：<br><img src=\"/images/files.png\" alt=\"files\"><br>在编辑器中选中mtl材质文件，effect选择我们自己创建的effect，钩上USE_TEXTURE选项，如下图所示：<br><img src=\"/images/ineditor.png\" alt=\"ineditor\"><br>然后打开特效文件，我们shader的逻辑就是在这个文件里编写，打开文件，里面的内容不用删除，我们只修改frag shader部分就可以了，代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 注意：当前版本的格式是实验性的，之后还会进行修改。</span></span><br><span class=\"line\"><span class=\"comment\">// 后续版本的格式不保证兼容当前格式，可能需要手动升级到最新版本。，</span></span><br><span class=\"line\">%&#123;</span><br><span class=\"line\">  techniques: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      passes: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          vert: vs</span><br><span class=\"line\">          frag: fs</span><br><span class=\"line\">          cullMode: none</span><br><span class=\"line\">          blend: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">      layer: <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">  properties: &#123;</span><br><span class=\"line\">    texture: &#123;</span><br><span class=\"line\">      type: sampler2D</span><br><span class=\"line\">      value: <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    alphaThreshold: &#123;</span><br><span class=\"line\">      type: number</span><br><span class=\"line\">​      value: <span class=\"number\">0.5</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">%&#125;</span><br><span class=\"line\">%% vs &#123;</span><br><span class=\"line\">​</span><br><span class=\"line\">precision highp float;</span><br><span class=\"line\">uniform mat4 cc_matViewProj;</span><br><span class=\"line\">#if _USE_MODEL</span><br><span class=\"line\">  uniform mat4 cc_matWorld;</span><br><span class=\"line\">#endif</span><br><span class=\"line\">attribute vec3 a_position;</span><br><span class=\"line\">attribute lowp vec4 a_color;</span><br><span class=\"line\">#if USE_TEXTURE</span><br><span class=\"line\">  attribute mediump vec2 a_uv0;</span><br><span class=\"line\">  varying mediump vec2 v_uv0;</span><br><span class=\"line\">#endif</span><br><span class=\"line\">varying lowp vec4 v_color;</span><br><span class=\"line\"><span class=\"keyword\">void</span> main () &#123;</span><br><span class=\"line\">  mat4 mvp;</span><br><span class=\"line\">  #if _USE_MODEL</span><br><span class=\"line\">    mvp = cc_matViewProj * cc_matWorld;</span><br><span class=\"line\">  #else</span><br><span class=\"line\">    mvp = cc_matViewProj;</span><br><span class=\"line\">  #endif</span><br><span class=\"line\">  #if USE_TEXTURE</span><br><span class=\"line\">    v_uv0 = a_uv0;</span><br><span class=\"line\">  #endif</span><br><span class=\"line\">  v_color = a_color;</span><br><span class=\"line\">  gl_Position = mvp * vec4(a_position, <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">%% fs &#123;</span><br><span class=\"line\">precision highp float;</span><br><span class=\"line\">#if USE_TEXTURE</span><br><span class=\"line\">  uniform sampler2D texture;</span><br><span class=\"line\">  varying mediump vec2 v_uv0;</span><br><span class=\"line\">#endif</span><br><span class=\"line\">uniform float time;</span><br><span class=\"line\">#include &lt;alpha-test&gt;</span><br><span class=\"line\">varying lowp vec4 v_color;</span><br><span class=\"line\"><span class=\"keyword\">void</span> main () &#123;</span><br><span class=\"line\">  vec4 color = v_color;</span><br><span class=\"line\">  #if USE_TEXTURE</span><br><span class=\"line\">    color *= texture2D(texture, v_uv0);</span><br><span class=\"line\">    #if _USE_ETC1_TEXTURE</span><br><span class=\"line\">      color.a *= texture2D(texture, v_uv0 + vec2(<span class=\"number\">0</span>, <span class=\"number\">0.5</span>)).r;</span><br><span class=\"line\">    #endif</span><br><span class=\"line\">  #endif</span><br><span class=\"line\">​</span><br><span class=\"line\">  ALPHA_TEST(color);</span><br><span class=\"line\">  gl_FragColor = color;</span><br><span class=\"line\">  <span class=\"comment\">// 这里是新增的逻辑代码</span></span><br><span class=\"line\">  float temp = v_uv0.x - time;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (temp &lt;= <span class=\"number\">0.0</span>) &#123;</span><br><span class=\"line\">    float temp2 = abs(temp);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (temp2 &lt;= <span class=\"number\">0.2</span>) &#123;</span><br><span class=\"line\">      gl_FragColor.w = <span class=\"number\">1.0</span> - temp2/<span class=\"number\">0.2</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      gl_FragColor.w = <span class=\"number\">0.0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    gl_FragColor.w = <span class=\"number\">1.0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后我们再看业务代码，这里就比1.x中使用起来简单多了：<br><img src=\"/images/code.png\" alt=\"code\"><br>最后我们在编辑器中将它绑定到sprite上，选中要使用特效的sprite节点，将材质属性设置上我们刚刚新写的材质：<br><img src=\"/images/12132.png\" alt=\"12132\"><br>运行就出现开头的效果了，下面再贴出上篇文章的效果图：</p>\n<h2 id><a href=\"#\" class=\"headerlink\" title></a><img src=\"/images/shader-transfer-1.gif\" alt=\"shader-transfer-1\"></h2><p><a href=\"https://github.com/yue19870813/CocosDemo\" target=\"_blank\" rel=\"noopener\">Demo地址:https://github.com/yue19870813/CocosDemo</a></p>"},{"title":"第一篇文章","date":"2016-11-27T08:45:24.000Z","_content":"# 我在Hexo上的第一篇博客\n\n这是我在Hexo上的第一篇博客，后面我会将我之前在其它博客平台上写的博客全部迁移到这里，并坚持写新的博客，希望大家支持，谢谢！","source":"_posts/第一篇文章.md","raw":"---\ntitle: 第一篇文章\ndate: 2016-11-27 16:45:24\ntags:\n---\n# 我在Hexo上的第一篇博客\n\n这是我在Hexo上的第一篇博客，后面我会将我之前在其它博客平台上写的博客全部迁移到这里，并坚持写新的博客，希望大家支持，谢谢！","slug":"第一篇文章","published":1,"updated":"2019-07-01T12:35:47.384Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjycv1m3s000uok9m895laxfm","content":"<h1 id=\"我在Hexo上的第一篇博客\"><a href=\"#我在Hexo上的第一篇博客\" class=\"headerlink\" title=\"我在Hexo上的第一篇博客\"></a>我在Hexo上的第一篇博客</h1><p>这是我在Hexo上的第一篇博客，后面我会将我之前在其它博客平台上写的博客全部迁移到这里，并坚持写新的博客，希望大家支持，谢谢！</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"我在Hexo上的第一篇博客\"><a href=\"#我在Hexo上的第一篇博客\" class=\"headerlink\" title=\"我在Hexo上的第一篇博客\"></a>我在Hexo上的第一篇博客</h1><p>这是我在Hexo上的第一篇博客，后面我会将我之前在其它博客平台上写的博客全部迁移到这里，并坚持写新的博客，希望大家支持，谢谢！</p>\n"},{"title":"使用TypeScript积累自己的类库","date":"2017-08-02T08:04:34.000Z","_content":">现在除了Web项目外，很多游戏引擎都支持js，包括Egret、Cocos、Unity等，甚至服务器端也可以用node.js。所以很多时候我们是可以积累一套通用工具库在不同项目间，甚至是不同类型项目、不同引擎间通用，来提高我们的开发效率。但是js的规范性较差，可维护性不强，有很多弊端，采用TypeScript来开发和积累我们的类库是比较好的一种选择。TypeScript是一种由微软开发的自由和开源的编程语言。它是JavaScript的一个超集，而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程。在易用性、可读性和易维护上都有了不小的提高。采用TypeScript来开发可以发布成js文件来使用。下面就简单介绍一下TypeScript的工作流。<!--more-->\n## 安装TypeScript\n通过npm（Node.js包管理器）来安装TypeScript:\n```shell\n> npm install -g typescript\n```\n\n## 创建第一个TypeScript文件\n- 新建一个目录，在该目录下新建一个文件HelloWorld.ts\n- 打开文件在文件内输入如下内容，涉及部分ts的语法就不讲了：\n```typescript\nclass Test {\n    private name:string = \"Hello world\";\n    \n    public constructor () {\n        console.log(\"constructor==========>>>\" + this.name);\n    }\n\n    public testFun():void {\n        console.log(\"testFun===========>>>\" + this.name);\n    }\n}\n\nfunction testCallFun():void {\n    let t = new Test();\n    t.testFun();\n}\n```\n- 编译ts文件\n```\n>tsc HelloWorld.ts\n```\n- 这样就将ts文件编译成了js文件，内容如下：\n```javascript\nvar Test = (function () {\n    function Test() {\n        this.name = \"Hello world\";\n        console.log(\"constructor==========>>>\" + this.name);\n    }\n    Test.prototype.testFun = function () {\n        console.log(\"testFun===========>>>\" + this.name);\n    };\n    return Test;\n}());\nfunction testCallFun() {\n    var t = new Test();\n    t.testFun();\n}\n```\n- 这里将这个js文件放到html页面上进行测试，控制台输出如下：\n```\nconstructor==========>>>Hello world\ntestFun===========>>>Hello world\n```\n> 这样一套完整的工作流就完成了，生成的js文件可以用在各种项目中，Egret项目、cocos项目或者Web项目都可以。通过这种方式可以积累自己的类库，方便做项目时快速开发。\n\n## 工程配置\n### tsconfig.json\n- 如果一个目录下存在一个tsconfig.json文件，那么它意味着这个目录是TypeScript项目的根目录。 tsconfig.json文件中指定了用来编译这个项目的根文件和编译选项。\n- 在执行tsc时，编译器会在当前目录向父级目录逐级查找tsconfig.json文件，也可以使用命令行参数--project（或-p）指定一个包含tsconfig.json文件的目录\n- 例子:\n```javascript\n{\n    \"compilerOptions\": {\n        \"module\": \"system\",\n        \"noImplicitAny\": true,\n        \"removeComments\": true,\n        \"preserveConstEnums\": true,\n        \"outFile\": \"../built/ituuzx/itz.js\"\n    },\n    \"include\": [\n        \"**/*.ts\"   //include是指编译包含的文件或目录，这是配置的是包括子目录下的所有ts文件\n    ]\n}\n```\n>这样将开发过程中很多通用的问题抽象出来，封装成类库来使用，可以让开发效率更高，也让自己或者团队有技术沉淀。不同类型的类库可以封装到不同模块中去，分别解决不同问题，在使用时可以选择性的编译，只编译项目需要的模块，也方便管理。这种抽象和积累只会对个人或者项目有益，个人觉得是值得坚持的工作方法。后面我也计划会分享和维护一套游戏开发的工具类在github上，欢迎大家fork，地址是[https://github.com/yue19870813/ituuz-x](http://note.youdao.com/)，目前还没有提交代码，只是在README.MD里写了计划。\n更多文章请关注我的公众号：\n![这里写图片描述](http://img.blog.csdn.net/20170822194726017?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGV0dGhpbmtpbmc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)","source":"_posts/typescript-to-lib.md","raw":"---\ntitle: 使用TypeScript积累自己的类库\ndate: 2017-08-02 16:04:34\ntags: \n\t- TpyeScript\n\t- 类库\n\t- libs\ncategories: TpyeScript\n---\n>现在除了Web项目外，很多游戏引擎都支持js，包括Egret、Cocos、Unity等，甚至服务器端也可以用node.js。所以很多时候我们是可以积累一套通用工具库在不同项目间，甚至是不同类型项目、不同引擎间通用，来提高我们的开发效率。但是js的规范性较差，可维护性不强，有很多弊端，采用TypeScript来开发和积累我们的类库是比较好的一种选择。TypeScript是一种由微软开发的自由和开源的编程语言。它是JavaScript的一个超集，而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程。在易用性、可读性和易维护上都有了不小的提高。采用TypeScript来开发可以发布成js文件来使用。下面就简单介绍一下TypeScript的工作流。<!--more-->\n## 安装TypeScript\n通过npm（Node.js包管理器）来安装TypeScript:\n```shell\n> npm install -g typescript\n```\n\n## 创建第一个TypeScript文件\n- 新建一个目录，在该目录下新建一个文件HelloWorld.ts\n- 打开文件在文件内输入如下内容，涉及部分ts的语法就不讲了：\n```typescript\nclass Test {\n    private name:string = \"Hello world\";\n    \n    public constructor () {\n        console.log(\"constructor==========>>>\" + this.name);\n    }\n\n    public testFun():void {\n        console.log(\"testFun===========>>>\" + this.name);\n    }\n}\n\nfunction testCallFun():void {\n    let t = new Test();\n    t.testFun();\n}\n```\n- 编译ts文件\n```\n>tsc HelloWorld.ts\n```\n- 这样就将ts文件编译成了js文件，内容如下：\n```javascript\nvar Test = (function () {\n    function Test() {\n        this.name = \"Hello world\";\n        console.log(\"constructor==========>>>\" + this.name);\n    }\n    Test.prototype.testFun = function () {\n        console.log(\"testFun===========>>>\" + this.name);\n    };\n    return Test;\n}());\nfunction testCallFun() {\n    var t = new Test();\n    t.testFun();\n}\n```\n- 这里将这个js文件放到html页面上进行测试，控制台输出如下：\n```\nconstructor==========>>>Hello world\ntestFun===========>>>Hello world\n```\n> 这样一套完整的工作流就完成了，生成的js文件可以用在各种项目中，Egret项目、cocos项目或者Web项目都可以。通过这种方式可以积累自己的类库，方便做项目时快速开发。\n\n## 工程配置\n### tsconfig.json\n- 如果一个目录下存在一个tsconfig.json文件，那么它意味着这个目录是TypeScript项目的根目录。 tsconfig.json文件中指定了用来编译这个项目的根文件和编译选项。\n- 在执行tsc时，编译器会在当前目录向父级目录逐级查找tsconfig.json文件，也可以使用命令行参数--project（或-p）指定一个包含tsconfig.json文件的目录\n- 例子:\n```javascript\n{\n    \"compilerOptions\": {\n        \"module\": \"system\",\n        \"noImplicitAny\": true,\n        \"removeComments\": true,\n        \"preserveConstEnums\": true,\n        \"outFile\": \"../built/ituuzx/itz.js\"\n    },\n    \"include\": [\n        \"**/*.ts\"   //include是指编译包含的文件或目录，这是配置的是包括子目录下的所有ts文件\n    ]\n}\n```\n>这样将开发过程中很多通用的问题抽象出来，封装成类库来使用，可以让开发效率更高，也让自己或者团队有技术沉淀。不同类型的类库可以封装到不同模块中去，分别解决不同问题，在使用时可以选择性的编译，只编译项目需要的模块，也方便管理。这种抽象和积累只会对个人或者项目有益，个人觉得是值得坚持的工作方法。后面我也计划会分享和维护一套游戏开发的工具类在github上，欢迎大家fork，地址是[https://github.com/yue19870813/ituuz-x](http://note.youdao.com/)，目前还没有提交代码，只是在README.MD里写了计划。\n更多文章请关注我的公众号：\n![这里写图片描述](http://img.blog.csdn.net/20170822194726017?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGV0dGhpbmtpbmc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)","slug":"typescript-to-lib","published":1,"updated":"2019-07-01T12:35:47.384Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjycv1m3s000vok9m16f1hpqa","content":"<blockquote>\n<p>现在除了Web项目外，很多游戏引擎都支持js，包括Egret、Cocos、Unity等，甚至服务器端也可以用node.js。所以很多时候我们是可以积累一套通用工具库在不同项目间，甚至是不同类型项目、不同引擎间通用，来提高我们的开发效率。但是js的规范性较差，可维护性不强，有很多弊端，采用TypeScript来开发和积累我们的类库是比较好的一种选择。TypeScript是一种由微软开发的自由和开源的编程语言。它是JavaScript的一个超集，而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程。在易用性、可读性和易维护上都有了不小的提高。采用TypeScript来开发可以发布成js文件来使用。下面就简单介绍一下TypeScript的工作流。<a id=\"more\"></a></p>\n<h2 id=\"安装TypeScript\"><a href=\"#安装TypeScript\" class=\"headerlink\" title=\"安装TypeScript\"></a>安装TypeScript</h2><p>通过npm（Node.js包管理器）来安装TypeScript:<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;</span> npm install -g typescript</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"创建第一个TypeScript文件\"><a href=\"#创建第一个TypeScript文件\" class=\"headerlink\" title=\"创建第一个TypeScript文件\"></a>创建第一个TypeScript文件</h2><ul>\n<li>新建一个目录，在该目录下新建一个文件HelloWorld.ts</li>\n<li><p>打开文件在文件内输入如下内容，涉及部分ts的语法就不讲了：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Test &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> name:<span class=\"built_in\">string</span> = <span class=\"string\">\"Hello world\"</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">constructor</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"constructor==========&gt;&gt;&gt;\"</span> + <span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> testFun():<span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"testFun===========&gt;&gt;&gt;\"</span> + <span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testCallFun</span>(<span class=\"params\"></span>):<span class=\"title\">void</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> t = <span class=\"keyword\">new</span> Test();</span><br><span class=\"line\">    t.testFun();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编译ts文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;tsc HelloWorld.ts</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>这样就将ts文件编译成了js文件，内容如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Test = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = <span class=\"string\">\"Hello world\"</span>;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"constructor==========&gt;&gt;&gt;\"</span> + <span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Test.prototype.testFun = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"testFun===========&gt;&gt;&gt;\"</span> + <span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Test;</span><br><span class=\"line\">&#125;());</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testCallFun</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> t = <span class=\"keyword\">new</span> Test();</span><br><span class=\"line\">    t.testFun();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>这里将这个js文件放到html页面上进行测试，控制台输出如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">constructor==========&gt;&gt;&gt;Hello world</span><br><span class=\"line\">testFun===========&gt;&gt;&gt;Hello world</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>这样一套完整的工作流就完成了，生成的js文件可以用在各种项目中，Egret项目、cocos项目或者Web项目都可以。通过这种方式可以积累自己的类库，方便做项目时快速开发。</p>\n</blockquote>\n<h2 id=\"工程配置\"><a href=\"#工程配置\" class=\"headerlink\" title=\"工程配置\"></a>工程配置</h2><h3 id=\"tsconfig-json\"><a href=\"#tsconfig-json\" class=\"headerlink\" title=\"tsconfig.json\"></a>tsconfig.json</h3><ul>\n<li>如果一个目录下存在一个tsconfig.json文件，那么它意味着这个目录是TypeScript项目的根目录。 tsconfig.json文件中指定了用来编译这个项目的根文件和编译选项。</li>\n<li>在执行tsc时，编译器会在当前目录向父级目录逐级查找tsconfig.json文件，也可以使用命令行参数–project（或-p）指定一个包含tsconfig.json文件的目录</li>\n<li>例子:<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"compilerOptions\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"module\"</span>: <span class=\"string\">\"system\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"noImplicitAny\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">\"removeComments\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">\"preserveConstEnums\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">\"outFile\"</span>: <span class=\"string\">\"../built/ituuzx/itz.js\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"include\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"**/*.ts\"</span>   <span class=\"comment\">//include是指编译包含的文件或目录，这是配置的是包括子目录下的所有ts文件</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>这样将开发过程中很多通用的问题抽象出来，封装成类库来使用，可以让开发效率更高，也让自己或者团队有技术沉淀。不同类型的类库可以封装到不同模块中去，分别解决不同问题，在使用时可以选择性的编译，只编译项目需要的模块，也方便管理。这种抽象和积累只会对个人或者项目有益，个人觉得是值得坚持的工作方法。后面我也计划会分享和维护一套游戏开发的工具类在github上，欢迎大家fork，地址是<a href=\"http://note.youdao.com/\" target=\"_blank\" rel=\"noopener\">https://github.com/yue19870813/ituuz-x</a>，目前还没有提交代码，只是在README.MD里写了计划。<br>更多文章请关注我的公众号：<br><img src=\"http://img.blog.csdn.net/20170822194726017?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGV0dGhpbmtpbmc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>现在除了Web项目外，很多游戏引擎都支持js，包括Egret、Cocos、Unity等，甚至服务器端也可以用node.js。所以很多时候我们是可以积累一套通用工具库在不同项目间，甚至是不同类型项目、不同引擎间通用，来提高我们的开发效率。但是js的规范性较差，可维护性不强，有很多弊端，采用TypeScript来开发和积累我们的类库是比较好的一种选择。TypeScript是一种由微软开发的自由和开源的编程语言。它是JavaScript的一个超集，而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程。在易用性、可读性和易维护上都有了不小的提高。采用TypeScript来开发可以发布成js文件来使用。下面就简单介绍一下TypeScript的工作流。","more":"</p>\n<h2 id=\"安装TypeScript\"><a href=\"#安装TypeScript\" class=\"headerlink\" title=\"安装TypeScript\"></a>安装TypeScript</h2><p>通过npm（Node.js包管理器）来安装TypeScript:<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;</span> npm install -g typescript</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"创建第一个TypeScript文件\"><a href=\"#创建第一个TypeScript文件\" class=\"headerlink\" title=\"创建第一个TypeScript文件\"></a>创建第一个TypeScript文件</h2><ul>\n<li>新建一个目录，在该目录下新建一个文件HelloWorld.ts</li>\n<li><p>打开文件在文件内输入如下内容，涉及部分ts的语法就不讲了：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Test &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> name:<span class=\"built_in\">string</span> = <span class=\"string\">\"Hello world\"</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">constructor</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"constructor==========&gt;&gt;&gt;\"</span> + <span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> testFun():<span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"testFun===========&gt;&gt;&gt;\"</span> + <span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testCallFun</span>(<span class=\"params\"></span>):<span class=\"title\">void</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> t = <span class=\"keyword\">new</span> Test();</span><br><span class=\"line\">    t.testFun();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编译ts文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;tsc HelloWorld.ts</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>这样就将ts文件编译成了js文件，内容如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Test = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = <span class=\"string\">\"Hello world\"</span>;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"constructor==========&gt;&gt;&gt;\"</span> + <span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Test.prototype.testFun = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"testFun===========&gt;&gt;&gt;\"</span> + <span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Test;</span><br><span class=\"line\">&#125;());</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testCallFun</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> t = <span class=\"keyword\">new</span> Test();</span><br><span class=\"line\">    t.testFun();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>这里将这个js文件放到html页面上进行测试，控制台输出如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">constructor==========&gt;&gt;&gt;Hello world</span><br><span class=\"line\">testFun===========&gt;&gt;&gt;Hello world</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>这样一套完整的工作流就完成了，生成的js文件可以用在各种项目中，Egret项目、cocos项目或者Web项目都可以。通过这种方式可以积累自己的类库，方便做项目时快速开发。</p>\n</blockquote>\n<h2 id=\"工程配置\"><a href=\"#工程配置\" class=\"headerlink\" title=\"工程配置\"></a>工程配置</h2><h3 id=\"tsconfig-json\"><a href=\"#tsconfig-json\" class=\"headerlink\" title=\"tsconfig.json\"></a>tsconfig.json</h3><ul>\n<li>如果一个目录下存在一个tsconfig.json文件，那么它意味着这个目录是TypeScript项目的根目录。 tsconfig.json文件中指定了用来编译这个项目的根文件和编译选项。</li>\n<li>在执行tsc时，编译器会在当前目录向父级目录逐级查找tsconfig.json文件，也可以使用命令行参数–project（或-p）指定一个包含tsconfig.json文件的目录</li>\n<li>例子:<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"compilerOptions\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"module\"</span>: <span class=\"string\">\"system\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"noImplicitAny\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">\"removeComments\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">\"preserveConstEnums\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">\"outFile\"</span>: <span class=\"string\">\"../built/ituuzx/itz.js\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"include\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"**/*.ts\"</span>   <span class=\"comment\">//include是指编译包含的文件或目录，这是配置的是包括子目录下的所有ts文件</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>这样将开发过程中很多通用的问题抽象出来，封装成类库来使用，可以让开发效率更高，也让自己或者团队有技术沉淀。不同类型的类库可以封装到不同模块中去，分别解决不同问题，在使用时可以选择性的编译，只编译项目需要的模块，也方便管理。这种抽象和积累只会对个人或者项目有益，个人觉得是值得坚持的工作方法。后面我也计划会分享和维护一套游戏开发的工具类在github上，欢迎大家fork，地址是<a href=\"http://note.youdao.com/\" target=\"_blank\" rel=\"noopener\">https://github.com/yue19870813/ituuz-x</a>，目前还没有提交代码，只是在README.MD里写了计划。<br>更多文章请关注我的公众号：<br><img src=\"http://img.blog.csdn.net/20170822194726017?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGV0dGhpbmtpbmc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n</blockquote>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjycv1m350001ok9mgc1mm11b","category_id":"cjycv1m4q000wok9mr1iww6ux","_id":"cjycv1m6j002lok9mrth8rw7j"},{"post_id":"cjycv1m3a0003ok9m0oiutcow","category_id":"cjycv1m4q000wok9mr1iww6ux","_id":"cjycv1m6j002nok9mhwjw52l6"},{"post_id":"cjycv1m3c0005ok9mpkvxr5i9","category_id":"cjycv1m4q000wok9mr1iww6ux","_id":"cjycv1m6j002pok9maekafu0x"},{"post_id":"cjycv1m3d0006ok9m4xmuhc74","category_id":"cjycv1m4q000wok9mr1iww6ux","_id":"cjycv1m6k002rok9m4phbiyy2"},{"post_id":"cjycv1m3d0007ok9mhlohhq1u","category_id":"cjycv1m510014ok9m8abxe7dr","_id":"cjycv1m6k002tok9mtp9jpohz"},{"post_id":"cjycv1m3e0008ok9mgub06k56","category_id":"cjycv1m510014ok9m8abxe7dr","_id":"cjycv1m6k002vok9mgssl7uyo"},{"post_id":"cjycv1m3f0009ok9myunk4awp","category_id":"cjycv1m510014ok9m8abxe7dr","_id":"cjycv1m6k002xok9mvyt44t9r"},{"post_id":"cjycv1m3g000aok9m9eu73s6j","category_id":"cjycv1m53001aok9m36u5v7bn","_id":"cjycv1m6k002zok9mtdrephyi"},{"post_id":"cjycv1m3h000bok9mx61lo19d","category_id":"cjycv1m510014ok9m8abxe7dr","_id":"cjycv1m6k0031ok9mys1gyfe8"},{"post_id":"cjycv1m3i000cok9mxpd1p75h","category_id":"cjycv1m54001eok9mkaqfkx9y","_id":"cjycv1m6k0033ok9mm7vsr1ye"},{"post_id":"cjycv1m3j000dok9m9klzkk2i","category_id":"cjycv1m510014ok9m8abxe7dr","_id":"cjycv1m6k0035ok9mfw4rpyms"},{"post_id":"cjycv1m3k000eok9mj7dvfoba","category_id":"cjycv1m54001eok9mkaqfkx9y","_id":"cjycv1m6k0037ok9m2x6y4uoh"},{"post_id":"cjycv1m3k000fok9mi8gttwtz","category_id":"cjycv1m56001kok9m84ouw5b4","_id":"cjycv1m6l0039ok9mhtwufanv"},{"post_id":"cjycv1m3l000gok9mcvlyuck7","category_id":"cjycv1m56001mok9mn174k6qf","_id":"cjycv1m6l003bok9m4d4x6niq"},{"post_id":"cjycv1m3l000hok9m5zirdzc7","category_id":"cjycv1m56001mok9mn174k6qf","_id":"cjycv1m6l003dok9muajnj8au"},{"post_id":"cjycv1m3m000iok9m2j77tua7","category_id":"cjycv1m58001qok9mbh82uu0w","_id":"cjycv1m6l003fok9mbsqra5e4"},{"post_id":"cjycv1m3m000jok9mrspt4q0f","category_id":"cjycv1m58001qok9mbh82uu0w","_id":"cjycv1m6l003hok9m201m5qia"},{"post_id":"cjycv1m3n000kok9mnm4j1l4x","category_id":"cjycv1m510014ok9m8abxe7dr","_id":"cjycv1m6m003jok9mn4cybaqk"},{"post_id":"cjycv1m3n000lok9m7ophwos2","category_id":"cjycv1m58001qok9mbh82uu0w","_id":"cjycv1m6m003lok9mhoz3p690"},{"post_id":"cjycv1m3o000mok9md8h5euhg","category_id":"cjycv1m510014ok9m8abxe7dr","_id":"cjycv1m6m003nok9mkwxyplwc"},{"post_id":"cjycv1m3o000nok9mls977sln","category_id":"cjycv1m510014ok9m8abxe7dr","_id":"cjycv1m6m003pok9mvj72oiqz"},{"post_id":"cjycv1m3p000ook9mwx59517z","category_id":"cjycv1m5b0021ok9mphuz666a","_id":"cjycv1m6m003rok9m8ga1thks"},{"post_id":"cjycv1m3p000pok9mhuk2dcdb","category_id":"cjycv1m5b0023ok9m3qoi1tc1","_id":"cjycv1m6m003tok9ml2a67z5m"},{"post_id":"cjycv1m3q000qok9mzw87e7oa","category_id":"cjycv1m510014ok9m8abxe7dr","_id":"cjycv1m6m003vok9mpo5s88e1"},{"post_id":"cjycv1m3q000rok9m5t9mw3la","category_id":"cjycv1m510014ok9m8abxe7dr","_id":"cjycv1m6m003xok9m729855fx"},{"post_id":"cjycv1m3r000sok9mzcxgdiqy","category_id":"cjycv1m56001mok9mn174k6qf","_id":"cjycv1m6m003zok9me2mag2vd"},{"post_id":"cjycv1m3r000tok9mkt59o086","category_id":"cjycv1m5d002bok9m9nmf5fwj","_id":"cjycv1m6n0041ok9mss8rxe59"},{"post_id":"cjycv1m3s000vok9m16f1hpqa","category_id":"cjycv1m5e002dok9m8mm0rmqg","_id":"cjycv1m6n0043ok9mc6f9ygfk"}],"PostTag":[{"post_id":"cjycv1m350001ok9mgc1mm11b","tag_id":"cjycv1m4w000xok9mwqzoezi4","_id":"cjycv1m6j002kok9m0w6nlqi4"},{"post_id":"cjycv1m3a0003ok9m0oiutcow","tag_id":"cjycv1m4y000zok9mhe1inw18","_id":"cjycv1m6j002mok9mrfe8trct"},{"post_id":"cjycv1m3c0005ok9mpkvxr5i9","tag_id":"cjycv1m500011ok9mq5plxpbl","_id":"cjycv1m6j002ook9mqgwz472t"},{"post_id":"cjycv1m3d0006ok9m4xmuhc74","tag_id":"cjycv1m510013ok9m0jrmsgmi","_id":"cjycv1m6k002qok9m6u2eghgt"},{"post_id":"cjycv1m3d0007ok9mhlohhq1u","tag_id":"cjycv1m510015ok9mnttixz4w","_id":"cjycv1m6k002sok9mfi2xlxim"},{"post_id":"cjycv1m3e0008ok9mgub06k56","tag_id":"cjycv1m510015ok9mnttixz4w","_id":"cjycv1m6k002uok9mlso851vv"},{"post_id":"cjycv1m3f0009ok9myunk4awp","tag_id":"cjycv1m510015ok9mnttixz4w","_id":"cjycv1m6k002wok9mxrmilmk7"},{"post_id":"cjycv1m3g000aok9m9eu73s6j","tag_id":"cjycv1m53001bok9mv9nmmbtq","_id":"cjycv1m6k002yok9m67i9bkwf"},{"post_id":"cjycv1m3h000bok9mx61lo19d","tag_id":"cjycv1m510015ok9mnttixz4w","_id":"cjycv1m6k0030ok9mb97wx1x3"},{"post_id":"cjycv1m3i000cok9mxpd1p75h","tag_id":"cjycv1m54001fok9mkrhetbpq","_id":"cjycv1m6k0032ok9mylzzpusj"},{"post_id":"cjycv1m3j000dok9m9klzkk2i","tag_id":"cjycv1m510015ok9mnttixz4w","_id":"cjycv1m6k0034ok9mhn435kkw"},{"post_id":"cjycv1m3k000eok9mj7dvfoba","tag_id":"cjycv1m55001jok9mu206f237","_id":"cjycv1m6k0036ok9mzgze6wy6"},{"post_id":"cjycv1m3k000fok9mi8gttwtz","tag_id":"cjycv1m56001lok9mlq7wtgtf","_id":"cjycv1m6l0038ok9mwybs8gik"},{"post_id":"cjycv1m3l000gok9mcvlyuck7","tag_id":"cjycv1m57001nok9mw61xon9v","_id":"cjycv1m6l003aok9mhx0d0iey"},{"post_id":"cjycv1m3l000hok9m5zirdzc7","tag_id":"cjycv1m57001pok9mn1j61cx1","_id":"cjycv1m6l003cok9me2nn0j5z"},{"post_id":"cjycv1m3m000iok9m2j77tua7","tag_id":"cjycv1m58001rok9mqsaj3eln","_id":"cjycv1m6l003eok9m7irbqvc5"},{"post_id":"cjycv1m3m000jok9mrspt4q0f","tag_id":"cjycv1m58001tok9mool2rco6","_id":"cjycv1m6l003gok9md4w1unt1"},{"post_id":"cjycv1m3n000kok9mnm4j1l4x","tag_id":"cjycv1m59001vok9mvss6rdli","_id":"cjycv1m6m003iok9mc4njv19j"},{"post_id":"cjycv1m3n000lok9m7ophwos2","tag_id":"cjycv1m5a001xok9m878fx1wd","_id":"cjycv1m6m003kok9mhd0wweju"},{"post_id":"cjycv1m3o000mok9md8h5euhg","tag_id":"cjycv1m5a0020ok9mvbixtthx","_id":"cjycv1m6m003mok9mun2ko9za"},{"post_id":"cjycv1m3o000nok9mls977sln","tag_id":"cjycv1m5b0022ok9m6htz2e5c","_id":"cjycv1m6m003ook9m6kseqewx"},{"post_id":"cjycv1m3p000ook9mwx59517z","tag_id":"cjycv1m5b0024ok9mowshtnnn","_id":"cjycv1m6m003qok9moacfr9so"},{"post_id":"cjycv1m3p000pok9mhuk2dcdb","tag_id":"cjycv1m5c0026ok9mpp0mcege","_id":"cjycv1m6m003sok9mdzdeudzy"},{"post_id":"cjycv1m3q000qok9mzw87e7oa","tag_id":"cjycv1m5d0028ok9mrthyo947","_id":"cjycv1m6m003uok9m6b1vyzvk"},{"post_id":"cjycv1m3q000qok9mzw87e7oa","tag_id":"cjycv1m5d002aok9mfcilk34q","_id":"cjycv1m6m003wok9mo7m7625e"},{"post_id":"cjycv1m3q000rok9m5t9mw3la","tag_id":"cjycv1m5d002cok9m2jdl80sy","_id":"cjycv1m6m003yok9m4v8bgg8p"},{"post_id":"cjycv1m3r000sok9mzcxgdiqy","tag_id":"cjycv1m5f002eok9mk29ptarw","_id":"cjycv1m6n0040ok9msq4gqafk"},{"post_id":"cjycv1m3r000tok9mkt59o086","tag_id":"cjycv1m5c0026ok9mpp0mcege","_id":"cjycv1m6n0042ok9m99814cce"},{"post_id":"cjycv1m3r000tok9mkt59o086","tag_id":"cjycv1m5g002gok9m8ktywfzn","_id":"cjycv1m6n0044ok9me9il5jr5"},{"post_id":"cjycv1m3s000vok9m16f1hpqa","tag_id":"cjycv1m5g002hok9mg5l3mo5b","_id":"cjycv1m6n0045ok9moxw3eiq4"},{"post_id":"cjycv1m3s000vok9m16f1hpqa","tag_id":"cjycv1m5g002iok9m4tuyexzd","_id":"cjycv1m6n0046ok9mezde9fhq"},{"post_id":"cjycv1m3s000vok9m16f1hpqa","tag_id":"cjycv1m5g002jok9mthgoup8p","_id":"cjycv1m6n0047ok9ms1u3we1r"}],"Tag":[{"name":"架构管理","_id":"cjycv1m4w000xok9mwqzoezi4"},{"name":"网络通信","_id":"cjycv1m4y000zok9mhe1inw18"},{"name":"引擎选择","_id":"cjycv1m500011ok9mq5plxpbl"},{"name":"编程规范","_id":"cjycv1m510013ok9m0jrmsgmi"},{"name":"ExtJS","_id":"cjycv1m510015ok9mnttixz4w"},{"name":"Qt","_id":"cjycv1m53001bok9mv9nmmbtq"},{"name":"多线程","_id":"cjycv1m54001fok9mkrhetbpq"},{"name":"［WebService,java］","_id":"cjycv1m55001jok9mu206f237"},{"name":"cocos2d-x,性能优化","_id":"cjycv1m56001lok9mlq7wtgtf"},{"name":"番茄工作法","_id":"cjycv1m57001nok9mw61xon9v"},{"name":"编程与性格","_id":"cjycv1m57001pok9mn1j61cx1"},{"name":"观察者模式","_id":"cjycv1m58001rok9mqsaj3eln"},{"name":"命令模式","_id":"cjycv1m58001tok9mool2rco6"},{"name":"js性能优化","_id":"cjycv1m59001vok9mvss6rdli"},{"name":"单例模式","_id":"cjycv1m5a001xok9m878fx1wd"},{"name":"javascript,性能优化","_id":"cjycv1m5a0020ok9mvbixtthx"},{"name":"闭包","_id":"cjycv1m5b0022ok9m6htz2e5c"},{"name":"理财","_id":"cjycv1m5b0024ok9mowshtnnn"},{"name":"shader","_id":"cjycv1m5c0026ok9mpp0mcege"},{"name":"prototype","_id":"cjycv1m5d0028ok9mrthyo947"},{"name":"javascript","_id":"cjycv1m5d002aok9mfcilk34q"},{"name":"mvc","_id":"cjycv1m5d002cok9m2jdl80sy"},{"name":"前期准备","_id":"cjycv1m5f002eok9mk29ptarw"},{"name":"cocos creator","_id":"cjycv1m5g002gok9m8ktywfzn"},{"name":"TpyeScript","_id":"cjycv1m5g002hok9mg5l3mo5b"},{"name":"类库","_id":"cjycv1m5g002iok9m4tuyexzd"},{"name":"libs","_id":"cjycv1m5g002jok9mthgoup8p"}]}}