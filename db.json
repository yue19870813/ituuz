{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/uploads/avatar.png","path":"uploads/avatar.png","modified":0,"renderable":0},{"_id":"source/uploads/alipay_charge.jpg","path":"uploads/alipay_charge.jpg","modified":0,"renderable":0},{"_id":"source/uploads/wechat-qcode.jpg","path":"uploads/wechat-qcode.jpg","modified":0,"renderable":0},{"_id":"source/uploads/wechat_charge.jpg","path":"uploads/wechat_charge.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"a36a426914efea908e5ecca30f5a9b2b9d46824b","modified":1480225970000},{"_id":"source/CNAME","hash":"f3ec92164503113069ecd096360a8b82c1c7cde5","modified":1479649787000},{"_id":"themes/next/.bowerrc","hash":"80e096fdc1cf912ee85dd9f7e6e77fd40cf60f10","modified":1462394086000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1462394086000},{"_id":"themes/next/.gitignore","hash":"efec790f5b7a0256763e1cc08f12c4f0aff509f6","modified":1462394086000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1462394086000},{"_id":"themes/next/.javascript_ignore","hash":"d619ee13031908cd72666e4ff652d2ea3483b1c3","modified":1462394086000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1462394086000},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1462394086000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1462394086000},{"_id":"themes/next/_config.yml","hash":"d0db3f080ef3cf8502ea1d60735ea8e740c92a7b","modified":1480232297000},{"_id":"themes/next/bower.json","hash":"f89c6700a11d81e067cc97273ca6bf96cb88c8f9","modified":1462394086000},{"_id":"themes/next/gulpfile.coffee","hash":"26e5b1b945704c8bc78b928feede895c4c111c95","modified":1462394086000},{"_id":"themes/next/package.json","hash":"63e9c0f1dd9e5d7f51b4ae383981ef939a2ed45d","modified":1462394086000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1480245936000},{"_id":"source/_posts/Java多线程实现生产者与消费者.md","hash":"f15523eb88d4ce08d2c31f103c025c39f670ffb4","modified":1480250487000},{"_id":"source/_posts/Tree-1.md","hash":"4d506074e4b3a541ea2587177dbf2843849da8da","modified":1480252108000},{"_id":"source/_posts/WebService复杂类型数据传输-dom4j方式.md","hash":"5c34a4996a7437b3df07199523010571cae8ff6a","modified":1480248764000},{"_id":"source/_posts/第一篇文章.md","hash":"8b62d61891fe257114e25dd1f1a6047c54a25fea","modified":1480245892000},{"_id":"source/about/index.md","hash":"b3275a61d28ac3cea9efa4714ad7244deda04a0c","modified":1480246372000},{"_id":"source/categories/index.md","hash":"89914f71eee8f1e5ea0fa97bd882ab51b0af0dd7","modified":1480248931000},{"_id":"source/tags/index.md","hash":"5ae176db3b3d495e71c7bdff43e2758c0b18baaa","modified":1480231838000},{"_id":"source/uploads/avatar.png","hash":"a23a4803d776c7e4e73e31614fe22168d1e64186","modified":1480225864000},{"_id":"source/uploads/alipay_charge.jpg","hash":"bf0a359dd5714466cfdfb89ebacb1b83e856cfbc","modified":1480232362000},{"_id":"source/uploads/wechat-qcode.jpg","hash":"66a67a4919f2732680ea19a0b7bcb63bbe3339f3","modified":1480228175000},{"_id":"source/uploads/wechat_charge.jpg","hash":"64c05bc1bbc5c32f0871748ca9487a4bd87ea3fc","modified":1480229164000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1462394086000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1462394086000},{"_id":"themes/next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1462394086000},{"_id":"themes/next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1462394086000},{"_id":"themes/next/languages/en.yml","hash":"f03799cbdb5a33064ead080bcac4baca1f6bc5f9","modified":1462394086000},{"_id":"themes/next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1462394086000},{"_id":"themes/next/languages/id.yml","hash":"147c01e41b931085ad14250fa900c2249dcbbdd7","modified":1462394086000},{"_id":"themes/next/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1462394086000},{"_id":"themes/next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1462394086000},{"_id":"themes/next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1462394086000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"bea452bc49aed171a210d09bd6cddc4e846ea8ab","modified":1462394086000},{"_id":"themes/next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1462394086000},{"_id":"themes/next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1462394086000},{"_id":"themes/next/layout/_layout.swig","hash":"74157f6cfd679ea11febec632542793f37c5e5d4","modified":1462394086000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1462394086000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1462394086000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1462394086000},{"_id":"themes/next/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1462394086000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1462394086000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1462394086000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1462394086000},{"_id":"themes/next/source/404.html","hash":"e71593534c6b530fd2df06be07c8d940b985529c","modified":1480228576000},{"_id":"themes/next/test/.jshintrc","hash":"096ed6df627373edd820f24d46b8baf528dee61d","modified":1462394086000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1462394086000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1462394086000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462394086000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1462394086000},{"_id":"themes/next/layout/_macro/post.swig","hash":"1ca03011bed92614832b1343b65be92183957dc5","modified":1462394086000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1462394086000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"b883289054ee54a374caad5d4883591beb94bd8b","modified":1462394086000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"85327c2174d09c6d69c9033592e6c8f7eb7ac3ba","modified":1462394086000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"82a9bc2ba60ce68419128ff60624bd74b15dfb78","modified":1462394086000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1462394086000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"0ce71d8322ea7dea82d9371fa2fe13949aa870e3","modified":1462394086000},{"_id":"themes/next/layout/_partials/head.swig","hash":"f83b1c55bedd2c1a3eb734c72c6997795a4e5f99","modified":1462394086000},{"_id":"themes/next/layout/_partials/header.swig","hash":"963a765dc00e6ac43cfc53ffaf5725eb854cf95e","modified":1462394086000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1462394086000},{"_id":"themes/next/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1462394086000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"82d060fe055d6e423bbc9199f82dfe5c68e74779","modified":1462394086000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1462394086000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1462394086000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1462394086000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1462394086000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1462394086000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1462394086000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1462394086000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1462394086000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1462394086000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1462394086000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1462394086000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1462394086000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1462394086000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1462394086000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1462394086000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1462394086000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1462394086000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1462394086000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1462394086000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1462394086000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462394086000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462394086000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462394086000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462394086000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462394086000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462394086000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462394086000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1462394086000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1462394086000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1462394086000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1462394086000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c07f7b2f264e5215b8ed42d67e8cef2477558364","modified":1462394086000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"7ca5cb4daa58b3504e17f3e02975e794bc634658","modified":1462394086000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1462394086000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1462394086000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1462394086000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"069bb17fb1db3bc7c85c88efa3ed94ab6becbe2c","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"1561bd0c107d725252c6d746e9ac177fc18f93bf","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"5bafc33f57508d1d04a9930165240f6e9efa8d6d","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1462394086000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1462394086000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1462394086000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1462394086000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1462394086000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"3ead77befa064d6327dc7afd0a5af7be59a5f196","modified":1462394086000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"17624186f7a1f28daddea258d044f8e03b2f4bea","modified":1462394086000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1462394086000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1462394086000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1462394086000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1462394086000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1462394086000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1462394086000},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1462394086000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1462394086000},{"_id":"themes/next/source/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1462394086000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1462394086000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1462394086000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1462394086000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1462394086000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1462394086000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1462394086000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1462394086000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1462394086000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1462394086000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1462394086000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1462394086000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1462394086000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1462394086000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1462394086000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1462394086000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1462394086000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1462394086000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1462394086000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1462394086000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1462394086000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1462394086000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"44e761721e8ad787ef571a3cc57bbc12d318a2a3","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"334176d838ee528e58468d8bc74ff3a6d3f25b2b","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"3491d3cebabc8a28857200db28a1be65aad6adc2","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"8c7af79407d223486fba72b8150fe045a553bf70","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1462394086000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1462394086000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1462394086000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1462394086000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1462394086000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1462394086000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6ed60cc621bac096c0ed7534fa25b1a52dc571d4","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"8d7cecde4933900c7df2db9d0a98f5f82f88dc93","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1462394086000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1462394086000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1462394086000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1462394086000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1462394086000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1462394086000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1462394086000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1462394086000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1462394086000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1462394086000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1462394086000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1462394086000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1462394086000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1462394086000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1462394086000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1462394086000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1462394086000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1462394086000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1462394086000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1462394086000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1462394086000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1462394086000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4da051c7f3924fa2db1e73c55b2baf1c2c150255","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"90f8f9706cd7fe829cf06e9959a65fd3f8b994fa","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d543d1377c1f61b70e3adb6da0eb12797552e5f2","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"795d94561888d31cb7a6ff4a125596809ea69b7d","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"3afc459442c132c480d1d832f1a872f1070bb048","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1462394086000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1462394086000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1462394086000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1462394086000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1462394086000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1462394086000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1462394086000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1462394086000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1462394086000},{"_id":"public/about/index.html","hash":"cdbeff0333dd165daf83296223a8355768d0a462","modified":1480253536956},{"_id":"public/categories/index.html","hash":"9686cc8a63501a3f7688c73914874bf929f54e8e","modified":1480253536956},{"_id":"public/tags/index.html","hash":"f4a2e91c9e4c19d7f55ec30700322f31af597281","modified":1480253536956},{"_id":"public/2016/11/27/第一篇文章/index.html","hash":"310399cd6507e21e410bb166f1767dfe94a1034b","modified":1480253536956},{"_id":"public/archives/index.html","hash":"6b63d9e92419c9813e5b6ea72019a3c77dc28bd2","modified":1480253536956},{"_id":"public/archives/2016/index.html","hash":"5049f8190fd4f828c47368bac45fba4c6c1c2675","modified":1480253536956},{"_id":"public/archives/2016/11/index.html","hash":"f041a4b05bb1e5dbdc1441af6b17c1620c934b15","modified":1480253536956},{"_id":"public/categories/java/index.html","hash":"07bc3e614b589c2296374f8eff7fe45889a804c9","modified":1480253536957},{"_id":"public/categories/javascript/index.html","hash":"108ebb8c349efc1cca552a8ac0308d1ecdeb5712","modified":1480253536957},{"_id":"public/tags/多线程/index.html","hash":"b42b792802ebe920b7a2ba720bee1b3c889fde0a","modified":1480253536957},{"_id":"public/tags/ExtJS/index.html","hash":"d979b82acdb9498b05fe92189c09c946d3ad9dc8","modified":1480253536957},{"_id":"public/tags/［WebService-java］/index.html","hash":"870e930483b4c99f23f1bee892db87a76e89ce05","modified":1480253536957},{"_id":"public/2016/11/27/Tree-1/index.html","hash":"138662c930eca3f99f164aabb126ff89ea0fc470","modified":1480253536957},{"_id":"public/2016/11/27/Java多线程实现生产者与消费者/index.html","hash":"fb0e21286bbeb971b36df2a16f36374ee719c090","modified":1480253536957},{"_id":"public/2016/11/27/WebService复杂类型数据传输-dom4j方式/index.html","hash":"9acbdf38215982407a1848a7b66f9b0b62b890dc","modified":1480253536957},{"_id":"public/index.html","hash":"4a0177a3a9f08666de8422cd3d94aec37817a130","modified":1480253536957},{"_id":"public/CNAME","hash":"f3ec92164503113069ecd096360a8b82c1c7cde5","modified":1480253536966},{"_id":"public/uploads/avatar.png","hash":"a23a4803d776c7e4e73e31614fe22168d1e64186","modified":1480253536966},{"_id":"public/uploads/alipay_charge.jpg","hash":"bf0a359dd5714466cfdfb89ebacb1b83e856cfbc","modified":1480253536966},{"_id":"public/uploads/wechat-qcode.jpg","hash":"66a67a4919f2732680ea19a0b7bcb63bbe3339f3","modified":1480253536966},{"_id":"public/uploads/wechat_charge.jpg","hash":"64c05bc1bbc5c32f0871748ca9487a4bd87ea3fc","modified":1480253536967},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1480253536967},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1480253536967},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1480253536967},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1480253536967},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1480253536967},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1480253536967},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1480253536967},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1480253536967},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1480253536967},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1480253536967},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1480253536967},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1480253536967},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1480253536967},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1480253536967},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1480253536967},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1480253536967},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1480253536968},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1480253536968},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1480253536968},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1480253536968},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1480253536968},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1480253536969},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1480253536969},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1480253536969},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1480253537726},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1480253537741},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1480253537742},{"_id":"public/404.html","hash":"e71593534c6b530fd2df06be07c8d940b985529c","modified":1480253537750},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1480253537750},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1480253537750},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1480253537750},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1480253537750},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1480253537750},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1480253537750},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1480253537750},{"_id":"public/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1480253537750},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1480253537750},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1480253537750},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1480253537750},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1480253537751},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1480253537751},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1480253537751},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1480253537751},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1480253537751},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1480253537751},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1480253537751},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1480253537751},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1480253537751},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1480253537751},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1480253537751},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1480253537751},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1480253537751},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1480253537751},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1480253537751},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1480253537751},{"_id":"public/css/main.css","hash":"d72a7c678c856aeb738b730b77c37ae4852a3bca","modified":1480253537751},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1480253537751},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1480253537751},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1480253537751},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1480253537751},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1480253537751},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1480253537752},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1480253537752},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1480253537752},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1480253537752},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1480253537752},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1480253537764}],"Category":[{"name":"java","_id":"ciw0oqi24000496s6jr0s6v11"},{"name":"javascript","_id":"ciw0oqi2l000996s6bqhda7lo"}],"Data":[],"Page":[{"title":"about","date":"2016-11-27T07:14:08.000Z","_content":"## 关于我\n\n我是一枚程序员，在游戏开发里深耕。我生活在魔性的帝都，家里有三只猫，它们分别叫kitty、Damon和崽子。最近在开发H5游戏，有志同道合的朋友可以给我留言。\n\nEmail: yue19870813@163.com\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-11-27 15:14:08\n---\n## 关于我\n\n我是一枚程序员，在游戏开发里深耕。我生活在魔性的帝都，家里有三只猫，它们分别叫kitty、Damon和崽子。最近在开发H5游戏，有志同道合的朋友可以给我留言。\n\nEmail: yue19870813@163.com\n","updated":"2016-11-27T11:32:52.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"ciw0oqi20000196s6mce3kr8e","content":"<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><p>我是一枚程序员，在游戏开发里深耕。我生活在魔性的帝都，家里有三只猫，它们分别叫kitty、Damon和崽子。最近在开发H5游戏，有志同道合的朋友可以给我留言。</p>\n<p>Email: yue19870813@163.com</p>\n","excerpt":"","more":"<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><p>我是一枚程序员，在游戏开发里深耕。我生活在魔性的帝都，家里有三只猫，它们分别叫kitty、Damon和崽子。最近在开发H5游戏，有志同道合的朋友可以给我留言。</p>\n<p>Email: yue19870813@163.com</p>\n"},{"title":"categories","date":"2016-11-27T07:27:52.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-11-27 15:27:52\ntype: \"categories\"\n---\n","updated":"2016-11-27T12:15:31.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ciw0oqi23000396s6rtynq5go","content":"","excerpt":"","more":""},{"title":"tags","date":"2016-11-27T07:30:03.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-11-27 15:30:03\ntype: \"tags\"\n---\n","updated":"2016-11-27T07:30:38.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ciw0oqi2b000796s6c8berr88","content":"","excerpt":"","more":""}],"Post":[{"title":"Java多线程实现生产者与消费者","date":"2016-11-27T12:32:32.000Z","_content":"生产者与消费者问题是指创建一组“生产者”线程和一组“消费者”线程，让他们进行同步互斥的运行，生产者生产一个产品，消费者就消费掉一个产品，下面我就用Java的多线程来实现这个课题。<!--more-->本例子的ChuShi代表生产者，XiaoFei代表消费者。首先是生产者厨师的代码：\n``` java\npackage thread;  \npublic class ChuShi extends Thread{  \n      \n    private GongNeng g;  \n    public ChuShi(GongNeng g){    \n        this.g = g;  \n    }  \n      \n    public void run(){  \n        for(;;){  \n              \n            g.lao();  \n              \n        }  \n    }  \n} \n```\n然后是消费者的代码：  \n``` java\npackage thread;  \npublic class XiaoFei extends Thread{  \n      \n    private GongNeng g;  \n      \n    public XiaoFei(GongNeng g){  \n          \n        this.g = g;  \n          \n    }  \n      \n    public void run(){  \n        for(;;){  \n                  \n            g.chi();  \n              \n        }  \n    }  \n}\n```\n接着是封装了生产者的生产方法和消费者的消费方法的类，该类中的方法要使用synchronized关键字，就可以使run方法同步，也就是说，对于同一个Java类的对象实例，run方法同时只能被一个线程调用，并当前的run执行完后，才能被其他的线程调用。需要注意的是每个线程run()方法调用的synchronized修饰的方法必须是一个实例的方法才能保证同步，所以这个里将生产者和消费者的功能封装在一个实例中，在将他们的实例分别传给生产者和消费者，这样他们就能够同步了，下面是同步的方法代码：\n``` java\npackage thread;  \npublic class GongNeng {  \n    private Bing b;  \n      \n    public GongNeng(Bing b){      \n        this.b = b;   \n    }  \n      \n    public synchronized void lao(){  \n          \n        if(b.getBing()<10){  \n              \n            try {  \n                Thread.sleep(1500);  \n            } catch (InterruptedException e) {  \n                // TODO Auto-generated catch block  \n                e.printStackTrace();  \n            }  \n              \n            System.out.println(Thread.currentThread()+  \n                  \n            \":厨师烙了一张饼，盘里还剩\"+(b.getBing()+1)+\"张饼\");  \n              \n            b.setBing(b.getBing()+1);  \n        }  \n    }  \n      \n    public synchronized void chi(){  \n        if(b.getBing()>0){  \n              \n            try {  \n                Thread.sleep(2000);  \n            } catch (InterruptedException e) {  \n                // TODO Auto-generated catch block  \n                e.printStackTrace();  \n            }  \n            System.out.println(Thread.currentThread()+  \n                  \n            \":消费者吃了一张饼，盘里还剩\"+(b.getBing()-1)+\"张饼\");  \n              \n            b.setBing(b.getBing()-1);  \n              \n        }  \n    }  \n} \n```\n还有他们对一个消费品进行同步的操作，在这里我们用的是饼：\n``` java\npackage thread;  \npublic class Bing {  \n    private int bing = 10;  \n    public int getBing() {  \n        return bing;  \n    }  \n    public void setBing(int bing) {  \n        this.bing = bing;  \n    }  \n      \n}\n```\n下面是主入口方法进行测试：\n``` java\npackage thread;  \npublic class Test {  \n    public static void main(String[] args) {  \n          \n        //创建饼的实例  \n        Bing b = new Bing();  \n        //创建同步的吃饼和烙饼实例  \n        GongNeng g = new GongNeng(b);  \n        //创建线程两个消费者两个生产者  \n        ChuShi c1 = new ChuShi(g);  \n        ChuShi c2 = new ChuShi(g);  \n        XiaoFei x1 = new XiaoFei(g);  \n        XiaoFei x2 = new XiaoFei(g);  \n          \n        //启动线程  \n        c1.start();  \n        c2.start();  \n        x1.start();  \n        x2.start();  \n    }  \n} \n```\n 这个例子就模拟了生产与消费的问题。\n","source":"_posts/Java多线程实现生产者与消费者.md","raw":"---\ntitle: Java多线程实现生产者与消费者\ndate: 2016-11-27 20:32:32\ntags: 多线程\ncategories: java\n---\n生产者与消费者问题是指创建一组“生产者”线程和一组“消费者”线程，让他们进行同步互斥的运行，生产者生产一个产品，消费者就消费掉一个产品，下面我就用Java的多线程来实现这个课题。<!--more-->本例子的ChuShi代表生产者，XiaoFei代表消费者。首先是生产者厨师的代码：\n``` java\npackage thread;  \npublic class ChuShi extends Thread{  \n      \n    private GongNeng g;  \n    public ChuShi(GongNeng g){    \n        this.g = g;  \n    }  \n      \n    public void run(){  \n        for(;;){  \n              \n            g.lao();  \n              \n        }  \n    }  \n} \n```\n然后是消费者的代码：  \n``` java\npackage thread;  \npublic class XiaoFei extends Thread{  \n      \n    private GongNeng g;  \n      \n    public XiaoFei(GongNeng g){  \n          \n        this.g = g;  \n          \n    }  \n      \n    public void run(){  \n        for(;;){  \n                  \n            g.chi();  \n              \n        }  \n    }  \n}\n```\n接着是封装了生产者的生产方法和消费者的消费方法的类，该类中的方法要使用synchronized关键字，就可以使run方法同步，也就是说，对于同一个Java类的对象实例，run方法同时只能被一个线程调用，并当前的run执行完后，才能被其他的线程调用。需要注意的是每个线程run()方法调用的synchronized修饰的方法必须是一个实例的方法才能保证同步，所以这个里将生产者和消费者的功能封装在一个实例中，在将他们的实例分别传给生产者和消费者，这样他们就能够同步了，下面是同步的方法代码：\n``` java\npackage thread;  \npublic class GongNeng {  \n    private Bing b;  \n      \n    public GongNeng(Bing b){      \n        this.b = b;   \n    }  \n      \n    public synchronized void lao(){  \n          \n        if(b.getBing()<10){  \n              \n            try {  \n                Thread.sleep(1500);  \n            } catch (InterruptedException e) {  \n                // TODO Auto-generated catch block  \n                e.printStackTrace();  \n            }  \n              \n            System.out.println(Thread.currentThread()+  \n                  \n            \":厨师烙了一张饼，盘里还剩\"+(b.getBing()+1)+\"张饼\");  \n              \n            b.setBing(b.getBing()+1);  \n        }  \n    }  \n      \n    public synchronized void chi(){  \n        if(b.getBing()>0){  \n              \n            try {  \n                Thread.sleep(2000);  \n            } catch (InterruptedException e) {  \n                // TODO Auto-generated catch block  \n                e.printStackTrace();  \n            }  \n            System.out.println(Thread.currentThread()+  \n                  \n            \":消费者吃了一张饼，盘里还剩\"+(b.getBing()-1)+\"张饼\");  \n              \n            b.setBing(b.getBing()-1);  \n              \n        }  \n    }  \n} \n```\n还有他们对一个消费品进行同步的操作，在这里我们用的是饼：\n``` java\npackage thread;  \npublic class Bing {  \n    private int bing = 10;  \n    public int getBing() {  \n        return bing;  \n    }  \n    public void setBing(int bing) {  \n        this.bing = bing;  \n    }  \n      \n}\n```\n下面是主入口方法进行测试：\n``` java\npackage thread;  \npublic class Test {  \n    public static void main(String[] args) {  \n          \n        //创建饼的实例  \n        Bing b = new Bing();  \n        //创建同步的吃饼和烙饼实例  \n        GongNeng g = new GongNeng(b);  \n        //创建线程两个消费者两个生产者  \n        ChuShi c1 = new ChuShi(g);  \n        ChuShi c2 = new ChuShi(g);  \n        XiaoFei x1 = new XiaoFei(g);  \n        XiaoFei x2 = new XiaoFei(g);  \n          \n        //启动线程  \n        c1.start();  \n        c2.start();  \n        x1.start();  \n        x2.start();  \n    }  \n} \n```\n 这个例子就模拟了生产与消费的问题。\n","slug":"Java多线程实现生产者与消费者","published":1,"updated":"2016-11-27T12:41:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw0oqi1v000096s68duh1g7x","content":"<p>生产者与消费者问题是指创建一组“生产者”线程和一组“消费者”线程，让他们进行同步互斥的运行，生产者生产一个产品，消费者就消费掉一个产品，下面我就用Java的多线程来实现这个课题。<a id=\"more\"></a>本例子的ChuShi代表生产者，XiaoFei代表消费者。首先是生产者厨师的代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> thread;  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChuShi</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"keyword\">private</span> GongNeng g;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ChuShi</span><span class=\"params\">(GongNeng g)</span></span>&#123;    </div><div class=\"line\">        <span class=\"keyword\">this</span>.g = g;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">for</span>(;;)&#123;  </div><div class=\"line\">              </div><div class=\"line\">            g.lao();  </div><div class=\"line\">              </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然后是消费者的代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> thread;  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XiaoFei</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"keyword\">private</span> GongNeng g;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">XiaoFei</span><span class=\"params\">(GongNeng g)</span></span>&#123;  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"keyword\">this</span>.g = g;  </div><div class=\"line\">          </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">for</span>(;;)&#123;  </div><div class=\"line\">                  </div><div class=\"line\">            g.chi();  </div><div class=\"line\">              </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>接着是封装了生产者的生产方法和消费者的消费方法的类，该类中的方法要使用synchronized关键字，就可以使run方法同步，也就是说，对于同一个Java类的对象实例，run方法同时只能被一个线程调用，并当前的run执行完后，才能被其他的线程调用。需要注意的是每个线程run()方法调用的synchronized修饰的方法必须是一个实例的方法才能保证同步，所以这个里将生产者和消费者的功能封装在一个实例中，在将他们的实例分别传给生产者和消费者，这样他们就能够同步了，下面是同步的方法代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> thread;  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GongNeng</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">private</span> Bing b;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">GongNeng</span><span class=\"params\">(Bing b)</span></span>&#123;      </div><div class=\"line\">        <span class=\"keyword\">this</span>.b = b;   </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">lao</span><span class=\"params\">()</span></span>&#123;  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"keyword\">if</span>(b.getBing()&lt;<span class=\"number\">10</span>)&#123;  </div><div class=\"line\">              </div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">                Thread.sleep(<span class=\"number\">1500</span>);  </div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;  </div><div class=\"line\">                <span class=\"comment\">// TODO Auto-generated catch block  </span></div><div class=\"line\">                e.printStackTrace();  </div><div class=\"line\">            &#125;  </div><div class=\"line\">              </div><div class=\"line\">            System.out.println(Thread.currentThread()+  </div><div class=\"line\">                  </div><div class=\"line\">            <span class=\"string\">\":厨师烙了一张饼，盘里还剩\"</span>+(b.getBing()+<span class=\"number\">1</span>)+<span class=\"string\">\"张饼\"</span>);  </div><div class=\"line\">              </div><div class=\"line\">            b.setBing(b.getBing()+<span class=\"number\">1</span>);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">chi</span><span class=\"params\">()</span></span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span>(b.getBing()&gt;<span class=\"number\">0</span>)&#123;  </div><div class=\"line\">              </div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">                Thread.sleep(<span class=\"number\">2000</span>);  </div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;  </div><div class=\"line\">                <span class=\"comment\">// TODO Auto-generated catch block  </span></div><div class=\"line\">                e.printStackTrace();  </div><div class=\"line\">            &#125;  </div><div class=\"line\">            System.out.println(Thread.currentThread()+  </div><div class=\"line\">                  </div><div class=\"line\">            <span class=\"string\">\":消费者吃了一张饼，盘里还剩\"</span>+(b.getBing()-<span class=\"number\">1</span>)+<span class=\"string\">\"张饼\"</span>);  </div><div class=\"line\">              </div><div class=\"line\">            b.setBing(b.getBing()-<span class=\"number\">1</span>);  </div><div class=\"line\">              </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>还有他们对一个消费品进行同步的操作，在这里我们用的是饼：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> thread;  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bing</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> bing = <span class=\"number\">10</span>;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getBing</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span> bing;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setBing</span><span class=\"params\">(<span class=\"keyword\">int</span> bing)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">this</span>.bing = bing;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>下面是主入口方法进行测试：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> thread;  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"comment\">//创建饼的实例  </span></div><div class=\"line\">        Bing b = <span class=\"keyword\">new</span> Bing();  </div><div class=\"line\">        <span class=\"comment\">//创建同步的吃饼和烙饼实例  </span></div><div class=\"line\">        GongNeng g = <span class=\"keyword\">new</span> GongNeng(b);  </div><div class=\"line\">        <span class=\"comment\">//创建线程两个消费者两个生产者  </span></div><div class=\"line\">        ChuShi c1 = <span class=\"keyword\">new</span> ChuShi(g);  </div><div class=\"line\">        ChuShi c2 = <span class=\"keyword\">new</span> ChuShi(g);  </div><div class=\"line\">        XiaoFei x1 = <span class=\"keyword\">new</span> XiaoFei(g);  </div><div class=\"line\">        XiaoFei x2 = <span class=\"keyword\">new</span> XiaoFei(g);  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"comment\">//启动线程  </span></div><div class=\"line\">        c1.start();  </div><div class=\"line\">        c2.start();  </div><div class=\"line\">        x1.start();  </div><div class=\"line\">        x2.start();  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p> 这个例子就模拟了生产与消费的问题。</p>\n","excerpt":"<p>生产者与消费者问题是指创建一组“生产者”线程和一组“消费者”线程，让他们进行同步互斥的运行，生产者生产一个产品，消费者就消费掉一个产品，下面我就用Java的多线程来实现这个课题。","more":"本例子的ChuShi代表生产者，XiaoFei代表消费者。首先是生产者厨师的代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> thread;  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChuShi</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"keyword\">private</span> GongNeng g;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ChuShi</span><span class=\"params\">(GongNeng g)</span></span>&#123;    </div><div class=\"line\">        <span class=\"keyword\">this</span>.g = g;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">for</span>(;;)&#123;  </div><div class=\"line\">              </div><div class=\"line\">            g.lao();  </div><div class=\"line\">              </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然后是消费者的代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> thread;  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XiaoFei</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"keyword\">private</span> GongNeng g;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">XiaoFei</span><span class=\"params\">(GongNeng g)</span></span>&#123;  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"keyword\">this</span>.g = g;  </div><div class=\"line\">          </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">for</span>(;;)&#123;  </div><div class=\"line\">                  </div><div class=\"line\">            g.chi();  </div><div class=\"line\">              </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>接着是封装了生产者的生产方法和消费者的消费方法的类，该类中的方法要使用synchronized关键字，就可以使run方法同步，也就是说，对于同一个Java类的对象实例，run方法同时只能被一个线程调用，并当前的run执行完后，才能被其他的线程调用。需要注意的是每个线程run()方法调用的synchronized修饰的方法必须是一个实例的方法才能保证同步，所以这个里将生产者和消费者的功能封装在一个实例中，在将他们的实例分别传给生产者和消费者，这样他们就能够同步了，下面是同步的方法代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> thread;  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GongNeng</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">private</span> Bing b;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">GongNeng</span><span class=\"params\">(Bing b)</span></span>&#123;      </div><div class=\"line\">        <span class=\"keyword\">this</span>.b = b;   </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">lao</span><span class=\"params\">()</span></span>&#123;  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"keyword\">if</span>(b.getBing()&lt;<span class=\"number\">10</span>)&#123;  </div><div class=\"line\">              </div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">                Thread.sleep(<span class=\"number\">1500</span>);  </div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;  </div><div class=\"line\">                <span class=\"comment\">// TODO Auto-generated catch block  </span></div><div class=\"line\">                e.printStackTrace();  </div><div class=\"line\">            &#125;  </div><div class=\"line\">              </div><div class=\"line\">            System.out.println(Thread.currentThread()+  </div><div class=\"line\">                  </div><div class=\"line\">            <span class=\"string\">\":厨师烙了一张饼，盘里还剩\"</span>+(b.getBing()+<span class=\"number\">1</span>)+<span class=\"string\">\"张饼\"</span>);  </div><div class=\"line\">              </div><div class=\"line\">            b.setBing(b.getBing()+<span class=\"number\">1</span>);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">chi</span><span class=\"params\">()</span></span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span>(b.getBing()&gt;<span class=\"number\">0</span>)&#123;  </div><div class=\"line\">              </div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">                Thread.sleep(<span class=\"number\">2000</span>);  </div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;  </div><div class=\"line\">                <span class=\"comment\">// TODO Auto-generated catch block  </span></div><div class=\"line\">                e.printStackTrace();  </div><div class=\"line\">            &#125;  </div><div class=\"line\">            System.out.println(Thread.currentThread()+  </div><div class=\"line\">                  </div><div class=\"line\">            <span class=\"string\">\":消费者吃了一张饼，盘里还剩\"</span>+(b.getBing()-<span class=\"number\">1</span>)+<span class=\"string\">\"张饼\"</span>);  </div><div class=\"line\">              </div><div class=\"line\">            b.setBing(b.getBing()-<span class=\"number\">1</span>);  </div><div class=\"line\">              </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>还有他们对一个消费品进行同步的操作，在这里我们用的是饼：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> thread;  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bing</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> bing = <span class=\"number\">10</span>;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getBing</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span> bing;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setBing</span><span class=\"params\">(<span class=\"keyword\">int</span> bing)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">this</span>.bing = bing;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>下面是主入口方法进行测试：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> thread;  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"comment\">//创建饼的实例  </span></div><div class=\"line\">        Bing b = <span class=\"keyword\">new</span> Bing();  </div><div class=\"line\">        <span class=\"comment\">//创建同步的吃饼和烙饼实例  </span></div><div class=\"line\">        GongNeng g = <span class=\"keyword\">new</span> GongNeng(b);  </div><div class=\"line\">        <span class=\"comment\">//创建线程两个消费者两个生产者  </span></div><div class=\"line\">        ChuShi c1 = <span class=\"keyword\">new</span> ChuShi(g);  </div><div class=\"line\">        ChuShi c2 = <span class=\"keyword\">new</span> ChuShi(g);  </div><div class=\"line\">        XiaoFei x1 = <span class=\"keyword\">new</span> XiaoFei(g);  </div><div class=\"line\">        XiaoFei x2 = <span class=\"keyword\">new</span> XiaoFei(g);  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"comment\">//启动线程  </span></div><div class=\"line\">        c1.start();  </div><div class=\"line\">        c2.start();  </div><div class=\"line\">        x1.start();  </div><div class=\"line\">        x2.start();  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p> 这个例子就模拟了生产与消费的问题。</p>"},{"title":"ExtJS初级教程之ExtJS Tree(一)","date":"2016-11-27T12:51:18.000Z","_content":"ExtJS是一款基于Ajax的web客户端框架，有着更加和漂亮友好的界面，今天起我就开始学习ExtJS了，下面我把我学习的过程与大家分享。<!--more-->  \n\n我先学习我最近用到ExtJS Tree。下面我们开始写我们的第一个静态树。  \n1、首先导入ExtJS提供的js和css文件。\n``` javascript\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"../script/resources/css/ext-all.css\" />\n  <script type=\"text/JavaScript\" src=\"../script/adapter/ext/ext-base.js\"></script>\n  <script type=\"text/javascript\" src=\"../script/ext-all.js\"></script>\n  <script type=\"text/javascript\" src=\"../script/locale/ext-lang-zh_CN.js\"></script>\n```\n注意导入顺序，这些文件都可以在extjs的源码包里找到。  \n2、首先我们先要创建一个空的树面板，此时页面上是神马都显示不出来的。\n``` javascript\n//创建Tree面板  \nvar tree = new Ext.tree.TreePanel({  \n //指定添加到的div  \n el:'tree-div',  \n}); \n```\n页面上应该有div的标签，因为我们写的树即将安插到这里。\n``` javascript\n<div id = \"tree-div\" ></div>\n```\n3、下面我们先创建一个根节点显示在页面上\n``` javascript\n//创建Tree面板  \nvar tree = new Ext.tree.TreePanel({  \n //指定添加到的div  \n el:'tree-div',  \n});  \nvar root = Ext.tree.TreeNode({text:'跟节点'});  \ntree.setRootNode(root);  \ntree.render();  \n```\n这样页面上就不会是一个空树了，应该显示的是一颗带有一个根节点的树。  \n4、最后我们按照上面的思路创建一个有层次的静态树。\n``` javascript\n//普通的静态树  \nvar tree = new Ext.tree.TreePanel({  \n el:'tree-div'  \n});  \n//创建根节点  \nvar root = new Ext.tree.TreeNode({text:'AllShengFen'});  \n//创建父节点  \nvar shengfen1 = new Ext.tree.TreeNode({text:'HeiLongJiang'});  \nvar shengfen2 = new Ext.tree.TreeNode({text:'LiaoNing'});  \nvar city1 = new Ext.tree.TreeNode({text:'harbin'});  \nvar city2 = new Ext.tree.TreeNode({text:'daqiang'});  \nvar city3 = new Ext.tree.TreeNode({text:'shenyang'});  \nvar city4 = new Ext.tree.TreeNode({text:'dalian'});  \n//将子节点添加到父节点中  \nshengfen1.appendChild(city1);  \nshengfen1.appendChild(city2);  \nshengfen2.appendChild(city3);  \nshengfen2.appendChild(city4);  \n//将子节点添加到父节点中  \nroot.appendChild(shengfen1);  \nroot.appendChild(shengfen2);  \n//将root节点设置为根节点  \ntree.setRootNode(root);  \n//使这棵树显示在div标签中  \ntree.render(); \n```\n这样一棵完整的树就应该显示在页面上了。  \n\n但是我们大多数用的都不是写死的静态树而是要根据不同数据生成不同的树，接下来我们就看看怎么读取服务器端的文件来生成ExtJS Tree。  \n1、创建一个data1.txt文件，内容是一个json字符串。\n``` javascript\n[  \n {text:'非叶子节点'},  \n {text:'叶子节点',leaf:true}  \n] \n```\n2、TreeLoader 导入数据的URL。我们需要一个类能够帮我们找到要加载的文件，这个类就是TreeLoader。\n``` javascript\n//创建Tree面板  \nvar tree = new Ext.tree.TreePanel({  \n //指定添加到的div  \n el:'tree-div',  \n //导入数据的URL  \n loader:new Ext.tree.TreeLoader({dataUrl:'../js/data1.txt'})  \n}); \n```\n3、但此时我们不能够再用Ext.tree.TreeNode来创建根节点了，用它创建根节点的话在页面上我们就只能看见跟节点。这是因为它不支持ajax，不能加载data.txt的数据，所以此时我们就用到了AsyncTreeNode了。\n``` javascript\n//创建根节点，使用AsyncTreeNode能够加载外部数据  \nvar root = new Ext.tree.AsyncTreeNode({text:'gen'});  \n//设置root为根节点  \ntree.setRootNode(root);  \n//将树显示在div标签上  \ntree.render();  \n//第一个true是自动展开所有字节点，第二个true是以动画效果展开树  \nroot.expand(true,true); \n```\n但此时我们发现，页面上的树开始无限的展开了。当我们将root.expand(true,true)删掉后，打开页面是不自动展开了，但是当我们点击展开的时候还是会无限的展开下去，这是因为AsyncTreeNode能够重新加载它下面的非叶子节点，我们加载的data1.txt里面的数据有一个节点是非叶子节点，所以AsyncTreeNode会再次的把它当做根节点，重新加载数据。所以我们应该给它一个所有节点的最后都是叶子节点的数据文件data2.txt。\n``` javascript\n[  \n  {text:'computer',children:[  \n    {text:'<a href=\"http://lib.csdn.net/base/17\" class='replace_word' title=\"Java EE知识库\" target='_blank' style='color:#df3434; font-weight:bold;'>Java</a>',leaf:true},  \n    {text:'c++',children:[  \n      {text:'thinking',leaf:true},  \n      {text:'yyyyy',leaf:true}  \n    ]},  \n  {text:'asp',leaf:true}   \n  ]},  \n  {text:'jsp',children:[  \n    {text:'dadf',leaf:true},  \n    {text:'ddddddd',leaf:true}  \n  ]}  \n]  \n```\n此时我们将加载的数据源改为data2.txt。\n``` javascript\n//创建Tree面板  \nvar tree = new Ext.tree.TreePanel({  \n //指定添加到的div  \n el:'tree-div',  \n //导入数据的URL  \n loader:new Ext.tree.TreeLoader({dataUrl:'../js/data1.txt'})  \n});\n```\n这时我们生成的树就不是无限展开的了。  \n今天就这些，下次我们再研究从servlet中获得Json数据来生成ExtJS树。\n","source":"_posts/Tree-1.md","raw":"---\ntitle: ExtJS初级教程之ExtJS Tree(一)\ndate: 2016-11-27 20:51:18\ntags: ExtJS\ncategories: javascript\n---\nExtJS是一款基于Ajax的web客户端框架，有着更加和漂亮友好的界面，今天起我就开始学习ExtJS了，下面我把我学习的过程与大家分享。<!--more-->  \n\n我先学习我最近用到ExtJS Tree。下面我们开始写我们的第一个静态树。  \n1、首先导入ExtJS提供的js和css文件。\n``` javascript\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"../script/resources/css/ext-all.css\" />\n  <script type=\"text/JavaScript\" src=\"../script/adapter/ext/ext-base.js\"></script>\n  <script type=\"text/javascript\" src=\"../script/ext-all.js\"></script>\n  <script type=\"text/javascript\" src=\"../script/locale/ext-lang-zh_CN.js\"></script>\n```\n注意导入顺序，这些文件都可以在extjs的源码包里找到。  \n2、首先我们先要创建一个空的树面板，此时页面上是神马都显示不出来的。\n``` javascript\n//创建Tree面板  \nvar tree = new Ext.tree.TreePanel({  \n //指定添加到的div  \n el:'tree-div',  \n}); \n```\n页面上应该有div的标签，因为我们写的树即将安插到这里。\n``` javascript\n<div id = \"tree-div\" ></div>\n```\n3、下面我们先创建一个根节点显示在页面上\n``` javascript\n//创建Tree面板  \nvar tree = new Ext.tree.TreePanel({  \n //指定添加到的div  \n el:'tree-div',  \n});  \nvar root = Ext.tree.TreeNode({text:'跟节点'});  \ntree.setRootNode(root);  \ntree.render();  \n```\n这样页面上就不会是一个空树了，应该显示的是一颗带有一个根节点的树。  \n4、最后我们按照上面的思路创建一个有层次的静态树。\n``` javascript\n//普通的静态树  \nvar tree = new Ext.tree.TreePanel({  \n el:'tree-div'  \n});  \n//创建根节点  \nvar root = new Ext.tree.TreeNode({text:'AllShengFen'});  \n//创建父节点  \nvar shengfen1 = new Ext.tree.TreeNode({text:'HeiLongJiang'});  \nvar shengfen2 = new Ext.tree.TreeNode({text:'LiaoNing'});  \nvar city1 = new Ext.tree.TreeNode({text:'harbin'});  \nvar city2 = new Ext.tree.TreeNode({text:'daqiang'});  \nvar city3 = new Ext.tree.TreeNode({text:'shenyang'});  \nvar city4 = new Ext.tree.TreeNode({text:'dalian'});  \n//将子节点添加到父节点中  \nshengfen1.appendChild(city1);  \nshengfen1.appendChild(city2);  \nshengfen2.appendChild(city3);  \nshengfen2.appendChild(city4);  \n//将子节点添加到父节点中  \nroot.appendChild(shengfen1);  \nroot.appendChild(shengfen2);  \n//将root节点设置为根节点  \ntree.setRootNode(root);  \n//使这棵树显示在div标签中  \ntree.render(); \n```\n这样一棵完整的树就应该显示在页面上了。  \n\n但是我们大多数用的都不是写死的静态树而是要根据不同数据生成不同的树，接下来我们就看看怎么读取服务器端的文件来生成ExtJS Tree。  \n1、创建一个data1.txt文件，内容是一个json字符串。\n``` javascript\n[  \n {text:'非叶子节点'},  \n {text:'叶子节点',leaf:true}  \n] \n```\n2、TreeLoader 导入数据的URL。我们需要一个类能够帮我们找到要加载的文件，这个类就是TreeLoader。\n``` javascript\n//创建Tree面板  \nvar tree = new Ext.tree.TreePanel({  \n //指定添加到的div  \n el:'tree-div',  \n //导入数据的URL  \n loader:new Ext.tree.TreeLoader({dataUrl:'../js/data1.txt'})  \n}); \n```\n3、但此时我们不能够再用Ext.tree.TreeNode来创建根节点了，用它创建根节点的话在页面上我们就只能看见跟节点。这是因为它不支持ajax，不能加载data.txt的数据，所以此时我们就用到了AsyncTreeNode了。\n``` javascript\n//创建根节点，使用AsyncTreeNode能够加载外部数据  \nvar root = new Ext.tree.AsyncTreeNode({text:'gen'});  \n//设置root为根节点  \ntree.setRootNode(root);  \n//将树显示在div标签上  \ntree.render();  \n//第一个true是自动展开所有字节点，第二个true是以动画效果展开树  \nroot.expand(true,true); \n```\n但此时我们发现，页面上的树开始无限的展开了。当我们将root.expand(true,true)删掉后，打开页面是不自动展开了，但是当我们点击展开的时候还是会无限的展开下去，这是因为AsyncTreeNode能够重新加载它下面的非叶子节点，我们加载的data1.txt里面的数据有一个节点是非叶子节点，所以AsyncTreeNode会再次的把它当做根节点，重新加载数据。所以我们应该给它一个所有节点的最后都是叶子节点的数据文件data2.txt。\n``` javascript\n[  \n  {text:'computer',children:[  \n    {text:'<a href=\"http://lib.csdn.net/base/17\" class='replace_word' title=\"Java EE知识库\" target='_blank' style='color:#df3434; font-weight:bold;'>Java</a>',leaf:true},  \n    {text:'c++',children:[  \n      {text:'thinking',leaf:true},  \n      {text:'yyyyy',leaf:true}  \n    ]},  \n  {text:'asp',leaf:true}   \n  ]},  \n  {text:'jsp',children:[  \n    {text:'dadf',leaf:true},  \n    {text:'ddddddd',leaf:true}  \n  ]}  \n]  \n```\n此时我们将加载的数据源改为data2.txt。\n``` javascript\n//创建Tree面板  \nvar tree = new Ext.tree.TreePanel({  \n //指定添加到的div  \n el:'tree-div',  \n //导入数据的URL  \n loader:new Ext.tree.TreeLoader({dataUrl:'../js/data1.txt'})  \n});\n```\n这时我们生成的树就不是无限展开的了。  \n今天就这些，下次我们再研究从servlet中获得Json数据来生成ExtJS树。\n","slug":"Tree-1","published":1,"updated":"2016-11-27T13:08:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw0oqi21000296s6pe6m33sv","content":"<p>ExtJS是一款基于Ajax的web客户端框架，有着更加和漂亮友好的界面，今天起我就开始学习ExtJS了，下面我把我学习的过程与大家分享。<a id=\"more\"></a>  </p>\n<p>我先学习我最近用到ExtJS Tree。下面我们开始写我们的第一个静态树。<br>1、首先导入ExtJS提供的js和css文件。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;link rel=<span class=\"string\">\"stylesheet\"</span> type=<span class=\"string\">\"text/css\"</span> href=<span class=\"string\">\"../script/resources/css/ext-all.css\"</span> /&gt;</div><div class=\"line\">&lt;script type=\"text/JavaScript\" src=\"../script/adapter/ext/ext-base.js\"&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"../script/ext-all.js\"</span>&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"../script/locale/ext-lang-zh_CN.js\"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<p>注意导入顺序，这些文件都可以在extjs的源码包里找到。<br>2、首先我们先要创建一个空的树面板，此时页面上是神马都显示不出来的。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//创建Tree面板  </span></div><div class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </div><div class=\"line\"> <span class=\"comment\">//指定添加到的div  </span></div><div class=\"line\"> el:<span class=\"string\">'tree-div'</span>,  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>页面上应该有div的标签，因为我们写的树即将安插到这里。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id = <span class=\"string\">\"tree-div\"</span> &gt;&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>3、下面我们先创建一个根节点显示在页面上<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//创建Tree面板  </span></div><div class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </div><div class=\"line\"> <span class=\"comment\">//指定添加到的div  </span></div><div class=\"line\"> el:<span class=\"string\">'tree-div'</span>,  </div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> root = Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'跟节点'</span>&#125;);  </div><div class=\"line\">tree.setRootNode(root);  </div><div class=\"line\">tree.render();</div></pre></td></tr></table></figure></p>\n<p>这样页面上就不会是一个空树了，应该显示的是一颗带有一个根节点的树。<br>4、最后我们按照上面的思路创建一个有层次的静态树。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//普通的静态树  </span></div><div class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </div><div class=\"line\"> <span class=\"attr\">el</span>:<span class=\"string\">'tree-div'</span>  </div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"comment\">//创建根节点  </span></div><div class=\"line\"><span class=\"keyword\">var</span> root = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'AllShengFen'</span>&#125;);  </div><div class=\"line\"><span class=\"comment\">//创建父节点  </span></div><div class=\"line\"><span class=\"keyword\">var</span> shengfen1 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'HeiLongJiang'</span>&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> shengfen2 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'LiaoNing'</span>&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> city1 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'harbin'</span>&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> city2 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'daqiang'</span>&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> city3 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'shenyang'</span>&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> city4 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'dalian'</span>&#125;);  </div><div class=\"line\"><span class=\"comment\">//将子节点添加到父节点中  </span></div><div class=\"line\">shengfen1.appendChild(city1);  </div><div class=\"line\">shengfen1.appendChild(city2);  </div><div class=\"line\">shengfen2.appendChild(city3);  </div><div class=\"line\">shengfen2.appendChild(city4);  </div><div class=\"line\"><span class=\"comment\">//将子节点添加到父节点中  </span></div><div class=\"line\">root.appendChild(shengfen1);  </div><div class=\"line\">root.appendChild(shengfen2);  </div><div class=\"line\"><span class=\"comment\">//将root节点设置为根节点  </span></div><div class=\"line\">tree.setRootNode(root);  </div><div class=\"line\"><span class=\"comment\">//使这棵树显示在div标签中  </span></div><div class=\"line\">tree.render();</div></pre></td></tr></table></figure></p>\n<p>这样一棵完整的树就应该显示在页面上了。  </p>\n<p>但是我们大多数用的都不是写死的静态树而是要根据不同数据生成不同的树，接下来我们就看看怎么读取服务器端的文件来生成ExtJS Tree。<br>1、创建一个data1.txt文件，内容是一个json字符串。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[  </div><div class=\"line\"> &#123;<span class=\"attr\">text</span>:<span class=\"string\">'非叶子节点'</span>&#125;,  </div><div class=\"line\"> &#123;<span class=\"attr\">text</span>:<span class=\"string\">'叶子节点'</span>,<span class=\"attr\">leaf</span>:<span class=\"literal\">true</span>&#125;  </div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<p>2、TreeLoader 导入数据的URL。我们需要一个类能够帮我们找到要加载的文件，这个类就是TreeLoader。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//创建Tree面板  </span></div><div class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </div><div class=\"line\"> <span class=\"comment\">//指定添加到的div  </span></div><div class=\"line\"> el:<span class=\"string\">'tree-div'</span>,  </div><div class=\"line\"> <span class=\"comment\">//导入数据的URL  </span></div><div class=\"line\"> loader:<span class=\"keyword\">new</span> Ext.tree.TreeLoader(&#123;<span class=\"attr\">dataUrl</span>:<span class=\"string\">'../js/data1.txt'</span>&#125;)  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>3、但此时我们不能够再用Ext.tree.TreeNode来创建根节点了，用它创建根节点的话在页面上我们就只能看见跟节点。这是因为它不支持ajax，不能加载data.txt的数据，所以此时我们就用到了AsyncTreeNode了。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//创建根节点，使用AsyncTreeNode能够加载外部数据  </span></div><div class=\"line\"><span class=\"keyword\">var</span> root = <span class=\"keyword\">new</span> Ext.tree.AsyncTreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'gen'</span>&#125;);  </div><div class=\"line\"><span class=\"comment\">//设置root为根节点  </span></div><div class=\"line\">tree.setRootNode(root);  </div><div class=\"line\"><span class=\"comment\">//将树显示在div标签上  </span></div><div class=\"line\">tree.render();  </div><div class=\"line\"><span class=\"comment\">//第一个true是自动展开所有字节点，第二个true是以动画效果展开树  </span></div><div class=\"line\">root.expand(<span class=\"literal\">true</span>,<span class=\"literal\">true</span>);</div></pre></td></tr></table></figure></p>\n<p>但此时我们发现，页面上的树开始无限的展开了。当我们将root.expand(true,true)删掉后，打开页面是不自动展开了，但是当我们点击展开的时候还是会无限的展开下去，这是因为AsyncTreeNode能够重新加载它下面的非叶子节点，我们加载的data1.txt里面的数据有一个节点是非叶子节点，所以AsyncTreeNode会再次的把它当做根节点，重新加载数据。所以我们应该给它一个所有节点的最后都是叶子节点的数据文件data2.txt。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">[  </div><div class=\"line\">  &#123;text:'computer',children:[  </div><div class=\"line\">    &#123;text:'&lt;a href=\"http://lib.csdn.net/base/17\" class='replace_word' title=\"Java EE知识库\" target='_blank' style='color:#df3434; font-weight:bold;'&gt;Java&lt;/a&gt;',leaf:true&#125;,  </div><div class=\"line\">    &#123;text:'c++',children:[  </div><div class=\"line\">      &#123;text:'thinking',leaf:true&#125;,  </div><div class=\"line\">      &#123;text:'yyyyy',leaf:true&#125;  </div><div class=\"line\">    ]&#125;,  </div><div class=\"line\">  &#123;text:'asp',leaf:true&#125;   </div><div class=\"line\">  ]&#125;,  </div><div class=\"line\">  &#123;text:'jsp',children:[  </div><div class=\"line\">    &#123;text:'dadf',leaf:true&#125;,  </div><div class=\"line\">    &#123;text:'ddddddd',leaf:true&#125;  </div><div class=\"line\">  ]&#125;  </div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<p>此时我们将加载的数据源改为data2.txt。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//创建Tree面板  </span></div><div class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </div><div class=\"line\"> <span class=\"comment\">//指定添加到的div  </span></div><div class=\"line\"> el:<span class=\"string\">'tree-div'</span>,  </div><div class=\"line\"> <span class=\"comment\">//导入数据的URL  </span></div><div class=\"line\"> loader:<span class=\"keyword\">new</span> Ext.tree.TreeLoader(&#123;<span class=\"attr\">dataUrl</span>:<span class=\"string\">'../js/data1.txt'</span>&#125;)  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>这时我们生成的树就不是无限展开的了。<br>今天就这些，下次我们再研究从servlet中获得Json数据来生成ExtJS树。</p>\n","excerpt":"<p>ExtJS是一款基于Ajax的web客户端框架，有着更加和漂亮友好的界面，今天起我就开始学习ExtJS了，下面我把我学习的过程与大家分享。","more":"</p>\n<p>我先学习我最近用到ExtJS Tree。下面我们开始写我们的第一个静态树。<br>1、首先导入ExtJS提供的js和css文件。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;link rel=<span class=\"string\">\"stylesheet\"</span> type=<span class=\"string\">\"text/css\"</span> href=<span class=\"string\">\"../script/resources/css/ext-all.css\"</span> /&gt;</div><div class=\"line\">&lt;script type=\"text/JavaScript\" src=\"../script/adapter/ext/ext-base.js\"&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"../script/ext-all.js\"</span>&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"../script/locale/ext-lang-zh_CN.js\"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<p>注意导入顺序，这些文件都可以在extjs的源码包里找到。<br>2、首先我们先要创建一个空的树面板，此时页面上是神马都显示不出来的。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//创建Tree面板  </span></div><div class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </div><div class=\"line\"> <span class=\"comment\">//指定添加到的div  </span></div><div class=\"line\"> el:<span class=\"string\">'tree-div'</span>,  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>页面上应该有div的标签，因为我们写的树即将安插到这里。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id = <span class=\"string\">\"tree-div\"</span> &gt;&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>3、下面我们先创建一个根节点显示在页面上<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//创建Tree面板  </span></div><div class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </div><div class=\"line\"> <span class=\"comment\">//指定添加到的div  </span></div><div class=\"line\"> el:<span class=\"string\">'tree-div'</span>,  </div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> root = Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'跟节点'</span>&#125;);  </div><div class=\"line\">tree.setRootNode(root);  </div><div class=\"line\">tree.render();</div></pre></td></tr></table></figure></p>\n<p>这样页面上就不会是一个空树了，应该显示的是一颗带有一个根节点的树。<br>4、最后我们按照上面的思路创建一个有层次的静态树。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//普通的静态树  </span></div><div class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </div><div class=\"line\"> <span class=\"attr\">el</span>:<span class=\"string\">'tree-div'</span>  </div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"comment\">//创建根节点  </span></div><div class=\"line\"><span class=\"keyword\">var</span> root = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'AllShengFen'</span>&#125;);  </div><div class=\"line\"><span class=\"comment\">//创建父节点  </span></div><div class=\"line\"><span class=\"keyword\">var</span> shengfen1 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'HeiLongJiang'</span>&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> shengfen2 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'LiaoNing'</span>&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> city1 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'harbin'</span>&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> city2 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'daqiang'</span>&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> city3 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'shenyang'</span>&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> city4 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'dalian'</span>&#125;);  </div><div class=\"line\"><span class=\"comment\">//将子节点添加到父节点中  </span></div><div class=\"line\">shengfen1.appendChild(city1);  </div><div class=\"line\">shengfen1.appendChild(city2);  </div><div class=\"line\">shengfen2.appendChild(city3);  </div><div class=\"line\">shengfen2.appendChild(city4);  </div><div class=\"line\"><span class=\"comment\">//将子节点添加到父节点中  </span></div><div class=\"line\">root.appendChild(shengfen1);  </div><div class=\"line\">root.appendChild(shengfen2);  </div><div class=\"line\"><span class=\"comment\">//将root节点设置为根节点  </span></div><div class=\"line\">tree.setRootNode(root);  </div><div class=\"line\"><span class=\"comment\">//使这棵树显示在div标签中  </span></div><div class=\"line\">tree.render();</div></pre></td></tr></table></figure></p>\n<p>这样一棵完整的树就应该显示在页面上了。  </p>\n<p>但是我们大多数用的都不是写死的静态树而是要根据不同数据生成不同的树，接下来我们就看看怎么读取服务器端的文件来生成ExtJS Tree。<br>1、创建一个data1.txt文件，内容是一个json字符串。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[  </div><div class=\"line\"> &#123;<span class=\"attr\">text</span>:<span class=\"string\">'非叶子节点'</span>&#125;,  </div><div class=\"line\"> &#123;<span class=\"attr\">text</span>:<span class=\"string\">'叶子节点'</span>,<span class=\"attr\">leaf</span>:<span class=\"literal\">true</span>&#125;  </div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<p>2、TreeLoader 导入数据的URL。我们需要一个类能够帮我们找到要加载的文件，这个类就是TreeLoader。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//创建Tree面板  </span></div><div class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </div><div class=\"line\"> <span class=\"comment\">//指定添加到的div  </span></div><div class=\"line\"> el:<span class=\"string\">'tree-div'</span>,  </div><div class=\"line\"> <span class=\"comment\">//导入数据的URL  </span></div><div class=\"line\"> loader:<span class=\"keyword\">new</span> Ext.tree.TreeLoader(&#123;<span class=\"attr\">dataUrl</span>:<span class=\"string\">'../js/data1.txt'</span>&#125;)  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>3、但此时我们不能够再用Ext.tree.TreeNode来创建根节点了，用它创建根节点的话在页面上我们就只能看见跟节点。这是因为它不支持ajax，不能加载data.txt的数据，所以此时我们就用到了AsyncTreeNode了。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//创建根节点，使用AsyncTreeNode能够加载外部数据  </span></div><div class=\"line\"><span class=\"keyword\">var</span> root = <span class=\"keyword\">new</span> Ext.tree.AsyncTreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'gen'</span>&#125;);  </div><div class=\"line\"><span class=\"comment\">//设置root为根节点  </span></div><div class=\"line\">tree.setRootNode(root);  </div><div class=\"line\"><span class=\"comment\">//将树显示在div标签上  </span></div><div class=\"line\">tree.render();  </div><div class=\"line\"><span class=\"comment\">//第一个true是自动展开所有字节点，第二个true是以动画效果展开树  </span></div><div class=\"line\">root.expand(<span class=\"literal\">true</span>,<span class=\"literal\">true</span>);</div></pre></td></tr></table></figure></p>\n<p>但此时我们发现，页面上的树开始无限的展开了。当我们将root.expand(true,true)删掉后，打开页面是不自动展开了，但是当我们点击展开的时候还是会无限的展开下去，这是因为AsyncTreeNode能够重新加载它下面的非叶子节点，我们加载的data1.txt里面的数据有一个节点是非叶子节点，所以AsyncTreeNode会再次的把它当做根节点，重新加载数据。所以我们应该给它一个所有节点的最后都是叶子节点的数据文件data2.txt。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">[  </div><div class=\"line\">  &#123;text:'computer',children:[  </div><div class=\"line\">    &#123;text:'&lt;a href=\"http://lib.csdn.net/base/17\" class='replace_word' title=\"Java EE知识库\" target='_blank' style='color:#df3434; font-weight:bold;'&gt;Java&lt;/a&gt;',leaf:true&#125;,  </div><div class=\"line\">    &#123;text:'c++',children:[  </div><div class=\"line\">      &#123;text:'thinking',leaf:true&#125;,  </div><div class=\"line\">      &#123;text:'yyyyy',leaf:true&#125;  </div><div class=\"line\">    ]&#125;,  </div><div class=\"line\">  &#123;text:'asp',leaf:true&#125;   </div><div class=\"line\">  ]&#125;,  </div><div class=\"line\">  &#123;text:'jsp',children:[  </div><div class=\"line\">    &#123;text:'dadf',leaf:true&#125;,  </div><div class=\"line\">    &#123;text:'ddddddd',leaf:true&#125;  </div><div class=\"line\">  ]&#125;  </div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<p>此时我们将加载的数据源改为data2.txt。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//创建Tree面板  </span></div><div class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </div><div class=\"line\"> <span class=\"comment\">//指定添加到的div  </span></div><div class=\"line\"> el:<span class=\"string\">'tree-div'</span>,  </div><div class=\"line\"> <span class=\"comment\">//导入数据的URL  </span></div><div class=\"line\"> loader:<span class=\"keyword\">new</span> Ext.tree.TreeLoader(&#123;<span class=\"attr\">dataUrl</span>:<span class=\"string\">'../js/data1.txt'</span>&#125;)  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>这时我们生成的树就不是无限展开的了。<br>今天就这些，下次我们再研究从servlet中获得Json数据来生成ExtJS树。</p>"},{"title":"WebService复杂类型数据传输-dom4j方式","date":"2016-11-27T11:39:57.000Z","_content":"WebService在传递数据的时候只能传递字符串，当我们返回一些简单的字符串时我们可以直接返回，但是当我们想返回比如List，Map等复杂类型的数据时拼接字符串就是个很麻烦的工作，这时我们就用到了dom4j这个工具。\n\n当我们从数据库中查询出很多个对象类型时，我们一般都存放在List中。像这种数据就很难用拼接字符串的形式进行传递。我的解决办法就是利用dom4j把它写成一个xml格式的字符串，然后在客户端再利用dom4j解释。\n<!--more-->\n假如我们从数据库中查询的是一个Student对象，该对象有name和agel两个属性，我们将大量的Student对象储存在List中。下面我们想利用dom4j把List数据变成如下格式的xml文件类型的字符串：  \n``` xml\n\t<?xml version=\"1.0\" encoding=\"UTF-8\"?>  \n    <root>  \n        <student>  \n            <name>张三</name>  \n            <age>26</age>  \n        </student>  \n        <student>  \n            <name>赵四</name>  \n            <age>34</age>  \n        </student>  \n    </root> \n```\nwebservice端Java代码如下：  \n``` java\nimport java.util.List;  \nimport org.dom4j.Document;  \nimport org.dom4j.DocumentHelper;  \nimport org.dom4j.Element;  \nimport org.dom4j.io.OutputFormat;  \nimport vo.UnitPO;  \nimport DAO.unitDao;  \npublic class Service02 {     \n    public String method(){  \n         \n        Document document = DocumentHelper.createDocument();  \n        Element root = document.addElement(\"root\");  \n         \n        Element stuElement = null;  \n        Element nameElement = null;  \n        Element ageElement = null;  \n         \n        //第一个student节点  \n        stuElement = root.addElement(\"student\");  \n        //添加两个子节点  \n        nameElement = stuElement.addElement(\"name\");  \n        ageElement = stuElement.addElement(\"age\");     \n        //向两个子节点中添加文本内容  \n        nameElement.addText(\"张三\");  \n        ageElement.addText(\"26\");  \n         \n        //同理第二个student节点  \n        stuElement = root.addElement(\"student\");         \n        nameElement = stuElement.addElement(\"name\");  \n        ageElement = stuElement.addElement(\"age\");     \n        nameElement.addText(\"赵四\");  \n        ageElement.addText(\"34\");  \n        try {  \n            OutputFormat format = OutputFormat.createPrettyPrint();  \n            // 设置XML文件的编码格式  \n            format.setEncoding(\"UTF-8\");  \n            return document.asXML();  \n        } catch (Exception e) {  \n            System.out.println(e.getMessage());  \n            return \"error\";  \n        }  \n    }  \n} \n```\n这样就将我们想传送的复杂数据变成了xml格式是字符串，下面在客户端就可以解释出我们想要的数据了。client端java代码如下：\n``` java\nimport java.io.StringReader;  \nimport java.util.List;  \nimport org.dom4j.Document;  \nimport org.dom4j.Element;  \nimport org.dom4j.io.SAXReader;  \nimport webservice.Service02Proxy;  \npublic class Test {  \n    public static void main(String[] args) {         \n        try{  \n            //创建代理类  \n            Service02Proxy proxy = new Service02Proxy();  \n            //接受传过来的XML字符串  \n            String str = proxy.method();  \n            //解释该字符串  \n            StringReader read = new StringReader(str);  \n            SAXReader reader = new SAXReader();  \n            Document doc = reader.read(read);   \n            Element root = doc.getRootElement();  \n            //该节点由多个student构成，所以返回值是List类型  \n            List list = root.elements(\"student\");   \n             \n            for(int i = 0;i < list.size();i++){  \n                 \n                Element student = (Element)list.get(i);  \n                Element name = student.element(\"name\");  \n                Element age = student.element(\"age\");  \n                 \n                //打印得到的数据  \n                System.out.println(name.getTextTrim()+\":\"+age.getTextTrim());  \n                 \n            }  \n     \n        }catch(Exception e){  \n             \n            e.printStackTrace();  \n             \n        }  \n    }  \n}\n```\n控制台输出为：\n> **张三:26\n赵四:34 **\n\n每种编程语言可能接受时用的类型不同，但方法大同小异。代码如有问题，欢迎给予评价。","source":"_posts/WebService复杂类型数据传输-dom4j方式.md","raw":"---\ntitle: WebService复杂类型数据传输-dom4j方式\ndate: 2016-11-27 19:39:57\ntags: ［WebService,java］\ncategories: java\n---\nWebService在传递数据的时候只能传递字符串，当我们返回一些简单的字符串时我们可以直接返回，但是当我们想返回比如List，Map等复杂类型的数据时拼接字符串就是个很麻烦的工作，这时我们就用到了dom4j这个工具。\n\n当我们从数据库中查询出很多个对象类型时，我们一般都存放在List中。像这种数据就很难用拼接字符串的形式进行传递。我的解决办法就是利用dom4j把它写成一个xml格式的字符串，然后在客户端再利用dom4j解释。\n<!--more-->\n假如我们从数据库中查询的是一个Student对象，该对象有name和agel两个属性，我们将大量的Student对象储存在List中。下面我们想利用dom4j把List数据变成如下格式的xml文件类型的字符串：  \n``` xml\n\t<?xml version=\"1.0\" encoding=\"UTF-8\"?>  \n    <root>  \n        <student>  \n            <name>张三</name>  \n            <age>26</age>  \n        </student>  \n        <student>  \n            <name>赵四</name>  \n            <age>34</age>  \n        </student>  \n    </root> \n```\nwebservice端Java代码如下：  \n``` java\nimport java.util.List;  \nimport org.dom4j.Document;  \nimport org.dom4j.DocumentHelper;  \nimport org.dom4j.Element;  \nimport org.dom4j.io.OutputFormat;  \nimport vo.UnitPO;  \nimport DAO.unitDao;  \npublic class Service02 {     \n    public String method(){  \n         \n        Document document = DocumentHelper.createDocument();  \n        Element root = document.addElement(\"root\");  \n         \n        Element stuElement = null;  \n        Element nameElement = null;  \n        Element ageElement = null;  \n         \n        //第一个student节点  \n        stuElement = root.addElement(\"student\");  \n        //添加两个子节点  \n        nameElement = stuElement.addElement(\"name\");  \n        ageElement = stuElement.addElement(\"age\");     \n        //向两个子节点中添加文本内容  \n        nameElement.addText(\"张三\");  \n        ageElement.addText(\"26\");  \n         \n        //同理第二个student节点  \n        stuElement = root.addElement(\"student\");         \n        nameElement = stuElement.addElement(\"name\");  \n        ageElement = stuElement.addElement(\"age\");     \n        nameElement.addText(\"赵四\");  \n        ageElement.addText(\"34\");  \n        try {  \n            OutputFormat format = OutputFormat.createPrettyPrint();  \n            // 设置XML文件的编码格式  \n            format.setEncoding(\"UTF-8\");  \n            return document.asXML();  \n        } catch (Exception e) {  \n            System.out.println(e.getMessage());  \n            return \"error\";  \n        }  \n    }  \n} \n```\n这样就将我们想传送的复杂数据变成了xml格式是字符串，下面在客户端就可以解释出我们想要的数据了。client端java代码如下：\n``` java\nimport java.io.StringReader;  \nimport java.util.List;  \nimport org.dom4j.Document;  \nimport org.dom4j.Element;  \nimport org.dom4j.io.SAXReader;  \nimport webservice.Service02Proxy;  \npublic class Test {  \n    public static void main(String[] args) {         \n        try{  \n            //创建代理类  \n            Service02Proxy proxy = new Service02Proxy();  \n            //接受传过来的XML字符串  \n            String str = proxy.method();  \n            //解释该字符串  \n            StringReader read = new StringReader(str);  \n            SAXReader reader = new SAXReader();  \n            Document doc = reader.read(read);   \n            Element root = doc.getRootElement();  \n            //该节点由多个student构成，所以返回值是List类型  \n            List list = root.elements(\"student\");   \n             \n            for(int i = 0;i < list.size();i++){  \n                 \n                Element student = (Element)list.get(i);  \n                Element name = student.element(\"name\");  \n                Element age = student.element(\"age\");  \n                 \n                //打印得到的数据  \n                System.out.println(name.getTextTrim()+\":\"+age.getTextTrim());  \n                 \n            }  \n     \n        }catch(Exception e){  \n             \n            e.printStackTrace();  \n             \n        }  \n    }  \n}\n```\n控制台输出为：\n> **张三:26\n赵四:34 **\n\n每种编程语言可能接受时用的类型不同，但方法大同小异。代码如有问题，欢迎给予评价。","slug":"WebService复杂类型数据传输-dom4j方式","published":1,"updated":"2016-11-27T12:12:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw0oqi28000696s6rgsmyadj","content":"<p>WebService在传递数据的时候只能传递字符串，当我们返回一些简单的字符串时我们可以直接返回，但是当我们想返回比如List，Map等复杂类型的数据时拼接字符串就是个很麻烦的工作，这时我们就用到了dom4j这个工具。</p>\n<p>当我们从数据库中查询出很多个对象类型时，我们一般都存放在List中。像这种数据就很难用拼接字符串的形式进行传递。我的解决办法就是利用dom4j把它写成一个xml格式的字符串，然后在客户端再利用dom4j解释。<br><a id=\"more\"></a><br>假如我们从数据库中查询的是一个Student对象，该对象有name和agel两个属性，我们将大量的Student对象储存在List中。下面我们想利用dom4j把List数据变成如下格式的xml文件类型的字符串：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;  </div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">root</span>&gt;</span>  </div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">student</span>&gt;</span>  </div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>张三<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>  </div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">age</span>&gt;</span>26<span class=\"tag\">&lt;/<span class=\"name\">age</span>&gt;</span>  </div><div class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">student</span>&gt;</span>  </div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">student</span>&gt;</span>  </div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>赵四<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>  </div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">age</span>&gt;</span>34<span class=\"tag\">&lt;/<span class=\"name\">age</span>&gt;</span>  </div><div class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">student</span>&gt;</span>  </div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>webservice端Java代码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.dom4j.Document;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.dom4j.DocumentHelper;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.dom4j.Element;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.dom4j.io.OutputFormat;  </div><div class=\"line\"><span class=\"keyword\">import</span> vo.UnitPO;  </div><div class=\"line\"><span class=\"keyword\">import</span> DAO.unitDao;  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Service02</span> </span>&#123;     </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">method</span><span class=\"params\">()</span></span>&#123;  </div><div class=\"line\">         </div><div class=\"line\">        Document document = DocumentHelper.createDocument();  </div><div class=\"line\">        Element root = document.addElement(<span class=\"string\">\"root\"</span>);  </div><div class=\"line\">         </div><div class=\"line\">        Element stuElement = <span class=\"keyword\">null</span>;  </div><div class=\"line\">        Element nameElement = <span class=\"keyword\">null</span>;  </div><div class=\"line\">        Element ageElement = <span class=\"keyword\">null</span>;  </div><div class=\"line\">         </div><div class=\"line\">        <span class=\"comment\">//第一个student节点  </span></div><div class=\"line\">        stuElement = root.addElement(<span class=\"string\">\"student\"</span>);  </div><div class=\"line\">        <span class=\"comment\">//添加两个子节点  </span></div><div class=\"line\">        nameElement = stuElement.addElement(<span class=\"string\">\"name\"</span>);  </div><div class=\"line\">        ageElement = stuElement.addElement(<span class=\"string\">\"age\"</span>);     </div><div class=\"line\">        <span class=\"comment\">//向两个子节点中添加文本内容  </span></div><div class=\"line\">        nameElement.addText(<span class=\"string\">\"张三\"</span>);  </div><div class=\"line\">        ageElement.addText(<span class=\"string\">\"26\"</span>);  </div><div class=\"line\">         </div><div class=\"line\">        <span class=\"comment\">//同理第二个student节点  </span></div><div class=\"line\">        stuElement = root.addElement(<span class=\"string\">\"student\"</span>);         </div><div class=\"line\">        nameElement = stuElement.addElement(<span class=\"string\">\"name\"</span>);  </div><div class=\"line\">        ageElement = stuElement.addElement(<span class=\"string\">\"age\"</span>);     </div><div class=\"line\">        nameElement.addText(<span class=\"string\">\"赵四\"</span>);  </div><div class=\"line\">        ageElement.addText(<span class=\"string\">\"34\"</span>);  </div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">            OutputFormat format = OutputFormat.createPrettyPrint();  </div><div class=\"line\">            <span class=\"comment\">// 设置XML文件的编码格式  </span></div><div class=\"line\">            format.setEncoding(<span class=\"string\">\"UTF-8\"</span>);  </div><div class=\"line\">            <span class=\"keyword\">return</span> document.asXML();  </div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;  </div><div class=\"line\">            System.out.println(e.getMessage());  </div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"error\"</span>;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这样就将我们想传送的复杂数据变成了xml格式是字符串，下面在客户端就可以解释出我们想要的数据了。client端java代码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.io.StringReader;  </div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.dom4j.Document;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.dom4j.Element;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.dom4j.io.SAXReader;  </div><div class=\"line\"><span class=\"keyword\">import</span> webservice.Service02Proxy;  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;         </div><div class=\"line\">        <span class=\"keyword\">try</span>&#123;  </div><div class=\"line\">            <span class=\"comment\">//创建代理类  </span></div><div class=\"line\">            Service02Proxy proxy = <span class=\"keyword\">new</span> Service02Proxy();  </div><div class=\"line\">            <span class=\"comment\">//接受传过来的XML字符串  </span></div><div class=\"line\">            String str = proxy.method();  </div><div class=\"line\">            <span class=\"comment\">//解释该字符串  </span></div><div class=\"line\">            StringReader read = <span class=\"keyword\">new</span> StringReader(str);  </div><div class=\"line\">            SAXReader reader = <span class=\"keyword\">new</span> SAXReader();  </div><div class=\"line\">            Document doc = reader.read(read);   </div><div class=\"line\">            Element root = doc.getRootElement();  </div><div class=\"line\">            <span class=\"comment\">//该节点由多个student构成，所以返回值是List类型  </span></div><div class=\"line\">            List list = root.elements(<span class=\"string\">\"student\"</span>);   </div><div class=\"line\">             </div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; list.size();i++)&#123;  </div><div class=\"line\">                 </div><div class=\"line\">                Element student = (Element)list.get(i);  </div><div class=\"line\">                Element name = student.element(<span class=\"string\">\"name\"</span>);  </div><div class=\"line\">                Element age = student.element(<span class=\"string\">\"age\"</span>);  </div><div class=\"line\">                 </div><div class=\"line\">                <span class=\"comment\">//打印得到的数据  </span></div><div class=\"line\">                System.out.println(name.getTextTrim()+<span class=\"string\">\":\"</span>+age.getTextTrim());  </div><div class=\"line\">                 </div><div class=\"line\">            &#125;  </div><div class=\"line\">     </div><div class=\"line\">        &#125;<span class=\"keyword\">catch</span>(Exception e)&#123;  </div><div class=\"line\">             </div><div class=\"line\">            e.printStackTrace();  </div><div class=\"line\">             </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>控制台输出为：</p>\n<blockquote>\n<p><strong>张三:26<br>赵四:34 </strong></p>\n</blockquote>\n<p>每种编程语言可能接受时用的类型不同，但方法大同小异。代码如有问题，欢迎给予评价。</p>\n","excerpt":"<p>WebService在传递数据的时候只能传递字符串，当我们返回一些简单的字符串时我们可以直接返回，但是当我们想返回比如List，Map等复杂类型的数据时拼接字符串就是个很麻烦的工作，这时我们就用到了dom4j这个工具。</p>\n<p>当我们从数据库中查询出很多个对象类型时，我们一般都存放在List中。像这种数据就很难用拼接字符串的形式进行传递。我的解决办法就是利用dom4j把它写成一个xml格式的字符串，然后在客户端再利用dom4j解释。<br>","more":"<br>假如我们从数据库中查询的是一个Student对象，该对象有name和agel两个属性，我们将大量的Student对象储存在List中。下面我们想利用dom4j把List数据变成如下格式的xml文件类型的字符串：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;  </div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">root</span>&gt;</span>  </div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">student</span>&gt;</span>  </div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>张三<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>  </div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">age</span>&gt;</span>26<span class=\"tag\">&lt;/<span class=\"name\">age</span>&gt;</span>  </div><div class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">student</span>&gt;</span>  </div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">student</span>&gt;</span>  </div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>赵四<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>  </div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">age</span>&gt;</span>34<span class=\"tag\">&lt;/<span class=\"name\">age</span>&gt;</span>  </div><div class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">student</span>&gt;</span>  </div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>webservice端Java代码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.dom4j.Document;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.dom4j.DocumentHelper;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.dom4j.Element;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.dom4j.io.OutputFormat;  </div><div class=\"line\"><span class=\"keyword\">import</span> vo.UnitPO;  </div><div class=\"line\"><span class=\"keyword\">import</span> DAO.unitDao;  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Service02</span> </span>&#123;     </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">method</span><span class=\"params\">()</span></span>&#123;  </div><div class=\"line\">         </div><div class=\"line\">        Document document = DocumentHelper.createDocument();  </div><div class=\"line\">        Element root = document.addElement(<span class=\"string\">\"root\"</span>);  </div><div class=\"line\">         </div><div class=\"line\">        Element stuElement = <span class=\"keyword\">null</span>;  </div><div class=\"line\">        Element nameElement = <span class=\"keyword\">null</span>;  </div><div class=\"line\">        Element ageElement = <span class=\"keyword\">null</span>;  </div><div class=\"line\">         </div><div class=\"line\">        <span class=\"comment\">//第一个student节点  </span></div><div class=\"line\">        stuElement = root.addElement(<span class=\"string\">\"student\"</span>);  </div><div class=\"line\">        <span class=\"comment\">//添加两个子节点  </span></div><div class=\"line\">        nameElement = stuElement.addElement(<span class=\"string\">\"name\"</span>);  </div><div class=\"line\">        ageElement = stuElement.addElement(<span class=\"string\">\"age\"</span>);     </div><div class=\"line\">        <span class=\"comment\">//向两个子节点中添加文本内容  </span></div><div class=\"line\">        nameElement.addText(<span class=\"string\">\"张三\"</span>);  </div><div class=\"line\">        ageElement.addText(<span class=\"string\">\"26\"</span>);  </div><div class=\"line\">         </div><div class=\"line\">        <span class=\"comment\">//同理第二个student节点  </span></div><div class=\"line\">        stuElement = root.addElement(<span class=\"string\">\"student\"</span>);         </div><div class=\"line\">        nameElement = stuElement.addElement(<span class=\"string\">\"name\"</span>);  </div><div class=\"line\">        ageElement = stuElement.addElement(<span class=\"string\">\"age\"</span>);     </div><div class=\"line\">        nameElement.addText(<span class=\"string\">\"赵四\"</span>);  </div><div class=\"line\">        ageElement.addText(<span class=\"string\">\"34\"</span>);  </div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">            OutputFormat format = OutputFormat.createPrettyPrint();  </div><div class=\"line\">            <span class=\"comment\">// 设置XML文件的编码格式  </span></div><div class=\"line\">            format.setEncoding(<span class=\"string\">\"UTF-8\"</span>);  </div><div class=\"line\">            <span class=\"keyword\">return</span> document.asXML();  </div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;  </div><div class=\"line\">            System.out.println(e.getMessage());  </div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"error\"</span>;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这样就将我们想传送的复杂数据变成了xml格式是字符串，下面在客户端就可以解释出我们想要的数据了。client端java代码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.io.StringReader;  </div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.dom4j.Document;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.dom4j.Element;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.dom4j.io.SAXReader;  </div><div class=\"line\"><span class=\"keyword\">import</span> webservice.Service02Proxy;  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;         </div><div class=\"line\">        <span class=\"keyword\">try</span>&#123;  </div><div class=\"line\">            <span class=\"comment\">//创建代理类  </span></div><div class=\"line\">            Service02Proxy proxy = <span class=\"keyword\">new</span> Service02Proxy();  </div><div class=\"line\">            <span class=\"comment\">//接受传过来的XML字符串  </span></div><div class=\"line\">            String str = proxy.method();  </div><div class=\"line\">            <span class=\"comment\">//解释该字符串  </span></div><div class=\"line\">            StringReader read = <span class=\"keyword\">new</span> StringReader(str);  </div><div class=\"line\">            SAXReader reader = <span class=\"keyword\">new</span> SAXReader();  </div><div class=\"line\">            Document doc = reader.read(read);   </div><div class=\"line\">            Element root = doc.getRootElement();  </div><div class=\"line\">            <span class=\"comment\">//该节点由多个student构成，所以返回值是List类型  </span></div><div class=\"line\">            List list = root.elements(<span class=\"string\">\"student\"</span>);   </div><div class=\"line\">             </div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; list.size();i++)&#123;  </div><div class=\"line\">                 </div><div class=\"line\">                Element student = (Element)list.get(i);  </div><div class=\"line\">                Element name = student.element(<span class=\"string\">\"name\"</span>);  </div><div class=\"line\">                Element age = student.element(<span class=\"string\">\"age\"</span>);  </div><div class=\"line\">                 </div><div class=\"line\">                <span class=\"comment\">//打印得到的数据  </span></div><div class=\"line\">                System.out.println(name.getTextTrim()+<span class=\"string\">\":\"</span>+age.getTextTrim());  </div><div class=\"line\">                 </div><div class=\"line\">            &#125;  </div><div class=\"line\">     </div><div class=\"line\">        &#125;<span class=\"keyword\">catch</span>(Exception e)&#123;  </div><div class=\"line\">             </div><div class=\"line\">            e.printStackTrace();  </div><div class=\"line\">             </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>控制台输出为：</p>\n<blockquote>\n<p><strong>张三:26<br>赵四:34 </strong></p>\n</blockquote>\n<p>每种编程语言可能接受时用的类型不同，但方法大同小异。代码如有问题，欢迎给予评价。</p>"},{"title":"第一篇文章","date":"2016-11-27T08:45:24.000Z","_content":"# 我在Hexo上的第一篇博客\n\n这是我在Hexo上的第一篇博客，后面我会将我之前在其它博客平台上写的博客全部迁移到这里，并坚持写新的博客，希望大家支持，谢谢！","source":"_posts/第一篇文章.md","raw":"---\ntitle: 第一篇文章\ndate: 2016-11-27 16:45:24\ntags:\n---\n# 我在Hexo上的第一篇博客\n\n这是我在Hexo上的第一篇博客，后面我会将我之前在其它博客平台上写的博客全部迁移到这里，并坚持写新的博客，希望大家支持，谢谢！","slug":"第一篇文章","published":1,"updated":"2016-11-27T11:24:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw0oqi2f000896s60f5k71kj","content":"<h1 id=\"我在Hexo上的第一篇博客\"><a href=\"#我在Hexo上的第一篇博客\" class=\"headerlink\" title=\"我在Hexo上的第一篇博客\"></a>我在Hexo上的第一篇博客</h1><p>这是我在Hexo上的第一篇博客，后面我会将我之前在其它博客平台上写的博客全部迁移到这里，并坚持写新的博客，希望大家支持，谢谢！</p>\n","excerpt":"","more":"<h1 id=\"我在Hexo上的第一篇博客\"><a href=\"#我在Hexo上的第一篇博客\" class=\"headerlink\" title=\"我在Hexo上的第一篇博客\"></a>我在Hexo上的第一篇博客</h1><p>这是我在Hexo上的第一篇博客，后面我会将我之前在其它博客平台上写的博客全部迁移到这里，并坚持写新的博客，希望大家支持，谢谢！</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ciw0oqi1v000096s68duh1g7x","category_id":"ciw0oqi24000496s6jr0s6v11","_id":"ciw0oqi2n000c96s671zfkbcv"},{"post_id":"ciw0oqi21000296s6pe6m33sv","category_id":"ciw0oqi2l000996s6bqhda7lo","_id":"ciw0oqi2p000g96s6e7j9n5ka"},{"post_id":"ciw0oqi28000696s6rgsmyadj","category_id":"ciw0oqi24000496s6jr0s6v11","_id":"ciw0oqi2q000i96s6wzjrji7e"}],"PostTag":[{"post_id":"ciw0oqi1v000096s68duh1g7x","tag_id":"ciw0oqi27000596s6feui8bxd","_id":"ciw0oqi2n000b96s6k2uzn0qp"},{"post_id":"ciw0oqi21000296s6pe6m33sv","tag_id":"ciw0oqi2m000a96s6fb0ht6n0","_id":"ciw0oqi2p000f96s6lmzo7dj7"},{"post_id":"ciw0oqi28000696s6rgsmyadj","tag_id":"ciw0oqi2o000e96s62x15vp2i","_id":"ciw0oqi2q000h96s6kady3xna"}],"Tag":[{"name":"多线程","_id":"ciw0oqi27000596s6feui8bxd"},{"name":"ExtJS","_id":"ciw0oqi2m000a96s6fb0ht6n0"},{"name":"［WebService,java］","_id":"ciw0oqi2o000e96s62x15vp2i"}]}}