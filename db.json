{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/images/design_1_commond.png","path":"images/design_1_commond.png","modified":0,"renderable":0},{"_id":"source/images/design_3_single.png","path":"images/design_3_single.png","modified":0,"renderable":0},{"_id":"source/images/tree_2_sql.png","path":"images/tree_2_sql.png","modified":0,"renderable":0},{"_id":"source/uploads/wechat-qcode.jpg","path":"uploads/wechat-qcode.jpg","modified":0,"renderable":0},{"_id":"source/uploads/wechat_charge.jpg","path":"uploads/wechat_charge.jpg","modified":0,"renderable":0},{"_id":"source/uploads/alipay_charge.jpg","path":"uploads/alipay_charge.jpg","modified":0,"renderable":0},{"_id":"source/uploads/avatar.png","path":"uploads/avatar.png","modified":0,"renderable":0},{"_id":"source/images/pomodoro_technique.png","path":"images/pomodoro_technique.png","modified":0,"renderable":0},{"_id":"source/images/pomodoro_data.png","path":"images/pomodoro_data.png","modified":0,"renderable":0},{"_id":"themes/next/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"source/images/design_2_observer.png","path":"images/design_2_observer.png","modified":0,"renderable":0},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"36343e82a8946913addce36ad42e42685039309d","modified":1479882402993},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1479882403017},{"_id":"themes/next/.bowerrc","hash":"20038353db532b4c40625419d396da7359f89cbe","modified":1479882403016},{"_id":"themes/next/.gitignore","hash":"63d003fa46cf9665b4dab1786f9dc694812a5a79","modified":1479882403018},{"_id":"themes/next/.javascript_ignore","hash":"beb0b95736650284ceb712a162cc033847a83cd3","modified":1479882403018},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1479882403018},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1479882403018},{"_id":"themes/next/_config.yml","hash":"09bb5fab74261d8e9cc1b0b990e7db4d914ac769","modified":1484824249485},{"_id":"themes/next/gulpfile.coffee","hash":"4e8c1082fa82e383494ff5b5963b7936d9c7bb2e","modified":1479882403020},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1479882403019},{"_id":"themes/next/package.json","hash":"95eaba1607544965e432d56406bae391dd11bcbb","modified":1479882403031},{"_id":"themes/next/README.en.md","hash":"fa31bbc6dd8778b8dee469740c92b3b5b59702af","modified":1479882403018},{"_id":"themes/next/bower.json","hash":"da39b00fcdf2e7a42af412de0a4d3617cc6d7084","modified":1479882403019},{"_id":"source/_posts/PomodoroTechnique.md","hash":"aa727061dc6565f897d568a25d30100c31bbac8a","modified":1484825450564},{"_id":"source/_posts/Grid-1.md","hash":"05d961c91f07ffa1f98645e672bd5716571bdfa1","modified":1484824249475},{"_id":"source/_posts/Grid-2.md","hash":"b16b81fd98e93bbfb5b34a7a620287208793974e","modified":1484824249475},{"_id":"source/_posts/Java多线程实现生产者与消费者.md","hash":"850bc8e9eb8a3caa71a21d0a436fed4094662e36","modified":1484824249476},{"_id":"source/_posts/Tree-2.md","hash":"15e7d0a61ba5771d7d61f176d28fb98f9dccbdcb","modified":1484824249476},{"_id":"source/_posts/Tree-1.md","hash":"d5370a21d4edcdec880e25a1e0541ebe1e0d9fbc","modified":1484824249476},{"_id":"source/_posts/design-commond.md","hash":"2b6f968abb7fa317059bc16a225e277ab93c8290","modified":1484824249477},{"_id":"source/_posts/design-observer.md","hash":"f1e61c3c91ccea32cfa6988fea77b6d059d2add9","modified":1484824249478},{"_id":"source/_posts/js-closure.md","hash":"6accbb6028461f8e412f18fe5ef83a38b30b9954","modified":1486023263205},{"_id":"source/_posts/rich-father.md","hash":"cf755a5f7ad6d88eac8bf49e7e8ad699742b4a96","modified":1486018874698},{"_id":"source/_posts/Tree-3.md","hash":"b2b25feeed2f6473a712a21e2b8dc05be2e23167","modified":1484824249477},{"_id":"source/_posts/第一篇文章.md","hash":"4a5254a61056d9ef7bb429cd94fa90e229bddc5d","modified":1484824249478},{"_id":"source/about/index.md","hash":"d13a2d322eacba0a5ac93844b20db0eb105f2b00","modified":1484824249478},{"_id":"source/_posts/design-single.md","hash":"fd6899132bad6f48957684b704d8e62700a2da85","modified":1484824249478},{"_id":"source/_posts/WebService复杂类型数据传输-dom4j方式.md","hash":"0e879b37994b9cb8644c6c21a721f6d59704db36","modified":1484824249477},{"_id":"source/_posts/cocos2dx-xingneng.md","hash":"885a2cbc487fec426fdb328f001c64179c92e715","modified":1484824249477},{"_id":"source/images/design_1_commond.png","hash":"a94e556b8a58b1f2892a1a39f9a067077275432c","modified":1484824249479},{"_id":"source/categories/index.md","hash":"37aaf872fc902098309c2595a23abbe7236b41b2","modified":1484824249479},{"_id":"source/images/design_3_single.png","hash":"fbffe1afd7c4ff90e14640d3d280b140c1295158","modified":1484824249481},{"_id":"source/images/tree_2_sql.png","hash":"de2b3149af56628db975af173fc3e61b4614b999","modified":1484824249481},{"_id":"source/uploads/wechat-qcode.jpg","hash":"66a67a4919f2732680ea19a0b7bcb63bbe3339f3","modified":1484824249483},{"_id":"source/uploads/wechat_charge.jpg","hash":"64c05bc1bbc5c32f0871748ca9487a4bd87ea3fc","modified":1484824249484},{"_id":"source/tags/index.md","hash":"a017e24dcbf33475dd1c8b5ad4270a79fc707530","modified":1484824249482},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"4312fb37fa2b8663006be3c4fe01125ec01171c1","modified":1479882403017},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"2692e36cc35b1594530981e7727771f601720a43","modified":1479882403017},{"_id":"source/uploads/alipay_charge.jpg","hash":"bf0a359dd5714466cfdfb89ebacb1b83e856cfbc","modified":1484824249483},{"_id":"source/uploads/avatar.png","hash":"a23a4803d776c7e4e73e31614fe22168d1e64186","modified":1484824249483},{"_id":"source/images/pomodoro_technique.png","hash":"ce224fb6395b0364d89e804a52e21bfa075cc92a","modified":1484820688126},{"_id":"source/images/pomodoro_data.png","hash":"e5d10d0dac270ad0e11143b422444c6f7a6a38d3","modified":1484824905525},{"_id":"themes/next/layout/index.swig","hash":"e5b52e04296203262a400e8e36ae12426d31fd5b","modified":1479882403030},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1479882403030},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1479882403031},{"_id":"themes/next/layout/page.swig","hash":"a91e3fd7aef26e8a02e339e3372801c517f400cf","modified":1479882403030},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1479882403031},{"_id":"themes/next/layout/_layout.swig","hash":"1138b849e1240249480849cc2b6c6d09b28207a5","modified":1479882403022},{"_id":"themes/next/languages/en.yml","hash":"df81ab6b1cf3c88ed053d3766381cd12eb659fe3","modified":1479882403020},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1479882403030},{"_id":"themes/next/languages/default.yml","hash":"d2f6784b9c6567b64e58736e36025dbf96d863d4","modified":1479882403020},{"_id":"themes/next/languages/ja.yml","hash":"e594aa42a33c489e4a65065659a01bb76c3c0cb5","modified":1479882403021},{"_id":"themes/next/languages/id.yml","hash":"19537c8bae42c4c2e7d06a64537e8dfd503b7e19","modified":1479882403020},{"_id":"themes/next/languages/pt.yml","hash":"4c64594f477905d5d2d9ca2422f03175b7b0c617","modified":1479882403021},{"_id":"themes/next/languages/de.yml","hash":"4c3ffeb0d214c807a226dd98214958cb5483df1c","modified":1479882403020},{"_id":"themes/next/languages/fr-FR.yml","hash":"d8a40fe025fad6f42df0cf16d4be2d513769b062","modified":1479882403020},{"_id":"themes/next/languages/zh-Hans.yml","hash":"23b45e77c1846c9457b98c745a60a9461678c389","modified":1479882403021},{"_id":"themes/next/scripts/merge-configs.js","hash":"f8cde6953939802f92da5b7a2458c6c539e9be69","modified":1479882403031},{"_id":"themes/next/source/404.html","hash":"14d2bba0b5a7bcf1850c9b7300f8d213da6a6ecd","modified":1484824249485},{"_id":"themes/next/test/.jshintrc","hash":"1dae9d1cf7df1ae6d5c5efd6cffb949e9b8dcebb","modified":1479882403073},{"_id":"themes/next/languages/zh-tw.yml","hash":"04479b419c72b71fd34046f3fc33ebda4fe8de84","modified":1479882403022},{"_id":"themes/next/languages/ru.yml","hash":"c3aedb94decf05a301662afc3398ab563dd9995a","modified":1479882403021},{"_id":"source/images/design_2_observer.png","hash":"949aa8bbd7492f0dc8bb9d82aa66653121ba8e88","modified":1484824249480},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479882403050},{"_id":"themes/next/languages/zh-hk.yml","hash":"88e603eb0f3fd25c35bb37bd30372fd77bba7c46","modified":1479882403021},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1479882403074},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"b87a5122dbff1d5fccf8f3d09d1640bd4b01c4a0","modified":1479882403022},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1479882403074},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"d569af20d20a960d534a5b60f90c20fef519d351","modified":1479882403023},{"_id":"themes/next/layout/_partials/comments.swig","hash":"325dd5923d845a539fc0524ca72ce40edd1e516a","modified":1479882403023},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1479882403023},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1479882403023},{"_id":"themes/next/layout/_partials/head.swig","hash":"0065ae49406ade2848b86bd4cd520af9d2148ece","modified":1479882403024},{"_id":"themes/next/layout/_partials/footer.swig","hash":"27669118b957e8a39d843b63dddf561c9d62b336","modified":1479882403024},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1479882403024},{"_id":"themes/next/layout/_partials/search.swig","hash":"95b55fe35f2d2c22f2cc055d4379b5435314c7ec","modified":1479882403025},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c5db707b46eac6a5df1d2a77f8556945a66fd181","modified":1479882403026},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1479882403026},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1479882403026},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"c9d45628330ce8bf5fbe71c9f131c7d75334c1c4","modified":1479882403030},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1479882403031},{"_id":"themes/next/scripts/tags/full-image.js","hash":"86194a05a8c6499de0b2aaa525d6de135778c0ae","modified":1479882403031},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1479882403032},{"_id":"themes/next/layout/_macro/post.swig","hash":"843389ec3cb4c2baa6a6a2bb916f803c89ca723b","modified":1479882403022},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9fc9f89c169439d7584197930359b758eb198a1c","modified":1479882403023},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1479882403050},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1479882403050},{"_id":"themes/next/layout/_partials/header.swig","hash":"46f8bbe51c0334c64c3a237bc0fe8ef73c6e58e1","modified":1479882403024},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1479882403051},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1479882403051},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1479882403051},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1479882403051},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1479882403052},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1479882403052},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1479882403052},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1479882403051},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1479882403053},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1479882403053},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479882403027},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479882403027},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479882403044},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479882403044},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479882403045},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479882403049},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479882403050},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"efa7efcbb575381b508f9aa0e0c53140eef72a7b","modified":1479882403025},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1479882403025},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1479882403025},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"bf8e9223a40748b2e3ef77d753a8e1dbbce8095e","modified":1479882403025},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1479882403024},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"3fdde03f45a80f7a85097a40b40358adde618fc7","modified":1479882403025},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1479882403025},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1479882403026},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1479882403027},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1479882403027},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"91c5353fcb94cc3b3f265b06ad2341734bc4c826","modified":1479882403027},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"8ba01f1ac07fbca62a4b00f5a0a3a506122c1530","modified":1479882403029},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1479882403052},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1479882403052},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1479882403029},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1479882403044},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1479882403044},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"4a5c6df1579a4ca72ed17f7dbd6d16a509aa7dc8","modified":1479882403029},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1479882403049},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"3bb70d8d68142ee27f3cc98c2a4339757e7af3d3","modified":1479882403029},{"_id":"themes/next/source/css/_variables/base.styl","hash":"a7ae72e846393493385275d934eaa78534d9834c","modified":1479882403049},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"5bd98c26cc188a2a30504d1330a0eaae34034db0","modified":1479882403029},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1479882403053},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"b8e3663996b39590509d843f674360872b0242ac","modified":1479882403049},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1479882403054},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1479882403044},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1479882403053},{"_id":"themes/next/source/js/src/post-details.js","hash":"458af3b1bd7783c1950808e66cedfa9fb68bf21f","modified":1479882403054},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1479882403055},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1479882403055},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1479882403059},{"_id":"themes/next/source/js/src/utils.js","hash":"418d09eb4df5dcc5e8d13d7f6245b1888200b51c","modified":1479882403055},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1479882403054},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1479882403059},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1479882403059},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1479882403060},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1479882403061},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1479882403061},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1479882403061},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1479882403068},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"bb093f2ac1f1305069d873a7941324c8e0de3135","modified":1479882403060},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"4a0da1bed19e65bd7db42421b447061bc1618710","modified":1479882403053},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1479882403069},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1479882403069},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1479882403070},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1479882403069},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1479882403070},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1479882403070},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1479882403059},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1479882403071},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1479882403071},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1479882403073},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1479882403073},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"ae5b8597603d4e42ee66ed121544e7b1c644767e","modified":1479882403027},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"096e7a6958b3bcacaa94361266832871ccb989c0","modified":1479882403028},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"61347b9cf5c42a02f28cda4b6d920d6d17099d44","modified":1479882403028},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"1b6af02fd0ba3f729675cd95429a0cea4aebf358","modified":1479882403028},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1479882403028},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1479882403073},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"2338be12ffee58bc08197cb9da8aaf31737aaf5c","modified":1479882403029},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ad69cbf94eedacc27e756cdb9c7073416db697d0","modified":1479882403032},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"24105e62d7f26946907fa14cd02589f899bf8122","modified":1479882403028},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1479882403032},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"b7d5cc29586ac796a50d90974ad99d24a5982137","modified":1479882403033},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1479882403032},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1479882403040},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"c1186e609d4810ebfb3e675e9045b023a557d1db","modified":1479882403029},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1479882403043},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"b6ee5fefa6046086a76ddbcfafc82482816fa3e0","modified":1479882403043},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1479882403036},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1479882403044},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1479882403043},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1479882403045},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1479882403045},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1479882403046},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1479882403044},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1479882403046},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1479882403045},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"124b540f059fd1ed13514362007cfc70355278c6","modified":1479882403047},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1479882403047},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"13af2fb21fabfc4df4b577ce5363e13d03daff71","modified":1479882403047},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1479882403047},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1479882403047},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c9875c010bebd77b4f59d459a10455fceb0a66a1","modified":1479882403048},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"de31e923bf5102498f06b1ae6bdf2ea22409f3e0","modified":1479882403048},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1479882403046},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"2182a6da3434a6fd4d03ab1592c645d3d3c88500","modified":1479882403048},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1479882403048},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"55b44e03054cd20ed8129bf986b15fba5fd85aad","modified":1479882403046},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"88a5e0e95f93e4adb196bff1aac17d6cfb03768a","modified":1479882403049},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"a9d064d600ee35acd66508167e1ac8c6cfdbdcd8","modified":1479882403054},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1479882403055},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5a35aa0381b0e1d465b952a997194441020446ea","modified":1479882403043},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"983c0723e8cfd84b67c2e66da0c26425a8db06e0","modified":1479882403049},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1479882403056},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1479882403056},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"9887bd3894db5394c1e64e800afaae55f47e8dd0","modified":1479882403048},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1479882403056},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1479882403058},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1479882403055},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1479882403058},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1479882403060},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"811432ad1e2d6c1f6da9a63fd919bf2a02b71dd9","modified":1479882403062},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1479882403058},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1479882403062},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1479882403060},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1479882403068},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1479882403070},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"4c2c5f5f6cc86d775a44b944661e038b7be98149","modified":1479882403062},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1479882403069},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1479882403071},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1479882403056},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1479882403064},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1479882403064},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1479882403067},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1479882403033},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1479882403033},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1479882403033},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1479882403034},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"852fd77500bda2c1a6651a14aa48d7d6222adc9d","modified":1479882403033},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1479882403035},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1479882403035},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"b8f9c95702e87fd0b170ab586c82c9718a245f8a","modified":1479882403035},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1479882403036},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1479882403036},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1479882403036},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"12e366f04497e3f44388fd40111a03e02f7c26af","modified":1479882403034},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1479882403037},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"70ec8d38d2b3ee1906793d1dcb68032adfa65f03","modified":1479882403034},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"2bc3e33fdfbcf348c96ca60598f629dcd7ba3617","modified":1479882403037},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"929fac3a505bacbce6ba63009fd15851e2a8669d","modified":1479882403037},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1479882403034},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1479882403038},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"4866fb9453d7d4c83a1c4e55d74e4afed336eb8b","modified":1479882403037},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1479882403038},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ca20affaeaf33c0904cb6356864fc6b78e95f447","modified":1479882403037},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1479882403038},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1479882403038},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"821991c0890966a512b43e8b1cf9537e738a09a0","modified":1479882403039},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1479882403039},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1479882403038},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1479882403039},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"06b9a99d63b4d57fdbf70b88ab7036fbc47e3f52","modified":1479882403039},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1479882403039},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1479882403039},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"681b7c8ce4dc47130a0ca67c1ec62be7c96e4c4f","modified":1479882403038},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"dd941824210733588841897457e0cc9697ca5608","modified":1479882403040},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1479882403040},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"a83f493e494f5c73fab8f6f5b686ef1670490095","modified":1479882403041},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1479882403041},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1479882403040},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1479882403040},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1479882403041},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1479882403042},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"7bd182d918f3117335a5ee87a1b544e6d2b54d7d","modified":1479882403042},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1479882403046},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1479882403046},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1479882403047},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"7f7e9df15148608a9c29326dd880d8e8e8efc0ec","modified":1479882403042},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1479882403042},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"dcb4548d07cbb38b645b1753cf3ee7157e16921a","modified":1479882403042},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1479882403057},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1479882403057},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1479882403057},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1479882403067},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1479882403072},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1479882403058},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1479882403058},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1479882403057},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1479882403066},{"_id":"public/about/index.html","hash":"4e444f7d3e868294d939b946cd859cb340dafdb5","modified":1486022849984},{"_id":"public/categories/index.html","hash":"dcfaa8b08d682a5f04b858137b521c6a30f24d35","modified":1486023012659},{"_id":"public/tags/index.html","hash":"84c06648405c1c18dab79a13b40f148bb119d5fe","modified":1486022849986},{"_id":"public/archives/2016/page/2/index.html","hash":"9e48c705431e06492c0fd08c0c4ad84431e66bd9","modified":1486022849986},{"_id":"public/archives/2016/12/index.html","hash":"6e44e57497a9995d4adb5dceb47ad9ee38aa1e7e","modified":1486022849986},{"_id":"public/archives/2017/01/index.html","hash":"63da325feb1756a3e369edc85a1404dd25363aed","modified":1486022849986},{"_id":"public/categories/经验总结/index.html","hash":"74b9b3c246c743a63223bb40c703760ff45c6363","modified":1486022849986},{"_id":"public/categories/java/index.html","hash":"a34e37a4259055fc55d0791f058706c66c6220d8","modified":1486022849986},{"_id":"public/categories/设计模式/index.html","hash":"74f517843828b1edca436d00e54c12e9651cb56e","modified":1486022849986},{"_id":"public/categories/读书笔记/index.html","hash":"0c01cc9fb45f393509cb4cc963d1f1bea1b30840","modified":1486022849986},{"_id":"public/categories/cocos2d-x/index.html","hash":"decd7786da19434f9160e1aeaeb5a18145253f4d","modified":1486022849986},{"_id":"public/tags/番茄工作法/index.html","hash":"01f73d328b216862d1c6420169a735ef06a51726","modified":1486022849986},{"_id":"public/tags/多线程/index.html","hash":"83b4608e67d4f6bf7100f61ad35d8d9eb72e68bf","modified":1486022849986},{"_id":"public/tags/命令模式/index.html","hash":"d5bbf3bac2bb4ba0ccee5077d81069f530048479","modified":1486022849986},{"_id":"public/tags/观察者模式/index.html","hash":"6a534d5e1764049f3a4e8219a740810ba615682c","modified":1486022849986},{"_id":"public/tags/理财/index.html","hash":"09cad1869411421dbdcc5f248117a0ba0a7d3b7c","modified":1486022849986},{"_id":"public/tags/单例模式/index.html","hash":"d2154459f06f03cd3c379f37d43e526d708eaf6e","modified":1486022849987},{"_id":"public/tags/cocos2d-x-性能优化/index.html","hash":"2deeef73b4add783edd30b6717af4dcac2f241b3","modified":1486022849987},{"_id":"public/tags/［WebService-java］/index.html","hash":"0d42c02454561d4f3ecf1dce7755bf85627f060f","modified":1486022849987},{"_id":"public/2017/01/19/PomodoroTechnique/index.html","hash":"c8e39452a5579aefe88d720be5685dca5e2ef35c","modified":1486023012660},{"_id":"public/2017/01/10/rich-father/index.html","hash":"1273e6de282a0191d599deaf5c386ac8d76b5d87","modified":1486022849987},{"_id":"public/2017/01/06/cocos2dx-xingneng/index.html","hash":"ed8b79b9ac4913acf8bbe2735d1e5a3351b58d3d","modified":1486022849987},{"_id":"public/2016/12/01/design-single/index.html","hash":"fb3a0832452a1bc02c3e8f2b3f1f5f5db3df67d3","modified":1486022849987},{"_id":"public/2016/12/01/design-observer/index.html","hash":"12a2cea331900072e614782c69adaa9e10e8ab3a","modified":1486022849987},{"_id":"public/2016/11/29/design-commond/index.html","hash":"7edbca326fb99e3fee983e7881dab9a940e55422","modified":1486022849987},{"_id":"public/2016/11/27/Grid-2/index.html","hash":"bf1e06c06eeebcb3c3e1d490dee6574d46552aa4","modified":1486022849994},{"_id":"public/2016/11/27/Grid-1/index.html","hash":"290962315b396ab3077dc6b8f22f64614d408e38","modified":1486022849995},{"_id":"public/2016/11/27/Tree-3/index.html","hash":"e10c6c5ac680e9bae76625a141f780448f48e87c","modified":1486022849995},{"_id":"public/2016/11/27/Tree-2/index.html","hash":"a5f2059d131022cdaf2defb46ffd2b025efe459d","modified":1486022849995},{"_id":"public/2016/11/27/Tree-1/index.html","hash":"095e73a1bee8c45fdccf558d51c5da2826c8456b","modified":1486022849995},{"_id":"public/2016/11/27/Java多线程实现生产者与消费者/index.html","hash":"6bd3cedcfcbb46df9c70a4598f8d97b54e0a49e2","modified":1486022849995},{"_id":"public/2016/11/27/WebService复杂类型数据传输-dom4j方式/index.html","hash":"bc472158db51a4ba6e217845d17a7210f99845aa","modified":1486022849995},{"_id":"public/2016/11/27/第一篇文章/index.html","hash":"82a650a2922c743c8c8496ddfe265a972993b1c0","modified":1486022849995},{"_id":"public/archives/index.html","hash":"f941b203b76c6a43534ac16372be13a591a231c8","modified":1486023012660},{"_id":"public/archives/page/2/index.html","hash":"471d80750bf34504ee4da6c220183fe8ebd850df","modified":1486022849995},{"_id":"public/archives/2016/index.html","hash":"73326668e16b4dddad9a8c12d8f5888aa1edcb85","modified":1486022849995},{"_id":"public/archives/2016/11/index.html","hash":"d1407c7101ba5c81ab74144f80edfa1fabfe1a87","modified":1486022849995},{"_id":"public/archives/2017/index.html","hash":"47d422e5185bff003f727682601965a9763d8eda","modified":1486023012660},{"_id":"public/index.html","hash":"0b1f72a92f9a80c41f422372a1360b80c22716a1","modified":1486023012660},{"_id":"public/page/2/index.html","hash":"e6f7bbc16d34c1311b7c24c19fc7d0927009d599","modified":1486022849996},{"_id":"public/categories/javascript/index.html","hash":"30225e451ba42138d47b73479a71adff5ec57583","modified":1486023012660},{"_id":"public/tags/ExtJS/index.html","hash":"1acf2a28cee2881bce5508368b5e705d65bf7c97","modified":1486022849996},{"_id":"public/archives/2017/02/index.html","hash":"ee05d080761ca3777fd4c62881095e15899e2084","modified":1486023012659},{"_id":"public/categories/JS闭包总结/index.html","hash":"fd9426ae2cfd8b802e931bc9d160098f38215b49","modified":1486022850009},{"_id":"public/tags/闭包/index.html","hash":"eff6502108be049bcc001b398bd99a834646fcbc","modified":1486023012660},{"_id":"public/2017/02/02/js-closure/index.html","hash":"6cb246814fb247a91ecbe1c3461320b3c80d59be","modified":1486023012660},{"_id":"public/CNAME","hash":"36343e82a8946913addce36ad42e42685039309d","modified":1486022850015},{"_id":"public/images/design_1_commond.png","hash":"a94e556b8a58b1f2892a1a39f9a067077275432c","modified":1486022850015},{"_id":"public/images/design_3_single.png","hash":"fbffe1afd7c4ff90e14640d3d280b140c1295158","modified":1486022850015},{"_id":"public/images/tree_2_sql.png","hash":"de2b3149af56628db975af173fc3e61b4614b999","modified":1486022850015},{"_id":"public/uploads/wechat-qcode.jpg","hash":"66a67a4919f2732680ea19a0b7bcb63bbe3339f3","modified":1486022850015},{"_id":"public/uploads/wechat_charge.jpg","hash":"64c05bc1bbc5c32f0871748ca9487a4bd87ea3fc","modified":1486022850015},{"_id":"public/uploads/alipay_charge.jpg","hash":"bf0a359dd5714466cfdfb89ebacb1b83e856cfbc","modified":1486022850015},{"_id":"public/uploads/avatar.png","hash":"a23a4803d776c7e4e73e31614fe22168d1e64186","modified":1486022850015},{"_id":"public/images/pomodoro_technique.png","hash":"ce224fb6395b0364d89e804a52e21bfa075cc92a","modified":1486022850015},{"_id":"public/images/pomodoro_data.png","hash":"e5d10d0dac270ad0e11143b422444c6f7a6a38d3","modified":1486022850015},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1486022850015},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1486022850015},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1486022850015},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1486022850015},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1486022850016},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1486022850016},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1486022850016},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1486022850016},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1486022850016},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1486022850016},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1486022850016},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1486022850016},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1486022850016},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1486022850016},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1486022850016},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1486022850016},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1486022850016},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1486022850016},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1486022850016},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1486022850016},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1486022850016},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1486022850016},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1486022850016},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1486022850016},{"_id":"public/images/design_2_observer.png","hash":"949aa8bbd7492f0dc8bb9d82aa66653121ba8e88","modified":1486022851488},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1486022851489},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1486022851494},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1486022851494},{"_id":"public/404.html","hash":"e71593534c6b530fd2df06be07c8d940b985529c","modified":1486022851499},{"_id":"public/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1486022851500},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1486022851500},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1486022851500},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1486022851500},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1486022851500},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1486022851500},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1486022851500},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1486022851500},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1486022851500},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1486022851500},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1486022851500},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1486022851500},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1486022851500},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1486022851500},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1486022851500},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1486022851501},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1486022851501},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1486022851501},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1486022851501},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1486022851501},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1486022851501},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1486022851501},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1486022851501},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1486022851501},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1486022851502},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1486022851502},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1486022851502},{"_id":"public/css/main.css","hash":"45c6f5dae012e369968f8772da2409f2f5a6fbc4","modified":1486022851502},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1486022851503},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1486022851503},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1486022851503},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1486022851503},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1486022851504},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1486022851504},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1486022851504},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1486022851504},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1486022851504},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1486022851504},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1486022851508}],"Category":[{"name":"经验总结","_id":"ciyo3mviz0001tsr8co0mrl0f"},{"name":"javascript","_id":"ciyo3mvjp0007tsr8uavs6z29"},{"name":"java","_id":"ciyo3mvjy000itsr8b8tgg9d5"},{"name":"设计模式","_id":"ciyo3mvjz000otsr8dzyktuys"},{"name":"读书笔记","_id":"ciyo3mvpb0012tsr85bdyhck3"},{"name":"JS闭包总结","_id":"ciyo3mvpf001dtsr84w4kpekc"},{"name":"cocos2d-x","_id":"ciyo3mvpi001ktsr8hxyzzww9"}],"Data":[],"Page":[{"title":"about","date":"2016-11-27T07:14:08.000Z","_content":"## 关于我\n\n我是一枚程序员，在游戏开发里深耕。我生活在魔性的帝都，家里有三只猫，它们分别叫kitty、Damon和崽子。最近在开发H5游戏，有志同道合的朋友可以给我留言。\n\nEmail: yue19870813@163.com\n\n还可以关注我的公众号:\n![wechat](/uploads/wechat-qcode.jpg)\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-11-27 15:14:08\n---\n## 关于我\n\n我是一枚程序员，在游戏开发里深耕。我生活在魔性的帝都，家里有三只猫，它们分别叫kitty、Damon和崽子。最近在开发H5游戏，有志同道合的朋友可以给我留言。\n\nEmail: yue19870813@163.com\n\n还可以关注我的公众号:\n![wechat](/uploads/wechat-qcode.jpg)\n","updated":"2017-01-19T11:10:49.478Z","path":"about/index.html","comments":1,"layout":"page","_id":"ciyo3mvp6000wtsr8303378tw","content":"<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><p>我是一枚程序员，在游戏开发里深耕。我生活在魔性的帝都，家里有三只猫，它们分别叫kitty、Damon和崽子。最近在开发H5游戏，有志同道合的朋友可以给我留言。</p>\n<p>Email: yue19870813@163.com</p>\n<p>还可以关注我的公众号:<br><img src=\"/uploads/wechat-qcode.jpg\" alt=\"wechat\"></p>\n","excerpt":"","more":"<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><p>我是一枚程序员，在游戏开发里深耕。我生活在魔性的帝都，家里有三只猫，它们分别叫kitty、Damon和崽子。最近在开发H5游戏，有志同道合的朋友可以给我留言。</p>\n<p>Email: yue19870813@163.com</p>\n<p>还可以关注我的公众号:<br><img src=\"/uploads/wechat-qcode.jpg\" alt=\"wechat\"></p>\n"},{"title":"categories","date":"2016-11-27T07:27:52.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-11-27 15:27:52\ntype: \"categories\"\n---\n","updated":"2017-01-19T11:10:49.479Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ciyo3mvp7000ytsr8g7c9myih","content":"","excerpt":"","more":""},{"title":"tags","date":"2016-11-27T07:30:03.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-11-27 15:30:03\ntype: \"tags\"\n---\n","updated":"2017-01-19T11:10:49.482Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ciyo3mvpa0011tsr8jx0w3lmp","content":"","excerpt":"","more":""}],"Post":[{"title":"番茄工作法体验总结(The Pomodoro Technique)","date":"2017-01-19T11:14:28.000Z","_content":"番茄工作法是由弗朗西斯科·西里洛于1992年创立的一种相对于GTD更微观的时间管理方法。使用番茄工作法，选择一个待完成的任务，将番茄时间设为25分钟，专注工作，中途不允许做任何与该任务无关的事，直到番茄时钟响起，每个番茄钟之间可以短暂休息两分钟，三到四个番茄钟后可以休息的时间长些。<!--more-->  \n半年前就接触了番茄工作法，并读了**《番茄工作法图解》**这本薄薄的并且都是插图的书，但是并没有重视这种工作方法，最近工作时感觉效率并不是很高，偶然间又看到了有人提起番茄工作法，于是开始了体验之旅。写这篇文章之前，刚刚完整的体验了一周，先展示一下一周的数据：  \n![pomodoro](/images/pomodoro_technique.png)\n我这里并没有完全按照番茄工作法的工作方式进行使用，而是加了一些变通，比如关于打断的判断，独自一人工作时，打断很容易判定，只要是打断了正在做的工作，那么这个番茄钟内就会记录一个打断。但是在一个**多人沟通合作**的工作环境中，不被打断是不可能的，那么我对打断的定义就是，被与工作无关的事情打断时才算是有效的打断，比如有同事找你闲聊、口渴去打水、被网络或者通讯软件吸引走神等。在一个番茄钟内我不会去看任何QQ、微信或者邮件等消息，**避免自己的思路被打断**，尤其是编程这项工作，打断后需要很高的成本再回到主线程。其实也不用怕错过什么重要的消息，在上面的那些通讯工具中发的消息，肯定不会查这25分钟，如果真的有紧急情况发生，对方肯定会打电话或者直接过来进行沟通。最后对打断数据进行分析可以看到自己集中注意力的自控能力。   \n对我一周的数据进行分析后如下:  \n![pomodoro](/images/pomodoro_data.png)\n通过计算，得出个人的工作效率：**上午 > 下午 > 晚上**   \n### 根据我的工作性质及数据结论我做出了调整。\n将大的功能模块开发安排到上午进行，然后下午进行小的功能修改及与其他人员进行工作内容沟通和讨论，最后晚一些去修改bug及一些琐碎的小事。同时工作内容的重要程度也是按照**上午 > 下午 > 晚上**这个级别进行排序。\n\n使用番茄工作法后，发现自己的注意力及工作效率不断的再提高，后续会继续使用这种工作方式来提高自己的工作效率。  \n不仅是工作，包括学习也可以采用番茄工作法，比如读书或者写博客等，番茄工作法可以有效的锻炼个人控制注意力的能力，来提高工作或学习的效率。","source":"_posts/PomodoroTechnique.md","raw":"---\ntitle: 番茄工作法体验总结(The Pomodoro Technique)\ndate: 2017-01-19 19:14:28\ntags: 番茄工作法\ncategories: 经验总结\n---\n番茄工作法是由弗朗西斯科·西里洛于1992年创立的一种相对于GTD更微观的时间管理方法。使用番茄工作法，选择一个待完成的任务，将番茄时间设为25分钟，专注工作，中途不允许做任何与该任务无关的事，直到番茄时钟响起，每个番茄钟之间可以短暂休息两分钟，三到四个番茄钟后可以休息的时间长些。<!--more-->  \n半年前就接触了番茄工作法，并读了**《番茄工作法图解》**这本薄薄的并且都是插图的书，但是并没有重视这种工作方法，最近工作时感觉效率并不是很高，偶然间又看到了有人提起番茄工作法，于是开始了体验之旅。写这篇文章之前，刚刚完整的体验了一周，先展示一下一周的数据：  \n![pomodoro](/images/pomodoro_technique.png)\n我这里并没有完全按照番茄工作法的工作方式进行使用，而是加了一些变通，比如关于打断的判断，独自一人工作时，打断很容易判定，只要是打断了正在做的工作，那么这个番茄钟内就会记录一个打断。但是在一个**多人沟通合作**的工作环境中，不被打断是不可能的，那么我对打断的定义就是，被与工作无关的事情打断时才算是有效的打断，比如有同事找你闲聊、口渴去打水、被网络或者通讯软件吸引走神等。在一个番茄钟内我不会去看任何QQ、微信或者邮件等消息，**避免自己的思路被打断**，尤其是编程这项工作，打断后需要很高的成本再回到主线程。其实也不用怕错过什么重要的消息，在上面的那些通讯工具中发的消息，肯定不会查这25分钟，如果真的有紧急情况发生，对方肯定会打电话或者直接过来进行沟通。最后对打断数据进行分析可以看到自己集中注意力的自控能力。   \n对我一周的数据进行分析后如下:  \n![pomodoro](/images/pomodoro_data.png)\n通过计算，得出个人的工作效率：**上午 > 下午 > 晚上**   \n### 根据我的工作性质及数据结论我做出了调整。\n将大的功能模块开发安排到上午进行，然后下午进行小的功能修改及与其他人员进行工作内容沟通和讨论，最后晚一些去修改bug及一些琐碎的小事。同时工作内容的重要程度也是按照**上午 > 下午 > 晚上**这个级别进行排序。\n\n使用番茄工作法后，发现自己的注意力及工作效率不断的再提高，后续会继续使用这种工作方式来提高自己的工作效率。  \n不仅是工作，包括学习也可以采用番茄工作法，比如读书或者写博客等，番茄工作法可以有效的锻炼个人控制注意力的能力，来提高工作或学习的效率。","slug":"PomodoroTechnique","published":1,"updated":"2017-01-19T11:30:50.564Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyo3mvif0000tsr84cj88r9p","content":"<p>番茄工作法是由弗朗西斯科·西里洛于1992年创立的一种相对于GTD更微观的时间管理方法。使用番茄工作法，选择一个待完成的任务，将番茄时间设为25分钟，专注工作，中途不允许做任何与该任务无关的事，直到番茄时钟响起，每个番茄钟之间可以短暂休息两分钟，三到四个番茄钟后可以休息的时间长些。<a id=\"more\"></a><br>半年前就接触了番茄工作法，并读了<strong>《番茄工作法图解》</strong>这本薄薄的并且都是插图的书，但是并没有重视这种工作方法，最近工作时感觉效率并不是很高，偶然间又看到了有人提起番茄工作法，于是开始了体验之旅。写这篇文章之前，刚刚完整的体验了一周，先展示一下一周的数据：<br><img src=\"/images/pomodoro_technique.png\" alt=\"pomodoro\"><br>我这里并没有完全按照番茄工作法的工作方式进行使用，而是加了一些变通，比如关于打断的判断，独自一人工作时，打断很容易判定，只要是打断了正在做的工作，那么这个番茄钟内就会记录一个打断。但是在一个<strong>多人沟通合作</strong>的工作环境中，不被打断是不可能的，那么我对打断的定义就是，被与工作无关的事情打断时才算是有效的打断，比如有同事找你闲聊、口渴去打水、被网络或者通讯软件吸引走神等。在一个番茄钟内我不会去看任何QQ、微信或者邮件等消息，<strong>避免自己的思路被打断</strong>，尤其是编程这项工作，打断后需要很高的成本再回到主线程。其实也不用怕错过什么重要的消息，在上面的那些通讯工具中发的消息，肯定不会查这25分钟，如果真的有紧急情况发生，对方肯定会打电话或者直接过来进行沟通。最后对打断数据进行分析可以看到自己集中注意力的自控能力。<br>对我一周的数据进行分析后如下:<br><img src=\"/images/pomodoro_data.png\" alt=\"pomodoro\"><br>通过计算，得出个人的工作效率：<strong>上午 &gt; 下午 &gt; 晚上</strong>   </p>\n<h3 id=\"根据我的工作性质及数据结论我做出了调整。\"><a href=\"#根据我的工作性质及数据结论我做出了调整。\" class=\"headerlink\" title=\"根据我的工作性质及数据结论我做出了调整。\"></a>根据我的工作性质及数据结论我做出了调整。</h3><p>将大的功能模块开发安排到上午进行，然后下午进行小的功能修改及与其他人员进行工作内容沟通和讨论，最后晚一些去修改bug及一些琐碎的小事。同时工作内容的重要程度也是按照<strong>上午 &gt; 下午 &gt; 晚上</strong>这个级别进行排序。</p>\n<p>使用番茄工作法后，发现自己的注意力及工作效率不断的再提高，后续会继续使用这种工作方式来提高自己的工作效率。<br>不仅是工作，包括学习也可以采用番茄工作法，比如读书或者写博客等，番茄工作法可以有效的锻炼个人控制注意力的能力，来提高工作或学习的效率。</p>\n","excerpt":"<p>番茄工作法是由弗朗西斯科·西里洛于1992年创立的一种相对于GTD更微观的时间管理方法。使用番茄工作法，选择一个待完成的任务，将番茄时间设为25分钟，专注工作，中途不允许做任何与该任务无关的事，直到番茄时钟响起，每个番茄钟之间可以短暂休息两分钟，三到四个番茄钟后可以休息的时间长些。","more":"<br>半年前就接触了番茄工作法，并读了<strong>《番茄工作法图解》</strong>这本薄薄的并且都是插图的书，但是并没有重视这种工作方法，最近工作时感觉效率并不是很高，偶然间又看到了有人提起番茄工作法，于是开始了体验之旅。写这篇文章之前，刚刚完整的体验了一周，先展示一下一周的数据：<br><img src=\"/images/pomodoro_technique.png\" alt=\"pomodoro\"><br>我这里并没有完全按照番茄工作法的工作方式进行使用，而是加了一些变通，比如关于打断的判断，独自一人工作时，打断很容易判定，只要是打断了正在做的工作，那么这个番茄钟内就会记录一个打断。但是在一个<strong>多人沟通合作</strong>的工作环境中，不被打断是不可能的，那么我对打断的定义就是，被与工作无关的事情打断时才算是有效的打断，比如有同事找你闲聊、口渴去打水、被网络或者通讯软件吸引走神等。在一个番茄钟内我不会去看任何QQ、微信或者邮件等消息，<strong>避免自己的思路被打断</strong>，尤其是编程这项工作，打断后需要很高的成本再回到主线程。其实也不用怕错过什么重要的消息，在上面的那些通讯工具中发的消息，肯定不会查这25分钟，如果真的有紧急情况发生，对方肯定会打电话或者直接过来进行沟通。最后对打断数据进行分析可以看到自己集中注意力的自控能力。<br>对我一周的数据进行分析后如下:<br><img src=\"/images/pomodoro_data.png\" alt=\"pomodoro\"><br>通过计算，得出个人的工作效率：<strong>上午 &gt; 下午 &gt; 晚上</strong>   </p>\n<h3 id=\"根据我的工作性质及数据结论我做出了调整。\"><a href=\"#根据我的工作性质及数据结论我做出了调整。\" class=\"headerlink\" title=\"根据我的工作性质及数据结论我做出了调整。\"></a>根据我的工作性质及数据结论我做出了调整。</h3><p>将大的功能模块开发安排到上午进行，然后下午进行小的功能修改及与其他人员进行工作内容沟通和讨论，最后晚一些去修改bug及一些琐碎的小事。同时工作内容的重要程度也是按照<strong>上午 &gt; 下午 &gt; 晚上</strong>这个级别进行排序。</p>\n<p>使用番茄工作法后，发现自己的注意力及工作效率不断的再提高，后续会继续使用这种工作方式来提高自己的工作效率。<br>不仅是工作，包括学习也可以采用番茄工作法，比如读书或者写博客等，番茄工作法可以有效的锻炼个人控制注意力的能力，来提高工作或学习的效率。</p>"},{"title":"ExtJS初级教程之ExtJS Grid(一)","date":"2016-11-27T14:45:35.000Z","_content":"我们在很多网站都能看到表格的影子，而ExtJS Grid在页面表现上又非常强大，下面我们就创建我们的第一个表格。<!--more-->\n在ExtJS中我们是通过Ext.grid.ColumnModel这个类来描述列属性的。下面我们建立一个ColumnModel对象。\n``` javascript\nvar cm = new Ext.grid.ColumnModel([  \n {header:'产品编号',dataIndex:'product_id'},  \n {header:'产品名称',dataIndex:'product_name'},  \n {header:'产品价格',dataIndex:'product_price'}  \n]);\n```\n接下来我们定义表格中要显示的数据。\n``` javascript\nvar data = [  \n    ['01','电脑','4800'],  \n    ['02','手机','2100'],  \n    ['03','相机','1800'],  \n    ['04','衣服','220']  \n];  \n```\n数据中的列是和定义表格列属性时是相对应的。下面我们要创建一个Store对象来讲data装载到stroe对象中。\n``` javascript\nvar store = new Ext.data.Store({  \n proxy:new Ext.data.MemoryProxy(data),  \n reader:new Ext.data.ArrayReader({},[  \n       {name:'product_id'},  \n       {name:'product_name'},  \n       {name:'product_price'}  \n ])  \n});  \n```\nproxy属性是一个代理类对象，该对象可以封装一个静态数组。ArrayReader对象可以将数组解析，但是要使用mapping属性来进行映射。\n``` javascript\nvar store = new Ext.data.Store({  \n proxy:new Ext.data.MemoryProxy(data),  \n reader:new Ext.data.ArrayReader({},[  \n       {name:'product_id',mapping:0},  \n       {name:'product_name',mapping:1},  \n       {name:'product_price',mapping:2}  \n ])  \n});  \nstore.load();  \n```\n接着就是创建一个GridPanel对象来装置表格并显示在页面上。\n``` javascript\nvar gridPanel = new Ext.grid.GridPanel( {  \n autoHeigth : false,  \n renderTo : 'grid',  \n store : store,  \n cm : cm  \n});  \n```\n这样，我们第一个静态表格就完成了。下面是完整的代码：\n``` javascript\n\nExt.onReady(function() {  \n var cm = new Ext.grid.ColumnModel( [ {  \n  header : 'id',  \n  dataIndex : 'product_id'  \n }, {  \n  header : 'name',  \n  dataIndex : 'product_name'  \n }, {  \n  header : 'price',  \n  dataIndex : 'product_price'  \n } ]);  \n var data = [ [ '01', 'computer', '4800' ], [ '02', 'phone', '2100' ],  \n   [ '03', 'ffff', '1800' ], [ '04', 'closes', '220' ] ];  \n var store = new Ext.data.Store( {  \n  proxy : new Ext.data.MemoryProxy(data),  \n  reader : new Ext.data.ArrayReader( {}, [ {  \n   name : 'product_id',  \n   mapping : 0  \n  }, {  \n   name : 'product_name',  \n   mapping : 1  \n  }, {  \n   name : 'product_price',  \n   mapping : 2  \n  } ])  \n });  \n store.load();  \n var gridPanel = new Ext.grid.GridPanel( {  \n  autoHeigth : false,  \n  renderTo : 'grid',  \n  store : store,  \n  cm : cm  \n });  \n});  \n```\n通过这个简单的代码例子我们也大概了解了创建一个Grid的基本流程了，下面我们简单介绍一下Grid的一些其他的简单属性。\n\n阻止移动列和改变列的宽度：\n``` javascript\nvar gridPanel = new Ext.grid.GridPanel( {         \n    autoHeigth : true,    \n    renderTo : 'grid',    \n    enableColumnMove:false,   \n    enableColumnResize:false,     \n    store : store,    \n    cm : cm   \n}); \n```\n代码中enableColumnMove:false设置的是阻止列的移动，enableColumnResize:false设置的是让列的宽度禁止改变。\n\n按列排序：\n``` javascript\nvar cm = new Ext.grid.ColumnModel( [ {                \n        header : 'id',        \n        dataIndex : 'product_id'          \n    }, {              \n        header : 'name',          \n        dataIndex : 'product_name',       \n        sortable:true         \n    }, {              \n        header : 'price',         \n        dataIndex : 'product_price'       \n    } ]); \n```\n在该列设置sortable：true之后，该列就拥有了排序的功能。\n\n有很多时候我们需要在表格的每列前加一个复选框，用来标记选中的，进行操作，下面我们就加入复选框试试。首先，我们要创建复选框对象，这时我们要用到Ext.grid.CheckboxSelectionModel这个类。\n``` javascript\nvar sm = new Ext.grid.CheckboxSelectionModel();           \nvar cm = new Ext.grid.ColumnModel( [              \n              \n   {              \n    header : 'id',        \n    dataIndex : 'product_id',         \n    sortable:true         \n}, {              \n    header : 'name',          \n    dataIndex : 'product_name',       \n    sortable:true  \n}, {      \n    header : 'price',  \n    dataIndex : 'product_price',  \n    sortable:true  \n} ]);  \n```\n创建完复选框对象后，我们还要将这个复选框对象添加到ColumnModel对象中去。接着还要将复选框对象添加到Panel上:\n``` javascript\nvar gridPanel = new Ext.grid.GridPanel( {     \n    autoHeigth : true,  \n    renderTo : 'grid',  \n    enableColumnMove:false,  \n    enableColumnResize:false,  \n    store : store,  \n    cm : cm,  \n    sm:sm  \n});  \n```\n下面我们做一个非常频繁用到的功能：将复选框选中的行删除。首先要在页面添加一个删除按钮。\n``` html\n<input type = \"button\" value = \"删除选中行\" onclick = \"deleteCheckbox()\" style = \"margin-top:20px\"/>  \n```\n这个JavaScript函数就是页面按钮要调用的函数：\n``` javascript\nfunction deleteCheckbox(){                \n     //从后往前扫描             \n     for(var i = store.getCount();i>=0;i--){           \n        if(mm.isSelected(i)){         \n                //删除当前行  \n                store.removeAt(i);  \n            }  \n     }        \n     //重新加载表数据        \n     gridPanel.reconfigure(store,cm);         \n  }; \n```\n这样一个主要功能都健全的Grid就完成了，今天我就写这些，下次我将继续ExtJS Grid的分页和编辑表格的研究。","source":"_posts/Grid-1.md","raw":"---\ntitle: ExtJS初级教程之ExtJS Grid(一)\ndate: 2016-11-27 22:45:35\ntags: ExtJS\ncategories: javascript\n---\n我们在很多网站都能看到表格的影子，而ExtJS Grid在页面表现上又非常强大，下面我们就创建我们的第一个表格。<!--more-->\n在ExtJS中我们是通过Ext.grid.ColumnModel这个类来描述列属性的。下面我们建立一个ColumnModel对象。\n``` javascript\nvar cm = new Ext.grid.ColumnModel([  \n {header:'产品编号',dataIndex:'product_id'},  \n {header:'产品名称',dataIndex:'product_name'},  \n {header:'产品价格',dataIndex:'product_price'}  \n]);\n```\n接下来我们定义表格中要显示的数据。\n``` javascript\nvar data = [  \n    ['01','电脑','4800'],  \n    ['02','手机','2100'],  \n    ['03','相机','1800'],  \n    ['04','衣服','220']  \n];  \n```\n数据中的列是和定义表格列属性时是相对应的。下面我们要创建一个Store对象来讲data装载到stroe对象中。\n``` javascript\nvar store = new Ext.data.Store({  \n proxy:new Ext.data.MemoryProxy(data),  \n reader:new Ext.data.ArrayReader({},[  \n       {name:'product_id'},  \n       {name:'product_name'},  \n       {name:'product_price'}  \n ])  \n});  \n```\nproxy属性是一个代理类对象，该对象可以封装一个静态数组。ArrayReader对象可以将数组解析，但是要使用mapping属性来进行映射。\n``` javascript\nvar store = new Ext.data.Store({  \n proxy:new Ext.data.MemoryProxy(data),  \n reader:new Ext.data.ArrayReader({},[  \n       {name:'product_id',mapping:0},  \n       {name:'product_name',mapping:1},  \n       {name:'product_price',mapping:2}  \n ])  \n});  \nstore.load();  \n```\n接着就是创建一个GridPanel对象来装置表格并显示在页面上。\n``` javascript\nvar gridPanel = new Ext.grid.GridPanel( {  \n autoHeigth : false,  \n renderTo : 'grid',  \n store : store,  \n cm : cm  \n});  \n```\n这样，我们第一个静态表格就完成了。下面是完整的代码：\n``` javascript\n\nExt.onReady(function() {  \n var cm = new Ext.grid.ColumnModel( [ {  \n  header : 'id',  \n  dataIndex : 'product_id'  \n }, {  \n  header : 'name',  \n  dataIndex : 'product_name'  \n }, {  \n  header : 'price',  \n  dataIndex : 'product_price'  \n } ]);  \n var data = [ [ '01', 'computer', '4800' ], [ '02', 'phone', '2100' ],  \n   [ '03', 'ffff', '1800' ], [ '04', 'closes', '220' ] ];  \n var store = new Ext.data.Store( {  \n  proxy : new Ext.data.MemoryProxy(data),  \n  reader : new Ext.data.ArrayReader( {}, [ {  \n   name : 'product_id',  \n   mapping : 0  \n  }, {  \n   name : 'product_name',  \n   mapping : 1  \n  }, {  \n   name : 'product_price',  \n   mapping : 2  \n  } ])  \n });  \n store.load();  \n var gridPanel = new Ext.grid.GridPanel( {  \n  autoHeigth : false,  \n  renderTo : 'grid',  \n  store : store,  \n  cm : cm  \n });  \n});  \n```\n通过这个简单的代码例子我们也大概了解了创建一个Grid的基本流程了，下面我们简单介绍一下Grid的一些其他的简单属性。\n\n阻止移动列和改变列的宽度：\n``` javascript\nvar gridPanel = new Ext.grid.GridPanel( {         \n    autoHeigth : true,    \n    renderTo : 'grid',    \n    enableColumnMove:false,   \n    enableColumnResize:false,     \n    store : store,    \n    cm : cm   \n}); \n```\n代码中enableColumnMove:false设置的是阻止列的移动，enableColumnResize:false设置的是让列的宽度禁止改变。\n\n按列排序：\n``` javascript\nvar cm = new Ext.grid.ColumnModel( [ {                \n        header : 'id',        \n        dataIndex : 'product_id'          \n    }, {              \n        header : 'name',          \n        dataIndex : 'product_name',       \n        sortable:true         \n    }, {              \n        header : 'price',         \n        dataIndex : 'product_price'       \n    } ]); \n```\n在该列设置sortable：true之后，该列就拥有了排序的功能。\n\n有很多时候我们需要在表格的每列前加一个复选框，用来标记选中的，进行操作，下面我们就加入复选框试试。首先，我们要创建复选框对象，这时我们要用到Ext.grid.CheckboxSelectionModel这个类。\n``` javascript\nvar sm = new Ext.grid.CheckboxSelectionModel();           \nvar cm = new Ext.grid.ColumnModel( [              \n              \n   {              \n    header : 'id',        \n    dataIndex : 'product_id',         \n    sortable:true         \n}, {              \n    header : 'name',          \n    dataIndex : 'product_name',       \n    sortable:true  \n}, {      \n    header : 'price',  \n    dataIndex : 'product_price',  \n    sortable:true  \n} ]);  \n```\n创建完复选框对象后，我们还要将这个复选框对象添加到ColumnModel对象中去。接着还要将复选框对象添加到Panel上:\n``` javascript\nvar gridPanel = new Ext.grid.GridPanel( {     \n    autoHeigth : true,  \n    renderTo : 'grid',  \n    enableColumnMove:false,  \n    enableColumnResize:false,  \n    store : store,  \n    cm : cm,  \n    sm:sm  \n});  \n```\n下面我们做一个非常频繁用到的功能：将复选框选中的行删除。首先要在页面添加一个删除按钮。\n``` html\n<input type = \"button\" value = \"删除选中行\" onclick = \"deleteCheckbox()\" style = \"margin-top:20px\"/>  \n```\n这个JavaScript函数就是页面按钮要调用的函数：\n``` javascript\nfunction deleteCheckbox(){                \n     //从后往前扫描             \n     for(var i = store.getCount();i>=0;i--){           \n        if(mm.isSelected(i)){         \n                //删除当前行  \n                store.removeAt(i);  \n            }  \n     }        \n     //重新加载表数据        \n     gridPanel.reconfigure(store,cm);         \n  }; \n```\n这样一个主要功能都健全的Grid就完成了，今天我就写这些，下次我将继续ExtJS Grid的分页和编辑表格的研究。","slug":"Grid-1","published":1,"updated":"2017-01-19T11:10:49.475Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyo3mvjj0005tsr8ja0nr32l","content":"<p>我们在很多网站都能看到表格的影子，而ExtJS Grid在页面表现上又非常强大，下面我们就创建我们的第一个表格。<a id=\"more\"></a><br>在ExtJS中我们是通过Ext.grid.ColumnModel这个类来描述列属性的。下面我们建立一个ColumnModel对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> cm = <span class=\"keyword\">new</span> Ext.grid.ColumnModel([  </div><div class=\"line\"> &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品编号'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_id'</span>&#125;,  </div><div class=\"line\"> &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品名称'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_name'</span>&#125;,  </div><div class=\"line\"> &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品价格'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_price'</span>&#125;  </div><div class=\"line\">]);</div></pre></td></tr></table></figure></p>\n<p>接下来我们定义表格中要显示的数据。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> data = [  </div><div class=\"line\">    [<span class=\"string\">'01'</span>,<span class=\"string\">'电脑'</span>,<span class=\"string\">'4800'</span>],  </div><div class=\"line\">    [<span class=\"string\">'02'</span>,<span class=\"string\">'手机'</span>,<span class=\"string\">'2100'</span>],  </div><div class=\"line\">    [<span class=\"string\">'03'</span>,<span class=\"string\">'相机'</span>,<span class=\"string\">'1800'</span>],  </div><div class=\"line\">    [<span class=\"string\">'04'</span>,<span class=\"string\">'衣服'</span>,<span class=\"string\">'220'</span>]  </div><div class=\"line\">];</div></pre></td></tr></table></figure></p>\n<p>数据中的列是和定义表格列属性时是相对应的。下面我们要创建一个Store对象来讲data装载到stroe对象中。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> store = <span class=\"keyword\">new</span> Ext.data.Store(&#123;  </div><div class=\"line\"> <span class=\"attr\">proxy</span>:<span class=\"keyword\">new</span> Ext.data.MemoryProxy(data),  </div><div class=\"line\"> <span class=\"attr\">reader</span>:<span class=\"keyword\">new</span> Ext.data.ArrayReader(&#123;&#125;,[  </div><div class=\"line\">       &#123;<span class=\"attr\">name</span>:<span class=\"string\">'product_id'</span>&#125;,  </div><div class=\"line\">       &#123;<span class=\"attr\">name</span>:<span class=\"string\">'product_name'</span>&#125;,  </div><div class=\"line\">       &#123;<span class=\"attr\">name</span>:<span class=\"string\">'product_price'</span>&#125;  </div><div class=\"line\"> ])  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>proxy属性是一个代理类对象，该对象可以封装一个静态数组。ArrayReader对象可以将数组解析，但是要使用mapping属性来进行映射。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> store = <span class=\"keyword\">new</span> Ext.data.Store(&#123;  </div><div class=\"line\"> <span class=\"attr\">proxy</span>:<span class=\"keyword\">new</span> Ext.data.MemoryProxy(data),  </div><div class=\"line\"> <span class=\"attr\">reader</span>:<span class=\"keyword\">new</span> Ext.data.ArrayReader(&#123;&#125;,[  </div><div class=\"line\">       &#123;<span class=\"attr\">name</span>:<span class=\"string\">'product_id'</span>,<span class=\"attr\">mapping</span>:<span class=\"number\">0</span>&#125;,  </div><div class=\"line\">       &#123;<span class=\"attr\">name</span>:<span class=\"string\">'product_name'</span>,<span class=\"attr\">mapping</span>:<span class=\"number\">1</span>&#125;,  </div><div class=\"line\">       &#123;<span class=\"attr\">name</span>:<span class=\"string\">'product_price'</span>,<span class=\"attr\">mapping</span>:<span class=\"number\">2</span>&#125;  </div><div class=\"line\"> ])  </div><div class=\"line\">&#125;);  </div><div class=\"line\">store.load();</div></pre></td></tr></table></figure></p>\n<p>接着就是创建一个GridPanel对象来装置表格并显示在页面上。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> gridPanel = <span class=\"keyword\">new</span> Ext.grid.GridPanel( &#123;  </div><div class=\"line\"> <span class=\"attr\">autoHeigth</span> : <span class=\"literal\">false</span>,  </div><div class=\"line\"> <span class=\"attr\">renderTo</span> : <span class=\"string\">'grid'</span>,  </div><div class=\"line\"> <span class=\"attr\">store</span> : store,  </div><div class=\"line\"> <span class=\"attr\">cm</span> : cm  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>这样，我们第一个静态表格就完成了。下面是完整的代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Ext.onReady(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\"> <span class=\"keyword\">var</span> cm = <span class=\"keyword\">new</span> Ext.grid.ColumnModel( [ &#123;  </div><div class=\"line\">  <span class=\"attr\">header</span> : <span class=\"string\">'id'</span>,  </div><div class=\"line\">  <span class=\"attr\">dataIndex</span> : <span class=\"string\">'product_id'</span>  </div><div class=\"line\"> &#125;, &#123;  </div><div class=\"line\">  <span class=\"attr\">header</span> : <span class=\"string\">'name'</span>,  </div><div class=\"line\">  <span class=\"attr\">dataIndex</span> : <span class=\"string\">'product_name'</span>  </div><div class=\"line\"> &#125;, &#123;  </div><div class=\"line\">  <span class=\"attr\">header</span> : <span class=\"string\">'price'</span>,  </div><div class=\"line\">  <span class=\"attr\">dataIndex</span> : <span class=\"string\">'product_price'</span>  </div><div class=\"line\"> &#125; ]);  </div><div class=\"line\"> <span class=\"keyword\">var</span> data = [ [ <span class=\"string\">'01'</span>, <span class=\"string\">'computer'</span>, <span class=\"string\">'4800'</span> ], [ <span class=\"string\">'02'</span>, <span class=\"string\">'phone'</span>, <span class=\"string\">'2100'</span> ],  </div><div class=\"line\">   [ <span class=\"string\">'03'</span>, <span class=\"string\">'ffff'</span>, <span class=\"string\">'1800'</span> ], [ <span class=\"string\">'04'</span>, <span class=\"string\">'closes'</span>, <span class=\"string\">'220'</span> ] ];  </div><div class=\"line\"> <span class=\"keyword\">var</span> store = <span class=\"keyword\">new</span> Ext.data.Store( &#123;  </div><div class=\"line\">  <span class=\"attr\">proxy</span> : <span class=\"keyword\">new</span> Ext.data.MemoryProxy(data),  </div><div class=\"line\">  <span class=\"attr\">reader</span> : <span class=\"keyword\">new</span> Ext.data.ArrayReader( &#123;&#125;, [ &#123;  </div><div class=\"line\">   <span class=\"attr\">name</span> : <span class=\"string\">'product_id'</span>,  </div><div class=\"line\">   <span class=\"attr\">mapping</span> : <span class=\"number\">0</span>  </div><div class=\"line\">  &#125;, &#123;  </div><div class=\"line\">   <span class=\"attr\">name</span> : <span class=\"string\">'product_name'</span>,  </div><div class=\"line\">   <span class=\"attr\">mapping</span> : <span class=\"number\">1</span>  </div><div class=\"line\">  &#125;, &#123;  </div><div class=\"line\">   <span class=\"attr\">name</span> : <span class=\"string\">'product_price'</span>,  </div><div class=\"line\">   <span class=\"attr\">mapping</span> : <span class=\"number\">2</span>  </div><div class=\"line\">  &#125; ])  </div><div class=\"line\"> &#125;);  </div><div class=\"line\"> store.load();  </div><div class=\"line\"> <span class=\"keyword\">var</span> gridPanel = <span class=\"keyword\">new</span> Ext.grid.GridPanel( &#123;  </div><div class=\"line\">  <span class=\"attr\">autoHeigth</span> : <span class=\"literal\">false</span>,  </div><div class=\"line\">  <span class=\"attr\">renderTo</span> : <span class=\"string\">'grid'</span>,  </div><div class=\"line\">  <span class=\"attr\">store</span> : store,  </div><div class=\"line\">  <span class=\"attr\">cm</span> : cm  </div><div class=\"line\"> &#125;);  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>通过这个简单的代码例子我们也大概了解了创建一个Grid的基本流程了，下面我们简单介绍一下Grid的一些其他的简单属性。</p>\n<p>阻止移动列和改变列的宽度：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> gridPanel = <span class=\"keyword\">new</span> Ext.grid.GridPanel( &#123;         </div><div class=\"line\">    <span class=\"attr\">autoHeigth</span> : <span class=\"literal\">true</span>,    </div><div class=\"line\">    <span class=\"attr\">renderTo</span> : <span class=\"string\">'grid'</span>,    </div><div class=\"line\">    <span class=\"attr\">enableColumnMove</span>:<span class=\"literal\">false</span>,   </div><div class=\"line\">    <span class=\"attr\">enableColumnResize</span>:<span class=\"literal\">false</span>,     </div><div class=\"line\">    <span class=\"attr\">store</span> : store,    </div><div class=\"line\">    <span class=\"attr\">cm</span> : cm   </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>代码中enableColumnMove:false设置的是阻止列的移动，enableColumnResize:false设置的是让列的宽度禁止改变。</p>\n<p>按列排序：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> cm = <span class=\"keyword\">new</span> Ext.grid.ColumnModel( [ &#123;                </div><div class=\"line\">        <span class=\"attr\">header</span> : <span class=\"string\">'id'</span>,        </div><div class=\"line\">        <span class=\"attr\">dataIndex</span> : <span class=\"string\">'product_id'</span>          </div><div class=\"line\">    &#125;, &#123;              </div><div class=\"line\">        <span class=\"attr\">header</span> : <span class=\"string\">'name'</span>,          </div><div class=\"line\">        <span class=\"attr\">dataIndex</span> : <span class=\"string\">'product_name'</span>,       </div><div class=\"line\">        <span class=\"attr\">sortable</span>:<span class=\"literal\">true</span>         </div><div class=\"line\">    &#125;, &#123;              </div><div class=\"line\">        <span class=\"attr\">header</span> : <span class=\"string\">'price'</span>,         </div><div class=\"line\">        <span class=\"attr\">dataIndex</span> : <span class=\"string\">'product_price'</span>       </div><div class=\"line\">    &#125; ]);</div></pre></td></tr></table></figure></p>\n<p>在该列设置sortable：true之后，该列就拥有了排序的功能。</p>\n<p>有很多时候我们需要在表格的每列前加一个复选框，用来标记选中的，进行操作，下面我们就加入复选框试试。首先，我们要创建复选框对象，这时我们要用到Ext.grid.CheckboxSelectionModel这个类。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> sm = <span class=\"keyword\">new</span> Ext.grid.CheckboxSelectionModel();           </div><div class=\"line\"><span class=\"keyword\">var</span> cm = <span class=\"keyword\">new</span> Ext.grid.ColumnModel( [              </div><div class=\"line\">              </div><div class=\"line\">   &#123;              </div><div class=\"line\">    <span class=\"attr\">header</span> : <span class=\"string\">'id'</span>,        </div><div class=\"line\">    <span class=\"attr\">dataIndex</span> : <span class=\"string\">'product_id'</span>,         </div><div class=\"line\">    <span class=\"attr\">sortable</span>:<span class=\"literal\">true</span>         </div><div class=\"line\">&#125;, &#123;              </div><div class=\"line\">    <span class=\"attr\">header</span> : <span class=\"string\">'name'</span>,          </div><div class=\"line\">    <span class=\"attr\">dataIndex</span> : <span class=\"string\">'product_name'</span>,       </div><div class=\"line\">    <span class=\"attr\">sortable</span>:<span class=\"literal\">true</span>  </div><div class=\"line\">&#125;, &#123;      </div><div class=\"line\">    <span class=\"attr\">header</span> : <span class=\"string\">'price'</span>,  </div><div class=\"line\">    <span class=\"attr\">dataIndex</span> : <span class=\"string\">'product_price'</span>,  </div><div class=\"line\">    <span class=\"attr\">sortable</span>:<span class=\"literal\">true</span>  </div><div class=\"line\">&#125; ]);</div></pre></td></tr></table></figure></p>\n<p>创建完复选框对象后，我们还要将这个复选框对象添加到ColumnModel对象中去。接着还要将复选框对象添加到Panel上:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> gridPanel = <span class=\"keyword\">new</span> Ext.grid.GridPanel( &#123;     </div><div class=\"line\">    <span class=\"attr\">autoHeigth</span> : <span class=\"literal\">true</span>,  </div><div class=\"line\">    <span class=\"attr\">renderTo</span> : <span class=\"string\">'grid'</span>,  </div><div class=\"line\">    <span class=\"attr\">enableColumnMove</span>:<span class=\"literal\">false</span>,  </div><div class=\"line\">    <span class=\"attr\">enableColumnResize</span>:<span class=\"literal\">false</span>,  </div><div class=\"line\">    <span class=\"attr\">store</span> : store,  </div><div class=\"line\">    <span class=\"attr\">cm</span> : cm,  </div><div class=\"line\">    <span class=\"attr\">sm</span>:sm  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>下面我们做一个非常频繁用到的功能：将复选框选中的行删除。首先要在页面添加一个删除按钮。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span> = <span class=\"string\">\"button\"</span> <span class=\"attr\">value</span> = <span class=\"string\">\"删除选中行\"</span> <span class=\"attr\">onclick</span> = <span class=\"string\">\"deleteCheckbox()\"</span> <span class=\"attr\">style</span> = <span class=\"string\">\"margin-top:20px\"</span>/&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这个JavaScript函数就是页面按钮要调用的函数：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deleteCheckbox</span>(<span class=\"params\"></span>)</span>&#123;                </div><div class=\"line\">     <span class=\"comment\">//从后往前扫描             </span></div><div class=\"line\">     <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = store.getCount();i&gt;=<span class=\"number\">0</span>;i--)&#123;           </div><div class=\"line\">        <span class=\"keyword\">if</span>(mm.isSelected(i))&#123;         </div><div class=\"line\">                <span class=\"comment\">//删除当前行  </span></div><div class=\"line\">                store.removeAt(i);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">     &#125;        </div><div class=\"line\">     <span class=\"comment\">//重新加载表数据        </span></div><div class=\"line\">     gridPanel.reconfigure(store,cm);         </div><div class=\"line\">  &#125;;</div></pre></td></tr></table></figure></p>\n<p>这样一个主要功能都健全的Grid就完成了，今天我就写这些，下次我将继续ExtJS Grid的分页和编辑表格的研究。</p>\n","excerpt":"<p>我们在很多网站都能看到表格的影子，而ExtJS Grid在页面表现上又非常强大，下面我们就创建我们的第一个表格。","more":"<br>在ExtJS中我们是通过Ext.grid.ColumnModel这个类来描述列属性的。下面我们建立一个ColumnModel对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> cm = <span class=\"keyword\">new</span> Ext.grid.ColumnModel([  </div><div class=\"line\"> &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品编号'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_id'</span>&#125;,  </div><div class=\"line\"> &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品名称'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_name'</span>&#125;,  </div><div class=\"line\"> &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品价格'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_price'</span>&#125;  </div><div class=\"line\">]);</div></pre></td></tr></table></figure></p>\n<p>接下来我们定义表格中要显示的数据。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> data = [  </div><div class=\"line\">    [<span class=\"string\">'01'</span>,<span class=\"string\">'电脑'</span>,<span class=\"string\">'4800'</span>],  </div><div class=\"line\">    [<span class=\"string\">'02'</span>,<span class=\"string\">'手机'</span>,<span class=\"string\">'2100'</span>],  </div><div class=\"line\">    [<span class=\"string\">'03'</span>,<span class=\"string\">'相机'</span>,<span class=\"string\">'1800'</span>],  </div><div class=\"line\">    [<span class=\"string\">'04'</span>,<span class=\"string\">'衣服'</span>,<span class=\"string\">'220'</span>]  </div><div class=\"line\">];</div></pre></td></tr></table></figure></p>\n<p>数据中的列是和定义表格列属性时是相对应的。下面我们要创建一个Store对象来讲data装载到stroe对象中。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> store = <span class=\"keyword\">new</span> Ext.data.Store(&#123;  </div><div class=\"line\"> <span class=\"attr\">proxy</span>:<span class=\"keyword\">new</span> Ext.data.MemoryProxy(data),  </div><div class=\"line\"> <span class=\"attr\">reader</span>:<span class=\"keyword\">new</span> Ext.data.ArrayReader(&#123;&#125;,[  </div><div class=\"line\">       &#123;<span class=\"attr\">name</span>:<span class=\"string\">'product_id'</span>&#125;,  </div><div class=\"line\">       &#123;<span class=\"attr\">name</span>:<span class=\"string\">'product_name'</span>&#125;,  </div><div class=\"line\">       &#123;<span class=\"attr\">name</span>:<span class=\"string\">'product_price'</span>&#125;  </div><div class=\"line\"> ])  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>proxy属性是一个代理类对象，该对象可以封装一个静态数组。ArrayReader对象可以将数组解析，但是要使用mapping属性来进行映射。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> store = <span class=\"keyword\">new</span> Ext.data.Store(&#123;  </div><div class=\"line\"> <span class=\"attr\">proxy</span>:<span class=\"keyword\">new</span> Ext.data.MemoryProxy(data),  </div><div class=\"line\"> <span class=\"attr\">reader</span>:<span class=\"keyword\">new</span> Ext.data.ArrayReader(&#123;&#125;,[  </div><div class=\"line\">       &#123;<span class=\"attr\">name</span>:<span class=\"string\">'product_id'</span>,<span class=\"attr\">mapping</span>:<span class=\"number\">0</span>&#125;,  </div><div class=\"line\">       &#123;<span class=\"attr\">name</span>:<span class=\"string\">'product_name'</span>,<span class=\"attr\">mapping</span>:<span class=\"number\">1</span>&#125;,  </div><div class=\"line\">       &#123;<span class=\"attr\">name</span>:<span class=\"string\">'product_price'</span>,<span class=\"attr\">mapping</span>:<span class=\"number\">2</span>&#125;  </div><div class=\"line\"> ])  </div><div class=\"line\">&#125;);  </div><div class=\"line\">store.load();</div></pre></td></tr></table></figure></p>\n<p>接着就是创建一个GridPanel对象来装置表格并显示在页面上。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> gridPanel = <span class=\"keyword\">new</span> Ext.grid.GridPanel( &#123;  </div><div class=\"line\"> <span class=\"attr\">autoHeigth</span> : <span class=\"literal\">false</span>,  </div><div class=\"line\"> <span class=\"attr\">renderTo</span> : <span class=\"string\">'grid'</span>,  </div><div class=\"line\"> <span class=\"attr\">store</span> : store,  </div><div class=\"line\"> <span class=\"attr\">cm</span> : cm  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>这样，我们第一个静态表格就完成了。下面是完整的代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Ext.onReady(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\"> <span class=\"keyword\">var</span> cm = <span class=\"keyword\">new</span> Ext.grid.ColumnModel( [ &#123;  </div><div class=\"line\">  <span class=\"attr\">header</span> : <span class=\"string\">'id'</span>,  </div><div class=\"line\">  <span class=\"attr\">dataIndex</span> : <span class=\"string\">'product_id'</span>  </div><div class=\"line\"> &#125;, &#123;  </div><div class=\"line\">  <span class=\"attr\">header</span> : <span class=\"string\">'name'</span>,  </div><div class=\"line\">  <span class=\"attr\">dataIndex</span> : <span class=\"string\">'product_name'</span>  </div><div class=\"line\"> &#125;, &#123;  </div><div class=\"line\">  <span class=\"attr\">header</span> : <span class=\"string\">'price'</span>,  </div><div class=\"line\">  <span class=\"attr\">dataIndex</span> : <span class=\"string\">'product_price'</span>  </div><div class=\"line\"> &#125; ]);  </div><div class=\"line\"> <span class=\"keyword\">var</span> data = [ [ <span class=\"string\">'01'</span>, <span class=\"string\">'computer'</span>, <span class=\"string\">'4800'</span> ], [ <span class=\"string\">'02'</span>, <span class=\"string\">'phone'</span>, <span class=\"string\">'2100'</span> ],  </div><div class=\"line\">   [ <span class=\"string\">'03'</span>, <span class=\"string\">'ffff'</span>, <span class=\"string\">'1800'</span> ], [ <span class=\"string\">'04'</span>, <span class=\"string\">'closes'</span>, <span class=\"string\">'220'</span> ] ];  </div><div class=\"line\"> <span class=\"keyword\">var</span> store = <span class=\"keyword\">new</span> Ext.data.Store( &#123;  </div><div class=\"line\">  <span class=\"attr\">proxy</span> : <span class=\"keyword\">new</span> Ext.data.MemoryProxy(data),  </div><div class=\"line\">  <span class=\"attr\">reader</span> : <span class=\"keyword\">new</span> Ext.data.ArrayReader( &#123;&#125;, [ &#123;  </div><div class=\"line\">   <span class=\"attr\">name</span> : <span class=\"string\">'product_id'</span>,  </div><div class=\"line\">   <span class=\"attr\">mapping</span> : <span class=\"number\">0</span>  </div><div class=\"line\">  &#125;, &#123;  </div><div class=\"line\">   <span class=\"attr\">name</span> : <span class=\"string\">'product_name'</span>,  </div><div class=\"line\">   <span class=\"attr\">mapping</span> : <span class=\"number\">1</span>  </div><div class=\"line\">  &#125;, &#123;  </div><div class=\"line\">   <span class=\"attr\">name</span> : <span class=\"string\">'product_price'</span>,  </div><div class=\"line\">   <span class=\"attr\">mapping</span> : <span class=\"number\">2</span>  </div><div class=\"line\">  &#125; ])  </div><div class=\"line\"> &#125;);  </div><div class=\"line\"> store.load();  </div><div class=\"line\"> <span class=\"keyword\">var</span> gridPanel = <span class=\"keyword\">new</span> Ext.grid.GridPanel( &#123;  </div><div class=\"line\">  <span class=\"attr\">autoHeigth</span> : <span class=\"literal\">false</span>,  </div><div class=\"line\">  <span class=\"attr\">renderTo</span> : <span class=\"string\">'grid'</span>,  </div><div class=\"line\">  <span class=\"attr\">store</span> : store,  </div><div class=\"line\">  <span class=\"attr\">cm</span> : cm  </div><div class=\"line\"> &#125;);  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>通过这个简单的代码例子我们也大概了解了创建一个Grid的基本流程了，下面我们简单介绍一下Grid的一些其他的简单属性。</p>\n<p>阻止移动列和改变列的宽度：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> gridPanel = <span class=\"keyword\">new</span> Ext.grid.GridPanel( &#123;         </div><div class=\"line\">    <span class=\"attr\">autoHeigth</span> : <span class=\"literal\">true</span>,    </div><div class=\"line\">    <span class=\"attr\">renderTo</span> : <span class=\"string\">'grid'</span>,    </div><div class=\"line\">    <span class=\"attr\">enableColumnMove</span>:<span class=\"literal\">false</span>,   </div><div class=\"line\">    <span class=\"attr\">enableColumnResize</span>:<span class=\"literal\">false</span>,     </div><div class=\"line\">    <span class=\"attr\">store</span> : store,    </div><div class=\"line\">    <span class=\"attr\">cm</span> : cm   </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>代码中enableColumnMove:false设置的是阻止列的移动，enableColumnResize:false设置的是让列的宽度禁止改变。</p>\n<p>按列排序：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> cm = <span class=\"keyword\">new</span> Ext.grid.ColumnModel( [ &#123;                </div><div class=\"line\">        <span class=\"attr\">header</span> : <span class=\"string\">'id'</span>,        </div><div class=\"line\">        <span class=\"attr\">dataIndex</span> : <span class=\"string\">'product_id'</span>          </div><div class=\"line\">    &#125;, &#123;              </div><div class=\"line\">        <span class=\"attr\">header</span> : <span class=\"string\">'name'</span>,          </div><div class=\"line\">        <span class=\"attr\">dataIndex</span> : <span class=\"string\">'product_name'</span>,       </div><div class=\"line\">        <span class=\"attr\">sortable</span>:<span class=\"literal\">true</span>         </div><div class=\"line\">    &#125;, &#123;              </div><div class=\"line\">        <span class=\"attr\">header</span> : <span class=\"string\">'price'</span>,         </div><div class=\"line\">        <span class=\"attr\">dataIndex</span> : <span class=\"string\">'product_price'</span>       </div><div class=\"line\">    &#125; ]);</div></pre></td></tr></table></figure></p>\n<p>在该列设置sortable：true之后，该列就拥有了排序的功能。</p>\n<p>有很多时候我们需要在表格的每列前加一个复选框，用来标记选中的，进行操作，下面我们就加入复选框试试。首先，我们要创建复选框对象，这时我们要用到Ext.grid.CheckboxSelectionModel这个类。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> sm = <span class=\"keyword\">new</span> Ext.grid.CheckboxSelectionModel();           </div><div class=\"line\"><span class=\"keyword\">var</span> cm = <span class=\"keyword\">new</span> Ext.grid.ColumnModel( [              </div><div class=\"line\">              </div><div class=\"line\">   &#123;              </div><div class=\"line\">    <span class=\"attr\">header</span> : <span class=\"string\">'id'</span>,        </div><div class=\"line\">    <span class=\"attr\">dataIndex</span> : <span class=\"string\">'product_id'</span>,         </div><div class=\"line\">    <span class=\"attr\">sortable</span>:<span class=\"literal\">true</span>         </div><div class=\"line\">&#125;, &#123;              </div><div class=\"line\">    <span class=\"attr\">header</span> : <span class=\"string\">'name'</span>,          </div><div class=\"line\">    <span class=\"attr\">dataIndex</span> : <span class=\"string\">'product_name'</span>,       </div><div class=\"line\">    <span class=\"attr\">sortable</span>:<span class=\"literal\">true</span>  </div><div class=\"line\">&#125;, &#123;      </div><div class=\"line\">    <span class=\"attr\">header</span> : <span class=\"string\">'price'</span>,  </div><div class=\"line\">    <span class=\"attr\">dataIndex</span> : <span class=\"string\">'product_price'</span>,  </div><div class=\"line\">    <span class=\"attr\">sortable</span>:<span class=\"literal\">true</span>  </div><div class=\"line\">&#125; ]);</div></pre></td></tr></table></figure></p>\n<p>创建完复选框对象后，我们还要将这个复选框对象添加到ColumnModel对象中去。接着还要将复选框对象添加到Panel上:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> gridPanel = <span class=\"keyword\">new</span> Ext.grid.GridPanel( &#123;     </div><div class=\"line\">    <span class=\"attr\">autoHeigth</span> : <span class=\"literal\">true</span>,  </div><div class=\"line\">    <span class=\"attr\">renderTo</span> : <span class=\"string\">'grid'</span>,  </div><div class=\"line\">    <span class=\"attr\">enableColumnMove</span>:<span class=\"literal\">false</span>,  </div><div class=\"line\">    <span class=\"attr\">enableColumnResize</span>:<span class=\"literal\">false</span>,  </div><div class=\"line\">    <span class=\"attr\">store</span> : store,  </div><div class=\"line\">    <span class=\"attr\">cm</span> : cm,  </div><div class=\"line\">    <span class=\"attr\">sm</span>:sm  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>下面我们做一个非常频繁用到的功能：将复选框选中的行删除。首先要在页面添加一个删除按钮。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span> = <span class=\"string\">\"button\"</span> <span class=\"attr\">value</span> = <span class=\"string\">\"删除选中行\"</span> <span class=\"attr\">onclick</span> = <span class=\"string\">\"deleteCheckbox()\"</span> <span class=\"attr\">style</span> = <span class=\"string\">\"margin-top:20px\"</span>/&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这个JavaScript函数就是页面按钮要调用的函数：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deleteCheckbox</span>(<span class=\"params\"></span>)</span>&#123;                </div><div class=\"line\">     <span class=\"comment\">//从后往前扫描             </span></div><div class=\"line\">     <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = store.getCount();i&gt;=<span class=\"number\">0</span>;i--)&#123;           </div><div class=\"line\">        <span class=\"keyword\">if</span>(mm.isSelected(i))&#123;         </div><div class=\"line\">                <span class=\"comment\">//删除当前行  </span></div><div class=\"line\">                store.removeAt(i);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">     &#125;        </div><div class=\"line\">     <span class=\"comment\">//重新加载表数据        </span></div><div class=\"line\">     gridPanel.reconfigure(store,cm);         </div><div class=\"line\">  &#125;;</div></pre></td></tr></table></figure></p>\n<p>这样一个主要功能都健全的Grid就完成了，今天我就写这些，下次我将继续ExtJS Grid的分页和编辑表格的研究。</p>"},{"title":"ExtJS初级教程之ExtJS Grid(二)","date":"2016-11-27T14:45:40.000Z","_content":"很多时候我们表格里显示的数据是从后台查询出来的海量数据，那么海量的数据显示在表格里用户的体验肯定会很差，效率也会很低。ExtJS为了解决这个问题，就给我们提供了一个非常强大的分页组件。今天我们就研究一下ExtJS的分页技术。<!--more-->\n## 为表格添加分页组件\n要为表格添加分页组件，就要先创建Ext.PagingToolbar类的实例对象，然后将它添加到Panel中去。\n``` javascript\ngridPanel = new Ext.grid.GridPanel({  \n      autoHeight: true,  \n      renderTo: 'grid',   \n      store: store,       \n      cm: cm,   \n      sm:mm,  \n      bbar:new Ext.PagingToolbar({  \n      pageSize:3,  \n      store:store,  \n      displayInfo:true,  \n      displayMsg:'显示记录 {0} - {1} of {2}',  \n      emptyMsg:\"没有记录\"  \n      })  \n }); \n```\nPagingToolbar类的属性描述：\n- pageSize：每页显示的记录条数。\n- displayInfo：是否显示记录信息。\n- displayMsg：该属性值为true时，该属性才有效。{0}：表示当前显示的记录起始数。{1}：表示显示记录数的结尾数。{2}：表示总共多少记录。\n- emptyMsg：当没有记录的时候显示的文本信息。  \n\n## 从服务器端获得分页数据\n如果使用静态数据，Grid每次都会将所有数据显示。所以这里我们就编写一个Servlet来生成动态数据生成Grid。Servlet将接受两个请求数据start和limit。Start表示当前页显示记录的起始位置，limit表示每页显示的记录数。\n``` java\npublic class GridServlet extends HttpServlet {  \n private static final long serialVersionUID = 1L;      \n protected void service(HttpServletRequest request, HttpServletResponse response)  \n   throws ServletException, IOException {  \n  response.setContentType(\"text/html;charset=gbk\");  \n  PrintWriter out = response.getWriter();  \n  String start = request.getParameter(\"start\");  \n  String limit = request.getParameter(\"limit\");  \n  int index = Integer.parseInt(start);  \n  int pageSize = Integer.parseInt(limit);  \n  int total = 100000;  \n  String jsonStr = \"{total:\" + total + \",root:[\";  \n  for (int i = index; i < pageSize + index; i++)  \n  {  \n   int productIndex = i + 1;  \n   jsonStr += \"{product_id:\" + productIndex + \",product_name:'产品\"  \n     + productIndex + \"',product_price:'价格\" + productIndex  \n     + \"'}\";  \n   if (i != pageSize + index - 1)  \n    jsonStr += \",\";  \n  }  \n  jsonStr += \"]}\";  \n  out.println(jsonStr);  \n }  \n} \n```\n要通过服务器来接收数据生成表格，就必须使用HttpProxy来制定URL。还有，服务器传递过来的数据是Json格式的，就不能使用ArrayReader了，需要使用的是JsonReader。\n``` javascript\nExt.onReady(function(){  \n var mm = new Ext.grid.CheckboxSelectionModel();  \n    var cm = new Ext.grid.ColumnModel([  \n        new Ext.grid.RowNumberer(),  \n        mm,  \n        {header:'产品编号',dataIndex:'product_id'},  \n        {header:'产品名称',dataIndex:'product_name'},  \n        {header:'产品价格',dataIndex:'product_price'}  \n    ]);    \n var store = new Ext.data.Store({  \n        proxy: new Ext.data.HttpProxy({url:'../GridServlet'}),  \n        reader: new Ext.data.JsonReader({  \n         totalProperty:'total',  \n         root:'root'  \n        },[  \n           {name:'product_id'},  \n           {name:'product_name'},  \n           {name:'product_price'}  \n        ])   \n    });  \nstore.load({params:{start:0,limit:10}});  \n    var gridPanel = new Ext.grid.GridPanel({  \n        autoHeight: true,  \n        renderTo: 'grid',          \n        store: store,  \n        cm: cm,  \n        sm:mm,  \n        bbar:new Ext.PagingToolbar({  \n         pageSize:10,  \n         store:store,  \n         displayInfo:true,  \n         displayMsg:'显示记录 {0} - {1} of {2}',  \n         emptyMsg:\"没有记录\"  \n        })  \n    });   \n}); \n```\n这样一个简单的ExtJS Grid分页就实现了。要想让用户体验更高就应该让用户可以在自己刚刚查询出来的数据表格上进行数据编辑，可以进行增删改查。可编辑的表格就在在想要能编辑的列里注册一个TextField组件，这个组件需要使用Ext.grid.GridEditor类来封装。  \n## 第一个可编辑表格\n``` javascript\ncm = new Ext.grid.ColumnModel([  \nnew Ext.grid.RowNumberer(),  \n {header:'产品编号',dataIndex:'product_id'},  \n {header:'产品名称',dataIndex:'product_name',editor:new Ext.grid.GridEditor(new Ext.form.TextField({allowBlank:false}))},  \n {header:'产品价格',dataIndex:'product_price',editor:new Ext.grid.GridEditor(new Ext.form.TextField({allowBlank:false}))}  \n]); \n```\n使用了可编辑的对象就需要建立一个Ext.grid.EditorGridPanel来代替Ext.grid.GridPanel。\n``` javascript\ngridPanel = new Ext.grid.EditorGridPanel({  \n  autoHeight: true,  \n  renderTo: 'grid',      \n  store: store,  \n  cm: cm,  \n});  \n```\n这时默认的是双击编辑，如果想设置成单击编辑的话就需要做如下改动。\n``` javascript\n\ngridPanel = new Ext.grid.EditorGridPanel({  \n  autoHeight: true,  \n  renderTo: 'grid',          \n  store: store,  \n  //值为1的时候就是单击，2就是双击。  \n  clicksToEdit:1,  \n  cm: cm,  \n  sm:mm  \n});\n```\n## 向表格中添加新行和删除一行\n添加新的一行是使用Store类的insert方法插入一个新的Ext.data.Record对象，删除用的是remove方法,为了使插入的新行所有列都能编辑，我们要把所有列都设为可编辑。\n``` javascript\ncm = new Ext.grid.ColumnModel([  \n  new Ext.grid.RowNumberer(),  \n  mm,  \n  {header:'产品编号',dataIndex:'product_id',editor:new Ext.grid.GridEditor(new Ext.form.TextField({allowBlank:false}))},  \n  {header:'产品名称',dataIndex:'product_name',editor:new Ext.grid.GridEditor(new Ext.form.TextField({allowBlank:false}))},  \n  {header:'产品价格',dataIndex:'product_price',editor:new Ext.grid.GridEditor(new Ext.form.TextField({allowBlank:false}))}  \n]);\n```\n将所想要编辑的列添加Ext.grid.GridEditor对象就能是该列可编辑,接着我们要在表格组件的上方添加两个按键，分别是增加和删除。代码如下：\n``` javascript\nvar gridPanel = new Ext.grid.EditorGridPanel({    \n       autoHeight: true,      \n       renderTo: 'grid',      \n       store: store,      \n       cm: cm,    \n       tbar: new Ext.Toolbar(['-', {      \n           text: '添加一行',      \n           handler: function(){   \n               var record = new Ext.data.Record({     \n                product_id:'',  \n                product_name:'',  \n                product_price:''  \n               });  \n               gridPanel.stopEditing();                  \n               store.insert(store.getCount(),record);  \n               gridPanel.startEditing(store.getCount()-1,0);  \n           }  \n       }, '-', {  \n           text: '删除一行',  \n           handler: function(){  \n               Ext.Msg.confirm('信息', '是否删除当前记录？', function(btn){  \n                   if (btn == 'yes') {  \n                       var sm = gridPanel.getSelectionModel();  \n                       var cell = sm.getSelectedCell();  \n                       var record = store.getAt(cell[0]);  \n                       store.remove(record);  \n                   }  \n               });    \n           }      \n       }, '-'])   \n   });  \n```\n## 保存数据\n论是添加或是修改了表格中的数据后，一般我们都要将结果提交到服务器，在ExtJS中Slice类就是干这个用的。\n``` javascript\n{  \n           text: '保存',    \n           handler: function(){   \n               var m = store.modified.slice(0);   \n               var data = [];     \n               Ext.each(m, function(item) {   \n                   data.push(item.data);      \n               });    \n               alert(Ext.encode(data));   \n               Ext.lib.Ajax.request(      \n                   'POST',    \n                   'SaveData',    \n                   {success: function(response){      \n                       Ext.Msg.alert('信息', response.responseText, function(){     \n                           store.reload();    \n                       });    \n                   }},    \n                   'row=' + encodeURIComponent(Ext.encode(data))      \n               );     \n           }      \n}  \n```\n## 对记录进行分组  \n此外ExtJS Grid还可以对数据进行分组，要建立一个按列分组的表格就要使用Ext.data.GroupingStore这个类。\n``` javascript\n\nvar store = new Ext.data.GroupingStore({  \n    reader: reader,  \n    data: data,  \n    groupField: 'sex',  \n    sortInfo: {field: 'name', direction: \"ASC\"}  \n});  \nvar grid = new Ext.grid.GridPanel({  \n    autoHeight: true,  \n    store: store,  \n    columns: columns,  \n    view: new Ext.grid.GroupingView(),  \n    renderTo: 'grid'  \n});  \n```\nExtJS各种各样的组件和控件有很多，做的都很漂亮，还可以自己定制样式，使用继承来拓展ExtJS的功能，ExtJS的介绍就到这了，更多的功能我今后还会继续研究的。\n\n","source":"_posts/Grid-2.md","raw":"---\ntitle: ExtJS初级教程之ExtJS Grid(二)\ndate: 2016-11-27 22:45:40\ntags: ExtJS\ncategories: javascript\n---\n很多时候我们表格里显示的数据是从后台查询出来的海量数据，那么海量的数据显示在表格里用户的体验肯定会很差，效率也会很低。ExtJS为了解决这个问题，就给我们提供了一个非常强大的分页组件。今天我们就研究一下ExtJS的分页技术。<!--more-->\n## 为表格添加分页组件\n要为表格添加分页组件，就要先创建Ext.PagingToolbar类的实例对象，然后将它添加到Panel中去。\n``` javascript\ngridPanel = new Ext.grid.GridPanel({  \n      autoHeight: true,  \n      renderTo: 'grid',   \n      store: store,       \n      cm: cm,   \n      sm:mm,  \n      bbar:new Ext.PagingToolbar({  \n      pageSize:3,  \n      store:store,  \n      displayInfo:true,  \n      displayMsg:'显示记录 {0} - {1} of {2}',  \n      emptyMsg:\"没有记录\"  \n      })  \n }); \n```\nPagingToolbar类的属性描述：\n- pageSize：每页显示的记录条数。\n- displayInfo：是否显示记录信息。\n- displayMsg：该属性值为true时，该属性才有效。{0}：表示当前显示的记录起始数。{1}：表示显示记录数的结尾数。{2}：表示总共多少记录。\n- emptyMsg：当没有记录的时候显示的文本信息。  \n\n## 从服务器端获得分页数据\n如果使用静态数据，Grid每次都会将所有数据显示。所以这里我们就编写一个Servlet来生成动态数据生成Grid。Servlet将接受两个请求数据start和limit。Start表示当前页显示记录的起始位置，limit表示每页显示的记录数。\n``` java\npublic class GridServlet extends HttpServlet {  \n private static final long serialVersionUID = 1L;      \n protected void service(HttpServletRequest request, HttpServletResponse response)  \n   throws ServletException, IOException {  \n  response.setContentType(\"text/html;charset=gbk\");  \n  PrintWriter out = response.getWriter();  \n  String start = request.getParameter(\"start\");  \n  String limit = request.getParameter(\"limit\");  \n  int index = Integer.parseInt(start);  \n  int pageSize = Integer.parseInt(limit);  \n  int total = 100000;  \n  String jsonStr = \"{total:\" + total + \",root:[\";  \n  for (int i = index; i < pageSize + index; i++)  \n  {  \n   int productIndex = i + 1;  \n   jsonStr += \"{product_id:\" + productIndex + \",product_name:'产品\"  \n     + productIndex + \"',product_price:'价格\" + productIndex  \n     + \"'}\";  \n   if (i != pageSize + index - 1)  \n    jsonStr += \",\";  \n  }  \n  jsonStr += \"]}\";  \n  out.println(jsonStr);  \n }  \n} \n```\n要通过服务器来接收数据生成表格，就必须使用HttpProxy来制定URL。还有，服务器传递过来的数据是Json格式的，就不能使用ArrayReader了，需要使用的是JsonReader。\n``` javascript\nExt.onReady(function(){  \n var mm = new Ext.grid.CheckboxSelectionModel();  \n    var cm = new Ext.grid.ColumnModel([  \n        new Ext.grid.RowNumberer(),  \n        mm,  \n        {header:'产品编号',dataIndex:'product_id'},  \n        {header:'产品名称',dataIndex:'product_name'},  \n        {header:'产品价格',dataIndex:'product_price'}  \n    ]);    \n var store = new Ext.data.Store({  \n        proxy: new Ext.data.HttpProxy({url:'../GridServlet'}),  \n        reader: new Ext.data.JsonReader({  \n         totalProperty:'total',  \n         root:'root'  \n        },[  \n           {name:'product_id'},  \n           {name:'product_name'},  \n           {name:'product_price'}  \n        ])   \n    });  \nstore.load({params:{start:0,limit:10}});  \n    var gridPanel = new Ext.grid.GridPanel({  \n        autoHeight: true,  \n        renderTo: 'grid',          \n        store: store,  \n        cm: cm,  \n        sm:mm,  \n        bbar:new Ext.PagingToolbar({  \n         pageSize:10,  \n         store:store,  \n         displayInfo:true,  \n         displayMsg:'显示记录 {0} - {1} of {2}',  \n         emptyMsg:\"没有记录\"  \n        })  \n    });   \n}); \n```\n这样一个简单的ExtJS Grid分页就实现了。要想让用户体验更高就应该让用户可以在自己刚刚查询出来的数据表格上进行数据编辑，可以进行增删改查。可编辑的表格就在在想要能编辑的列里注册一个TextField组件，这个组件需要使用Ext.grid.GridEditor类来封装。  \n## 第一个可编辑表格\n``` javascript\ncm = new Ext.grid.ColumnModel([  \nnew Ext.grid.RowNumberer(),  \n {header:'产品编号',dataIndex:'product_id'},  \n {header:'产品名称',dataIndex:'product_name',editor:new Ext.grid.GridEditor(new Ext.form.TextField({allowBlank:false}))},  \n {header:'产品价格',dataIndex:'product_price',editor:new Ext.grid.GridEditor(new Ext.form.TextField({allowBlank:false}))}  \n]); \n```\n使用了可编辑的对象就需要建立一个Ext.grid.EditorGridPanel来代替Ext.grid.GridPanel。\n``` javascript\ngridPanel = new Ext.grid.EditorGridPanel({  \n  autoHeight: true,  \n  renderTo: 'grid',      \n  store: store,  \n  cm: cm,  \n});  \n```\n这时默认的是双击编辑，如果想设置成单击编辑的话就需要做如下改动。\n``` javascript\n\ngridPanel = new Ext.grid.EditorGridPanel({  \n  autoHeight: true,  \n  renderTo: 'grid',          \n  store: store,  \n  //值为1的时候就是单击，2就是双击。  \n  clicksToEdit:1,  \n  cm: cm,  \n  sm:mm  \n});\n```\n## 向表格中添加新行和删除一行\n添加新的一行是使用Store类的insert方法插入一个新的Ext.data.Record对象，删除用的是remove方法,为了使插入的新行所有列都能编辑，我们要把所有列都设为可编辑。\n``` javascript\ncm = new Ext.grid.ColumnModel([  \n  new Ext.grid.RowNumberer(),  \n  mm,  \n  {header:'产品编号',dataIndex:'product_id',editor:new Ext.grid.GridEditor(new Ext.form.TextField({allowBlank:false}))},  \n  {header:'产品名称',dataIndex:'product_name',editor:new Ext.grid.GridEditor(new Ext.form.TextField({allowBlank:false}))},  \n  {header:'产品价格',dataIndex:'product_price',editor:new Ext.grid.GridEditor(new Ext.form.TextField({allowBlank:false}))}  \n]);\n```\n将所想要编辑的列添加Ext.grid.GridEditor对象就能是该列可编辑,接着我们要在表格组件的上方添加两个按键，分别是增加和删除。代码如下：\n``` javascript\nvar gridPanel = new Ext.grid.EditorGridPanel({    \n       autoHeight: true,      \n       renderTo: 'grid',      \n       store: store,      \n       cm: cm,    \n       tbar: new Ext.Toolbar(['-', {      \n           text: '添加一行',      \n           handler: function(){   \n               var record = new Ext.data.Record({     \n                product_id:'',  \n                product_name:'',  \n                product_price:''  \n               });  \n               gridPanel.stopEditing();                  \n               store.insert(store.getCount(),record);  \n               gridPanel.startEditing(store.getCount()-1,0);  \n           }  \n       }, '-', {  \n           text: '删除一行',  \n           handler: function(){  \n               Ext.Msg.confirm('信息', '是否删除当前记录？', function(btn){  \n                   if (btn == 'yes') {  \n                       var sm = gridPanel.getSelectionModel();  \n                       var cell = sm.getSelectedCell();  \n                       var record = store.getAt(cell[0]);  \n                       store.remove(record);  \n                   }  \n               });    \n           }      \n       }, '-'])   \n   });  \n```\n## 保存数据\n论是添加或是修改了表格中的数据后，一般我们都要将结果提交到服务器，在ExtJS中Slice类就是干这个用的。\n``` javascript\n{  \n           text: '保存',    \n           handler: function(){   \n               var m = store.modified.slice(0);   \n               var data = [];     \n               Ext.each(m, function(item) {   \n                   data.push(item.data);      \n               });    \n               alert(Ext.encode(data));   \n               Ext.lib.Ajax.request(      \n                   'POST',    \n                   'SaveData',    \n                   {success: function(response){      \n                       Ext.Msg.alert('信息', response.responseText, function(){     \n                           store.reload();    \n                       });    \n                   }},    \n                   'row=' + encodeURIComponent(Ext.encode(data))      \n               );     \n           }      \n}  \n```\n## 对记录进行分组  \n此外ExtJS Grid还可以对数据进行分组，要建立一个按列分组的表格就要使用Ext.data.GroupingStore这个类。\n``` javascript\n\nvar store = new Ext.data.GroupingStore({  \n    reader: reader,  \n    data: data,  \n    groupField: 'sex',  \n    sortInfo: {field: 'name', direction: \"ASC\"}  \n});  \nvar grid = new Ext.grid.GridPanel({  \n    autoHeight: true,  \n    store: store,  \n    columns: columns,  \n    view: new Ext.grid.GroupingView(),  \n    renderTo: 'grid'  \n});  \n```\nExtJS各种各样的组件和控件有很多，做的都很漂亮，还可以自己定制样式，使用继承来拓展ExtJS的功能，ExtJS的介绍就到这了，更多的功能我今后还会继续研究的。\n\n","slug":"Grid-2","published":1,"updated":"2017-01-19T11:10:49.475Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyo3mvjl0006tsr87rr0j6ie","content":"<p>很多时候我们表格里显示的数据是从后台查询出来的海量数据，那么海量的数据显示在表格里用户的体验肯定会很差，效率也会很低。ExtJS为了解决这个问题，就给我们提供了一个非常强大的分页组件。今天我们就研究一下ExtJS的分页技术。<a id=\"more\"></a></p>\n<h2 id=\"为表格添加分页组件\"><a href=\"#为表格添加分页组件\" class=\"headerlink\" title=\"为表格添加分页组件\"></a>为表格添加分页组件</h2><p>要为表格添加分页组件，就要先创建Ext.PagingToolbar类的实例对象，然后将它添加到Panel中去。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">gridPanel = <span class=\"keyword\">new</span> Ext.grid.GridPanel(&#123;  </div><div class=\"line\">      <span class=\"attr\">autoHeight</span>: <span class=\"literal\">true</span>,  </div><div class=\"line\">      <span class=\"attr\">renderTo</span>: <span class=\"string\">'grid'</span>,   </div><div class=\"line\">      <span class=\"attr\">store</span>: store,       </div><div class=\"line\">      <span class=\"attr\">cm</span>: cm,   </div><div class=\"line\">      <span class=\"attr\">sm</span>:mm,  </div><div class=\"line\">      <span class=\"attr\">bbar</span>:<span class=\"keyword\">new</span> Ext.PagingToolbar(&#123;  </div><div class=\"line\">      <span class=\"attr\">pageSize</span>:<span class=\"number\">3</span>,  </div><div class=\"line\">      <span class=\"attr\">store</span>:store,  </div><div class=\"line\">      <span class=\"attr\">displayInfo</span>:<span class=\"literal\">true</span>,  </div><div class=\"line\">      <span class=\"attr\">displayMsg</span>:<span class=\"string\">'显示记录 &#123;0&#125; - &#123;1&#125; of &#123;2&#125;'</span>,  </div><div class=\"line\">      <span class=\"attr\">emptyMsg</span>:<span class=\"string\">\"没有记录\"</span>  </div><div class=\"line\">      &#125;)  </div><div class=\"line\"> &#125;);</div></pre></td></tr></table></figure></p>\n<p>PagingToolbar类的属性描述：</p>\n<ul>\n<li>pageSize：每页显示的记录条数。</li>\n<li>displayInfo：是否显示记录信息。</li>\n<li>displayMsg：该属性值为true时，该属性才有效。{0}：表示当前显示的记录起始数。{1}：表示显示记录数的结尾数。{2}：表示总共多少记录。</li>\n<li>emptyMsg：当没有记录的时候显示的文本信息。  </li>\n</ul>\n<h2 id=\"从服务器端获得分页数据\"><a href=\"#从服务器端获得分页数据\" class=\"headerlink\" title=\"从服务器端获得分页数据\"></a>从服务器端获得分页数据</h2><p>如果使用静态数据，Grid每次都会将所有数据显示。所以这里我们就编写一个Servlet来生成动态数据生成Grid。Servlet将接受两个请求数据start和limit。Start表示当前页显示记录的起始位置，limit表示每页显示的记录数。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GridServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;  </div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;      </div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span>  </span></div><div class=\"line\">   <span class=\"keyword\">throws</span> ServletException, IOException &#123;  </div><div class=\"line\">  response.setContentType(<span class=\"string\">\"text/html;charset=gbk\"</span>);  </div><div class=\"line\">  PrintWriter out = response.getWriter();  </div><div class=\"line\">  String start = request.getParameter(<span class=\"string\">\"start\"</span>);  </div><div class=\"line\">  String limit = request.getParameter(<span class=\"string\">\"limit\"</span>);  </div><div class=\"line\">  <span class=\"keyword\">int</span> index = Integer.parseInt(start);  </div><div class=\"line\">  <span class=\"keyword\">int</span> pageSize = Integer.parseInt(limit);  </div><div class=\"line\">  <span class=\"keyword\">int</span> total = <span class=\"number\">100000</span>;  </div><div class=\"line\">  String jsonStr = <span class=\"string\">\"&#123;total:\"</span> + total + <span class=\"string\">\",root:[\"</span>;  </div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = index; i &lt; pageSize + index; i++)  </div><div class=\"line\">  &#123;  </div><div class=\"line\">   <span class=\"keyword\">int</span> productIndex = i + <span class=\"number\">1</span>;  </div><div class=\"line\">   jsonStr += <span class=\"string\">\"&#123;product_id:\"</span> + productIndex + <span class=\"string\">\",product_name:'产品\"</span>  </div><div class=\"line\">     + productIndex + <span class=\"string\">\"',product_price:'价格\"</span> + productIndex  </div><div class=\"line\">     + <span class=\"string\">\"'&#125;\"</span>;  </div><div class=\"line\">   <span class=\"keyword\">if</span> (i != pageSize + index - <span class=\"number\">1</span>)  </div><div class=\"line\">    jsonStr += <span class=\"string\">\",\"</span>;  </div><div class=\"line\">  &#125;  </div><div class=\"line\">  jsonStr += <span class=\"string\">\"]&#125;\"</span>;  </div><div class=\"line\">  out.println(jsonStr);  </div><div class=\"line\"> &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>要通过服务器来接收数据生成表格，就必须使用HttpProxy来制定URL。还有，服务器传递过来的数据是Json格式的，就不能使用ArrayReader了，需要使用的是JsonReader。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">Ext.onReady(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;  </div><div class=\"line\"> <span class=\"keyword\">var</span> mm = <span class=\"keyword\">new</span> Ext.grid.CheckboxSelectionModel();  </div><div class=\"line\">    <span class=\"keyword\">var</span> cm = <span class=\"keyword\">new</span> Ext.grid.ColumnModel([  </div><div class=\"line\">        <span class=\"keyword\">new</span> Ext.grid.RowNumberer(),  </div><div class=\"line\">        mm,  </div><div class=\"line\">        &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品编号'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_id'</span>&#125;,  </div><div class=\"line\">        &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品名称'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_name'</span>&#125;,  </div><div class=\"line\">        &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品价格'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_price'</span>&#125;  </div><div class=\"line\">    ]);    </div><div class=\"line\"> <span class=\"keyword\">var</span> store = <span class=\"keyword\">new</span> Ext.data.Store(&#123;  </div><div class=\"line\">        <span class=\"attr\">proxy</span>: <span class=\"keyword\">new</span> Ext.data.HttpProxy(&#123;<span class=\"attr\">url</span>:<span class=\"string\">'../GridServlet'</span>&#125;),  </div><div class=\"line\">        <span class=\"attr\">reader</span>: <span class=\"keyword\">new</span> Ext.data.JsonReader(&#123;  </div><div class=\"line\">         <span class=\"attr\">totalProperty</span>:<span class=\"string\">'total'</span>,  </div><div class=\"line\">         <span class=\"attr\">root</span>:<span class=\"string\">'root'</span>  </div><div class=\"line\">        &#125;,[  </div><div class=\"line\">           &#123;<span class=\"attr\">name</span>:<span class=\"string\">'product_id'</span>&#125;,  </div><div class=\"line\">           &#123;<span class=\"attr\">name</span>:<span class=\"string\">'product_name'</span>&#125;,  </div><div class=\"line\">           &#123;<span class=\"attr\">name</span>:<span class=\"string\">'product_price'</span>&#125;  </div><div class=\"line\">        ])   </div><div class=\"line\">    &#125;);  </div><div class=\"line\">store.load(&#123;<span class=\"attr\">params</span>:&#123;<span class=\"attr\">start</span>:<span class=\"number\">0</span>,<span class=\"attr\">limit</span>:<span class=\"number\">10</span>&#125;&#125;);  </div><div class=\"line\">    <span class=\"keyword\">var</span> gridPanel = <span class=\"keyword\">new</span> Ext.grid.GridPanel(&#123;  </div><div class=\"line\">        <span class=\"attr\">autoHeight</span>: <span class=\"literal\">true</span>,  </div><div class=\"line\">        <span class=\"attr\">renderTo</span>: <span class=\"string\">'grid'</span>,          </div><div class=\"line\">        <span class=\"attr\">store</span>: store,  </div><div class=\"line\">        <span class=\"attr\">cm</span>: cm,  </div><div class=\"line\">        <span class=\"attr\">sm</span>:mm,  </div><div class=\"line\">        <span class=\"attr\">bbar</span>:<span class=\"keyword\">new</span> Ext.PagingToolbar(&#123;  </div><div class=\"line\">         <span class=\"attr\">pageSize</span>:<span class=\"number\">10</span>,  </div><div class=\"line\">         <span class=\"attr\">store</span>:store,  </div><div class=\"line\">         <span class=\"attr\">displayInfo</span>:<span class=\"literal\">true</span>,  </div><div class=\"line\">         <span class=\"attr\">displayMsg</span>:<span class=\"string\">'显示记录 &#123;0&#125; - &#123;1&#125; of &#123;2&#125;'</span>,  </div><div class=\"line\">         <span class=\"attr\">emptyMsg</span>:<span class=\"string\">\"没有记录\"</span>  </div><div class=\"line\">        &#125;)  </div><div class=\"line\">    &#125;);   </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>这样一个简单的ExtJS Grid分页就实现了。要想让用户体验更高就应该让用户可以在自己刚刚查询出来的数据表格上进行数据编辑，可以进行增删改查。可编辑的表格就在在想要能编辑的列里注册一个TextField组件，这个组件需要使用Ext.grid.GridEditor类来封装。  </p>\n<h2 id=\"第一个可编辑表格\"><a href=\"#第一个可编辑表格\" class=\"headerlink\" title=\"第一个可编辑表格\"></a>第一个可编辑表格</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">cm = <span class=\"keyword\">new</span> Ext.grid.ColumnModel([  </div><div class=\"line\"><span class=\"keyword\">new</span> Ext.grid.RowNumberer(),  </div><div class=\"line\"> &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品编号'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_id'</span>&#125;,  </div><div class=\"line\"> &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品名称'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_name'</span>,<span class=\"attr\">editor</span>:<span class=\"keyword\">new</span> Ext.grid.GridEditor(<span class=\"keyword\">new</span> Ext.form.TextField(&#123;<span class=\"attr\">allowBlank</span>:<span class=\"literal\">false</span>&#125;))&#125;,  </div><div class=\"line\"> &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品价格'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_price'</span>,<span class=\"attr\">editor</span>:<span class=\"keyword\">new</span> Ext.grid.GridEditor(<span class=\"keyword\">new</span> Ext.form.TextField(&#123;<span class=\"attr\">allowBlank</span>:<span class=\"literal\">false</span>&#125;))&#125;  </div><div class=\"line\">]);</div></pre></td></tr></table></figure>\n<p>使用了可编辑的对象就需要建立一个Ext.grid.EditorGridPanel来代替Ext.grid.GridPanel。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">gridPanel = <span class=\"keyword\">new</span> Ext.grid.EditorGridPanel(&#123;  </div><div class=\"line\">  <span class=\"attr\">autoHeight</span>: <span class=\"literal\">true</span>,  </div><div class=\"line\">  <span class=\"attr\">renderTo</span>: <span class=\"string\">'grid'</span>,      </div><div class=\"line\">  <span class=\"attr\">store</span>: store,  </div><div class=\"line\">  <span class=\"attr\">cm</span>: cm,  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>这时默认的是双击编辑，如果想设置成单击编辑的话就需要做如下改动。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">gridPanel = <span class=\"keyword\">new</span> Ext.grid.EditorGridPanel(&#123;  </div><div class=\"line\">  <span class=\"attr\">autoHeight</span>: <span class=\"literal\">true</span>,  </div><div class=\"line\">  <span class=\"attr\">renderTo</span>: <span class=\"string\">'grid'</span>,          </div><div class=\"line\">  <span class=\"attr\">store</span>: store,  </div><div class=\"line\">  <span class=\"comment\">//值为1的时候就是单击，2就是双击。  </span></div><div class=\"line\">  clicksToEdit:<span class=\"number\">1</span>,  </div><div class=\"line\">  <span class=\"attr\">cm</span>: cm,  </div><div class=\"line\">  <span class=\"attr\">sm</span>:mm  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h2 id=\"向表格中添加新行和删除一行\"><a href=\"#向表格中添加新行和删除一行\" class=\"headerlink\" title=\"向表格中添加新行和删除一行\"></a>向表格中添加新行和删除一行</h2><p>添加新的一行是使用Store类的insert方法插入一个新的Ext.data.Record对象，删除用的是remove方法,为了使插入的新行所有列都能编辑，我们要把所有列都设为可编辑。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">cm = <span class=\"keyword\">new</span> Ext.grid.ColumnModel([  </div><div class=\"line\">  <span class=\"keyword\">new</span> Ext.grid.RowNumberer(),  </div><div class=\"line\">  mm,  </div><div class=\"line\">  &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品编号'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_id'</span>,<span class=\"attr\">editor</span>:<span class=\"keyword\">new</span> Ext.grid.GridEditor(<span class=\"keyword\">new</span> Ext.form.TextField(&#123;<span class=\"attr\">allowBlank</span>:<span class=\"literal\">false</span>&#125;))&#125;,  </div><div class=\"line\">  &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品名称'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_name'</span>,<span class=\"attr\">editor</span>:<span class=\"keyword\">new</span> Ext.grid.GridEditor(<span class=\"keyword\">new</span> Ext.form.TextField(&#123;<span class=\"attr\">allowBlank</span>:<span class=\"literal\">false</span>&#125;))&#125;,  </div><div class=\"line\">  &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品价格'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_price'</span>,<span class=\"attr\">editor</span>:<span class=\"keyword\">new</span> Ext.grid.GridEditor(<span class=\"keyword\">new</span> Ext.form.TextField(&#123;<span class=\"attr\">allowBlank</span>:<span class=\"literal\">false</span>&#125;))&#125;  </div><div class=\"line\">]);</div></pre></td></tr></table></figure></p>\n<p>将所想要编辑的列添加Ext.grid.GridEditor对象就能是该列可编辑,接着我们要在表格组件的上方添加两个按键，分别是增加和删除。代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> gridPanel = <span class=\"keyword\">new</span> Ext.grid.EditorGridPanel(&#123;    </div><div class=\"line\">       <span class=\"attr\">autoHeight</span>: <span class=\"literal\">true</span>,      </div><div class=\"line\">       <span class=\"attr\">renderTo</span>: <span class=\"string\">'grid'</span>,      </div><div class=\"line\">       <span class=\"attr\">store</span>: store,      </div><div class=\"line\">       <span class=\"attr\">cm</span>: cm,    </div><div class=\"line\">       <span class=\"attr\">tbar</span>: <span class=\"keyword\">new</span> Ext.Toolbar([<span class=\"string\">'-'</span>, &#123;      </div><div class=\"line\">           <span class=\"attr\">text</span>: <span class=\"string\">'添加一行'</span>,      </div><div class=\"line\">           <span class=\"attr\">handler</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;   </div><div class=\"line\">               <span class=\"keyword\">var</span> record = <span class=\"keyword\">new</span> Ext.data.Record(&#123;     </div><div class=\"line\">                <span class=\"attr\">product_id</span>:<span class=\"string\">''</span>,  </div><div class=\"line\">                <span class=\"attr\">product_name</span>:<span class=\"string\">''</span>,  </div><div class=\"line\">                <span class=\"attr\">product_price</span>:<span class=\"string\">''</span>  </div><div class=\"line\">               &#125;);  </div><div class=\"line\">               gridPanel.stopEditing();                  </div><div class=\"line\">               store.insert(store.getCount(),record);  </div><div class=\"line\">               gridPanel.startEditing(store.getCount()<span class=\"number\">-1</span>,<span class=\"number\">0</span>);  </div><div class=\"line\">           &#125;  </div><div class=\"line\">       &#125;, <span class=\"string\">'-'</span>, &#123;  </div><div class=\"line\">           <span class=\"attr\">text</span>: <span class=\"string\">'删除一行'</span>,  </div><div class=\"line\">           <span class=\"attr\">handler</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;  </div><div class=\"line\">               Ext.Msg.confirm(<span class=\"string\">'信息'</span>, <span class=\"string\">'是否删除当前记录？'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">btn</span>)</span>&#123;  </div><div class=\"line\">                   <span class=\"keyword\">if</span> (btn == <span class=\"string\">'yes'</span>) &#123;  </div><div class=\"line\">                       <span class=\"keyword\">var</span> sm = gridPanel.getSelectionModel();  </div><div class=\"line\">                       <span class=\"keyword\">var</span> cell = sm.getSelectedCell();  </div><div class=\"line\">                       <span class=\"keyword\">var</span> record = store.getAt(cell[<span class=\"number\">0</span>]);  </div><div class=\"line\">                       store.remove(record);  </div><div class=\"line\">                   &#125;  </div><div class=\"line\">               &#125;);    </div><div class=\"line\">           &#125;      </div><div class=\"line\">       &#125;, <span class=\"string\">'-'</span>])   </div><div class=\"line\">   &#125;);</div></pre></td></tr></table></figure></p>\n<h2 id=\"保存数据\"><a href=\"#保存数据\" class=\"headerlink\" title=\"保存数据\"></a>保存数据</h2><p>论是添加或是修改了表格中的数据后，一般我们都要将结果提交到服务器，在ExtJS中Slice类就是干这个用的。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;  </div><div class=\"line\">           <span class=\"attr\">text</span>: <span class=\"string\">'保存'</span>,    </div><div class=\"line\">           <span class=\"attr\">handler</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;   </div><div class=\"line\">               <span class=\"keyword\">var</span> m = store.modified.slice(<span class=\"number\">0</span>);   </div><div class=\"line\">               <span class=\"keyword\">var</span> data = [];     </div><div class=\"line\">               Ext.each(m, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>) </span>&#123;   </div><div class=\"line\">                   data.push(item.data);      </div><div class=\"line\">               &#125;);    </div><div class=\"line\">               alert(Ext.encode(data));   </div><div class=\"line\">               Ext.lib.Ajax.request(      </div><div class=\"line\">                   <span class=\"string\">'POST'</span>,    </div><div class=\"line\">                   <span class=\"string\">'SaveData'</span>,    </div><div class=\"line\">                   &#123;<span class=\"attr\">success</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>)</span>&#123;      </div><div class=\"line\">                       Ext.Msg.alert(<span class=\"string\">'信息'</span>, response.responseText, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;     </div><div class=\"line\">                           store.reload();    </div><div class=\"line\">                       &#125;);    </div><div class=\"line\">                   &#125;&#125;,    </div><div class=\"line\">                   <span class=\"string\">'row='</span> + <span class=\"built_in\">encodeURIComponent</span>(Ext.encode(data))      </div><div class=\"line\">               );     </div><div class=\"line\">           &#125;      </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"对记录进行分组\"><a href=\"#对记录进行分组\" class=\"headerlink\" title=\"对记录进行分组\"></a>对记录进行分组</h2><p>此外ExtJS Grid还可以对数据进行分组，要建立一个按列分组的表格就要使用Ext.data.GroupingStore这个类。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> store = <span class=\"keyword\">new</span> Ext.data.GroupingStore(&#123;  </div><div class=\"line\">    <span class=\"attr\">reader</span>: reader,  </div><div class=\"line\">    <span class=\"attr\">data</span>: data,  </div><div class=\"line\">    <span class=\"attr\">groupField</span>: <span class=\"string\">'sex'</span>,  </div><div class=\"line\">    <span class=\"attr\">sortInfo</span>: &#123;<span class=\"attr\">field</span>: <span class=\"string\">'name'</span>, <span class=\"attr\">direction</span>: <span class=\"string\">\"ASC\"</span>&#125;  </div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> grid = <span class=\"keyword\">new</span> Ext.grid.GridPanel(&#123;  </div><div class=\"line\">    <span class=\"attr\">autoHeight</span>: <span class=\"literal\">true</span>,  </div><div class=\"line\">    <span class=\"attr\">store</span>: store,  </div><div class=\"line\">    <span class=\"attr\">columns</span>: columns,  </div><div class=\"line\">    <span class=\"attr\">view</span>: <span class=\"keyword\">new</span> Ext.grid.GroupingView(),  </div><div class=\"line\">    <span class=\"attr\">renderTo</span>: <span class=\"string\">'grid'</span>  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>ExtJS各种各样的组件和控件有很多，做的都很漂亮，还可以自己定制样式，使用继承来拓展ExtJS的功能，ExtJS的介绍就到这了，更多的功能我今后还会继续研究的。</p>\n","excerpt":"<p>很多时候我们表格里显示的数据是从后台查询出来的海量数据，那么海量的数据显示在表格里用户的体验肯定会很差，效率也会很低。ExtJS为了解决这个问题，就给我们提供了一个非常强大的分页组件。今天我们就研究一下ExtJS的分页技术。","more":"</p>\n<h2 id=\"为表格添加分页组件\"><a href=\"#为表格添加分页组件\" class=\"headerlink\" title=\"为表格添加分页组件\"></a>为表格添加分页组件</h2><p>要为表格添加分页组件，就要先创建Ext.PagingToolbar类的实例对象，然后将它添加到Panel中去。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">gridPanel = <span class=\"keyword\">new</span> Ext.grid.GridPanel(&#123;  </div><div class=\"line\">      <span class=\"attr\">autoHeight</span>: <span class=\"literal\">true</span>,  </div><div class=\"line\">      <span class=\"attr\">renderTo</span>: <span class=\"string\">'grid'</span>,   </div><div class=\"line\">      <span class=\"attr\">store</span>: store,       </div><div class=\"line\">      <span class=\"attr\">cm</span>: cm,   </div><div class=\"line\">      <span class=\"attr\">sm</span>:mm,  </div><div class=\"line\">      <span class=\"attr\">bbar</span>:<span class=\"keyword\">new</span> Ext.PagingToolbar(&#123;  </div><div class=\"line\">      <span class=\"attr\">pageSize</span>:<span class=\"number\">3</span>,  </div><div class=\"line\">      <span class=\"attr\">store</span>:store,  </div><div class=\"line\">      <span class=\"attr\">displayInfo</span>:<span class=\"literal\">true</span>,  </div><div class=\"line\">      <span class=\"attr\">displayMsg</span>:<span class=\"string\">'显示记录 &#123;0&#125; - &#123;1&#125; of &#123;2&#125;'</span>,  </div><div class=\"line\">      <span class=\"attr\">emptyMsg</span>:<span class=\"string\">\"没有记录\"</span>  </div><div class=\"line\">      &#125;)  </div><div class=\"line\"> &#125;);</div></pre></td></tr></table></figure></p>\n<p>PagingToolbar类的属性描述：</p>\n<ul>\n<li>pageSize：每页显示的记录条数。</li>\n<li>displayInfo：是否显示记录信息。</li>\n<li>displayMsg：该属性值为true时，该属性才有效。{0}：表示当前显示的记录起始数。{1}：表示显示记录数的结尾数。{2}：表示总共多少记录。</li>\n<li>emptyMsg：当没有记录的时候显示的文本信息。  </li>\n</ul>\n<h2 id=\"从服务器端获得分页数据\"><a href=\"#从服务器端获得分页数据\" class=\"headerlink\" title=\"从服务器端获得分页数据\"></a>从服务器端获得分页数据</h2><p>如果使用静态数据，Grid每次都会将所有数据显示。所以这里我们就编写一个Servlet来生成动态数据生成Grid。Servlet将接受两个请求数据start和limit。Start表示当前页显示记录的起始位置，limit表示每页显示的记录数。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GridServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;  </div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;      </div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span>  </div><div class=\"line\">   <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;  </div><div class=\"line\">  response.setContentType(<span class=\"string\">\"text/html;charset=gbk\"</span>);  </div><div class=\"line\">  PrintWriter out = response.getWriter();  </div><div class=\"line\">  String start = request.getParameter(<span class=\"string\">\"start\"</span>);  </div><div class=\"line\">  String limit = request.getParameter(<span class=\"string\">\"limit\"</span>);  </div><div class=\"line\">  <span class=\"keyword\">int</span> index = Integer.parseInt(start);  </div><div class=\"line\">  <span class=\"keyword\">int</span> pageSize = Integer.parseInt(limit);  </div><div class=\"line\">  <span class=\"keyword\">int</span> total = <span class=\"number\">100000</span>;  </div><div class=\"line\">  String jsonStr = <span class=\"string\">\"&#123;total:\"</span> + total + <span class=\"string\">\",root:[\"</span>;  </div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = index; i &lt; pageSize + index; i++)  </div><div class=\"line\">  &#123;  </div><div class=\"line\">   <span class=\"keyword\">int</span> productIndex = i + <span class=\"number\">1</span>;  </div><div class=\"line\">   jsonStr += <span class=\"string\">\"&#123;product_id:\"</span> + productIndex + <span class=\"string\">\",product_name:'产品\"</span>  </div><div class=\"line\">     + productIndex + <span class=\"string\">\"',product_price:'价格\"</span> + productIndex  </div><div class=\"line\">     + <span class=\"string\">\"'&#125;\"</span>;  </div><div class=\"line\">   <span class=\"keyword\">if</span> (i != pageSize + index - <span class=\"number\">1</span>)  </div><div class=\"line\">    jsonStr += <span class=\"string\">\",\"</span>;  </div><div class=\"line\">  &#125;  </div><div class=\"line\">  jsonStr += <span class=\"string\">\"]&#125;\"</span>;  </div><div class=\"line\">  out.println(jsonStr);  </div><div class=\"line\"> &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>要通过服务器来接收数据生成表格，就必须使用HttpProxy来制定URL。还有，服务器传递过来的数据是Json格式的，就不能使用ArrayReader了，需要使用的是JsonReader。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">Ext.onReady(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;  </div><div class=\"line\"> <span class=\"keyword\">var</span> mm = <span class=\"keyword\">new</span> Ext.grid.CheckboxSelectionModel();  </div><div class=\"line\">    <span class=\"keyword\">var</span> cm = <span class=\"keyword\">new</span> Ext.grid.ColumnModel([  </div><div class=\"line\">        <span class=\"keyword\">new</span> Ext.grid.RowNumberer(),  </div><div class=\"line\">        mm,  </div><div class=\"line\">        &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品编号'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_id'</span>&#125;,  </div><div class=\"line\">        &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品名称'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_name'</span>&#125;,  </div><div class=\"line\">        &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品价格'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_price'</span>&#125;  </div><div class=\"line\">    ]);    </div><div class=\"line\"> <span class=\"keyword\">var</span> store = <span class=\"keyword\">new</span> Ext.data.Store(&#123;  </div><div class=\"line\">        <span class=\"attr\">proxy</span>: <span class=\"keyword\">new</span> Ext.data.HttpProxy(&#123;<span class=\"attr\">url</span>:<span class=\"string\">'../GridServlet'</span>&#125;),  </div><div class=\"line\">        <span class=\"attr\">reader</span>: <span class=\"keyword\">new</span> Ext.data.JsonReader(&#123;  </div><div class=\"line\">         <span class=\"attr\">totalProperty</span>:<span class=\"string\">'total'</span>,  </div><div class=\"line\">         <span class=\"attr\">root</span>:<span class=\"string\">'root'</span>  </div><div class=\"line\">        &#125;,[  </div><div class=\"line\">           &#123;<span class=\"attr\">name</span>:<span class=\"string\">'product_id'</span>&#125;,  </div><div class=\"line\">           &#123;<span class=\"attr\">name</span>:<span class=\"string\">'product_name'</span>&#125;,  </div><div class=\"line\">           &#123;<span class=\"attr\">name</span>:<span class=\"string\">'product_price'</span>&#125;  </div><div class=\"line\">        ])   </div><div class=\"line\">    &#125;);  </div><div class=\"line\">store.load(&#123;<span class=\"attr\">params</span>:&#123;<span class=\"attr\">start</span>:<span class=\"number\">0</span>,<span class=\"attr\">limit</span>:<span class=\"number\">10</span>&#125;&#125;);  </div><div class=\"line\">    <span class=\"keyword\">var</span> gridPanel = <span class=\"keyword\">new</span> Ext.grid.GridPanel(&#123;  </div><div class=\"line\">        <span class=\"attr\">autoHeight</span>: <span class=\"literal\">true</span>,  </div><div class=\"line\">        <span class=\"attr\">renderTo</span>: <span class=\"string\">'grid'</span>,          </div><div class=\"line\">        <span class=\"attr\">store</span>: store,  </div><div class=\"line\">        <span class=\"attr\">cm</span>: cm,  </div><div class=\"line\">        <span class=\"attr\">sm</span>:mm,  </div><div class=\"line\">        <span class=\"attr\">bbar</span>:<span class=\"keyword\">new</span> Ext.PagingToolbar(&#123;  </div><div class=\"line\">         <span class=\"attr\">pageSize</span>:<span class=\"number\">10</span>,  </div><div class=\"line\">         <span class=\"attr\">store</span>:store,  </div><div class=\"line\">         <span class=\"attr\">displayInfo</span>:<span class=\"literal\">true</span>,  </div><div class=\"line\">         <span class=\"attr\">displayMsg</span>:<span class=\"string\">'显示记录 &#123;0&#125; - &#123;1&#125; of &#123;2&#125;'</span>,  </div><div class=\"line\">         <span class=\"attr\">emptyMsg</span>:<span class=\"string\">\"没有记录\"</span>  </div><div class=\"line\">        &#125;)  </div><div class=\"line\">    &#125;);   </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>这样一个简单的ExtJS Grid分页就实现了。要想让用户体验更高就应该让用户可以在自己刚刚查询出来的数据表格上进行数据编辑，可以进行增删改查。可编辑的表格就在在想要能编辑的列里注册一个TextField组件，这个组件需要使用Ext.grid.GridEditor类来封装。  </p>\n<h2 id=\"第一个可编辑表格\"><a href=\"#第一个可编辑表格\" class=\"headerlink\" title=\"第一个可编辑表格\"></a>第一个可编辑表格</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">cm = <span class=\"keyword\">new</span> Ext.grid.ColumnModel([  </div><div class=\"line\"><span class=\"keyword\">new</span> Ext.grid.RowNumberer(),  </div><div class=\"line\"> &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品编号'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_id'</span>&#125;,  </div><div class=\"line\"> &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品名称'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_name'</span>,<span class=\"attr\">editor</span>:<span class=\"keyword\">new</span> Ext.grid.GridEditor(<span class=\"keyword\">new</span> Ext.form.TextField(&#123;<span class=\"attr\">allowBlank</span>:<span class=\"literal\">false</span>&#125;))&#125;,  </div><div class=\"line\"> &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品价格'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_price'</span>,<span class=\"attr\">editor</span>:<span class=\"keyword\">new</span> Ext.grid.GridEditor(<span class=\"keyword\">new</span> Ext.form.TextField(&#123;<span class=\"attr\">allowBlank</span>:<span class=\"literal\">false</span>&#125;))&#125;  </div><div class=\"line\">]);</div></pre></td></tr></table></figure>\n<p>使用了可编辑的对象就需要建立一个Ext.grid.EditorGridPanel来代替Ext.grid.GridPanel。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">gridPanel = <span class=\"keyword\">new</span> Ext.grid.EditorGridPanel(&#123;  </div><div class=\"line\">  <span class=\"attr\">autoHeight</span>: <span class=\"literal\">true</span>,  </div><div class=\"line\">  <span class=\"attr\">renderTo</span>: <span class=\"string\">'grid'</span>,      </div><div class=\"line\">  <span class=\"attr\">store</span>: store,  </div><div class=\"line\">  <span class=\"attr\">cm</span>: cm,  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>这时默认的是双击编辑，如果想设置成单击编辑的话就需要做如下改动。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">gridPanel = <span class=\"keyword\">new</span> Ext.grid.EditorGridPanel(&#123;  </div><div class=\"line\">  <span class=\"attr\">autoHeight</span>: <span class=\"literal\">true</span>,  </div><div class=\"line\">  <span class=\"attr\">renderTo</span>: <span class=\"string\">'grid'</span>,          </div><div class=\"line\">  <span class=\"attr\">store</span>: store,  </div><div class=\"line\">  <span class=\"comment\">//值为1的时候就是单击，2就是双击。  </span></div><div class=\"line\">  clicksToEdit:<span class=\"number\">1</span>,  </div><div class=\"line\">  <span class=\"attr\">cm</span>: cm,  </div><div class=\"line\">  <span class=\"attr\">sm</span>:mm  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h2 id=\"向表格中添加新行和删除一行\"><a href=\"#向表格中添加新行和删除一行\" class=\"headerlink\" title=\"向表格中添加新行和删除一行\"></a>向表格中添加新行和删除一行</h2><p>添加新的一行是使用Store类的insert方法插入一个新的Ext.data.Record对象，删除用的是remove方法,为了使插入的新行所有列都能编辑，我们要把所有列都设为可编辑。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">cm = <span class=\"keyword\">new</span> Ext.grid.ColumnModel([  </div><div class=\"line\">  <span class=\"keyword\">new</span> Ext.grid.RowNumberer(),  </div><div class=\"line\">  mm,  </div><div class=\"line\">  &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品编号'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_id'</span>,<span class=\"attr\">editor</span>:<span class=\"keyword\">new</span> Ext.grid.GridEditor(<span class=\"keyword\">new</span> Ext.form.TextField(&#123;<span class=\"attr\">allowBlank</span>:<span class=\"literal\">false</span>&#125;))&#125;,  </div><div class=\"line\">  &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品名称'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_name'</span>,<span class=\"attr\">editor</span>:<span class=\"keyword\">new</span> Ext.grid.GridEditor(<span class=\"keyword\">new</span> Ext.form.TextField(&#123;<span class=\"attr\">allowBlank</span>:<span class=\"literal\">false</span>&#125;))&#125;,  </div><div class=\"line\">  &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品价格'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_price'</span>,<span class=\"attr\">editor</span>:<span class=\"keyword\">new</span> Ext.grid.GridEditor(<span class=\"keyword\">new</span> Ext.form.TextField(&#123;<span class=\"attr\">allowBlank</span>:<span class=\"literal\">false</span>&#125;))&#125;  </div><div class=\"line\">]);</div></pre></td></tr></table></figure></p>\n<p>将所想要编辑的列添加Ext.grid.GridEditor对象就能是该列可编辑,接着我们要在表格组件的上方添加两个按键，分别是增加和删除。代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> gridPanel = <span class=\"keyword\">new</span> Ext.grid.EditorGridPanel(&#123;    </div><div class=\"line\">       <span class=\"attr\">autoHeight</span>: <span class=\"literal\">true</span>,      </div><div class=\"line\">       <span class=\"attr\">renderTo</span>: <span class=\"string\">'grid'</span>,      </div><div class=\"line\">       <span class=\"attr\">store</span>: store,      </div><div class=\"line\">       <span class=\"attr\">cm</span>: cm,    </div><div class=\"line\">       <span class=\"attr\">tbar</span>: <span class=\"keyword\">new</span> Ext.Toolbar([<span class=\"string\">'-'</span>, &#123;      </div><div class=\"line\">           <span class=\"attr\">text</span>: <span class=\"string\">'添加一行'</span>,      </div><div class=\"line\">           <span class=\"attr\">handler</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;   </div><div class=\"line\">               <span class=\"keyword\">var</span> record = <span class=\"keyword\">new</span> Ext.data.Record(&#123;     </div><div class=\"line\">                <span class=\"attr\">product_id</span>:<span class=\"string\">''</span>,  </div><div class=\"line\">                <span class=\"attr\">product_name</span>:<span class=\"string\">''</span>,  </div><div class=\"line\">                <span class=\"attr\">product_price</span>:<span class=\"string\">''</span>  </div><div class=\"line\">               &#125;);  </div><div class=\"line\">               gridPanel.stopEditing();                  </div><div class=\"line\">               store.insert(store.getCount(),record);  </div><div class=\"line\">               gridPanel.startEditing(store.getCount()<span class=\"number\">-1</span>,<span class=\"number\">0</span>);  </div><div class=\"line\">           &#125;  </div><div class=\"line\">       &#125;, <span class=\"string\">'-'</span>, &#123;  </div><div class=\"line\">           <span class=\"attr\">text</span>: <span class=\"string\">'删除一行'</span>,  </div><div class=\"line\">           <span class=\"attr\">handler</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;  </div><div class=\"line\">               Ext.Msg.confirm(<span class=\"string\">'信息'</span>, <span class=\"string\">'是否删除当前记录？'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">btn</span>)</span>&#123;  </div><div class=\"line\">                   <span class=\"keyword\">if</span> (btn == <span class=\"string\">'yes'</span>) &#123;  </div><div class=\"line\">                       <span class=\"keyword\">var</span> sm = gridPanel.getSelectionModel();  </div><div class=\"line\">                       <span class=\"keyword\">var</span> cell = sm.getSelectedCell();  </div><div class=\"line\">                       <span class=\"keyword\">var</span> record = store.getAt(cell[<span class=\"number\">0</span>]);  </div><div class=\"line\">                       store.remove(record);  </div><div class=\"line\">                   &#125;  </div><div class=\"line\">               &#125;);    </div><div class=\"line\">           &#125;      </div><div class=\"line\">       &#125;, <span class=\"string\">'-'</span>])   </div><div class=\"line\">   &#125;);</div></pre></td></tr></table></figure></p>\n<h2 id=\"保存数据\"><a href=\"#保存数据\" class=\"headerlink\" title=\"保存数据\"></a>保存数据</h2><p>论是添加或是修改了表格中的数据后，一般我们都要将结果提交到服务器，在ExtJS中Slice类就是干这个用的。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;  </div><div class=\"line\">           <span class=\"attr\">text</span>: <span class=\"string\">'保存'</span>,    </div><div class=\"line\">           <span class=\"attr\">handler</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;   </div><div class=\"line\">               <span class=\"keyword\">var</span> m = store.modified.slice(<span class=\"number\">0</span>);   </div><div class=\"line\">               <span class=\"keyword\">var</span> data = [];     </div><div class=\"line\">               Ext.each(m, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>) </span>&#123;   </div><div class=\"line\">                   data.push(item.data);      </div><div class=\"line\">               &#125;);    </div><div class=\"line\">               alert(Ext.encode(data));   </div><div class=\"line\">               Ext.lib.Ajax.request(      </div><div class=\"line\">                   <span class=\"string\">'POST'</span>,    </div><div class=\"line\">                   <span class=\"string\">'SaveData'</span>,    </div><div class=\"line\">                   &#123;<span class=\"attr\">success</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>)</span>&#123;      </div><div class=\"line\">                       Ext.Msg.alert(<span class=\"string\">'信息'</span>, response.responseText, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;     </div><div class=\"line\">                           store.reload();    </div><div class=\"line\">                       &#125;);    </div><div class=\"line\">                   &#125;&#125;,    </div><div class=\"line\">                   <span class=\"string\">'row='</span> + <span class=\"built_in\">encodeURIComponent</span>(Ext.encode(data))      </div><div class=\"line\">               );     </div><div class=\"line\">           &#125;      </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"对记录进行分组\"><a href=\"#对记录进行分组\" class=\"headerlink\" title=\"对记录进行分组\"></a>对记录进行分组</h2><p>此外ExtJS Grid还可以对数据进行分组，要建立一个按列分组的表格就要使用Ext.data.GroupingStore这个类。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> store = <span class=\"keyword\">new</span> Ext.data.GroupingStore(&#123;  </div><div class=\"line\">    <span class=\"attr\">reader</span>: reader,  </div><div class=\"line\">    <span class=\"attr\">data</span>: data,  </div><div class=\"line\">    <span class=\"attr\">groupField</span>: <span class=\"string\">'sex'</span>,  </div><div class=\"line\">    <span class=\"attr\">sortInfo</span>: &#123;<span class=\"attr\">field</span>: <span class=\"string\">'name'</span>, <span class=\"attr\">direction</span>: <span class=\"string\">\"ASC\"</span>&#125;  </div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> grid = <span class=\"keyword\">new</span> Ext.grid.GridPanel(&#123;  </div><div class=\"line\">    <span class=\"attr\">autoHeight</span>: <span class=\"literal\">true</span>,  </div><div class=\"line\">    <span class=\"attr\">store</span>: store,  </div><div class=\"line\">    <span class=\"attr\">columns</span>: columns,  </div><div class=\"line\">    <span class=\"attr\">view</span>: <span class=\"keyword\">new</span> Ext.grid.GroupingView(),  </div><div class=\"line\">    <span class=\"attr\">renderTo</span>: <span class=\"string\">'grid'</span>  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>ExtJS各种各样的组件和控件有很多，做的都很漂亮，还可以自己定制样式，使用继承来拓展ExtJS的功能，ExtJS的介绍就到这了，更多的功能我今后还会继续研究的。</p>"},{"title":"Java多线程实现生产者与消费者","date":"2016-11-27T12:32:32.000Z","_content":"生产者与消费者问题是指创建一组“生产者”线程和一组“消费者”线程，让他们进行同步互斥的运行，生产者生产一个产品，消费者就消费掉一个产品，下面我就用Java的多线程来实现这个课题。<!--more-->本例子的ChuShi代表生产者，XiaoFei代表消费者。首先是生产者厨师的代码：\n``` java\npackage thread;  \npublic class ChuShi extends Thread{  \n      \n    private GongNeng g;  \n    public ChuShi(GongNeng g){    \n        this.g = g;  \n    }  \n      \n    public void run(){  \n        for(;;){  \n              \n            g.lao();  \n              \n        }  \n    }  \n} \n```\n然后是消费者的代码：  \n``` java\npackage thread;  \npublic class XiaoFei extends Thread{  \n      \n    private GongNeng g;  \n      \n    public XiaoFei(GongNeng g){  \n          \n        this.g = g;  \n          \n    }  \n      \n    public void run(){  \n        for(;;){  \n                  \n            g.chi();  \n              \n        }  \n    }  \n}\n```\n接着是封装了生产者的生产方法和消费者的消费方法的类，该类中的方法要使用synchronized关键字，就可以使run方法同步，也就是说，对于同一个Java类的对象实例，run方法同时只能被一个线程调用，并当前的run执行完后，才能被其他的线程调用。需要注意的是每个线程run()方法调用的synchronized修饰的方法必须是一个实例的方法才能保证同步，所以这个里将生产者和消费者的功能封装在一个实例中，在将他们的实例分别传给生产者和消费者，这样他们就能够同步了，下面是同步的方法代码：\n``` java\npackage thread;  \npublic class GongNeng {  \n    private Bing b;  \n      \n    public GongNeng(Bing b){      \n        this.b = b;   \n    }  \n      \n    public synchronized void lao(){  \n          \n        if(b.getBing()<10){  \n              \n            try {  \n                Thread.sleep(1500);  \n            } catch (InterruptedException e) {  \n                // TODO Auto-generated catch block  \n                e.printStackTrace();  \n            }  \n              \n            System.out.println(Thread.currentThread()+  \n                  \n            \":厨师烙了一张饼，盘里还剩\"+(b.getBing()+1)+\"张饼\");  \n              \n            b.setBing(b.getBing()+1);  \n        }  \n    }  \n      \n    public synchronized void chi(){  \n        if(b.getBing()>0){  \n              \n            try {  \n                Thread.sleep(2000);  \n            } catch (InterruptedException e) {  \n                // TODO Auto-generated catch block  \n                e.printStackTrace();  \n            }  \n            System.out.println(Thread.currentThread()+  \n                  \n            \":消费者吃了一张饼，盘里还剩\"+(b.getBing()-1)+\"张饼\");  \n              \n            b.setBing(b.getBing()-1);  \n              \n        }  \n    }  \n} \n```\n还有他们对一个消费品进行同步的操作，在这里我们用的是饼：\n``` java\npackage thread;  \npublic class Bing {  \n    private int bing = 10;  \n    public int getBing() {  \n        return bing;  \n    }  \n    public void setBing(int bing) {  \n        this.bing = bing;  \n    }  \n      \n}\n```\n下面是主入口方法进行测试：\n``` java\npackage thread;  \npublic class Test {  \n    public static void main(String[] args) {  \n          \n        //创建饼的实例  \n        Bing b = new Bing();  \n        //创建同步的吃饼和烙饼实例  \n        GongNeng g = new GongNeng(b);  \n        //创建线程两个消费者两个生产者  \n        ChuShi c1 = new ChuShi(g);  \n        ChuShi c2 = new ChuShi(g);  \n        XiaoFei x1 = new XiaoFei(g);  \n        XiaoFei x2 = new XiaoFei(g);  \n          \n        //启动线程  \n        c1.start();  \n        c2.start();  \n        x1.start();  \n        x2.start();  \n    }  \n} \n```\n 这个例子就模拟了生产与消费的问题。\n","source":"_posts/Java多线程实现生产者与消费者.md","raw":"---\ntitle: Java多线程实现生产者与消费者\ndate: 2016-11-27 20:32:32\ntags: 多线程\ncategories: java\n---\n生产者与消费者问题是指创建一组“生产者”线程和一组“消费者”线程，让他们进行同步互斥的运行，生产者生产一个产品，消费者就消费掉一个产品，下面我就用Java的多线程来实现这个课题。<!--more-->本例子的ChuShi代表生产者，XiaoFei代表消费者。首先是生产者厨师的代码：\n``` java\npackage thread;  \npublic class ChuShi extends Thread{  \n      \n    private GongNeng g;  \n    public ChuShi(GongNeng g){    \n        this.g = g;  \n    }  \n      \n    public void run(){  \n        for(;;){  \n              \n            g.lao();  \n              \n        }  \n    }  \n} \n```\n然后是消费者的代码：  \n``` java\npackage thread;  \npublic class XiaoFei extends Thread{  \n      \n    private GongNeng g;  \n      \n    public XiaoFei(GongNeng g){  \n          \n        this.g = g;  \n          \n    }  \n      \n    public void run(){  \n        for(;;){  \n                  \n            g.chi();  \n              \n        }  \n    }  \n}\n```\n接着是封装了生产者的生产方法和消费者的消费方法的类，该类中的方法要使用synchronized关键字，就可以使run方法同步，也就是说，对于同一个Java类的对象实例，run方法同时只能被一个线程调用，并当前的run执行完后，才能被其他的线程调用。需要注意的是每个线程run()方法调用的synchronized修饰的方法必须是一个实例的方法才能保证同步，所以这个里将生产者和消费者的功能封装在一个实例中，在将他们的实例分别传给生产者和消费者，这样他们就能够同步了，下面是同步的方法代码：\n``` java\npackage thread;  \npublic class GongNeng {  \n    private Bing b;  \n      \n    public GongNeng(Bing b){      \n        this.b = b;   \n    }  \n      \n    public synchronized void lao(){  \n          \n        if(b.getBing()<10){  \n              \n            try {  \n                Thread.sleep(1500);  \n            } catch (InterruptedException e) {  \n                // TODO Auto-generated catch block  \n                e.printStackTrace();  \n            }  \n              \n            System.out.println(Thread.currentThread()+  \n                  \n            \":厨师烙了一张饼，盘里还剩\"+(b.getBing()+1)+\"张饼\");  \n              \n            b.setBing(b.getBing()+1);  \n        }  \n    }  \n      \n    public synchronized void chi(){  \n        if(b.getBing()>0){  \n              \n            try {  \n                Thread.sleep(2000);  \n            } catch (InterruptedException e) {  \n                // TODO Auto-generated catch block  \n                e.printStackTrace();  \n            }  \n            System.out.println(Thread.currentThread()+  \n                  \n            \":消费者吃了一张饼，盘里还剩\"+(b.getBing()-1)+\"张饼\");  \n              \n            b.setBing(b.getBing()-1);  \n              \n        }  \n    }  \n} \n```\n还有他们对一个消费品进行同步的操作，在这里我们用的是饼：\n``` java\npackage thread;  \npublic class Bing {  \n    private int bing = 10;  \n    public int getBing() {  \n        return bing;  \n    }  \n    public void setBing(int bing) {  \n        this.bing = bing;  \n    }  \n      \n}\n```\n下面是主入口方法进行测试：\n``` java\npackage thread;  \npublic class Test {  \n    public static void main(String[] args) {  \n          \n        //创建饼的实例  \n        Bing b = new Bing();  \n        //创建同步的吃饼和烙饼实例  \n        GongNeng g = new GongNeng(b);  \n        //创建线程两个消费者两个生产者  \n        ChuShi c1 = new ChuShi(g);  \n        ChuShi c2 = new ChuShi(g);  \n        XiaoFei x1 = new XiaoFei(g);  \n        XiaoFei x2 = new XiaoFei(g);  \n          \n        //启动线程  \n        c1.start();  \n        c2.start();  \n        x1.start();  \n        x2.start();  \n    }  \n} \n```\n 这个例子就模拟了生产与消费的问题。\n","slug":"Java多线程实现生产者与消费者","published":1,"updated":"2017-01-19T11:10:49.476Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyo3mvjq0009tsr8jof56448","content":"<p>生产者与消费者问题是指创建一组“生产者”线程和一组“消费者”线程，让他们进行同步互斥的运行，生产者生产一个产品，消费者就消费掉一个产品，下面我就用Java的多线程来实现这个课题。<a id=\"more\"></a>本例子的ChuShi代表生产者，XiaoFei代表消费者。首先是生产者厨师的代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> thread;  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChuShi</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"keyword\">private</span> GongNeng g;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ChuShi</span><span class=\"params\">(GongNeng g)</span></span>&#123;    </div><div class=\"line\">        <span class=\"keyword\">this</span>.g = g;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">for</span>(;;)&#123;  </div><div class=\"line\">              </div><div class=\"line\">            g.lao();  </div><div class=\"line\">              </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然后是消费者的代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> thread;  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XiaoFei</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"keyword\">private</span> GongNeng g;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">XiaoFei</span><span class=\"params\">(GongNeng g)</span></span>&#123;  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"keyword\">this</span>.g = g;  </div><div class=\"line\">          </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">for</span>(;;)&#123;  </div><div class=\"line\">                  </div><div class=\"line\">            g.chi();  </div><div class=\"line\">              </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>接着是封装了生产者的生产方法和消费者的消费方法的类，该类中的方法要使用synchronized关键字，就可以使run方法同步，也就是说，对于同一个Java类的对象实例，run方法同时只能被一个线程调用，并当前的run执行完后，才能被其他的线程调用。需要注意的是每个线程run()方法调用的synchronized修饰的方法必须是一个实例的方法才能保证同步，所以这个里将生产者和消费者的功能封装在一个实例中，在将他们的实例分别传给生产者和消费者，这样他们就能够同步了，下面是同步的方法代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> thread;  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GongNeng</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">private</span> Bing b;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">GongNeng</span><span class=\"params\">(Bing b)</span></span>&#123;      </div><div class=\"line\">        <span class=\"keyword\">this</span>.b = b;   </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">lao</span><span class=\"params\">()</span></span>&#123;  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"keyword\">if</span>(b.getBing()&lt;<span class=\"number\">10</span>)&#123;  </div><div class=\"line\">              </div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">                Thread.sleep(<span class=\"number\">1500</span>);  </div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;  </div><div class=\"line\">                <span class=\"comment\">// TODO Auto-generated catch block  </span></div><div class=\"line\">                e.printStackTrace();  </div><div class=\"line\">            &#125;  </div><div class=\"line\">              </div><div class=\"line\">            System.out.println(Thread.currentThread()+  </div><div class=\"line\">                  </div><div class=\"line\">            <span class=\"string\">\":厨师烙了一张饼，盘里还剩\"</span>+(b.getBing()+<span class=\"number\">1</span>)+<span class=\"string\">\"张饼\"</span>);  </div><div class=\"line\">              </div><div class=\"line\">            b.setBing(b.getBing()+<span class=\"number\">1</span>);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">chi</span><span class=\"params\">()</span></span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span>(b.getBing()&gt;<span class=\"number\">0</span>)&#123;  </div><div class=\"line\">              </div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">                Thread.sleep(<span class=\"number\">2000</span>);  </div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;  </div><div class=\"line\">                <span class=\"comment\">// TODO Auto-generated catch block  </span></div><div class=\"line\">                e.printStackTrace();  </div><div class=\"line\">            &#125;  </div><div class=\"line\">            System.out.println(Thread.currentThread()+  </div><div class=\"line\">                  </div><div class=\"line\">            <span class=\"string\">\":消费者吃了一张饼，盘里还剩\"</span>+(b.getBing()-<span class=\"number\">1</span>)+<span class=\"string\">\"张饼\"</span>);  </div><div class=\"line\">              </div><div class=\"line\">            b.setBing(b.getBing()-<span class=\"number\">1</span>);  </div><div class=\"line\">              </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>还有他们对一个消费品进行同步的操作，在这里我们用的是饼：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> thread;  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bing</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> bing = <span class=\"number\">10</span>;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getBing</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span> bing;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setBing</span><span class=\"params\">(<span class=\"keyword\">int</span> bing)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">this</span>.bing = bing;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>下面是主入口方法进行测试：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> thread;  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"comment\">//创建饼的实例  </span></div><div class=\"line\">        Bing b = <span class=\"keyword\">new</span> Bing();  </div><div class=\"line\">        <span class=\"comment\">//创建同步的吃饼和烙饼实例  </span></div><div class=\"line\">        GongNeng g = <span class=\"keyword\">new</span> GongNeng(b);  </div><div class=\"line\">        <span class=\"comment\">//创建线程两个消费者两个生产者  </span></div><div class=\"line\">        ChuShi c1 = <span class=\"keyword\">new</span> ChuShi(g);  </div><div class=\"line\">        ChuShi c2 = <span class=\"keyword\">new</span> ChuShi(g);  </div><div class=\"line\">        XiaoFei x1 = <span class=\"keyword\">new</span> XiaoFei(g);  </div><div class=\"line\">        XiaoFei x2 = <span class=\"keyword\">new</span> XiaoFei(g);  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"comment\">//启动线程  </span></div><div class=\"line\">        c1.start();  </div><div class=\"line\">        c2.start();  </div><div class=\"line\">        x1.start();  </div><div class=\"line\">        x2.start();  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p> 这个例子就模拟了生产与消费的问题。</p>\n","excerpt":"<p>生产者与消费者问题是指创建一组“生产者”线程和一组“消费者”线程，让他们进行同步互斥的运行，生产者生产一个产品，消费者就消费掉一个产品，下面我就用Java的多线程来实现这个课题。","more":"本例子的ChuShi代表生产者，XiaoFei代表消费者。首先是生产者厨师的代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> thread;  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChuShi</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"keyword\">private</span> GongNeng g;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ChuShi</span><span class=\"params\">(GongNeng g)</span></span>&#123;    </div><div class=\"line\">        <span class=\"keyword\">this</span>.g = g;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">for</span>(;;)&#123;  </div><div class=\"line\">              </div><div class=\"line\">            g.lao();  </div><div class=\"line\">              </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然后是消费者的代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> thread;  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XiaoFei</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"keyword\">private</span> GongNeng g;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">XiaoFei</span><span class=\"params\">(GongNeng g)</span></span>&#123;  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"keyword\">this</span>.g = g;  </div><div class=\"line\">          </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">for</span>(;;)&#123;  </div><div class=\"line\">                  </div><div class=\"line\">            g.chi();  </div><div class=\"line\">              </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>接着是封装了生产者的生产方法和消费者的消费方法的类，该类中的方法要使用synchronized关键字，就可以使run方法同步，也就是说，对于同一个Java类的对象实例，run方法同时只能被一个线程调用，并当前的run执行完后，才能被其他的线程调用。需要注意的是每个线程run()方法调用的synchronized修饰的方法必须是一个实例的方法才能保证同步，所以这个里将生产者和消费者的功能封装在一个实例中，在将他们的实例分别传给生产者和消费者，这样他们就能够同步了，下面是同步的方法代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> thread;  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GongNeng</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">private</span> Bing b;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">GongNeng</span><span class=\"params\">(Bing b)</span></span>&#123;      </div><div class=\"line\">        <span class=\"keyword\">this</span>.b = b;   </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">lao</span><span class=\"params\">()</span></span>&#123;  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"keyword\">if</span>(b.getBing()&lt;<span class=\"number\">10</span>)&#123;  </div><div class=\"line\">              </div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">                Thread.sleep(<span class=\"number\">1500</span>);  </div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;  </div><div class=\"line\">                <span class=\"comment\">// TODO Auto-generated catch block  </span></div><div class=\"line\">                e.printStackTrace();  </div><div class=\"line\">            &#125;  </div><div class=\"line\">              </div><div class=\"line\">            System.out.println(Thread.currentThread()+  </div><div class=\"line\">                  </div><div class=\"line\">            <span class=\"string\">\":厨师烙了一张饼，盘里还剩\"</span>+(b.getBing()+<span class=\"number\">1</span>)+<span class=\"string\">\"张饼\"</span>);  </div><div class=\"line\">              </div><div class=\"line\">            b.setBing(b.getBing()+<span class=\"number\">1</span>);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">chi</span><span class=\"params\">()</span></span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span>(b.getBing()&gt;<span class=\"number\">0</span>)&#123;  </div><div class=\"line\">              </div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">                Thread.sleep(<span class=\"number\">2000</span>);  </div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;  </div><div class=\"line\">                <span class=\"comment\">// TODO Auto-generated catch block  </span></div><div class=\"line\">                e.printStackTrace();  </div><div class=\"line\">            &#125;  </div><div class=\"line\">            System.out.println(Thread.currentThread()+  </div><div class=\"line\">                  </div><div class=\"line\">            <span class=\"string\">\":消费者吃了一张饼，盘里还剩\"</span>+(b.getBing()-<span class=\"number\">1</span>)+<span class=\"string\">\"张饼\"</span>);  </div><div class=\"line\">              </div><div class=\"line\">            b.setBing(b.getBing()-<span class=\"number\">1</span>);  </div><div class=\"line\">              </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>还有他们对一个消费品进行同步的操作，在这里我们用的是饼：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> thread;  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bing</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> bing = <span class=\"number\">10</span>;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getBing</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span> bing;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setBing</span><span class=\"params\">(<span class=\"keyword\">int</span> bing)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">this</span>.bing = bing;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>下面是主入口方法进行测试：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> thread;  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"comment\">//创建饼的实例  </span></div><div class=\"line\">        Bing b = <span class=\"keyword\">new</span> Bing();  </div><div class=\"line\">        <span class=\"comment\">//创建同步的吃饼和烙饼实例  </span></div><div class=\"line\">        GongNeng g = <span class=\"keyword\">new</span> GongNeng(b);  </div><div class=\"line\">        <span class=\"comment\">//创建线程两个消费者两个生产者  </span></div><div class=\"line\">        ChuShi c1 = <span class=\"keyword\">new</span> ChuShi(g);  </div><div class=\"line\">        ChuShi c2 = <span class=\"keyword\">new</span> ChuShi(g);  </div><div class=\"line\">        XiaoFei x1 = <span class=\"keyword\">new</span> XiaoFei(g);  </div><div class=\"line\">        XiaoFei x2 = <span class=\"keyword\">new</span> XiaoFei(g);  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"comment\">//启动线程  </span></div><div class=\"line\">        c1.start();  </div><div class=\"line\">        c2.start();  </div><div class=\"line\">        x1.start();  </div><div class=\"line\">        x2.start();  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p> 这个例子就模拟了生产与消费的问题。</p>"},{"title":"ExtJS初级教程之ExtJS Tree(二)","date":"2016-11-27T14:07:37.000Z","_content":"上次我将ExtJS Tree的静态树和加载服务器文件生成的树跟大家阐述了一下，今天我把怎么根据从数据库中查出的数据生成树根大家讨论一下。<!--more-->\n\n要想根据数据库生成树首先我们先要准备数据库数据，大概表的结构如下：\n![SQL](/images/tree_2_sql.png)\nsql语句我也为大家准备好了，如下：\n``` sql\n//oracle建表语句  \ncreate table  dept   (  \n    deptId              NUMBER(20)                      not null,  \n    deptName            VARCHAR2(20),  \n    higherDept          NUMBER(20),  \n   constraint PK_DEPT primary key ( deptId )  \n);  \n//测试数据  \ninsert into dept values(23010000,'哈尔滨市公安局',0);  \ninsert into dept values(23011000,'国家安全保卫队',23010000);  \ninsert into dept values(23011001,'国家安全保支队政工科',23010000);  \ninsert into dept values(23011002,'国家安全保支队秘书科',23010000);  \ninsert into dept values(23011003,'国家安全保支队一大队',23011001);  \ninsert into dept values(23011004,'国家安全保支队二大队',23011001);  \ninsert into dept values(23011005,'国家安全保支队三大队',23011004);  \ninsert into dept values(23011006,'国家安全保支队四大队',23011004);  \ninsert into dept values(23011007,'国家安全保支队五大队',23010000);  \ninsert into dept values(23011008,'国家安全保支队六大队',23011002); \n```\n当数据都准备完毕后，首先要写一个vo用来储存我们将要查询出来的数据。这个vo属性的名字有一定的要求，必须遵守以下的命名： private int id;这个是保存数据的主键的，也就是deptId，这个id是生成树结构的关键。然后是 private String text;这个是生成树时显示的内容。最后是private boolean leaf;这个属性也挺关键，它是用来决定该树的节点是否是叶子节点。先不多说，等我们把树写完就了解这些属性的功能了。  \n下面是DAO的查询方法，这个非常简单的用JDBC实现一下就好：\n``` java\npublic class DAO {  \n Connection conn;   \n PreparedStatement pstate;  \n ResultSet rs;  \n public List findAll(){  \n   \n  List list = new ArrayList();  \n  String sql = \" select deptid,deptname from dept \" ;   \n  try{  \n     \n   conn = DBConn.getConn();   \n   pstate = conn.prepareStatement(sql);  \n   rs = pstate.executeQuery();  \n     \n   while(rs.next()){    \n    Tree vo = new Tree();  \n    vo.setId(rs.getInt(\"deptid\"));  \n    vo.setText(rs.getString(\"deptname\"));  \n    vo.setLeaf(true);  \n    list.add(vo);  \n   }   \n  }catch(Exception e){     \n   e.printStackTrace();     \n  }finally{  \n    //释放资源  \n  }  \n  return list;  \n }  \n}\n```\n接着我们要在servlet中将查询出来的List数据转换成json字符串，这样ExtJS才能解析。\n``` java\nprotected void service(HttpServletRequest request, HttpServletResponse response)throws ServletException, IOException {  \n //转码  \n response.setContentType(\"text/html;charset=utf-8\");  \n PrintWriter out = response.getWriter();  \n    \n DAO dao = new DAO();  \n List list = new ArrayList();  \n list = dao.findAll();  \n //转换成json并传递给ExtJS Tree  \n response.getWriter().write(JSONTools.getJsonArray(list).toString());   \n}  \n```\n代码中的JSONTools就是将List转换成json字符串的一个工具类。最后就是关键的页面树的实现部分了：\n``` javascript\nvar tree = new Ext.tree.TreePanel({  \n el:'tree-div',  \n loader: new Ext.tree.TreeLoader({dataUrl:'../TreeNodeServlet'})  \n});  \nvar root = new Ext.tree.AsyncTreeNode({  \n    text: 'harbin',  \n    id:'23010000'  \n});  \ntree.setRootNode(root);  \ntree.render();\n```\n这样将项目部署到服务器上运行就可以看到效果了。\n\n\n","source":"_posts/Tree-2.md","raw":"---\ntitle: ExtJS初级教程之ExtJS Tree(二)\ndate: 2016-11-27 22:07:37\ntags: ExtJS\ncategories: javascript\n---\n上次我将ExtJS Tree的静态树和加载服务器文件生成的树跟大家阐述了一下，今天我把怎么根据从数据库中查出的数据生成树根大家讨论一下。<!--more-->\n\n要想根据数据库生成树首先我们先要准备数据库数据，大概表的结构如下：\n![SQL](/images/tree_2_sql.png)\nsql语句我也为大家准备好了，如下：\n``` sql\n//oracle建表语句  \ncreate table  dept   (  \n    deptId              NUMBER(20)                      not null,  \n    deptName            VARCHAR2(20),  \n    higherDept          NUMBER(20),  \n   constraint PK_DEPT primary key ( deptId )  \n);  \n//测试数据  \ninsert into dept values(23010000,'哈尔滨市公安局',0);  \ninsert into dept values(23011000,'国家安全保卫队',23010000);  \ninsert into dept values(23011001,'国家安全保支队政工科',23010000);  \ninsert into dept values(23011002,'国家安全保支队秘书科',23010000);  \ninsert into dept values(23011003,'国家安全保支队一大队',23011001);  \ninsert into dept values(23011004,'国家安全保支队二大队',23011001);  \ninsert into dept values(23011005,'国家安全保支队三大队',23011004);  \ninsert into dept values(23011006,'国家安全保支队四大队',23011004);  \ninsert into dept values(23011007,'国家安全保支队五大队',23010000);  \ninsert into dept values(23011008,'国家安全保支队六大队',23011002); \n```\n当数据都准备完毕后，首先要写一个vo用来储存我们将要查询出来的数据。这个vo属性的名字有一定的要求，必须遵守以下的命名： private int id;这个是保存数据的主键的，也就是deptId，这个id是生成树结构的关键。然后是 private String text;这个是生成树时显示的内容。最后是private boolean leaf;这个属性也挺关键，它是用来决定该树的节点是否是叶子节点。先不多说，等我们把树写完就了解这些属性的功能了。  \n下面是DAO的查询方法，这个非常简单的用JDBC实现一下就好：\n``` java\npublic class DAO {  \n Connection conn;   \n PreparedStatement pstate;  \n ResultSet rs;  \n public List findAll(){  \n   \n  List list = new ArrayList();  \n  String sql = \" select deptid,deptname from dept \" ;   \n  try{  \n     \n   conn = DBConn.getConn();   \n   pstate = conn.prepareStatement(sql);  \n   rs = pstate.executeQuery();  \n     \n   while(rs.next()){    \n    Tree vo = new Tree();  \n    vo.setId(rs.getInt(\"deptid\"));  \n    vo.setText(rs.getString(\"deptname\"));  \n    vo.setLeaf(true);  \n    list.add(vo);  \n   }   \n  }catch(Exception e){     \n   e.printStackTrace();     \n  }finally{  \n    //释放资源  \n  }  \n  return list;  \n }  \n}\n```\n接着我们要在servlet中将查询出来的List数据转换成json字符串，这样ExtJS才能解析。\n``` java\nprotected void service(HttpServletRequest request, HttpServletResponse response)throws ServletException, IOException {  \n //转码  \n response.setContentType(\"text/html;charset=utf-8\");  \n PrintWriter out = response.getWriter();  \n    \n DAO dao = new DAO();  \n List list = new ArrayList();  \n list = dao.findAll();  \n //转换成json并传递给ExtJS Tree  \n response.getWriter().write(JSONTools.getJsonArray(list).toString());   \n}  \n```\n代码中的JSONTools就是将List转换成json字符串的一个工具类。最后就是关键的页面树的实现部分了：\n``` javascript\nvar tree = new Ext.tree.TreePanel({  \n el:'tree-div',  \n loader: new Ext.tree.TreeLoader({dataUrl:'../TreeNodeServlet'})  \n});  \nvar root = new Ext.tree.AsyncTreeNode({  \n    text: 'harbin',  \n    id:'23010000'  \n});  \ntree.setRootNode(root);  \ntree.render();\n```\n这样将项目部署到服务器上运行就可以看到效果了。\n\n\n","slug":"Tree-2","published":1,"updated":"2017-01-19T11:10:49.476Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyo3mvjr000atsr8t4mvmq2a","content":"<p>上次我将ExtJS Tree的静态树和加载服务器文件生成的树跟大家阐述了一下，今天我把怎么根据从数据库中查出的数据生成树根大家讨论一下。<a id=\"more\"></a></p>\n<p>要想根据数据库生成树首先我们先要准备数据库数据，大概表的结构如下：<br><img src=\"/images/tree_2_sql.png\" alt=\"SQL\"><br>sql语句我也为大家准备好了，如下：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">//oracle建表语句  </div><div class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span>  dept   (  </div><div class=\"line\">    deptId              <span class=\"built_in\">NUMBER</span>(<span class=\"number\">20</span>)                      <span class=\"keyword\">not</span> <span class=\"literal\">null</span>,  </div><div class=\"line\">    deptName            VARCHAR2(<span class=\"number\">20</span>),  </div><div class=\"line\">    higherDept          <span class=\"built_in\">NUMBER</span>(<span class=\"number\">20</span>),  </div><div class=\"line\">   <span class=\"keyword\">constraint</span> PK_DEPT primary <span class=\"keyword\">key</span> ( deptId )  </div><div class=\"line\">);  </div><div class=\"line\">//测试数据  </div><div class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">23010000</span>,<span class=\"string\">'哈尔滨市公安局'</span>,<span class=\"number\">0</span>);  </div><div class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">23011000</span>,<span class=\"string\">'国家安全保卫队'</span>,<span class=\"number\">23010000</span>);  </div><div class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">23011001</span>,<span class=\"string\">'国家安全保支队政工科'</span>,<span class=\"number\">23010000</span>);  </div><div class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">23011002</span>,<span class=\"string\">'国家安全保支队秘书科'</span>,<span class=\"number\">23010000</span>);  </div><div class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">23011003</span>,<span class=\"string\">'国家安全保支队一大队'</span>,<span class=\"number\">23011001</span>);  </div><div class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">23011004</span>,<span class=\"string\">'国家安全保支队二大队'</span>,<span class=\"number\">23011001</span>);  </div><div class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">23011005</span>,<span class=\"string\">'国家安全保支队三大队'</span>,<span class=\"number\">23011004</span>);  </div><div class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">23011006</span>,<span class=\"string\">'国家安全保支队四大队'</span>,<span class=\"number\">23011004</span>);  </div><div class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">23011007</span>,<span class=\"string\">'国家安全保支队五大队'</span>,<span class=\"number\">23010000</span>);  </div><div class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">23011008</span>,<span class=\"string\">'国家安全保支队六大队'</span>,<span class=\"number\">23011002</span>);</div></pre></td></tr></table></figure></p>\n<p>当数据都准备完毕后，首先要写一个vo用来储存我们将要查询出来的数据。这个vo属性的名字有一定的要求，必须遵守以下的命名： private int id;这个是保存数据的主键的，也就是deptId，这个id是生成树结构的关键。然后是 private String text;这个是生成树时显示的内容。最后是private boolean leaf;这个属性也挺关键，它是用来决定该树的节点是否是叶子节点。先不多说，等我们把树写完就了解这些属性的功能了。<br>下面是DAO的查询方法，这个非常简单的用JDBC实现一下就好：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DAO</span> </span>&#123;  </div><div class=\"line\"> Connection conn;   </div><div class=\"line\"> PreparedStatement pstate;  </div><div class=\"line\"> ResultSet rs;  </div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> List <span class=\"title\">findAll</span><span class=\"params\">()</span></span>&#123;  </div><div class=\"line\">   </div><div class=\"line\">  List list = <span class=\"keyword\">new</span> ArrayList();  </div><div class=\"line\">  String sql = <span class=\"string\">\" select deptid,deptname from dept \"</span> ;   </div><div class=\"line\">  <span class=\"keyword\">try</span>&#123;  </div><div class=\"line\">     </div><div class=\"line\">   conn = DBConn.getConn();   </div><div class=\"line\">   pstate = conn.prepareStatement(sql);  </div><div class=\"line\">   rs = pstate.executeQuery();  </div><div class=\"line\">     </div><div class=\"line\">   <span class=\"keyword\">while</span>(rs.next())&#123;    </div><div class=\"line\">    Tree vo = <span class=\"keyword\">new</span> Tree();  </div><div class=\"line\">    vo.setId(rs.getInt(<span class=\"string\">\"deptid\"</span>));  </div><div class=\"line\">    vo.setText(rs.getString(<span class=\"string\">\"deptname\"</span>));  </div><div class=\"line\">    vo.setLeaf(<span class=\"keyword\">true</span>);  </div><div class=\"line\">    list.add(vo);  </div><div class=\"line\">   &#125;   </div><div class=\"line\">  &#125;<span class=\"keyword\">catch</span>(Exception e)&#123;     </div><div class=\"line\">   e.printStackTrace();     </div><div class=\"line\">  &#125;<span class=\"keyword\">finally</span>&#123;  </div><div class=\"line\">    <span class=\"comment\">//释放资源  </span></div><div class=\"line\">  &#125;  </div><div class=\"line\">  <span class=\"keyword\">return</span> list;  </div><div class=\"line\"> &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>接着我们要在servlet中将查询出来的List数据转换成json字符串，这样ExtJS才能解析。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span><span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;  </div><div class=\"line\"> <span class=\"comment\">//转码  </span></div><div class=\"line\"> response.setContentType(<span class=\"string\">\"text/html;charset=utf-8\"</span>);  </div><div class=\"line\"> PrintWriter out = response.getWriter();  </div><div class=\"line\">    </div><div class=\"line\"> DAO dao = <span class=\"keyword\">new</span> DAO();  </div><div class=\"line\"> List list = <span class=\"keyword\">new</span> ArrayList();  </div><div class=\"line\"> list = dao.findAll();  </div><div class=\"line\"> <span class=\"comment\">//转换成json并传递给ExtJS Tree  </span></div><div class=\"line\"> response.getWriter().write(JSONTools.getJsonArray(list).toString());   </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>代码中的JSONTools就是将List转换成json字符串的一个工具类。最后就是关键的页面树的实现部分了：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </div><div class=\"line\"> <span class=\"attr\">el</span>:<span class=\"string\">'tree-div'</span>,  </div><div class=\"line\"> <span class=\"attr\">loader</span>: <span class=\"keyword\">new</span> Ext.tree.TreeLoader(&#123;<span class=\"attr\">dataUrl</span>:<span class=\"string\">'../TreeNodeServlet'</span>&#125;)  </div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> root = <span class=\"keyword\">new</span> Ext.tree.AsyncTreeNode(&#123;  </div><div class=\"line\">    <span class=\"attr\">text</span>: <span class=\"string\">'harbin'</span>,  </div><div class=\"line\">    <span class=\"attr\">id</span>:<span class=\"string\">'23010000'</span>  </div><div class=\"line\">&#125;);  </div><div class=\"line\">tree.setRootNode(root);  </div><div class=\"line\">tree.render();</div></pre></td></tr></table></figure></p>\n<p>这样将项目部署到服务器上运行就可以看到效果了。</p>\n","excerpt":"<p>上次我将ExtJS Tree的静态树和加载服务器文件生成的树跟大家阐述了一下，今天我把怎么根据从数据库中查出的数据生成树根大家讨论一下。","more":"</p>\n<p>要想根据数据库生成树首先我们先要准备数据库数据，大概表的结构如下：<br><img src=\"/images/tree_2_sql.png\" alt=\"SQL\"><br>sql语句我也为大家准备好了，如下：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">//oracle建表语句  </div><div class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span>  dept   (  </div><div class=\"line\">    deptId              <span class=\"built_in\">NUMBER</span>(<span class=\"number\">20</span>)                      <span class=\"keyword\">not</span> <span class=\"literal\">null</span>,  </div><div class=\"line\">    deptName            VARCHAR2(<span class=\"number\">20</span>),  </div><div class=\"line\">    higherDept          <span class=\"built_in\">NUMBER</span>(<span class=\"number\">20</span>),  </div><div class=\"line\">   <span class=\"keyword\">constraint</span> PK_DEPT primary <span class=\"keyword\">key</span> ( deptId )  </div><div class=\"line\">);  </div><div class=\"line\">//测试数据  </div><div class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">23010000</span>,<span class=\"string\">'哈尔滨市公安局'</span>,<span class=\"number\">0</span>);  </div><div class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">23011000</span>,<span class=\"string\">'国家安全保卫队'</span>,<span class=\"number\">23010000</span>);  </div><div class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">23011001</span>,<span class=\"string\">'国家安全保支队政工科'</span>,<span class=\"number\">23010000</span>);  </div><div class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">23011002</span>,<span class=\"string\">'国家安全保支队秘书科'</span>,<span class=\"number\">23010000</span>);  </div><div class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">23011003</span>,<span class=\"string\">'国家安全保支队一大队'</span>,<span class=\"number\">23011001</span>);  </div><div class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">23011004</span>,<span class=\"string\">'国家安全保支队二大队'</span>,<span class=\"number\">23011001</span>);  </div><div class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">23011005</span>,<span class=\"string\">'国家安全保支队三大队'</span>,<span class=\"number\">23011004</span>);  </div><div class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">23011006</span>,<span class=\"string\">'国家安全保支队四大队'</span>,<span class=\"number\">23011004</span>);  </div><div class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">23011007</span>,<span class=\"string\">'国家安全保支队五大队'</span>,<span class=\"number\">23010000</span>);  </div><div class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">23011008</span>,<span class=\"string\">'国家安全保支队六大队'</span>,<span class=\"number\">23011002</span>);</div></pre></td></tr></table></figure></p>\n<p>当数据都准备完毕后，首先要写一个vo用来储存我们将要查询出来的数据。这个vo属性的名字有一定的要求，必须遵守以下的命名： private int id;这个是保存数据的主键的，也就是deptId，这个id是生成树结构的关键。然后是 private String text;这个是生成树时显示的内容。最后是private boolean leaf;这个属性也挺关键，它是用来决定该树的节点是否是叶子节点。先不多说，等我们把树写完就了解这些属性的功能了。<br>下面是DAO的查询方法，这个非常简单的用JDBC实现一下就好：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DAO</span> </span>&#123;  </div><div class=\"line\"> Connection conn;   </div><div class=\"line\"> PreparedStatement pstate;  </div><div class=\"line\"> ResultSet rs;  </div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> List <span class=\"title\">findAll</span><span class=\"params\">()</span></span>&#123;  </div><div class=\"line\">   </div><div class=\"line\">  List list = <span class=\"keyword\">new</span> ArrayList();  </div><div class=\"line\">  String sql = <span class=\"string\">\" select deptid,deptname from dept \"</span> ;   </div><div class=\"line\">  <span class=\"keyword\">try</span>&#123;  </div><div class=\"line\">     </div><div class=\"line\">   conn = DBConn.getConn();   </div><div class=\"line\">   pstate = conn.prepareStatement(sql);  </div><div class=\"line\">   rs = pstate.executeQuery();  </div><div class=\"line\">     </div><div class=\"line\">   <span class=\"keyword\">while</span>(rs.next())&#123;    </div><div class=\"line\">    Tree vo = <span class=\"keyword\">new</span> Tree();  </div><div class=\"line\">    vo.setId(rs.getInt(<span class=\"string\">\"deptid\"</span>));  </div><div class=\"line\">    vo.setText(rs.getString(<span class=\"string\">\"deptname\"</span>));  </div><div class=\"line\">    vo.setLeaf(<span class=\"keyword\">true</span>);  </div><div class=\"line\">    list.add(vo);  </div><div class=\"line\">   &#125;   </div><div class=\"line\">  &#125;<span class=\"keyword\">catch</span>(Exception e)&#123;     </div><div class=\"line\">   e.printStackTrace();     </div><div class=\"line\">  &#125;<span class=\"keyword\">finally</span>&#123;  </div><div class=\"line\">    <span class=\"comment\">//释放资源  </span></div><div class=\"line\">  &#125;  </div><div class=\"line\">  <span class=\"keyword\">return</span> list;  </div><div class=\"line\"> &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>接着我们要在servlet中将查询出来的List数据转换成json字符串，这样ExtJS才能解析。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span><span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;  </div><div class=\"line\"> <span class=\"comment\">//转码  </span></div><div class=\"line\"> response.setContentType(<span class=\"string\">\"text/html;charset=utf-8\"</span>);  </div><div class=\"line\"> PrintWriter out = response.getWriter();  </div><div class=\"line\">    </div><div class=\"line\"> DAO dao = <span class=\"keyword\">new</span> DAO();  </div><div class=\"line\"> List list = <span class=\"keyword\">new</span> ArrayList();  </div><div class=\"line\"> list = dao.findAll();  </div><div class=\"line\"> <span class=\"comment\">//转换成json并传递给ExtJS Tree  </span></div><div class=\"line\"> response.getWriter().write(JSONTools.getJsonArray(list).toString());   </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>代码中的JSONTools就是将List转换成json字符串的一个工具类。最后就是关键的页面树的实现部分了：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </div><div class=\"line\"> <span class=\"attr\">el</span>:<span class=\"string\">'tree-div'</span>,  </div><div class=\"line\"> <span class=\"attr\">loader</span>: <span class=\"keyword\">new</span> Ext.tree.TreeLoader(&#123;<span class=\"attr\">dataUrl</span>:<span class=\"string\">'../TreeNodeServlet'</span>&#125;)  </div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> root = <span class=\"keyword\">new</span> Ext.tree.AsyncTreeNode(&#123;  </div><div class=\"line\">    <span class=\"attr\">text</span>: <span class=\"string\">'harbin'</span>,  </div><div class=\"line\">    <span class=\"attr\">id</span>:<span class=\"string\">'23010000'</span>  </div><div class=\"line\">&#125;);  </div><div class=\"line\">tree.setRootNode(root);  </div><div class=\"line\">tree.render();</div></pre></td></tr></table></figure></p>\n<p>这样将项目部署到服务器上运行就可以看到效果了。</p>"},{"title":"ExtJS初级教程之ExtJS Tree(一)","date":"2016-11-27T12:51:18.000Z","_content":"ExtJS是一款基于Ajax的web客户端框架，有着更加和漂亮友好的界面，今天起我就开始学习ExtJS了，下面我把我学习的过程与大家分享。<!--more-->  \n\n我先学习我最近用到ExtJS Tree。下面我们开始写我们的第一个静态树。  \n1、首先导入ExtJS提供的js和css文件。\n``` javascript\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"../script/resources/css/ext-all.css\" />\n  <script type=\"text/JavaScript\" src=\"../script/adapter/ext/ext-base.js\"></script>\n  <script type=\"text/javascript\" src=\"../script/ext-all.js\"></script>\n  <script type=\"text/javascript\" src=\"../script/locale/ext-lang-zh_CN.js\"></script>\n```\n注意导入顺序，这些文件都可以在extjs的源码包里找到。  \n2、首先我们先要创建一个空的树面板，此时页面上是神马都显示不出来的。\n``` javascript\n//创建Tree面板  \nvar tree = new Ext.tree.TreePanel({  \n //指定添加到的div  \n el:'tree-div',  \n}); \n```\n页面上应该有div的标签，因为我们写的树即将安插到这里。\n``` javascript\n<div id = \"tree-div\" ></div>\n```\n3、下面我们先创建一个根节点显示在页面上\n``` javascript\n//创建Tree面板  \nvar tree = new Ext.tree.TreePanel({  \n //指定添加到的div  \n el:'tree-div',  \n});  \nvar root = Ext.tree.TreeNode({text:'跟节点'});  \ntree.setRootNode(root);  \ntree.render();  \n```\n这样页面上就不会是一个空树了，应该显示的是一颗带有一个根节点的树。  \n4、最后我们按照上面的思路创建一个有层次的静态树。\n``` javascript\n//普通的静态树  \nvar tree = new Ext.tree.TreePanel({  \n el:'tree-div'  \n});  \n//创建根节点  \nvar root = new Ext.tree.TreeNode({text:'AllShengFen'});  \n//创建父节点  \nvar shengfen1 = new Ext.tree.TreeNode({text:'HeiLongJiang'});  \nvar shengfen2 = new Ext.tree.TreeNode({text:'LiaoNing'});  \nvar city1 = new Ext.tree.TreeNode({text:'harbin'});  \nvar city2 = new Ext.tree.TreeNode({text:'daqiang'});  \nvar city3 = new Ext.tree.TreeNode({text:'shenyang'});  \nvar city4 = new Ext.tree.TreeNode({text:'dalian'});  \n//将子节点添加到父节点中  \nshengfen1.appendChild(city1);  \nshengfen1.appendChild(city2);  \nshengfen2.appendChild(city3);  \nshengfen2.appendChild(city4);  \n//将子节点添加到父节点中  \nroot.appendChild(shengfen1);  \nroot.appendChild(shengfen2);  \n//将root节点设置为根节点  \ntree.setRootNode(root);  \n//使这棵树显示在div标签中  \ntree.render(); \n```\n这样一棵完整的树就应该显示在页面上了。  \n\n但是我们大多数用的都不是写死的静态树而是要根据不同数据生成不同的树，接下来我们就看看怎么读取服务器端的文件来生成ExtJS Tree。  \n1、创建一个data1.txt文件，内容是一个json字符串。\n``` javascript\n[  \n {text:'非叶子节点'},  \n {text:'叶子节点',leaf:true}  \n] \n```\n2、TreeLoader 导入数据的URL。我们需要一个类能够帮我们找到要加载的文件，这个类就是TreeLoader。\n``` javascript\n//创建Tree面板  \nvar tree = new Ext.tree.TreePanel({  \n //指定添加到的div  \n el:'tree-div',  \n //导入数据的URL  \n loader:new Ext.tree.TreeLoader({dataUrl:'../js/data1.txt'})  \n}); \n```\n3、但此时我们不能够再用Ext.tree.TreeNode来创建根节点了，用它创建根节点的话在页面上我们就只能看见跟节点。这是因为它不支持ajax，不能加载data.txt的数据，所以此时我们就用到了AsyncTreeNode了。\n``` javascript\n//创建根节点，使用AsyncTreeNode能够加载外部数据  \nvar root = new Ext.tree.AsyncTreeNode({text:'gen'});  \n//设置root为根节点  \ntree.setRootNode(root);  \n//将树显示在div标签上  \ntree.render();  \n//第一个true是自动展开所有字节点，第二个true是以动画效果展开树  \nroot.expand(true,true); \n```\n但此时我们发现，页面上的树开始无限的展开了。当我们将root.expand(true,true)删掉后，打开页面是不自动展开了，但是当我们点击展开的时候还是会无限的展开下去，这是因为AsyncTreeNode能够重新加载它下面的非叶子节点，我们加载的data1.txt里面的数据有一个节点是非叶子节点，所以AsyncTreeNode会再次的把它当做根节点，重新加载数据。所以我们应该给它一个所有节点的最后都是叶子节点的数据文件data2.txt。\n``` javascript\n[  \n  {text:'computer',children:[  \n    {text:'<a href=\"http://lib.csdn.net/base/17\" class='replace_word' title=\"Java EE知识库\" target='_blank' style='color:#df3434; font-weight:bold;'>Java</a>',leaf:true},  \n    {text:'c++',children:[  \n      {text:'thinking',leaf:true},  \n      {text:'yyyyy',leaf:true}  \n    ]},  \n  {text:'asp',leaf:true}   \n  ]},  \n  {text:'jsp',children:[  \n    {text:'dadf',leaf:true},  \n    {text:'ddddddd',leaf:true}  \n  ]}  \n]  \n```\n此时我们将加载的数据源改为data2.txt。\n``` javascript\n//创建Tree面板  \nvar tree = new Ext.tree.TreePanel({  \n //指定添加到的div  \n el:'tree-div',  \n //导入数据的URL  \n loader:new Ext.tree.TreeLoader({dataUrl:'../js/data1.txt'})  \n});\n```\n这时我们生成的树就不是无限展开的了。  \n今天就这些，下次我们再研究从servlet中获得Json数据来生成ExtJS树。\n","source":"_posts/Tree-1.md","raw":"---\ntitle: ExtJS初级教程之ExtJS Tree(一)\ndate: 2016-11-27 20:51:18\ntags: ExtJS\ncategories: javascript\n---\nExtJS是一款基于Ajax的web客户端框架，有着更加和漂亮友好的界面，今天起我就开始学习ExtJS了，下面我把我学习的过程与大家分享。<!--more-->  \n\n我先学习我最近用到ExtJS Tree。下面我们开始写我们的第一个静态树。  \n1、首先导入ExtJS提供的js和css文件。\n``` javascript\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"../script/resources/css/ext-all.css\" />\n  <script type=\"text/JavaScript\" src=\"../script/adapter/ext/ext-base.js\"></script>\n  <script type=\"text/javascript\" src=\"../script/ext-all.js\"></script>\n  <script type=\"text/javascript\" src=\"../script/locale/ext-lang-zh_CN.js\"></script>\n```\n注意导入顺序，这些文件都可以在extjs的源码包里找到。  \n2、首先我们先要创建一个空的树面板，此时页面上是神马都显示不出来的。\n``` javascript\n//创建Tree面板  \nvar tree = new Ext.tree.TreePanel({  \n //指定添加到的div  \n el:'tree-div',  \n}); \n```\n页面上应该有div的标签，因为我们写的树即将安插到这里。\n``` javascript\n<div id = \"tree-div\" ></div>\n```\n3、下面我们先创建一个根节点显示在页面上\n``` javascript\n//创建Tree面板  \nvar tree = new Ext.tree.TreePanel({  \n //指定添加到的div  \n el:'tree-div',  \n});  \nvar root = Ext.tree.TreeNode({text:'跟节点'});  \ntree.setRootNode(root);  \ntree.render();  \n```\n这样页面上就不会是一个空树了，应该显示的是一颗带有一个根节点的树。  \n4、最后我们按照上面的思路创建一个有层次的静态树。\n``` javascript\n//普通的静态树  \nvar tree = new Ext.tree.TreePanel({  \n el:'tree-div'  \n});  \n//创建根节点  \nvar root = new Ext.tree.TreeNode({text:'AllShengFen'});  \n//创建父节点  \nvar shengfen1 = new Ext.tree.TreeNode({text:'HeiLongJiang'});  \nvar shengfen2 = new Ext.tree.TreeNode({text:'LiaoNing'});  \nvar city1 = new Ext.tree.TreeNode({text:'harbin'});  \nvar city2 = new Ext.tree.TreeNode({text:'daqiang'});  \nvar city3 = new Ext.tree.TreeNode({text:'shenyang'});  \nvar city4 = new Ext.tree.TreeNode({text:'dalian'});  \n//将子节点添加到父节点中  \nshengfen1.appendChild(city1);  \nshengfen1.appendChild(city2);  \nshengfen2.appendChild(city3);  \nshengfen2.appendChild(city4);  \n//将子节点添加到父节点中  \nroot.appendChild(shengfen1);  \nroot.appendChild(shengfen2);  \n//将root节点设置为根节点  \ntree.setRootNode(root);  \n//使这棵树显示在div标签中  \ntree.render(); \n```\n这样一棵完整的树就应该显示在页面上了。  \n\n但是我们大多数用的都不是写死的静态树而是要根据不同数据生成不同的树，接下来我们就看看怎么读取服务器端的文件来生成ExtJS Tree。  \n1、创建一个data1.txt文件，内容是一个json字符串。\n``` javascript\n[  \n {text:'非叶子节点'},  \n {text:'叶子节点',leaf:true}  \n] \n```\n2、TreeLoader 导入数据的URL。我们需要一个类能够帮我们找到要加载的文件，这个类就是TreeLoader。\n``` javascript\n//创建Tree面板  \nvar tree = new Ext.tree.TreePanel({  \n //指定添加到的div  \n el:'tree-div',  \n //导入数据的URL  \n loader:new Ext.tree.TreeLoader({dataUrl:'../js/data1.txt'})  \n}); \n```\n3、但此时我们不能够再用Ext.tree.TreeNode来创建根节点了，用它创建根节点的话在页面上我们就只能看见跟节点。这是因为它不支持ajax，不能加载data.txt的数据，所以此时我们就用到了AsyncTreeNode了。\n``` javascript\n//创建根节点，使用AsyncTreeNode能够加载外部数据  \nvar root = new Ext.tree.AsyncTreeNode({text:'gen'});  \n//设置root为根节点  \ntree.setRootNode(root);  \n//将树显示在div标签上  \ntree.render();  \n//第一个true是自动展开所有字节点，第二个true是以动画效果展开树  \nroot.expand(true,true); \n```\n但此时我们发现，页面上的树开始无限的展开了。当我们将root.expand(true,true)删掉后，打开页面是不自动展开了，但是当我们点击展开的时候还是会无限的展开下去，这是因为AsyncTreeNode能够重新加载它下面的非叶子节点，我们加载的data1.txt里面的数据有一个节点是非叶子节点，所以AsyncTreeNode会再次的把它当做根节点，重新加载数据。所以我们应该给它一个所有节点的最后都是叶子节点的数据文件data2.txt。\n``` javascript\n[  \n  {text:'computer',children:[  \n    {text:'<a href=\"http://lib.csdn.net/base/17\" class='replace_word' title=\"Java EE知识库\" target='_blank' style='color:#df3434; font-weight:bold;'>Java</a>',leaf:true},  \n    {text:'c++',children:[  \n      {text:'thinking',leaf:true},  \n      {text:'yyyyy',leaf:true}  \n    ]},  \n  {text:'asp',leaf:true}   \n  ]},  \n  {text:'jsp',children:[  \n    {text:'dadf',leaf:true},  \n    {text:'ddddddd',leaf:true}  \n  ]}  \n]  \n```\n此时我们将加载的数据源改为data2.txt。\n``` javascript\n//创建Tree面板  \nvar tree = new Ext.tree.TreePanel({  \n //指定添加到的div  \n el:'tree-div',  \n //导入数据的URL  \n loader:new Ext.tree.TreeLoader({dataUrl:'../js/data1.txt'})  \n});\n```\n这时我们生成的树就不是无限展开的了。  \n今天就这些，下次我们再研究从servlet中获得Json数据来生成ExtJS树。\n","slug":"Tree-1","published":1,"updated":"2017-01-19T11:10:49.476Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyo3mvjr000btsr8veyqd1t3","content":"<p>ExtJS是一款基于Ajax的web客户端框架，有着更加和漂亮友好的界面，今天起我就开始学习ExtJS了，下面我把我学习的过程与大家分享。<a id=\"more\"></a>  </p>\n<p>我先学习我最近用到ExtJS Tree。下面我们开始写我们的第一个静态树。<br>1、首先导入ExtJS提供的js和css文件。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;link rel=<span class=\"string\">\"stylesheet\"</span> type=<span class=\"string\">\"text/css\"</span> href=<span class=\"string\">\"../script/resources/css/ext-all.css\"</span> /&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/JavaScript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../script/adapter/ext/ext-base.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></div><div class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"../script/ext-all.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></div><div class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"../script/locale/ext-lang-zh_CN.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></div></pre></td></tr></table></figure></p>\n<p>注意导入顺序，这些文件都可以在extjs的源码包里找到。<br>2、首先我们先要创建一个空的树面板，此时页面上是神马都显示不出来的。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//创建Tree面板  </span></div><div class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </div><div class=\"line\"> <span class=\"comment\">//指定添加到的div  </span></div><div class=\"line\"> el:<span class=\"string\">'tree-div'</span>,  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>页面上应该有div的标签，因为我们写的树即将安插到这里。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id = <span class=\"string\">\"tree-div\"</span> &gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div></pre></td></tr></table></figure></p>\n<p>3、下面我们先创建一个根节点显示在页面上<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//创建Tree面板  </span></div><div class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </div><div class=\"line\"> <span class=\"comment\">//指定添加到的div  </span></div><div class=\"line\"> el:<span class=\"string\">'tree-div'</span>,  </div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> root = Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'跟节点'</span>&#125;);  </div><div class=\"line\">tree.setRootNode(root);  </div><div class=\"line\">tree.render();</div></pre></td></tr></table></figure></p>\n<p>这样页面上就不会是一个空树了，应该显示的是一颗带有一个根节点的树。<br>4、最后我们按照上面的思路创建一个有层次的静态树。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//普通的静态树  </span></div><div class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </div><div class=\"line\"> <span class=\"attr\">el</span>:<span class=\"string\">'tree-div'</span>  </div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"comment\">//创建根节点  </span></div><div class=\"line\"><span class=\"keyword\">var</span> root = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'AllShengFen'</span>&#125;);  </div><div class=\"line\"><span class=\"comment\">//创建父节点  </span></div><div class=\"line\"><span class=\"keyword\">var</span> shengfen1 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'HeiLongJiang'</span>&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> shengfen2 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'LiaoNing'</span>&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> city1 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'harbin'</span>&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> city2 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'daqiang'</span>&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> city3 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'shenyang'</span>&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> city4 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'dalian'</span>&#125;);  </div><div class=\"line\"><span class=\"comment\">//将子节点添加到父节点中  </span></div><div class=\"line\">shengfen1.appendChild(city1);  </div><div class=\"line\">shengfen1.appendChild(city2);  </div><div class=\"line\">shengfen2.appendChild(city3);  </div><div class=\"line\">shengfen2.appendChild(city4);  </div><div class=\"line\"><span class=\"comment\">//将子节点添加到父节点中  </span></div><div class=\"line\">root.appendChild(shengfen1);  </div><div class=\"line\">root.appendChild(shengfen2);  </div><div class=\"line\"><span class=\"comment\">//将root节点设置为根节点  </span></div><div class=\"line\">tree.setRootNode(root);  </div><div class=\"line\"><span class=\"comment\">//使这棵树显示在div标签中  </span></div><div class=\"line\">tree.render();</div></pre></td></tr></table></figure></p>\n<p>这样一棵完整的树就应该显示在页面上了。  </p>\n<p>但是我们大多数用的都不是写死的静态树而是要根据不同数据生成不同的树，接下来我们就看看怎么读取服务器端的文件来生成ExtJS Tree。<br>1、创建一个data1.txt文件，内容是一个json字符串。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[  </div><div class=\"line\"> &#123;<span class=\"attr\">text</span>:<span class=\"string\">'非叶子节点'</span>&#125;,  </div><div class=\"line\"> &#123;<span class=\"attr\">text</span>:<span class=\"string\">'叶子节点'</span>,<span class=\"attr\">leaf</span>:<span class=\"literal\">true</span>&#125;  </div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<p>2、TreeLoader 导入数据的URL。我们需要一个类能够帮我们找到要加载的文件，这个类就是TreeLoader。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//创建Tree面板  </span></div><div class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </div><div class=\"line\"> <span class=\"comment\">//指定添加到的div  </span></div><div class=\"line\"> el:<span class=\"string\">'tree-div'</span>,  </div><div class=\"line\"> <span class=\"comment\">//导入数据的URL  </span></div><div class=\"line\"> loader:<span class=\"keyword\">new</span> Ext.tree.TreeLoader(&#123;<span class=\"attr\">dataUrl</span>:<span class=\"string\">'../js/data1.txt'</span>&#125;)  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>3、但此时我们不能够再用Ext.tree.TreeNode来创建根节点了，用它创建根节点的话在页面上我们就只能看见跟节点。这是因为它不支持ajax，不能加载data.txt的数据，所以此时我们就用到了AsyncTreeNode了。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//创建根节点，使用AsyncTreeNode能够加载外部数据  </span></div><div class=\"line\"><span class=\"keyword\">var</span> root = <span class=\"keyword\">new</span> Ext.tree.AsyncTreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'gen'</span>&#125;);  </div><div class=\"line\"><span class=\"comment\">//设置root为根节点  </span></div><div class=\"line\">tree.setRootNode(root);  </div><div class=\"line\"><span class=\"comment\">//将树显示在div标签上  </span></div><div class=\"line\">tree.render();  </div><div class=\"line\"><span class=\"comment\">//第一个true是自动展开所有字节点，第二个true是以动画效果展开树  </span></div><div class=\"line\">root.expand(<span class=\"literal\">true</span>,<span class=\"literal\">true</span>);</div></pre></td></tr></table></figure></p>\n<p>但此时我们发现，页面上的树开始无限的展开了。当我们将root.expand(true,true)删掉后，打开页面是不自动展开了，但是当我们点击展开的时候还是会无限的展开下去，这是因为AsyncTreeNode能够重新加载它下面的非叶子节点，我们加载的data1.txt里面的数据有一个节点是非叶子节点，所以AsyncTreeNode会再次的把它当做根节点，重新加载数据。所以我们应该给它一个所有节点的最后都是叶子节点的数据文件data2.txt。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">[  </div><div class=\"line\">  &#123;text:'computer',children:[  </div><div class=\"line\">    &#123;text:'&lt;a href=\"http://lib.csdn.net/base/17\" class='replace_word' title=\"Java EE知识库\" target='_blank' style='color:#df3434; font-weight:bold;'&gt;Java&lt;/a&gt;',leaf:true&#125;,  </div><div class=\"line\">    &#123;text:'c++',children:[  </div><div class=\"line\">      &#123;text:'thinking',leaf:true&#125;,  </div><div class=\"line\">      &#123;text:'yyyyy',leaf:true&#125;  </div><div class=\"line\">    ]&#125;,  </div><div class=\"line\">  &#123;text:'asp',leaf:true&#125;   </div><div class=\"line\">  ]&#125;,  </div><div class=\"line\">  &#123;text:'jsp',children:[  </div><div class=\"line\">    &#123;text:'dadf',leaf:true&#125;,  </div><div class=\"line\">    &#123;text:'ddddddd',leaf:true&#125;  </div><div class=\"line\">  ]&#125;  </div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<p>此时我们将加载的数据源改为data2.txt。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//创建Tree面板  </span></div><div class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </div><div class=\"line\"> <span class=\"comment\">//指定添加到的div  </span></div><div class=\"line\"> el:<span class=\"string\">'tree-div'</span>,  </div><div class=\"line\"> <span class=\"comment\">//导入数据的URL  </span></div><div class=\"line\"> loader:<span class=\"keyword\">new</span> Ext.tree.TreeLoader(&#123;<span class=\"attr\">dataUrl</span>:<span class=\"string\">'../js/data1.txt'</span>&#125;)  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>这时我们生成的树就不是无限展开的了。<br>今天就这些，下次我们再研究从servlet中获得Json数据来生成ExtJS树。</p>\n","excerpt":"<p>ExtJS是一款基于Ajax的web客户端框架，有着更加和漂亮友好的界面，今天起我就开始学习ExtJS了，下面我把我学习的过程与大家分享。","more":"</p>\n<p>我先学习我最近用到ExtJS Tree。下面我们开始写我们的第一个静态树。<br>1、首先导入ExtJS提供的js和css文件。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;link rel=<span class=\"string\">\"stylesheet\"</span> type=<span class=\"string\">\"text/css\"</span> href=<span class=\"string\">\"../script/resources/css/ext-all.css\"</span> /&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/JavaScript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../script/adapter/ext/ext-base.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></div><div class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"../script/ext-all.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></div><div class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"../script/locale/ext-lang-zh_CN.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></div></pre></td></tr></table></figure></p>\n<p>注意导入顺序，这些文件都可以在extjs的源码包里找到。<br>2、首先我们先要创建一个空的树面板，此时页面上是神马都显示不出来的。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//创建Tree面板  </span></div><div class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </div><div class=\"line\"> <span class=\"comment\">//指定添加到的div  </span></div><div class=\"line\"> el:<span class=\"string\">'tree-div'</span>,  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>页面上应该有div的标签，因为我们写的树即将安插到这里。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id = <span class=\"string\">\"tree-div\"</span> &gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div></pre></td></tr></table></figure></p>\n<p>3、下面我们先创建一个根节点显示在页面上<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//创建Tree面板  </span></div><div class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </div><div class=\"line\"> <span class=\"comment\">//指定添加到的div  </span></div><div class=\"line\"> el:<span class=\"string\">'tree-div'</span>,  </div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> root = Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'跟节点'</span>&#125;);  </div><div class=\"line\">tree.setRootNode(root);  </div><div class=\"line\">tree.render();</div></pre></td></tr></table></figure></p>\n<p>这样页面上就不会是一个空树了，应该显示的是一颗带有一个根节点的树。<br>4、最后我们按照上面的思路创建一个有层次的静态树。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//普通的静态树  </span></div><div class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </div><div class=\"line\"> <span class=\"attr\">el</span>:<span class=\"string\">'tree-div'</span>  </div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"comment\">//创建根节点  </span></div><div class=\"line\"><span class=\"keyword\">var</span> root = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'AllShengFen'</span>&#125;);  </div><div class=\"line\"><span class=\"comment\">//创建父节点  </span></div><div class=\"line\"><span class=\"keyword\">var</span> shengfen1 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'HeiLongJiang'</span>&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> shengfen2 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'LiaoNing'</span>&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> city1 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'harbin'</span>&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> city2 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'daqiang'</span>&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> city3 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'shenyang'</span>&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> city4 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'dalian'</span>&#125;);  </div><div class=\"line\"><span class=\"comment\">//将子节点添加到父节点中  </span></div><div class=\"line\">shengfen1.appendChild(city1);  </div><div class=\"line\">shengfen1.appendChild(city2);  </div><div class=\"line\">shengfen2.appendChild(city3);  </div><div class=\"line\">shengfen2.appendChild(city4);  </div><div class=\"line\"><span class=\"comment\">//将子节点添加到父节点中  </span></div><div class=\"line\">root.appendChild(shengfen1);  </div><div class=\"line\">root.appendChild(shengfen2);  </div><div class=\"line\"><span class=\"comment\">//将root节点设置为根节点  </span></div><div class=\"line\">tree.setRootNode(root);  </div><div class=\"line\"><span class=\"comment\">//使这棵树显示在div标签中  </span></div><div class=\"line\">tree.render();</div></pre></td></tr></table></figure></p>\n<p>这样一棵完整的树就应该显示在页面上了。  </p>\n<p>但是我们大多数用的都不是写死的静态树而是要根据不同数据生成不同的树，接下来我们就看看怎么读取服务器端的文件来生成ExtJS Tree。<br>1、创建一个data1.txt文件，内容是一个json字符串。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[  </div><div class=\"line\"> &#123;<span class=\"attr\">text</span>:<span class=\"string\">'非叶子节点'</span>&#125;,  </div><div class=\"line\"> &#123;<span class=\"attr\">text</span>:<span class=\"string\">'叶子节点'</span>,<span class=\"attr\">leaf</span>:<span class=\"literal\">true</span>&#125;  </div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<p>2、TreeLoader 导入数据的URL。我们需要一个类能够帮我们找到要加载的文件，这个类就是TreeLoader。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//创建Tree面板  </span></div><div class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </div><div class=\"line\"> <span class=\"comment\">//指定添加到的div  </span></div><div class=\"line\"> el:<span class=\"string\">'tree-div'</span>,  </div><div class=\"line\"> <span class=\"comment\">//导入数据的URL  </span></div><div class=\"line\"> loader:<span class=\"keyword\">new</span> Ext.tree.TreeLoader(&#123;<span class=\"attr\">dataUrl</span>:<span class=\"string\">'../js/data1.txt'</span>&#125;)  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>3、但此时我们不能够再用Ext.tree.TreeNode来创建根节点了，用它创建根节点的话在页面上我们就只能看见跟节点。这是因为它不支持ajax，不能加载data.txt的数据，所以此时我们就用到了AsyncTreeNode了。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//创建根节点，使用AsyncTreeNode能够加载外部数据  </span></div><div class=\"line\"><span class=\"keyword\">var</span> root = <span class=\"keyword\">new</span> Ext.tree.AsyncTreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'gen'</span>&#125;);  </div><div class=\"line\"><span class=\"comment\">//设置root为根节点  </span></div><div class=\"line\">tree.setRootNode(root);  </div><div class=\"line\"><span class=\"comment\">//将树显示在div标签上  </span></div><div class=\"line\">tree.render();  </div><div class=\"line\"><span class=\"comment\">//第一个true是自动展开所有字节点，第二个true是以动画效果展开树  </span></div><div class=\"line\">root.expand(<span class=\"literal\">true</span>,<span class=\"literal\">true</span>);</div></pre></td></tr></table></figure></p>\n<p>但此时我们发现，页面上的树开始无限的展开了。当我们将root.expand(true,true)删掉后，打开页面是不自动展开了，但是当我们点击展开的时候还是会无限的展开下去，这是因为AsyncTreeNode能够重新加载它下面的非叶子节点，我们加载的data1.txt里面的数据有一个节点是非叶子节点，所以AsyncTreeNode会再次的把它当做根节点，重新加载数据。所以我们应该给它一个所有节点的最后都是叶子节点的数据文件data2.txt。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">[  </div><div class=\"line\">  &#123;text:'computer',children:[  </div><div class=\"line\">    &#123;text:'&lt;a href=\"http://lib.csdn.net/base/17\" class='replace_word' title=\"Java EE知识库\" target='_blank' style='color:#df3434; font-weight:bold;'&gt;Java&lt;/a&gt;',leaf:true&#125;,  </div><div class=\"line\">    &#123;text:'c++',children:[  </div><div class=\"line\">      &#123;text:'thinking',leaf:true&#125;,  </div><div class=\"line\">      &#123;text:'yyyyy',leaf:true&#125;  </div><div class=\"line\">    ]&#125;,  </div><div class=\"line\">  &#123;text:'asp',leaf:true&#125;   </div><div class=\"line\">  ]&#125;,  </div><div class=\"line\">  &#123;text:'jsp',children:[  </div><div class=\"line\">    &#123;text:'dadf',leaf:true&#125;,  </div><div class=\"line\">    &#123;text:'ddddddd',leaf:true&#125;  </div><div class=\"line\">  ]&#125;  </div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<p>此时我们将加载的数据源改为data2.txt。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//创建Tree面板  </span></div><div class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </div><div class=\"line\"> <span class=\"comment\">//指定添加到的div  </span></div><div class=\"line\"> el:<span class=\"string\">'tree-div'</span>,  </div><div class=\"line\"> <span class=\"comment\">//导入数据的URL  </span></div><div class=\"line\"> loader:<span class=\"keyword\">new</span> Ext.tree.TreeLoader(&#123;<span class=\"attr\">dataUrl</span>:<span class=\"string\">'../js/data1.txt'</span>&#125;)  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>这时我们生成的树就不是无限展开的了。<br>今天就这些，下次我们再研究从servlet中获得Json数据来生成ExtJS树。</p>"},{"title":"设计模式在游戏开发中的应用之命令模式","date":"2016-11-29T06:13:45.000Z","_content":"设计模式在一些大型的软件系统中非常常用，用来处理复杂的结构和逻辑。游戏其实也是一个软件系统，也会有庞大的系统，复杂的逻辑关系，对设计模式的合理使用可以帮助我们更好的去组织各个系统模块，优化逻辑关系，使之可以更好的维护和拓展。本文对常用的设计模式在游戏中的应用进行讨论，而不对设计模式的原理进行过多的阐述了。本文的例子代码也是伪代码，不能够运行。<!--more-->\n\n# 命令模式\n## 通俗的定义  \n将一组行为抽象为对象，使用不同的组合方式来执行命令，以实现解耦。本文介绍的命令模式可能与GoF上的稍有不同，是我自己对游戏开发中设计模式应用的理解。  \n## 结构图：\n![commond](/images/design_1_commond.png)\n## 游戏开发中的使用\n考虑以下场景，假如我们在设计一款RPG游戏，在野外地图肯定会有野怪，野怪会有一些AI逻辑，我们打算设计一套合理的怪物模块。大概如下：\n``` java\n//怪物基类  \nclass Monster {  \n    //行走巡逻  \n    public walk();  \n    //攻击  \n    public attack();  \n    //逃跑  \n    public escape();  \n}\n``` 大体设计包含了怪物行走、攻击和逃跑三个通用的行为特征。很快策划提出了新需求，要加入精英怪物类型，并且精英怪物有他自己独特的逻辑。嗯，幸好我们抽象出了怪物基类，只要继承过来，再增加新的行为即可，新增的精英怪物如下：\n``` java\n//精英怪物  \nclass EliteMonster extends Monster {  \n    //精英怪物独有的行为  \n    public eliteBehavior()  \n}  \n```\n这样就很快的实现了新的需求，EliteMonster继承了Monster基础行为，并且增加了新的行为。接着没过多久策划又提出我们要有BOSS，是的，游戏怎么能没有BOSS呢，好吧我们来添加，毕竟我们设计好了基础行为，只要继承过来，在添加新的行为就好了：\n``` java\n//BOSS  \nclass BossMonster extends Monster {  \n    //BOSS独有的行为  \n    public bossBehavior()  \n}  \n```\n看来我们的代码还是挺健壮的，每次都可以快速的增加新的怪物。但是紧接着新都修改需求提出来了：我们要让BOSS拥有精英怪物的行为。怎么办？还好，我们的程序足够健壮，修改一下继承关系就好了，我们让BossMonster来继承EliteMonster，虽然修改继承关系看起来很危险，但是我们还是完美的解决了问题，BOSS拥有了新的行为。经过一段时间，我们有设计了新的怪物：\n``` java\n//普通怪物  \nclass SimpleMonster extends Monster {  \n    //普通怪物独有的行为  \n    public simpleBehavior()  \n} \n```\n这时不幸的消息传来了：我们想让BOSS同时拥有精英怪物和普通怪物的行为！现在我们有几种解决方案：\n- 把精英怪物的行为和普通怪物的行为，封装到Monster里，作为基础行为，但是这样的话，就是所有怪物都会继承这两种行为，这种多余的基础是我们不想看到的。\n- 就是把SimpleMonster的行为复制一份给BOSS，让BOSS在继承EliteMonster的同时拥有SimpleMonster的行为，但是这样就会有代码的冗余，后面我们修改这种行为的时候就要在两个地方修改。\n- 期望你使用的语言可以多继承。然而多继承并不是一个好的特性和方案。\n\n这时我们想一想，算了，代码冗余就冗余一下吧，毕竟大多数需求我们还是可以很好的实现的。就在我们觉得可以满足需求时，更糟糕的需求又提交过来了：我们需要挂机功能，玩家的角色需要实现一部分AI功能，这时就麻烦了，我们怎么调整这个继承关系，让Player继承谁？看起来继承谁都不太合理。这时我们就要思考一下到底该怎么设计行为这部分，才能让我们适应各种需求的改动。看一下下面这种设计：\n``` java\n//游戏中行为对象的基类  \nclass GameActor {  \n}  \n//玩家对象  \nclass Player extends GameActor {  \n  \n}  \n//命令抽象接口  \ninterface ICommond {  \n    public execute(GameActor ga);  \n}  \n//攻击命令  \nclass AttackCommond {  \n    //参数可以是任何一个行为对象  \n    public execute(GameActor ga);  \n}  \n//执行命令的类  \nclass CommondInvoke {  \n    public addCommond(ICommond commond);  \n    public execute();  \n}  \n//创建一个玩家对象  \nPlayer p = new Player();  \n//创建一个攻击命令  \nICommond attackCommond = new AttackCommond(p);  \n//让玩家执行攻击命令  \nCommondInvoke invoke = new CommondInvoke();  \ninvoke.addCommond(attackCommond);  \ninvoke.execute() \n```\n行为对象都继承GameActor，可以随时增加新的对象。行为命令需要传入一个行为对象来执行行为动作，这里命令与对象进行了解耦，命令与对象可以随意增加与组合。CommondInvoke也可以进一步优化，可以执行多条命令，可以倒序或顺序执行，可以同步或异步，甚至可以随时添加、删除和修改。多个命令的组合也是命令模式的一个特点。此外命令模式还可以处理事务回滚：\n``` java\n//命令抽象接口  \ninterface ICommond {  \n    public execute(GameActor ga);  \n    //撤销函数  \n    public undo();  \n}  \n```\n事务回滚这个特性在服务器中比较常用，比如玩家的一次购买行为，肯定是要保障金钱扣除，道具添加同时打成，否则就算是事务失败，要把修改的内容还原，这时就可以调用undo进行回滚。命令模式暂时介绍这些，下一篇会介绍观察者模式。\n\n","source":"_posts/design-commond.md","raw":"---\ntitle: 设计模式在游戏开发中的应用之命令模式\ndate: 2016-11-29 14:13:45\ntags: 命令模式\ncategories: 设计模式\n---\n设计模式在一些大型的软件系统中非常常用，用来处理复杂的结构和逻辑。游戏其实也是一个软件系统，也会有庞大的系统，复杂的逻辑关系，对设计模式的合理使用可以帮助我们更好的去组织各个系统模块，优化逻辑关系，使之可以更好的维护和拓展。本文对常用的设计模式在游戏中的应用进行讨论，而不对设计模式的原理进行过多的阐述了。本文的例子代码也是伪代码，不能够运行。<!--more-->\n\n# 命令模式\n## 通俗的定义  \n将一组行为抽象为对象，使用不同的组合方式来执行命令，以实现解耦。本文介绍的命令模式可能与GoF上的稍有不同，是我自己对游戏开发中设计模式应用的理解。  \n## 结构图：\n![commond](/images/design_1_commond.png)\n## 游戏开发中的使用\n考虑以下场景，假如我们在设计一款RPG游戏，在野外地图肯定会有野怪，野怪会有一些AI逻辑，我们打算设计一套合理的怪物模块。大概如下：\n``` java\n//怪物基类  \nclass Monster {  \n    //行走巡逻  \n    public walk();  \n    //攻击  \n    public attack();  \n    //逃跑  \n    public escape();  \n}\n``` 大体设计包含了怪物行走、攻击和逃跑三个通用的行为特征。很快策划提出了新需求，要加入精英怪物类型，并且精英怪物有他自己独特的逻辑。嗯，幸好我们抽象出了怪物基类，只要继承过来，再增加新的行为即可，新增的精英怪物如下：\n``` java\n//精英怪物  \nclass EliteMonster extends Monster {  \n    //精英怪物独有的行为  \n    public eliteBehavior()  \n}  \n```\n这样就很快的实现了新的需求，EliteMonster继承了Monster基础行为，并且增加了新的行为。接着没过多久策划又提出我们要有BOSS，是的，游戏怎么能没有BOSS呢，好吧我们来添加，毕竟我们设计好了基础行为，只要继承过来，在添加新的行为就好了：\n``` java\n//BOSS  \nclass BossMonster extends Monster {  \n    //BOSS独有的行为  \n    public bossBehavior()  \n}  \n```\n看来我们的代码还是挺健壮的，每次都可以快速的增加新的怪物。但是紧接着新都修改需求提出来了：我们要让BOSS拥有精英怪物的行为。怎么办？还好，我们的程序足够健壮，修改一下继承关系就好了，我们让BossMonster来继承EliteMonster，虽然修改继承关系看起来很危险，但是我们还是完美的解决了问题，BOSS拥有了新的行为。经过一段时间，我们有设计了新的怪物：\n``` java\n//普通怪物  \nclass SimpleMonster extends Monster {  \n    //普通怪物独有的行为  \n    public simpleBehavior()  \n} \n```\n这时不幸的消息传来了：我们想让BOSS同时拥有精英怪物和普通怪物的行为！现在我们有几种解决方案：\n- 把精英怪物的行为和普通怪物的行为，封装到Monster里，作为基础行为，但是这样的话，就是所有怪物都会继承这两种行为，这种多余的基础是我们不想看到的。\n- 就是把SimpleMonster的行为复制一份给BOSS，让BOSS在继承EliteMonster的同时拥有SimpleMonster的行为，但是这样就会有代码的冗余，后面我们修改这种行为的时候就要在两个地方修改。\n- 期望你使用的语言可以多继承。然而多继承并不是一个好的特性和方案。\n\n这时我们想一想，算了，代码冗余就冗余一下吧，毕竟大多数需求我们还是可以很好的实现的。就在我们觉得可以满足需求时，更糟糕的需求又提交过来了：我们需要挂机功能，玩家的角色需要实现一部分AI功能，这时就麻烦了，我们怎么调整这个继承关系，让Player继承谁？看起来继承谁都不太合理。这时我们就要思考一下到底该怎么设计行为这部分，才能让我们适应各种需求的改动。看一下下面这种设计：\n``` java\n//游戏中行为对象的基类  \nclass GameActor {  \n}  \n//玩家对象  \nclass Player extends GameActor {  \n  \n}  \n//命令抽象接口  \ninterface ICommond {  \n    public execute(GameActor ga);  \n}  \n//攻击命令  \nclass AttackCommond {  \n    //参数可以是任何一个行为对象  \n    public execute(GameActor ga);  \n}  \n//执行命令的类  \nclass CommondInvoke {  \n    public addCommond(ICommond commond);  \n    public execute();  \n}  \n//创建一个玩家对象  \nPlayer p = new Player();  \n//创建一个攻击命令  \nICommond attackCommond = new AttackCommond(p);  \n//让玩家执行攻击命令  \nCommondInvoke invoke = new CommondInvoke();  \ninvoke.addCommond(attackCommond);  \ninvoke.execute() \n```\n行为对象都继承GameActor，可以随时增加新的对象。行为命令需要传入一个行为对象来执行行为动作，这里命令与对象进行了解耦，命令与对象可以随意增加与组合。CommondInvoke也可以进一步优化，可以执行多条命令，可以倒序或顺序执行，可以同步或异步，甚至可以随时添加、删除和修改。多个命令的组合也是命令模式的一个特点。此外命令模式还可以处理事务回滚：\n``` java\n//命令抽象接口  \ninterface ICommond {  \n    public execute(GameActor ga);  \n    //撤销函数  \n    public undo();  \n}  \n```\n事务回滚这个特性在服务器中比较常用，比如玩家的一次购买行为，肯定是要保障金钱扣除，道具添加同时打成，否则就算是事务失败，要把修改的内容还原，这时就可以调用undo进行回滚。命令模式暂时介绍这些，下一篇会介绍观察者模式。\n\n","slug":"design-commond","published":1,"updated":"2017-01-19T11:10:49.477Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyo3mvju000ftsr8dkrt0d12","content":"<p>设计模式在一些大型的软件系统中非常常用，用来处理复杂的结构和逻辑。游戏其实也是一个软件系统，也会有庞大的系统，复杂的逻辑关系，对设计模式的合理使用可以帮助我们更好的去组织各个系统模块，优化逻辑关系，使之可以更好的维护和拓展。本文对常用的设计模式在游戏中的应用进行讨论，而不对设计模式的原理进行过多的阐述了。本文的例子代码也是伪代码，不能够运行。<a id=\"more\"></a></p>\n<h1 id=\"命令模式\"><a href=\"#命令模式\" class=\"headerlink\" title=\"命令模式\"></a>命令模式</h1><h2 id=\"通俗的定义\"><a href=\"#通俗的定义\" class=\"headerlink\" title=\"通俗的定义\"></a>通俗的定义</h2><p>将一组行为抽象为对象，使用不同的组合方式来执行命令，以实现解耦。本文介绍的命令模式可能与GoF上的稍有不同，是我自己对游戏开发中设计模式应用的理解。  </p>\n<h2 id=\"结构图：\"><a href=\"#结构图：\" class=\"headerlink\" title=\"结构图：\"></a>结构图：</h2><p><img src=\"/images/design_1_commond.png\" alt=\"commond\"></p>\n<h2 id=\"游戏开发中的使用\"><a href=\"#游戏开发中的使用\" class=\"headerlink\" title=\"游戏开发中的使用\"></a>游戏开发中的使用</h2><p>考虑以下场景，假如我们在设计一款RPG游戏，在野外地图肯定会有野怪，野怪会有一些AI逻辑，我们打算设计一套合理的怪物模块。大概如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//怪物基类  </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Monster</span> </span>&#123;  </div><div class=\"line\">    <span class=\"comment\">//行走巡逻  </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">walk</span><span class=\"params\">()</span></span>;  </div><div class=\"line\">    <span class=\"comment\">//攻击  </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">attack</span><span class=\"params\">()</span></span>;  </div><div class=\"line\">    <span class=\"comment\">//逃跑  </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">escape</span><span class=\"params\">()</span></span>;  </div><div class=\"line\">&#125;</div><div class=\"line\">``` 大体设计包含了怪物行走、攻击和逃跑三个通用的行为特征。很快策划提出了新需求，要加入精英怪物类型，并且精英怪物有他自己独特的逻辑。嗯，幸好我们抽象出了怪物基类，只要继承过来，再增加新的行为即可，新增的精英怪物如下：</div><div class=\"line\">``` java</div><div class=\"line\"><span class=\"comment\">//精英怪物  </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EliteMonster</span> <span class=\"keyword\">extends</span> <span class=\"title\">Monster</span> </span>&#123;  </div><div class=\"line\">    <span class=\"comment\">//精英怪物独有的行为  </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">eliteBehavior</span><span class=\"params\">()</span>  </span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这样就很快的实现了新的需求，EliteMonster继承了Monster基础行为，并且增加了新的行为。接着没过多久策划又提出我们要有BOSS，是的，游戏怎么能没有BOSS呢，好吧我们来添加，毕竟我们设计好了基础行为，只要继承过来，在添加新的行为就好了：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//BOSS  </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BossMonster</span> <span class=\"keyword\">extends</span> <span class=\"title\">Monster</span> </span>&#123;  </div><div class=\"line\">    <span class=\"comment\">//BOSS独有的行为  </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">bossBehavior</span><span class=\"params\">()</span>  </span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>看来我们的代码还是挺健壮的，每次都可以快速的增加新的怪物。但是紧接着新都修改需求提出来了：我们要让BOSS拥有精英怪物的行为。怎么办？还好，我们的程序足够健壮，修改一下继承关系就好了，我们让BossMonster来继承EliteMonster，虽然修改继承关系看起来很危险，但是我们还是完美的解决了问题，BOSS拥有了新的行为。经过一段时间，我们有设计了新的怪物：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//普通怪物  </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleMonster</span> <span class=\"keyword\">extends</span> <span class=\"title\">Monster</span> </span>&#123;  </div><div class=\"line\">    <span class=\"comment\">//普通怪物独有的行为  </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">simpleBehavior</span><span class=\"params\">()</span>  </span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这时不幸的消息传来了：我们想让BOSS同时拥有精英怪物和普通怪物的行为！现在我们有几种解决方案：</p>\n<ul>\n<li>把精英怪物的行为和普通怪物的行为，封装到Monster里，作为基础行为，但是这样的话，就是所有怪物都会继承这两种行为，这种多余的基础是我们不想看到的。</li>\n<li>就是把SimpleMonster的行为复制一份给BOSS，让BOSS在继承EliteMonster的同时拥有SimpleMonster的行为，但是这样就会有代码的冗余，后面我们修改这种行为的时候就要在两个地方修改。</li>\n<li>期望你使用的语言可以多继承。然而多继承并不是一个好的特性和方案。</li>\n</ul>\n<p>这时我们想一想，算了，代码冗余就冗余一下吧，毕竟大多数需求我们还是可以很好的实现的。就在我们觉得可以满足需求时，更糟糕的需求又提交过来了：我们需要挂机功能，玩家的角色需要实现一部分AI功能，这时就麻烦了，我们怎么调整这个继承关系，让Player继承谁？看起来继承谁都不太合理。这时我们就要思考一下到底该怎么设计行为这部分，才能让我们适应各种需求的改动。看一下下面这种设计：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//游戏中行为对象的基类  </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GameActor</span> </span>&#123;  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"comment\">//玩家对象  </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Player</span> <span class=\"keyword\">extends</span> <span class=\"title\">GameActor</span> </span>&#123;  </div><div class=\"line\">  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"comment\">//命令抽象接口  </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ICommond</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">execute</span><span class=\"params\">(GameActor ga)</span></span>;  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"comment\">//攻击命令  </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AttackCommond</span> </span>&#123;  </div><div class=\"line\">    <span class=\"comment\">//参数可以是任何一个行为对象  </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">execute</span><span class=\"params\">(GameActor ga)</span></span>;  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"comment\">//执行命令的类  </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommondInvoke</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">addCommond</span><span class=\"params\">(ICommond commond)</span></span>;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">execute</span><span class=\"params\">()</span></span>;  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"comment\">//创建一个玩家对象  </span></div><div class=\"line\">Player p = <span class=\"keyword\">new</span> Player();  </div><div class=\"line\"><span class=\"comment\">//创建一个攻击命令  </span></div><div class=\"line\">ICommond attackCommond = <span class=\"keyword\">new</span> AttackCommond(p);  </div><div class=\"line\"><span class=\"comment\">//让玩家执行攻击命令  </span></div><div class=\"line\">CommondInvoke invoke = <span class=\"keyword\">new</span> CommondInvoke();  </div><div class=\"line\">invoke.addCommond(attackCommond);  </div><div class=\"line\">invoke.execute()</div></pre></td></tr></table></figure></p>\n<p>行为对象都继承GameActor，可以随时增加新的对象。行为命令需要传入一个行为对象来执行行为动作，这里命令与对象进行了解耦，命令与对象可以随意增加与组合。CommondInvoke也可以进一步优化，可以执行多条命令，可以倒序或顺序执行，可以同步或异步，甚至可以随时添加、删除和修改。多个命令的组合也是命令模式的一个特点。此外命令模式还可以处理事务回滚：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//命令抽象接口  </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ICommond</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">execute</span><span class=\"params\">(GameActor ga)</span></span>;  </div><div class=\"line\">    <span class=\"comment\">//撤销函数  </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">undo</span><span class=\"params\">()</span></span>;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>事务回滚这个特性在服务器中比较常用，比如玩家的一次购买行为，肯定是要保障金钱扣除，道具添加同时打成，否则就算是事务失败，要把修改的内容还原，这时就可以调用undo进行回滚。命令模式暂时介绍这些，下一篇会介绍观察者模式。</p>\n","excerpt":"<p>设计模式在一些大型的软件系统中非常常用，用来处理复杂的结构和逻辑。游戏其实也是一个软件系统，也会有庞大的系统，复杂的逻辑关系，对设计模式的合理使用可以帮助我们更好的去组织各个系统模块，优化逻辑关系，使之可以更好的维护和拓展。本文对常用的设计模式在游戏中的应用进行讨论，而不对设计模式的原理进行过多的阐述了。本文的例子代码也是伪代码，不能够运行。","more":"</p>\n<h1 id=\"命令模式\"><a href=\"#命令模式\" class=\"headerlink\" title=\"命令模式\"></a>命令模式</h1><h2 id=\"通俗的定义\"><a href=\"#通俗的定义\" class=\"headerlink\" title=\"通俗的定义\"></a>通俗的定义</h2><p>将一组行为抽象为对象，使用不同的组合方式来执行命令，以实现解耦。本文介绍的命令模式可能与GoF上的稍有不同，是我自己对游戏开发中设计模式应用的理解。  </p>\n<h2 id=\"结构图：\"><a href=\"#结构图：\" class=\"headerlink\" title=\"结构图：\"></a>结构图：</h2><p><img src=\"/images/design_1_commond.png\" alt=\"commond\"></p>\n<h2 id=\"游戏开发中的使用\"><a href=\"#游戏开发中的使用\" class=\"headerlink\" title=\"游戏开发中的使用\"></a>游戏开发中的使用</h2><p>考虑以下场景，假如我们在设计一款RPG游戏，在野外地图肯定会有野怪，野怪会有一些AI逻辑，我们打算设计一套合理的怪物模块。大概如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//怪物基类  </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Monster</span> </span>&#123;  </div><div class=\"line\">    <span class=\"comment\">//行走巡逻  </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">walk</span><span class=\"params\">()</span></span>;  </div><div class=\"line\">    <span class=\"comment\">//攻击  </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">attack</span><span class=\"params\">()</span></span>;  </div><div class=\"line\">    <span class=\"comment\">//逃跑  </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">escape</span><span class=\"params\">()</span></span>;  </div><div class=\"line\">&#125;</div><div class=\"line\">``` 大体设计包含了怪物行走、攻击和逃跑三个通用的行为特征。很快策划提出了新需求，要加入精英怪物类型，并且精英怪物有他自己独特的逻辑。嗯，幸好我们抽象出了怪物基类，只要继承过来，再增加新的行为即可，新增的精英怪物如下：</div><div class=\"line\">``` java</div><div class=\"line\"><span class=\"comment\">//精英怪物  </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EliteMonster</span> <span class=\"keyword\">extends</span> <span class=\"title\">Monster</span> </span>&#123;  </div><div class=\"line\">    <span class=\"comment\">//精英怪物独有的行为  </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">eliteBehavior</span><span class=\"params\">()</span>  </div><div class=\"line\">&#125;</span></div></pre></td></tr></table></figure></p>\n<p>这样就很快的实现了新的需求，EliteMonster继承了Monster基础行为，并且增加了新的行为。接着没过多久策划又提出我们要有BOSS，是的，游戏怎么能没有BOSS呢，好吧我们来添加，毕竟我们设计好了基础行为，只要继承过来，在添加新的行为就好了：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//BOSS  </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BossMonster</span> <span class=\"keyword\">extends</span> <span class=\"title\">Monster</span> </span>&#123;  </div><div class=\"line\">    <span class=\"comment\">//BOSS独有的行为  </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">bossBehavior</span><span class=\"params\">()</span>  </div><div class=\"line\">&#125;</span></div></pre></td></tr></table></figure></p>\n<p>看来我们的代码还是挺健壮的，每次都可以快速的增加新的怪物。但是紧接着新都修改需求提出来了：我们要让BOSS拥有精英怪物的行为。怎么办？还好，我们的程序足够健壮，修改一下继承关系就好了，我们让BossMonster来继承EliteMonster，虽然修改继承关系看起来很危险，但是我们还是完美的解决了问题，BOSS拥有了新的行为。经过一段时间，我们有设计了新的怪物：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//普通怪物  </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleMonster</span> <span class=\"keyword\">extends</span> <span class=\"title\">Monster</span> </span>&#123;  </div><div class=\"line\">    <span class=\"comment\">//普通怪物独有的行为  </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">simpleBehavior</span><span class=\"params\">()</span>  </div><div class=\"line\">&#125;</span></div></pre></td></tr></table></figure></p>\n<p>这时不幸的消息传来了：我们想让BOSS同时拥有精英怪物和普通怪物的行为！现在我们有几种解决方案：</p>\n<ul>\n<li>把精英怪物的行为和普通怪物的行为，封装到Monster里，作为基础行为，但是这样的话，就是所有怪物都会继承这两种行为，这种多余的基础是我们不想看到的。</li>\n<li>就是把SimpleMonster的行为复制一份给BOSS，让BOSS在继承EliteMonster的同时拥有SimpleMonster的行为，但是这样就会有代码的冗余，后面我们修改这种行为的时候就要在两个地方修改。</li>\n<li>期望你使用的语言可以多继承。然而多继承并不是一个好的特性和方案。</li>\n</ul>\n<p>这时我们想一想，算了，代码冗余就冗余一下吧，毕竟大多数需求我们还是可以很好的实现的。就在我们觉得可以满足需求时，更糟糕的需求又提交过来了：我们需要挂机功能，玩家的角色需要实现一部分AI功能，这时就麻烦了，我们怎么调整这个继承关系，让Player继承谁？看起来继承谁都不太合理。这时我们就要思考一下到底该怎么设计行为这部分，才能让我们适应各种需求的改动。看一下下面这种设计：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//游戏中行为对象的基类  </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GameActor</span> </span>&#123;  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"comment\">//玩家对象  </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Player</span> <span class=\"keyword\">extends</span> <span class=\"title\">GameActor</span> </span>&#123;  </div><div class=\"line\">  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"comment\">//命令抽象接口  </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ICommond</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">execute</span><span class=\"params\">(GameActor ga)</span></span>;  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"comment\">//攻击命令  </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AttackCommond</span> </span>&#123;  </div><div class=\"line\">    <span class=\"comment\">//参数可以是任何一个行为对象  </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">execute</span><span class=\"params\">(GameActor ga)</span></span>;  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"comment\">//执行命令的类  </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommondInvoke</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">addCommond</span><span class=\"params\">(ICommond commond)</span></span>;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">execute</span><span class=\"params\">()</span></span>;  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"comment\">//创建一个玩家对象  </span></div><div class=\"line\">Player p = <span class=\"keyword\">new</span> Player();  </div><div class=\"line\"><span class=\"comment\">//创建一个攻击命令  </span></div><div class=\"line\">ICommond attackCommond = <span class=\"keyword\">new</span> AttackCommond(p);  </div><div class=\"line\"><span class=\"comment\">//让玩家执行攻击命令  </span></div><div class=\"line\">CommondInvoke invoke = <span class=\"keyword\">new</span> CommondInvoke();  </div><div class=\"line\">invoke.addCommond(attackCommond);  </div><div class=\"line\">invoke.execute()</div></pre></td></tr></table></figure></p>\n<p>行为对象都继承GameActor，可以随时增加新的对象。行为命令需要传入一个行为对象来执行行为动作，这里命令与对象进行了解耦，命令与对象可以随意增加与组合。CommondInvoke也可以进一步优化，可以执行多条命令，可以倒序或顺序执行，可以同步或异步，甚至可以随时添加、删除和修改。多个命令的组合也是命令模式的一个特点。此外命令模式还可以处理事务回滚：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//命令抽象接口  </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ICommond</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">execute</span><span class=\"params\">(GameActor ga)</span></span>;  </div><div class=\"line\">    <span class=\"comment\">//撤销函数  </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">undo</span><span class=\"params\">()</span></span>;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>事务回滚这个特性在服务器中比较常用，比如玩家的一次购买行为，肯定是要保障金钱扣除，道具添加同时打成，否则就算是事务失败，要把修改的内容还原，这时就可以调用undo进行回滚。命令模式暂时介绍这些，下一篇会介绍观察者模式。</p>"},{"title":"设计模式在游戏开发中的应用之观察者模式","date":"2016-12-01T14:41:17.000Z","_content":"# 观察者模式\n## 通俗的定义\n触发事件的一方不关心谁来处理，处理事件的一方不关心事件是从哪里来的。观察者模式就是让观察者与被观察者彻底解耦。\n## 结构图如下\n![observer](/images/design_2_observer.png)\n<!--more-->\n## 游戏开发中的使用\n当我们设计一个成就系统的时候，往往要在各个系统都要增加判断，比如杀死某种怪物多少只，新手往往可能这么写：\n``` java\npublic static KILL_1009_COUNT = 0;  \nmain () {  \n    //killMonster是杀死一个怪物，返回杀死怪物的id  \n    int id = killMonster();  \n    //如果杀死的怪物是1009那么数量加一，超过100次达成成就  \n    if (id == \"1009\") {  \n        KILL_1009_COUNT++;  \n        if (KILL_1009_COUNT > 100) {  \n            print(\"达成成就！杀死1009怪物100次！\");  \n        }  \n    }  \n}  \n```\n如果这样写下去，后果将不堪设想：各个类直接将会超级耦合，成就判断将会蔓延到整个项目的每个角落！观察者模式就是为了解决这个问题而出现的。观察者模式让代码彻底解耦，还是上面的那个例子：\n``` java\nmain () {  \n    //killMonster是杀死一个怪物，返回杀死怪物的id  \n    int id = killMonster();  \n    //发送消息，杀死怪物，并将杀死的怪物id一起发送  \n    notify(EVENT_KILL_MONSTER, id);  \n}  \n```\n这样代码的各个功能就不用关心成就相关的逻辑，只是通知我做了这样一件事情就可以了。同样，游戏中这样的例子到处都是，比如增加经验时，我们发送增加经验的消息，接收消息的地方来处理到底升没升级，因为可以增加经验的地方有很多，这样我们就不用导出判断是否升级了。下面看一下观察者的实现：\n``` java\n//处理观察者与被观察者  \nclass Notification {  \n    //一个可变的观察者列表  \n    private List observerList = null;  \n    //该类是单例（后面我们会单独讲单例模式）  \n    private static Notification _instance = null;     \n    public static getInstance() {  \n        if (_instance == null) {  \n            _instance = new Notification();  \n            //初始化列表容器  \n            observerList = new ArrayList();  \n        }  \n        return _instance;  \n    }  \n    //添加观察者  \n    public void addObserver(Observer obs) {  \n        if (!observerList.isExistobs {  \n            observerList.add(obs);  \n        }  \n    }  \n    //删除观察者  \n    public void removeObserver(Observer obs) {  \n        observerList.remove(obs);  \n    }  \n      \n    //广播消息  \n    public void sendMsg(String event, ..) {  \n        for (Observer obs : observerList) {  \n            if (obs.event == event) {  \n                obs.onNotify(..);  \n            }  \n        }  \n    }  \n}  \n  \n//观察者基类  \nclass Observer {  \n    String event;  \n    //接收消息函数，event是消息类型，后面是参数  \n    void onNotify(..)  \n    //添加观察者  \n    void addObserver(String event) {  \n        event = event;  \n        Notification.getInstance().addObserver(this);  \n    }  \n}  \n  \n//杀怪成就观察者  \nclass AchievementObserver extends Observer {  \n    void onNotify(id) {  \n        if (id == 1009) {  \n            //处理杀1009怪的成就逻辑  \n        } else if (id == 1010) {  \n            //处理杀1010怪的成就逻辑  \n        }  \n    }  \n}  \n  \nmain () {  \n    //killMonster是杀死一个怪物，返回杀死怪物的id  \n    int id = killMonster();  \n    //发送消息，杀死怪物，并将杀死的怪物id一起发送  \n    Notification.getInstance().sendMsg(EVENT_KILL_MONSTER, id);  \n}\n```\n然后在写一个成就管理类来管理各种成就观察者，这样各个成就直接也可以解耦。\n## 其他问题\n- 引用销毁问题：这个问题容易造成内存泄漏，就是在这个观察者不再使用时，一定记得将其remove，否则这个观察者一直在引用着，不会被释放。\n- 同步异步问题：sendMsg这个函数中是在主线程按加入顺序进行发送的，在特殊情况下根据需要可以使用多线程来实现。\n- 其他应用：观察者模式在MVC这种结构下也经常使用，control来处理逻辑，通过观察者来相应UI事件。\n观察者模式的优点就是可以做到完全的解耦；缺点就是使用不当会让程序难以维护和调试。","source":"_posts/design-observer.md","raw":"---\ntitle: 设计模式在游戏开发中的应用之观察者模式\ndate: 2016-12-01 22:41:17\ntags: 观察者模式\ncategories: 设计模式\n---\n# 观察者模式\n## 通俗的定义\n触发事件的一方不关心谁来处理，处理事件的一方不关心事件是从哪里来的。观察者模式就是让观察者与被观察者彻底解耦。\n## 结构图如下\n![observer](/images/design_2_observer.png)\n<!--more-->\n## 游戏开发中的使用\n当我们设计一个成就系统的时候，往往要在各个系统都要增加判断，比如杀死某种怪物多少只，新手往往可能这么写：\n``` java\npublic static KILL_1009_COUNT = 0;  \nmain () {  \n    //killMonster是杀死一个怪物，返回杀死怪物的id  \n    int id = killMonster();  \n    //如果杀死的怪物是1009那么数量加一，超过100次达成成就  \n    if (id == \"1009\") {  \n        KILL_1009_COUNT++;  \n        if (KILL_1009_COUNT > 100) {  \n            print(\"达成成就！杀死1009怪物100次！\");  \n        }  \n    }  \n}  \n```\n如果这样写下去，后果将不堪设想：各个类直接将会超级耦合，成就判断将会蔓延到整个项目的每个角落！观察者模式就是为了解决这个问题而出现的。观察者模式让代码彻底解耦，还是上面的那个例子：\n``` java\nmain () {  \n    //killMonster是杀死一个怪物，返回杀死怪物的id  \n    int id = killMonster();  \n    //发送消息，杀死怪物，并将杀死的怪物id一起发送  \n    notify(EVENT_KILL_MONSTER, id);  \n}  \n```\n这样代码的各个功能就不用关心成就相关的逻辑，只是通知我做了这样一件事情就可以了。同样，游戏中这样的例子到处都是，比如增加经验时，我们发送增加经验的消息，接收消息的地方来处理到底升没升级，因为可以增加经验的地方有很多，这样我们就不用导出判断是否升级了。下面看一下观察者的实现：\n``` java\n//处理观察者与被观察者  \nclass Notification {  \n    //一个可变的观察者列表  \n    private List observerList = null;  \n    //该类是单例（后面我们会单独讲单例模式）  \n    private static Notification _instance = null;     \n    public static getInstance() {  \n        if (_instance == null) {  \n            _instance = new Notification();  \n            //初始化列表容器  \n            observerList = new ArrayList();  \n        }  \n        return _instance;  \n    }  \n    //添加观察者  \n    public void addObserver(Observer obs) {  \n        if (!observerList.isExistobs {  \n            observerList.add(obs);  \n        }  \n    }  \n    //删除观察者  \n    public void removeObserver(Observer obs) {  \n        observerList.remove(obs);  \n    }  \n      \n    //广播消息  \n    public void sendMsg(String event, ..) {  \n        for (Observer obs : observerList) {  \n            if (obs.event == event) {  \n                obs.onNotify(..);  \n            }  \n        }  \n    }  \n}  \n  \n//观察者基类  \nclass Observer {  \n    String event;  \n    //接收消息函数，event是消息类型，后面是参数  \n    void onNotify(..)  \n    //添加观察者  \n    void addObserver(String event) {  \n        event = event;  \n        Notification.getInstance().addObserver(this);  \n    }  \n}  \n  \n//杀怪成就观察者  \nclass AchievementObserver extends Observer {  \n    void onNotify(id) {  \n        if (id == 1009) {  \n            //处理杀1009怪的成就逻辑  \n        } else if (id == 1010) {  \n            //处理杀1010怪的成就逻辑  \n        }  \n    }  \n}  \n  \nmain () {  \n    //killMonster是杀死一个怪物，返回杀死怪物的id  \n    int id = killMonster();  \n    //发送消息，杀死怪物，并将杀死的怪物id一起发送  \n    Notification.getInstance().sendMsg(EVENT_KILL_MONSTER, id);  \n}\n```\n然后在写一个成就管理类来管理各种成就观察者，这样各个成就直接也可以解耦。\n## 其他问题\n- 引用销毁问题：这个问题容易造成内存泄漏，就是在这个观察者不再使用时，一定记得将其remove，否则这个观察者一直在引用着，不会被释放。\n- 同步异步问题：sendMsg这个函数中是在主线程按加入顺序进行发送的，在特殊情况下根据需要可以使用多线程来实现。\n- 其他应用：观察者模式在MVC这种结构下也经常使用，control来处理逻辑，通过观察者来相应UI事件。\n观察者模式的优点就是可以做到完全的解耦；缺点就是使用不当会让程序难以维护和调试。","slug":"design-observer","published":1,"updated":"2017-01-19T11:10:49.478Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyo3mvp5000vtsr85nlm8tcc","content":"<h1 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h1><h2 id=\"通俗的定义\"><a href=\"#通俗的定义\" class=\"headerlink\" title=\"通俗的定义\"></a>通俗的定义</h2><p>触发事件的一方不关心谁来处理，处理事件的一方不关心事件是从哪里来的。观察者模式就是让观察者与被观察者彻底解耦。</p>\n<h2 id=\"结构图如下\"><a href=\"#结构图如下\" class=\"headerlink\" title=\"结构图如下\"></a>结构图如下</h2><p><img src=\"/images/design_2_observer.png\" alt=\"observer\"><br><a id=\"more\"></a></p>\n<h2 id=\"游戏开发中的使用\"><a href=\"#游戏开发中的使用\" class=\"headerlink\" title=\"游戏开发中的使用\"></a>游戏开发中的使用</h2><p>当我们设计一个成就系统的时候，往往要在各个系统都要增加判断，比如杀死某种怪物多少只，新手往往可能这么写：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> KILL_1009_COUNT = <span class=\"number\">0</span>;  </div><div class=\"line\">main () &#123;  </div><div class=\"line\">    <span class=\"comment\">//killMonster是杀死一个怪物，返回杀死怪物的id  </span></div><div class=\"line\">    <span class=\"keyword\">int</span> id = killMonster();  </div><div class=\"line\">    <span class=\"comment\">//如果杀死的怪物是1009那么数量加一，超过100次达成成就  </span></div><div class=\"line\">    <span class=\"keyword\">if</span> (id == <span class=\"string\">\"1009\"</span>) &#123;  </div><div class=\"line\">        KILL_1009_COUNT++;  </div><div class=\"line\">        <span class=\"keyword\">if</span> (KILL_1009_COUNT &gt; <span class=\"number\">100</span>) &#123;  </div><div class=\"line\">            print(<span class=\"string\">\"达成成就！杀死1009怪物100次！\"</span>);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果这样写下去，后果将不堪设想：各个类直接将会超级耦合，成就判断将会蔓延到整个项目的每个角落！观察者模式就是为了解决这个问题而出现的。观察者模式让代码彻底解耦，还是上面的那个例子：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">main () &#123;  </div><div class=\"line\">    <span class=\"comment\">//killMonster是杀死一个怪物，返回杀死怪物的id  </span></div><div class=\"line\">    <span class=\"keyword\">int</span> id = killMonster();  </div><div class=\"line\">    <span class=\"comment\">//发送消息，杀死怪物，并将杀死的怪物id一起发送  </span></div><div class=\"line\">    notify(EVENT_KILL_MONSTER, id);  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这样代码的各个功能就不用关心成就相关的逻辑，只是通知我做了这样一件事情就可以了。同样，游戏中这样的例子到处都是，比如增加经验时，我们发送增加经验的消息，接收消息的地方来处理到底升没升级，因为可以增加经验的地方有很多，这样我们就不用导出判断是否升级了。下面看一下观察者的实现：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//处理观察者与被观察者  </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Notification</span> </span>&#123;  </div><div class=\"line\">    <span class=\"comment\">//一个可变的观察者列表  </span></div><div class=\"line\">    <span class=\"keyword\">private</span> List observerList = <span class=\"keyword\">null</span>;  </div><div class=\"line\">    <span class=\"comment\">//该类是单例（后面我们会单独讲单例模式）  </span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Notification _instance = <span class=\"keyword\">null</span>;     </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span> (_instance == <span class=\"keyword\">null</span>) &#123;  </div><div class=\"line\">            _instance = <span class=\"keyword\">new</span> Notification();  </div><div class=\"line\">            <span class=\"comment\">//初始化列表容器  </span></div><div class=\"line\">            observerList = <span class=\"keyword\">new</span> ArrayList();  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        <span class=\"keyword\">return</span> _instance;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"comment\">//添加观察者  </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addObserver</span><span class=\"params\">(Observer obs)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span> (!observerList.isExistobs &#123;  </div><div class=\"line\">            observerList.add(obs);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"comment\">//删除观察者  </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeObserver</span><span class=\"params\">(Observer obs)</span> </span>&#123;  </div><div class=\"line\">        observerList.remove(obs);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"comment\">//广播消息  </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sendMsg</span><span class=\"params\">(String event, ..)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">for</span> (Observer obs : observerList) &#123;  </div><div class=\"line\">            <span class=\"keyword\">if</span> (obs.event == event) &#123;  </div><div class=\"line\">                obs.onNotify(..);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//观察者基类  </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer</span> </span>&#123;  </div><div class=\"line\">    String event;  </div><div class=\"line\">    <span class=\"comment\">//接收消息函数，event是消息类型，后面是参数  </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onNotify</span><span class=\"params\">(..)</span>  </span></div><div class=\"line\">    <span class=\"comment\">//添加观察者  </span></div><div class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title\">addObserver</span><span class=\"params\">(String event)</span> &#123;  </div><div class=\"line\">        event = event;  </div><div class=\"line\">        Notification.getInstance().addObserver(<span class=\"keyword\">this</span>);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//杀怪成就观察者  </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AchievementObserver</span> <span class=\"keyword\">extends</span> <span class=\"title\">Observer</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onNotify</span><span class=\"params\">(id)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span> (id == <span class=\"number\">1009</span>) &#123;  </div><div class=\"line\">            <span class=\"comment\">//处理杀1009怪的成就逻辑  </span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (id == <span class=\"number\">1010</span>) &#123;  </div><div class=\"line\">            <span class=\"comment\">//处理杀1010怪的成就逻辑  </span></div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\">main () &#123;  </div><div class=\"line\">    <span class=\"comment\">//killMonster是杀死一个怪物，返回杀死怪物的id  </span></div><div class=\"line\">    <span class=\"keyword\">int</span> id = killMonster();  </div><div class=\"line\">    <span class=\"comment\">//发送消息，杀死怪物，并将杀死的怪物id一起发送  </span></div><div class=\"line\">    Notification.getInstance().sendMsg(EVENT_KILL_MONSTER, id);  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然后在写一个成就管理类来管理各种成就观察者，这样各个成就直接也可以解耦。</p>\n<h2 id=\"其他问题\"><a href=\"#其他问题\" class=\"headerlink\" title=\"其他问题\"></a>其他问题</h2><ul>\n<li>引用销毁问题：这个问题容易造成内存泄漏，就是在这个观察者不再使用时，一定记得将其remove，否则这个观察者一直在引用着，不会被释放。</li>\n<li>同步异步问题：sendMsg这个函数中是在主线程按加入顺序进行发送的，在特殊情况下根据需要可以使用多线程来实现。</li>\n<li>其他应用：观察者模式在MVC这种结构下也经常使用，control来处理逻辑，通过观察者来相应UI事件。<br>观察者模式的优点就是可以做到完全的解耦；缺点就是使用不当会让程序难以维护和调试。</li>\n</ul>\n","excerpt":"<h1 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h1><h2 id=\"通俗的定义\"><a href=\"#通俗的定义\" class=\"headerlink\" title=\"通俗的定义\"></a>通俗的定义</h2><p>触发事件的一方不关心谁来处理，处理事件的一方不关心事件是从哪里来的。观察者模式就是让观察者与被观察者彻底解耦。</p>\n<h2 id=\"结构图如下\"><a href=\"#结构图如下\" class=\"headerlink\" title=\"结构图如下\"></a>结构图如下</h2><p><img src=\"/images/design_2_observer.png\" alt=\"observer\"><br>","more":"</p>\n<h2 id=\"游戏开发中的使用\"><a href=\"#游戏开发中的使用\" class=\"headerlink\" title=\"游戏开发中的使用\"></a>游戏开发中的使用</h2><p>当我们设计一个成就系统的时候，往往要在各个系统都要增加判断，比如杀死某种怪物多少只，新手往往可能这么写：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> KILL_1009_COUNT = <span class=\"number\">0</span>;  </div><div class=\"line\">main () &#123;  </div><div class=\"line\">    <span class=\"comment\">//killMonster是杀死一个怪物，返回杀死怪物的id  </span></div><div class=\"line\">    <span class=\"keyword\">int</span> id = killMonster();  </div><div class=\"line\">    <span class=\"comment\">//如果杀死的怪物是1009那么数量加一，超过100次达成成就  </span></div><div class=\"line\">    <span class=\"keyword\">if</span> (id == <span class=\"string\">\"1009\"</span>) &#123;  </div><div class=\"line\">        KILL_1009_COUNT++;  </div><div class=\"line\">        <span class=\"keyword\">if</span> (KILL_1009_COUNT &gt; <span class=\"number\">100</span>) &#123;  </div><div class=\"line\">            print(<span class=\"string\">\"达成成就！杀死1009怪物100次！\"</span>);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果这样写下去，后果将不堪设想：各个类直接将会超级耦合，成就判断将会蔓延到整个项目的每个角落！观察者模式就是为了解决这个问题而出现的。观察者模式让代码彻底解耦，还是上面的那个例子：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">main () &#123;  </div><div class=\"line\">    <span class=\"comment\">//killMonster是杀死一个怪物，返回杀死怪物的id  </span></div><div class=\"line\">    <span class=\"keyword\">int</span> id = killMonster();  </div><div class=\"line\">    <span class=\"comment\">//发送消息，杀死怪物，并将杀死的怪物id一起发送  </span></div><div class=\"line\">    notify(EVENT_KILL_MONSTER, id);  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这样代码的各个功能就不用关心成就相关的逻辑，只是通知我做了这样一件事情就可以了。同样，游戏中这样的例子到处都是，比如增加经验时，我们发送增加经验的消息，接收消息的地方来处理到底升没升级，因为可以增加经验的地方有很多，这样我们就不用导出判断是否升级了。下面看一下观察者的实现：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//处理观察者与被观察者  </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Notification</span> </span>&#123;  </div><div class=\"line\">    <span class=\"comment\">//一个可变的观察者列表  </span></div><div class=\"line\">    <span class=\"keyword\">private</span> List observerList = <span class=\"keyword\">null</span>;  </div><div class=\"line\">    <span class=\"comment\">//该类是单例（后面我们会单独讲单例模式）  </span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Notification _instance = <span class=\"keyword\">null</span>;     </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span> (_instance == <span class=\"keyword\">null</span>) &#123;  </div><div class=\"line\">            _instance = <span class=\"keyword\">new</span> Notification();  </div><div class=\"line\">            <span class=\"comment\">//初始化列表容器  </span></div><div class=\"line\">            observerList = <span class=\"keyword\">new</span> ArrayList();  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        <span class=\"keyword\">return</span> _instance;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"comment\">//添加观察者  </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addObserver</span><span class=\"params\">(Observer obs)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span> (!observerList.isExistobs &#123;  </div><div class=\"line\">            observerList.add(obs);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"comment\">//删除观察者  </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeObserver</span><span class=\"params\">(Observer obs)</span> </span>&#123;  </div><div class=\"line\">        observerList.remove(obs);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"comment\">//广播消息  </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sendMsg</span><span class=\"params\">(String event, ..)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">for</span> (Observer obs : observerList) &#123;  </div><div class=\"line\">            <span class=\"keyword\">if</span> (obs.event == event) &#123;  </div><div class=\"line\">                obs.onNotify(..);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//观察者基类  </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer</span> </span>&#123;  </div><div class=\"line\">    String event;  </div><div class=\"line\">    <span class=\"comment\">//接收消息函数，event是消息类型，后面是参数  </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onNotify</span><span class=\"params\">(..)</span>  </div><div class=\"line\">    <span class=\"comment\">//添加观察者  </span></div><div class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title\">addObserver</span><span class=\"params\">(String event)</span> </span>&#123;  </div><div class=\"line\">        event = event;  </div><div class=\"line\">        Notification.getInstance().addObserver(<span class=\"keyword\">this</span>);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//杀怪成就观察者  </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AchievementObserver</span> <span class=\"keyword\">extends</span> <span class=\"title\">Observer</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onNotify</span><span class=\"params\">(id)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span> (id == <span class=\"number\">1009</span>) &#123;  </div><div class=\"line\">            <span class=\"comment\">//处理杀1009怪的成就逻辑  </span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (id == <span class=\"number\">1010</span>) &#123;  </div><div class=\"line\">            <span class=\"comment\">//处理杀1010怪的成就逻辑  </span></div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\">main () &#123;  </div><div class=\"line\">    <span class=\"comment\">//killMonster是杀死一个怪物，返回杀死怪物的id  </span></div><div class=\"line\">    <span class=\"keyword\">int</span> id = killMonster();  </div><div class=\"line\">    <span class=\"comment\">//发送消息，杀死怪物，并将杀死的怪物id一起发送  </span></div><div class=\"line\">    Notification.getInstance().sendMsg(EVENT_KILL_MONSTER, id);  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然后在写一个成就管理类来管理各种成就观察者，这样各个成就直接也可以解耦。</p>\n<h2 id=\"其他问题\"><a href=\"#其他问题\" class=\"headerlink\" title=\"其他问题\"></a>其他问题</h2><ul>\n<li>引用销毁问题：这个问题容易造成内存泄漏，就是在这个观察者不再使用时，一定记得将其remove，否则这个观察者一直在引用着，不会被释放。</li>\n<li>同步异步问题：sendMsg这个函数中是在主线程按加入顺序进行发送的，在特殊情况下根据需要可以使用多线程来实现。</li>\n<li>其他应用：观察者模式在MVC这种结构下也经常使用，control来处理逻辑，通过观察者来相应UI事件。<br>观察者模式的优点就是可以做到完全的解耦；缺点就是使用不当会让程序难以维护和调试。</li>\n</ul>"},{"title":"学会理财，创造财富－－读《富爸爸穷爸爸》","date":"2017-01-10T15:09:51.000Z","_content":"&nbsp;&nbsp;&nbsp;&nbsp;以往我看到理财这个词的时候，往往就是认为它就是让你记账，记下你的钱都去哪了，然后看看能从哪里剩下不该花的钱；还有就是买理财产品，就是把你剩下来的钱，存到银行或者购买理财基金。当我看了《富爸爸穷爸爸》这本书后，对理财有了新的理解。比如现在很多人最大的错误就是认为赚钱的技能才是富有的秘诀，然而富有的真正秘诀是如何花钱。还要很多人对资产与负债完全分不清，包括我自己，就是这些想法造成了我们无法积累财富现状。作者反复提到的一句话“离开学校是学习的起点，而不是终点。”是我们很多人没有意识到的，虽然离开学校后我一直在学习，但是从来没有学习过有关理财方面的知识，包括我们的教育体系也没有教大家怎么创造和积累财富，学校和父母只是告诉我们要好好学习。<!--more-->\n&nbsp;&nbsp;&nbsp;&nbsp;对理财的彻底认识非常重要，它包括赚了钱后如何处理这些钱？又怎样防止别人从你手中拿走这些钱？你能拥有这些钱多久？如何让钱生钱？我们很多人都是活在努力工作提高自己的收入，然而现实往往是这样，你的收入越高，你的贷款越多，负债越多，财务问题越严重，这也是没有分清资产与债务的造成的。债务可能很多人都了解，就是我们欠下的钱，需要还给银行或者他人的。那么资产是什么呢？车？房？金银珠宝？我之前的理解就是这些，我甚至认为我家里的iPad也是我的资产，因为他可以卖钱。我相信大多数人也是这么理解的，悲哀的是就是这种认知让90%的人一直奔波于“赚钱-花钱-还贷”的怪圈之中。真正的资产是能为你带来收入的东西，打个比方，你贷款买了一个房子，每月需要还贷款6000，租出去可以收房租4000，那么这个房子就是你的负债而不是资产，因为它不断的将你的现金流转移到了银行。如果你每月还贷4000，租出去收房租6000，那么这个房子每月为你带来2000元的收益，那么这部分投入的钱就是你的资产，因为它可以产生钱，而不是套牢你的首付，再不断的拿走你兜里的钱。这就是资产与首付的重要区别。\n&nbsp;&nbsp;&nbsp;&nbsp;资产的最大特点就是不需要你到场就可以正常运转，就可以不断的产生收入，不断的积累你的资产会使你获得财务自由。积累负债只会让你离自由越来越远。不能积累财富的人有一个特点是：动用积蓄去增加负债。富有的人特点是：动用继续去增加资产。我们也总是告诉自己，现在手上没有钱，等攒下一些钱后再进行投资，然而这种想法加上上面说的的习惯和思想会让你永远没有钱去投资。“想致富，走险路”这不是一个段子，将钱存入银行永远是最安全的办法，但也永远不能实现财富增长，现在的通货膨胀远比银行利率要高。要有胆量和勇气去投资，当然也不要盲目。这需要你有很多方面的知识和勤于关注世界的变化。关于这点，书里有个比较有趣的例子:每当超市大减价 ，如卫生纸打折时 ，消费者就会涌入超市抢购 。而当股票市场上出现股价下跌时 ，也就是大多数人所说的股市下挫或回调时 ，购买者却急于从中逃出 。当超市商品涨价时 ，人们转到其他商店购物 。而当股市上升时 ，购买者却大举买入股票 。\n&nbsp;&nbsp;&nbsp;&nbsp;大家应该重点关注自己的“收入-支出-负债-资产”这几项，将收入投入资产项，减少负债项，用资产项产生的收益去做你的支出项，能做到这样的科学良性循环，那么就能够跳离赚钱-花钱-还贷”的怪圈，实现财富自由了。\n如果在上学的时候就能学习到这些知识，认识到财富的秘诀，那么很多人都可以在30岁前实现经济独立，相对自由的生活方式。不过无论什么时候都不算晚，现在开始努力学习，提高自己的财务能力，打造自己的“收入-支出-负债-资产”表，实现财富自由。\n\n下面是书中一些我认为很有用的观点：\n1.贫穷和破产的区别是：破产是暂时的，贫穷是永远的。\n2.离开学校是学习的起点，而不是终点。\n3.如何赚钱不是发财的秘诀，发财的秘诀是如何花钱。\n4.理财：赚了钱后如何处理这些钱？又怎样防止别人从你手中拿走这些钱？你能拥有这些钱多久？如何让钱生钱？\n5.你的职业和你的事业有很大的区别。\n6.将收入变成资产才能获得真正的财务安全。\n7.拥有不需要你到场就可以正常运转的业务，会使你获得财务自由。\n8.“收入-纳税-支出”与“收入-支出-纳税”有很大的区别\n9.用税前收入支付开支\n10.没有从未亏过钱的富人，却有很多从未亏过钱的穷人。\n11.自律是积累财富中最重要的品质。\n12.开创事业最重要的几个能力分别是：现金流管理、人事管理、个人时间管理。\n13.不能积累财富的人有一个特点是：动用积蓄去增加负债。富有的人特点是：动用继续去增加资产。\n14.风险与收益并存。\n15.市场上有许多廉价交易 ，但只有存在变化 ，才能使廉价交易变得有利可图 。","source":"_posts/rich-father.md","raw":"---\ntitle: 学会理财，创造财富－－读《富爸爸穷爸爸》\ndate: 2017-01-10 23:09:51\ntags: 理财\ncategories: 读书笔记\n---\n&nbsp;&nbsp;&nbsp;&nbsp;以往我看到理财这个词的时候，往往就是认为它就是让你记账，记下你的钱都去哪了，然后看看能从哪里剩下不该花的钱；还有就是买理财产品，就是把你剩下来的钱，存到银行或者购买理财基金。当我看了《富爸爸穷爸爸》这本书后，对理财有了新的理解。比如现在很多人最大的错误就是认为赚钱的技能才是富有的秘诀，然而富有的真正秘诀是如何花钱。还要很多人对资产与负债完全分不清，包括我自己，就是这些想法造成了我们无法积累财富现状。作者反复提到的一句话“离开学校是学习的起点，而不是终点。”是我们很多人没有意识到的，虽然离开学校后我一直在学习，但是从来没有学习过有关理财方面的知识，包括我们的教育体系也没有教大家怎么创造和积累财富，学校和父母只是告诉我们要好好学习。<!--more-->\n&nbsp;&nbsp;&nbsp;&nbsp;对理财的彻底认识非常重要，它包括赚了钱后如何处理这些钱？又怎样防止别人从你手中拿走这些钱？你能拥有这些钱多久？如何让钱生钱？我们很多人都是活在努力工作提高自己的收入，然而现实往往是这样，你的收入越高，你的贷款越多，负债越多，财务问题越严重，这也是没有分清资产与债务的造成的。债务可能很多人都了解，就是我们欠下的钱，需要还给银行或者他人的。那么资产是什么呢？车？房？金银珠宝？我之前的理解就是这些，我甚至认为我家里的iPad也是我的资产，因为他可以卖钱。我相信大多数人也是这么理解的，悲哀的是就是这种认知让90%的人一直奔波于“赚钱-花钱-还贷”的怪圈之中。真正的资产是能为你带来收入的东西，打个比方，你贷款买了一个房子，每月需要还贷款6000，租出去可以收房租4000，那么这个房子就是你的负债而不是资产，因为它不断的将你的现金流转移到了银行。如果你每月还贷4000，租出去收房租6000，那么这个房子每月为你带来2000元的收益，那么这部分投入的钱就是你的资产，因为它可以产生钱，而不是套牢你的首付，再不断的拿走你兜里的钱。这就是资产与首付的重要区别。\n&nbsp;&nbsp;&nbsp;&nbsp;资产的最大特点就是不需要你到场就可以正常运转，就可以不断的产生收入，不断的积累你的资产会使你获得财务自由。积累负债只会让你离自由越来越远。不能积累财富的人有一个特点是：动用积蓄去增加负债。富有的人特点是：动用继续去增加资产。我们也总是告诉自己，现在手上没有钱，等攒下一些钱后再进行投资，然而这种想法加上上面说的的习惯和思想会让你永远没有钱去投资。“想致富，走险路”这不是一个段子，将钱存入银行永远是最安全的办法，但也永远不能实现财富增长，现在的通货膨胀远比银行利率要高。要有胆量和勇气去投资，当然也不要盲目。这需要你有很多方面的知识和勤于关注世界的变化。关于这点，书里有个比较有趣的例子:每当超市大减价 ，如卫生纸打折时 ，消费者就会涌入超市抢购 。而当股票市场上出现股价下跌时 ，也就是大多数人所说的股市下挫或回调时 ，购买者却急于从中逃出 。当超市商品涨价时 ，人们转到其他商店购物 。而当股市上升时 ，购买者却大举买入股票 。\n&nbsp;&nbsp;&nbsp;&nbsp;大家应该重点关注自己的“收入-支出-负债-资产”这几项，将收入投入资产项，减少负债项，用资产项产生的收益去做你的支出项，能做到这样的科学良性循环，那么就能够跳离赚钱-花钱-还贷”的怪圈，实现财富自由了。\n如果在上学的时候就能学习到这些知识，认识到财富的秘诀，那么很多人都可以在30岁前实现经济独立，相对自由的生活方式。不过无论什么时候都不算晚，现在开始努力学习，提高自己的财务能力，打造自己的“收入-支出-负债-资产”表，实现财富自由。\n\n下面是书中一些我认为很有用的观点：\n1.贫穷和破产的区别是：破产是暂时的，贫穷是永远的。\n2.离开学校是学习的起点，而不是终点。\n3.如何赚钱不是发财的秘诀，发财的秘诀是如何花钱。\n4.理财：赚了钱后如何处理这些钱？又怎样防止别人从你手中拿走这些钱？你能拥有这些钱多久？如何让钱生钱？\n5.你的职业和你的事业有很大的区别。\n6.将收入变成资产才能获得真正的财务安全。\n7.拥有不需要你到场就可以正常运转的业务，会使你获得财务自由。\n8.“收入-纳税-支出”与“收入-支出-纳税”有很大的区别\n9.用税前收入支付开支\n10.没有从未亏过钱的富人，却有很多从未亏过钱的穷人。\n11.自律是积累财富中最重要的品质。\n12.开创事业最重要的几个能力分别是：现金流管理、人事管理、个人时间管理。\n13.不能积累财富的人有一个特点是：动用积蓄去增加负债。富有的人特点是：动用继续去增加资产。\n14.风险与收益并存。\n15.市场上有许多廉价交易 ，但只有存在变化 ，才能使廉价交易变得有利可图 。","slug":"rich-father","published":1,"updated":"2017-02-02T07:01:14.698Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyo3mvp7000xtsr8k2vrknx9","content":"<p>&nbsp;&nbsp;&nbsp;&nbsp;以往我看到理财这个词的时候，往往就是认为它就是让你记账，记下你的钱都去哪了，然后看看能从哪里剩下不该花的钱；还有就是买理财产品，就是把你剩下来的钱，存到银行或者购买理财基金。当我看了《富爸爸穷爸爸》这本书后，对理财有了新的理解。比如现在很多人最大的错误就是认为赚钱的技能才是富有的秘诀，然而富有的真正秘诀是如何花钱。还要很多人对资产与负债完全分不清，包括我自己，就是这些想法造成了我们无法积累财富现状。作者反复提到的一句话“离开学校是学习的起点，而不是终点。”是我们很多人没有意识到的，虽然离开学校后我一直在学习，但是从来没有学习过有关理财方面的知识，包括我们的教育体系也没有教大家怎么创造和积累财富，学校和父母只是告诉我们要好好学习。<a id=\"more\"></a><br>&nbsp;&nbsp;&nbsp;&nbsp;对理财的彻底认识非常重要，它包括赚了钱后如何处理这些钱？又怎样防止别人从你手中拿走这些钱？你能拥有这些钱多久？如何让钱生钱？我们很多人都是活在努力工作提高自己的收入，然而现实往往是这样，你的收入越高，你的贷款越多，负债越多，财务问题越严重，这也是没有分清资产与债务的造成的。债务可能很多人都了解，就是我们欠下的钱，需要还给银行或者他人的。那么资产是什么呢？车？房？金银珠宝？我之前的理解就是这些，我甚至认为我家里的iPad也是我的资产，因为他可以卖钱。我相信大多数人也是这么理解的，悲哀的是就是这种认知让90%的人一直奔波于“赚钱-花钱-还贷”的怪圈之中。真正的资产是能为你带来收入的东西，打个比方，你贷款买了一个房子，每月需要还贷款6000，租出去可以收房租4000，那么这个房子就是你的负债而不是资产，因为它不断的将你的现金流转移到了银行。如果你每月还贷4000，租出去收房租6000，那么这个房子每月为你带来2000元的收益，那么这部分投入的钱就是你的资产，因为它可以产生钱，而不是套牢你的首付，再不断的拿走你兜里的钱。这就是资产与首付的重要区别。<br>&nbsp;&nbsp;&nbsp;&nbsp;资产的最大特点就是不需要你到场就可以正常运转，就可以不断的产生收入，不断的积累你的资产会使你获得财务自由。积累负债只会让你离自由越来越远。不能积累财富的人有一个特点是：动用积蓄去增加负债。富有的人特点是：动用继续去增加资产。我们也总是告诉自己，现在手上没有钱，等攒下一些钱后再进行投资，然而这种想法加上上面说的的习惯和思想会让你永远没有钱去投资。“想致富，走险路”这不是一个段子，将钱存入银行永远是最安全的办法，但也永远不能实现财富增长，现在的通货膨胀远比银行利率要高。要有胆量和勇气去投资，当然也不要盲目。这需要你有很多方面的知识和勤于关注世界的变化。关于这点，书里有个比较有趣的例子:每当超市大减价 ，如卫生纸打折时 ，消费者就会涌入超市抢购 。而当股票市场上出现股价下跌时 ，也就是大多数人所说的股市下挫或回调时 ，购买者却急于从中逃出 。当超市商品涨价时 ，人们转到其他商店购物 。而当股市上升时 ，购买者却大举买入股票 。<br>&nbsp;&nbsp;&nbsp;&nbsp;大家应该重点关注自己的“收入-支出-负债-资产”这几项，将收入投入资产项，减少负债项，用资产项产生的收益去做你的支出项，能做到这样的科学良性循环，那么就能够跳离赚钱-花钱-还贷”的怪圈，实现财富自由了。<br>如果在上学的时候就能学习到这些知识，认识到财富的秘诀，那么很多人都可以在30岁前实现经济独立，相对自由的生活方式。不过无论什么时候都不算晚，现在开始努力学习，提高自己的财务能力，打造自己的“收入-支出-负债-资产”表，实现财富自由。</p>\n<p>下面是书中一些我认为很有用的观点：<br>1.贫穷和破产的区别是：破产是暂时的，贫穷是永远的。<br>2.离开学校是学习的起点，而不是终点。<br>3.如何赚钱不是发财的秘诀，发财的秘诀是如何花钱。<br>4.理财：赚了钱后如何处理这些钱？又怎样防止别人从你手中拿走这些钱？你能拥有这些钱多久？如何让钱生钱？<br>5.你的职业和你的事业有很大的区别。<br>6.将收入变成资产才能获得真正的财务安全。<br>7.拥有不需要你到场就可以正常运转的业务，会使你获得财务自由。<br>8.“收入-纳税-支出”与“收入-支出-纳税”有很大的区别<br>9.用税前收入支付开支<br>10.没有从未亏过钱的富人，却有很多从未亏过钱的穷人。<br>11.自律是积累财富中最重要的品质。<br>12.开创事业最重要的几个能力分别是：现金流管理、人事管理、个人时间管理。<br>13.不能积累财富的人有一个特点是：动用积蓄去增加负债。富有的人特点是：动用继续去增加资产。<br>14.风险与收益并存。<br>15.市场上有许多廉价交易 ，但只有存在变化 ，才能使廉价交易变得有利可图 。</p>\n","excerpt":"<p>&nbsp;&nbsp;&nbsp;&nbsp;以往我看到理财这个词的时候，往往就是认为它就是让你记账，记下你的钱都去哪了，然后看看能从哪里剩下不该花的钱；还有就是买理财产品，就是把你剩下来的钱，存到银行或者购买理财基金。当我看了《富爸爸穷爸爸》这本书后，对理财有了新的理解。比如现在很多人最大的错误就是认为赚钱的技能才是富有的秘诀，然而富有的真正秘诀是如何花钱。还要很多人对资产与负债完全分不清，包括我自己，就是这些想法造成了我们无法积累财富现状。作者反复提到的一句话“离开学校是学习的起点，而不是终点。”是我们很多人没有意识到的，虽然离开学校后我一直在学习，但是从来没有学习过有关理财方面的知识，包括我们的教育体系也没有教大家怎么创造和积累财富，学校和父母只是告诉我们要好好学习。","more":"<br>&nbsp;&nbsp;&nbsp;&nbsp;对理财的彻底认识非常重要，它包括赚了钱后如何处理这些钱？又怎样防止别人从你手中拿走这些钱？你能拥有这些钱多久？如何让钱生钱？我们很多人都是活在努力工作提高自己的收入，然而现实往往是这样，你的收入越高，你的贷款越多，负债越多，财务问题越严重，这也是没有分清资产与债务的造成的。债务可能很多人都了解，就是我们欠下的钱，需要还给银行或者他人的。那么资产是什么呢？车？房？金银珠宝？我之前的理解就是这些，我甚至认为我家里的iPad也是我的资产，因为他可以卖钱。我相信大多数人也是这么理解的，悲哀的是就是这种认知让90%的人一直奔波于“赚钱-花钱-还贷”的怪圈之中。真正的资产是能为你带来收入的东西，打个比方，你贷款买了一个房子，每月需要还贷款6000，租出去可以收房租4000，那么这个房子就是你的负债而不是资产，因为它不断的将你的现金流转移到了银行。如果你每月还贷4000，租出去收房租6000，那么这个房子每月为你带来2000元的收益，那么这部分投入的钱就是你的资产，因为它可以产生钱，而不是套牢你的首付，再不断的拿走你兜里的钱。这就是资产与首付的重要区别。<br>&nbsp;&nbsp;&nbsp;&nbsp;资产的最大特点就是不需要你到场就可以正常运转，就可以不断的产生收入，不断的积累你的资产会使你获得财务自由。积累负债只会让你离自由越来越远。不能积累财富的人有一个特点是：动用积蓄去增加负债。富有的人特点是：动用继续去增加资产。我们也总是告诉自己，现在手上没有钱，等攒下一些钱后再进行投资，然而这种想法加上上面说的的习惯和思想会让你永远没有钱去投资。“想致富，走险路”这不是一个段子，将钱存入银行永远是最安全的办法，但也永远不能实现财富增长，现在的通货膨胀远比银行利率要高。要有胆量和勇气去投资，当然也不要盲目。这需要你有很多方面的知识和勤于关注世界的变化。关于这点，书里有个比较有趣的例子:每当超市大减价 ，如卫生纸打折时 ，消费者就会涌入超市抢购 。而当股票市场上出现股价下跌时 ，也就是大多数人所说的股市下挫或回调时 ，购买者却急于从中逃出 。当超市商品涨价时 ，人们转到其他商店购物 。而当股市上升时 ，购买者却大举买入股票 。<br>&nbsp;&nbsp;&nbsp;&nbsp;大家应该重点关注自己的“收入-支出-负债-资产”这几项，将收入投入资产项，减少负债项，用资产项产生的收益去做你的支出项，能做到这样的科学良性循环，那么就能够跳离赚钱-花钱-还贷”的怪圈，实现财富自由了。<br>如果在上学的时候就能学习到这些知识，认识到财富的秘诀，那么很多人都可以在30岁前实现经济独立，相对自由的生活方式。不过无论什么时候都不算晚，现在开始努力学习，提高自己的财务能力，打造自己的“收入-支出-负债-资产”表，实现财富自由。</p>\n<p>下面是书中一些我认为很有用的观点：<br>1.贫穷和破产的区别是：破产是暂时的，贫穷是永远的。<br>2.离开学校是学习的起点，而不是终点。<br>3.如何赚钱不是发财的秘诀，发财的秘诀是如何花钱。<br>4.理财：赚了钱后如何处理这些钱？又怎样防止别人从你手中拿走这些钱？你能拥有这些钱多久？如何让钱生钱？<br>5.你的职业和你的事业有很大的区别。<br>6.将收入变成资产才能获得真正的财务安全。<br>7.拥有不需要你到场就可以正常运转的业务，会使你获得财务自由。<br>8.“收入-纳税-支出”与“收入-支出-纳税”有很大的区别<br>9.用税前收入支付开支<br>10.没有从未亏过钱的富人，却有很多从未亏过钱的穷人。<br>11.自律是积累财富中最重要的品质。<br>12.开创事业最重要的几个能力分别是：现金流管理、人事管理、个人时间管理。<br>13.不能积累财富的人有一个特点是：动用积蓄去增加负债。富有的人特点是：动用继续去增加资产。<br>14.风险与收益并存。<br>15.市场上有许多廉价交易 ，但只有存在变化 ，才能使廉价交易变得有利可图 。</p>"},{"title":"xtJS初级教程之ExtJS Tree(三)","date":"2016-11-27T14:33:05.000Z","_content":"前两次我介绍了静态树和根据数据库加载的数据生成的树，今天我就把ExtJS Tree这剩的一些主要的东西说一说，剩下的主要就是：树的事件处理、可编辑的树和可拖拽的树，最后再实现一下异步加载的树。<!--more-->\n## 树的事件处理\n树的事件主要有：1、展开节点事件。2、折叠节点事件。3、单击节点事件。4、双击节点事件。下面我们以一个静态树来测试树的主要事件。\n``` javascript\n//普通的静态树  \nvar tree = new Ext.tree.TreePanel({  \n el:'tree-div'  \n});  \n//创建根节点  \nvar root = new Ext.tree.TreeNode({text:'AllShengFen'});  \n//创建父节点  \nvar shengfen1 = new Ext.tree.TreeNode({text:'HeiLongJiang'});  \nvar shengfen2 = new Ext.tree.TreeNode({text:'LiaoNing'});  \nvar city1 = new Ext.tree.TreeNode({text:'harbin'});  \nvar city2 = new Ext.tree.TreeNode({text:'daqiang'});  \nvar city3 = new Ext.tree.TreeNode({text:'shenyang'});  \nvar city4 = new Ext.tree.TreeNode({text:'dalian'});  \n//将子节点添加到父节点中  \nshengfen1.appendChild(city1);  \nshengfen1.appendChild(city2);  \nshengfen2.appendChild(city3);  \nshengfen2.appendChild(city4);  \n//将子节点添加到父节点中  \nroot.appendChild(shengfen1);  \nroot.appendChild(shengfen2);  \n//将root节点设置为根节点  \ntree.setRootNode(root);  \n//使这棵树显示在div标签中  \ntree.render();  \n//展开节点事件  \ntree.on(\"expandnode\",function(node){  \n alert(\"[\"+node.text+\"]open\");  \n});  \n//折叠节点事件  \ntree.on(\"collapsenode\",function(node){  \n alert(\"[\"+node.text+\"]close\");  \n});  \n//单击节点事件  \ntree.on(\"click\",function(node){  \n alert(\"[\"+node.text+\"]click\");  \n});  \n//双击节点事件  \ntree.on(\"dblclick\",function(node){  \n alert(\"[\"+node.text+\"]double click\");  \n}); \n```\n由于单击和双击有冲突，所以我们在测试的时候可以先注释掉一个，单独测试。\n## 可编辑的树\n有了前面我们ExtJS的基础我就直接上代码了。简单的功能我都在代码的注释里写了。下面的例子中都会用到TreeNodeServlet.Java这个类所以我把这个代码也贴出来。\n``` java\npublic class TreeNodeServlet extends HttpServlet {  \n    private static final long serialVersionUID = 1L;  \n         \n    /** \n     * @see HttpServlet#HttpServlet() \n     */  \n    public TreeNodeServlet() {  \n        super();  \n        // TODO Auto-generated constructor stub  \n    }  \n    @Override  \n    protected void service(HttpServletRequest request, HttpServletResponse response)  \n            throws ServletException, IOException {  \n      \n        response.setContentType(\"text/html;charset=utf-8\");  \n        PrintWriter out = response.getWriter();  \n        String node = request.getParameter(\"node\");  \n        String json = \"\";  \n        if(\"0\".equals(node)){  \n              \n            json += \"[{id:1,text:'节点1'},{id:2,text:'节点2'}]\";  \n        }  \n        else if(\"1\".equals(node)){  \n              \n            json += \"[{id:11,text:'节点11',leaf:true},{id:12,text:'节点12',leaf:true}]\";  \n              \n        }  \n        else if(\"2\".equals(node)){  \n              \n            json += \"[{id:21,text:'节点21'},{id:22,text:'节点22',leaf:true}]\";  \n              \n        }  \n        else if(\"21\".equals(node)){  \n              \n            json += \"[{id:211,text:'节点211',leaf:true},{id:212,text:'节点212',leaf:true}]\";  \n              \n        }  \n          \n        out.write(json);  \n          \n    }  \n} \n```\n前端代码\n``` javascript\nvar tree = new Ext.tree.TreePanel({  \n el:'tree-div',  \n loader: new Ext.tree.TreeLoader({dataUrl:'../TreeNodeServlet'})  \n});  \nvar root = new Ext.tree.AsyncTreeNode({  \n id:'0',text: 'harbin'  \n});  \ntree.setRootNode(root);  \ntree.render();  \n//设置该树可编辑  \nvar treeEditor = new Ext.tree.TreeEditor(tree,{allowBlank:false});  \n//设置只有叶子节点可编辑  \ntreeEditor.on(\"beforestartedit\",function(treeEditor){  \n return treeEditor.editNode.isLeaf();  \n});  \ntree.on(\"click\",function(node){  \n   \n alert(\"The name is:\"+node.text+\"***\"+node.id);  \n   \n});  \n//此处将编辑的值输出  \ntreeEditor.on(\"complete\",function(treeEditor,newValue){  \n alert(\"The name had been modified,the result is:\"+newValue);  \n});  \n```\n## 可拖拽的树\n``` javascript\nvar tree = new Ext.tree.TreePanel({  \n el:'tree-div',  \n//设置可拖拽  \n enableDD:true,  \n loader: new Ext.tree.TreeLoader({dataUrl:'../TreeNodeServlet'})  \n});  \nvar root = new Ext.tree.AsyncTreeNode({  \n id:'0',  \n    text: 'harbin'  \n});  \ntree.setRootNode(root);  \ntree.render();  \n//设置叶子节点可追加元素  \ntree.on(\"nodedragover\",function(e){  \n var node = e.target;  \n if(node.leaf)  \n  node.leaf = false;  \n return true;  \n}); \n```\n## 异步加载树\n异步加载树是非常常用的，因为我们页面上生成的树往往都是从数据库中查出来的数据，有时候我们的数据量很大，如果每次都全加载那么很浪费资源，所以我们就用到了异步加载的树。所谓异步加载的树就是：我们点击哪个节点，就只加载这个节点下的元素，并不查询其他元素。但数据量大，并且树的层次特别多的时候就非常好用了，下面我们就实现一个异步加载的树。我将所有代码都粘出来，方便大家直接运行测试。\n- 准备数据库的数据。这个我们就用在第二节给的数据就可以了。\n- vo也就是JavaBean的写法，我们也在第二节将过了，下面是代码。\n``` java\npublic class Tree {  \n    private int id;  \n    private String text;  \n    private boolean leaf;  \n    public Tree(){  \n          \n    }  \n    public Tree(int id,String text,boolean leaf){  \n          \n        this.id = id;  \n          \n        this.text = text;  \n          \n        this.leaf = leaf;  \n          \n    }  \n      \n    public int getId() {  \n        return id;  \n    }  \n    public void setId(int id) {  \n        this.id = id;  \n    }  \n    public String getText() {  \n        return text;  \n    }  \n    public void setText(String text) {  \n        this.text = text;  \n    }  \n    public boolean isLeaf() {  \n        return leaf;  \n    }  \n    public void setLeaf(boolean leaf) {  \n        this.leaf = leaf;  \n    }  \n}  \n```\n- 接着是查询的DAO，其实也和第二节的差不多，只不过第二节用的是查询所有，而这里我们只是查询点击的节点下的数据，所以我们就根据传递过来的id进行查询部分数据进行显示。\n``` java\npublic class DAO {  \n    Connection conn;  \n      \n    PreparedStatement pstate;  \n      \n    ResultSet rs;  \n      \n    public List findAll(int id){  \n          \n        List list = new ArrayList();  \n          \n        String sql = \" select deptid,deptname from dept where higherDept = \"+id ;  \n          \n        try{  \n              \n            conn = DBConn.getConn();  \n              \n            pstate = conn.prepareStatement(sql);  \n              \n            rs = pstate.executeQuery();  \n              \n            while(rs.next()){  \n                  \n                Tree vo = new Tree();  \n                  \n                vo.setId(rs.getInt(\"deptid\"));  \n                vo.setText(rs.getString(\"deptname\"));  \n                vo.setLeaf(false);  \n                list.add(vo);  \n            }  \n              \n              \n        }catch(Exception e){  \n              \n            e.printStackTrace();  \n              \n        }finally{  \n              \n            DBConn.closeRs(rs);  \n              \n            DBConn.closePreState(pstate);  \n              \n            DBConn.closeConn(conn);  \n              \n        }  \n          \n        return list;  \n    }  \n} \n```\n这里涉及到了另外一个工具类，就是连接数据库用的类，这个非常简单大家都应该没有问题。\n- 然后是servlet，servlet里我们也简单的处理一下，就是接收一下页面传递过来的节点id，并根据这个id查询数据。\n``` java\n\npublic class TreeServlet extends HttpServlet {  \n    private static final long serialVersionUID = 1L;  \n         \n    /** \n     * @see HttpServlet#HttpServlet() \n     */  \n    public TreeServlet() {  \n        super();  \n        // TODO Auto-generated constructor stub  \n    }  \n    @Override  \n    protected void service(HttpServletRequest request, HttpServletResponse response)  \n            throws ServletException, IOException {  \n        response.setContentType(\"text/html;charset=utf-8\");  \n        PrintWriter out = response.getWriter();  \n        String node = request.getParameter(\"pid\");  \n          \n        int id = Integer.parseInt(node);  \n          \n        DAO dao = new DAO();  \n        List list = new ArrayList();  \n          \n        list = dao.findAll(id);  \n                response.getWriter().write(JSONTools.getJsonArray(list).toString());  \n          \n    }  \n}  \n```\n- 下面就是页面js文件了。\n``` javascript\nvar tree = new Ext.tree.TreePanel({  \n el:'tree-div',  \n loader: new   \n//第一次访问的时候只加载根节点下的数据  \nExt.tree.TreeLoader({dataUrl:'../TreeServlet?pid=23010000'})  \n});  \nvar root = new Ext.tree.AsyncTreeNode({  \n    text: 'harbin',  \n    draggable:false,  \n    id:'23010000'  \n});  \ntree.setRootNode(root);  \ntree.render();  \n//根据点击的节点加载该节点下的数据,点击哪个节点就加载哪个节点的数据  \ntree.on('beforeload',function(node){     \n    if(node.id != '23010000'){    \n        tree.loader.dataUrl = '../TreeServlet?pid='+node.id;           \n    }      \n}); \n```\n这样整个异步加载的树也就完成了。完成了异步加载的树，那么ExtJS Tree这块的主要内容也就差不多了，还有一些细节大家研究研究就可以了。如果哪有错误或不足希望指出。\n","source":"_posts/Tree-3.md","raw":"---\ntitle: xtJS初级教程之ExtJS Tree(三)\ndate: 2016-11-27 22:33:05\ntags: ExtJS\ncategories: javascript\n---\n前两次我介绍了静态树和根据数据库加载的数据生成的树，今天我就把ExtJS Tree这剩的一些主要的东西说一说，剩下的主要就是：树的事件处理、可编辑的树和可拖拽的树，最后再实现一下异步加载的树。<!--more-->\n## 树的事件处理\n树的事件主要有：1、展开节点事件。2、折叠节点事件。3、单击节点事件。4、双击节点事件。下面我们以一个静态树来测试树的主要事件。\n``` javascript\n//普通的静态树  \nvar tree = new Ext.tree.TreePanel({  \n el:'tree-div'  \n});  \n//创建根节点  \nvar root = new Ext.tree.TreeNode({text:'AllShengFen'});  \n//创建父节点  \nvar shengfen1 = new Ext.tree.TreeNode({text:'HeiLongJiang'});  \nvar shengfen2 = new Ext.tree.TreeNode({text:'LiaoNing'});  \nvar city1 = new Ext.tree.TreeNode({text:'harbin'});  \nvar city2 = new Ext.tree.TreeNode({text:'daqiang'});  \nvar city3 = new Ext.tree.TreeNode({text:'shenyang'});  \nvar city4 = new Ext.tree.TreeNode({text:'dalian'});  \n//将子节点添加到父节点中  \nshengfen1.appendChild(city1);  \nshengfen1.appendChild(city2);  \nshengfen2.appendChild(city3);  \nshengfen2.appendChild(city4);  \n//将子节点添加到父节点中  \nroot.appendChild(shengfen1);  \nroot.appendChild(shengfen2);  \n//将root节点设置为根节点  \ntree.setRootNode(root);  \n//使这棵树显示在div标签中  \ntree.render();  \n//展开节点事件  \ntree.on(\"expandnode\",function(node){  \n alert(\"[\"+node.text+\"]open\");  \n});  \n//折叠节点事件  \ntree.on(\"collapsenode\",function(node){  \n alert(\"[\"+node.text+\"]close\");  \n});  \n//单击节点事件  \ntree.on(\"click\",function(node){  \n alert(\"[\"+node.text+\"]click\");  \n});  \n//双击节点事件  \ntree.on(\"dblclick\",function(node){  \n alert(\"[\"+node.text+\"]double click\");  \n}); \n```\n由于单击和双击有冲突，所以我们在测试的时候可以先注释掉一个，单独测试。\n## 可编辑的树\n有了前面我们ExtJS的基础我就直接上代码了。简单的功能我都在代码的注释里写了。下面的例子中都会用到TreeNodeServlet.Java这个类所以我把这个代码也贴出来。\n``` java\npublic class TreeNodeServlet extends HttpServlet {  \n    private static final long serialVersionUID = 1L;  \n         \n    /** \n     * @see HttpServlet#HttpServlet() \n     */  \n    public TreeNodeServlet() {  \n        super();  \n        // TODO Auto-generated constructor stub  \n    }  \n    @Override  \n    protected void service(HttpServletRequest request, HttpServletResponse response)  \n            throws ServletException, IOException {  \n      \n        response.setContentType(\"text/html;charset=utf-8\");  \n        PrintWriter out = response.getWriter();  \n        String node = request.getParameter(\"node\");  \n        String json = \"\";  \n        if(\"0\".equals(node)){  \n              \n            json += \"[{id:1,text:'节点1'},{id:2,text:'节点2'}]\";  \n        }  \n        else if(\"1\".equals(node)){  \n              \n            json += \"[{id:11,text:'节点11',leaf:true},{id:12,text:'节点12',leaf:true}]\";  \n              \n        }  \n        else if(\"2\".equals(node)){  \n              \n            json += \"[{id:21,text:'节点21'},{id:22,text:'节点22',leaf:true}]\";  \n              \n        }  \n        else if(\"21\".equals(node)){  \n              \n            json += \"[{id:211,text:'节点211',leaf:true},{id:212,text:'节点212',leaf:true}]\";  \n              \n        }  \n          \n        out.write(json);  \n          \n    }  \n} \n```\n前端代码\n``` javascript\nvar tree = new Ext.tree.TreePanel({  \n el:'tree-div',  \n loader: new Ext.tree.TreeLoader({dataUrl:'../TreeNodeServlet'})  \n});  \nvar root = new Ext.tree.AsyncTreeNode({  \n id:'0',text: 'harbin'  \n});  \ntree.setRootNode(root);  \ntree.render();  \n//设置该树可编辑  \nvar treeEditor = new Ext.tree.TreeEditor(tree,{allowBlank:false});  \n//设置只有叶子节点可编辑  \ntreeEditor.on(\"beforestartedit\",function(treeEditor){  \n return treeEditor.editNode.isLeaf();  \n});  \ntree.on(\"click\",function(node){  \n   \n alert(\"The name is:\"+node.text+\"***\"+node.id);  \n   \n});  \n//此处将编辑的值输出  \ntreeEditor.on(\"complete\",function(treeEditor,newValue){  \n alert(\"The name had been modified,the result is:\"+newValue);  \n});  \n```\n## 可拖拽的树\n``` javascript\nvar tree = new Ext.tree.TreePanel({  \n el:'tree-div',  \n//设置可拖拽  \n enableDD:true,  \n loader: new Ext.tree.TreeLoader({dataUrl:'../TreeNodeServlet'})  \n});  \nvar root = new Ext.tree.AsyncTreeNode({  \n id:'0',  \n    text: 'harbin'  \n});  \ntree.setRootNode(root);  \ntree.render();  \n//设置叶子节点可追加元素  \ntree.on(\"nodedragover\",function(e){  \n var node = e.target;  \n if(node.leaf)  \n  node.leaf = false;  \n return true;  \n}); \n```\n## 异步加载树\n异步加载树是非常常用的，因为我们页面上生成的树往往都是从数据库中查出来的数据，有时候我们的数据量很大，如果每次都全加载那么很浪费资源，所以我们就用到了异步加载的树。所谓异步加载的树就是：我们点击哪个节点，就只加载这个节点下的元素，并不查询其他元素。但数据量大，并且树的层次特别多的时候就非常好用了，下面我们就实现一个异步加载的树。我将所有代码都粘出来，方便大家直接运行测试。\n- 准备数据库的数据。这个我们就用在第二节给的数据就可以了。\n- vo也就是JavaBean的写法，我们也在第二节将过了，下面是代码。\n``` java\npublic class Tree {  \n    private int id;  \n    private String text;  \n    private boolean leaf;  \n    public Tree(){  \n          \n    }  \n    public Tree(int id,String text,boolean leaf){  \n          \n        this.id = id;  \n          \n        this.text = text;  \n          \n        this.leaf = leaf;  \n          \n    }  \n      \n    public int getId() {  \n        return id;  \n    }  \n    public void setId(int id) {  \n        this.id = id;  \n    }  \n    public String getText() {  \n        return text;  \n    }  \n    public void setText(String text) {  \n        this.text = text;  \n    }  \n    public boolean isLeaf() {  \n        return leaf;  \n    }  \n    public void setLeaf(boolean leaf) {  \n        this.leaf = leaf;  \n    }  \n}  \n```\n- 接着是查询的DAO，其实也和第二节的差不多，只不过第二节用的是查询所有，而这里我们只是查询点击的节点下的数据，所以我们就根据传递过来的id进行查询部分数据进行显示。\n``` java\npublic class DAO {  \n    Connection conn;  \n      \n    PreparedStatement pstate;  \n      \n    ResultSet rs;  \n      \n    public List findAll(int id){  \n          \n        List list = new ArrayList();  \n          \n        String sql = \" select deptid,deptname from dept where higherDept = \"+id ;  \n          \n        try{  \n              \n            conn = DBConn.getConn();  \n              \n            pstate = conn.prepareStatement(sql);  \n              \n            rs = pstate.executeQuery();  \n              \n            while(rs.next()){  \n                  \n                Tree vo = new Tree();  \n                  \n                vo.setId(rs.getInt(\"deptid\"));  \n                vo.setText(rs.getString(\"deptname\"));  \n                vo.setLeaf(false);  \n                list.add(vo);  \n            }  \n              \n              \n        }catch(Exception e){  \n              \n            e.printStackTrace();  \n              \n        }finally{  \n              \n            DBConn.closeRs(rs);  \n              \n            DBConn.closePreState(pstate);  \n              \n            DBConn.closeConn(conn);  \n              \n        }  \n          \n        return list;  \n    }  \n} \n```\n这里涉及到了另外一个工具类，就是连接数据库用的类，这个非常简单大家都应该没有问题。\n- 然后是servlet，servlet里我们也简单的处理一下，就是接收一下页面传递过来的节点id，并根据这个id查询数据。\n``` java\n\npublic class TreeServlet extends HttpServlet {  \n    private static final long serialVersionUID = 1L;  \n         \n    /** \n     * @see HttpServlet#HttpServlet() \n     */  \n    public TreeServlet() {  \n        super();  \n        // TODO Auto-generated constructor stub  \n    }  \n    @Override  \n    protected void service(HttpServletRequest request, HttpServletResponse response)  \n            throws ServletException, IOException {  \n        response.setContentType(\"text/html;charset=utf-8\");  \n        PrintWriter out = response.getWriter();  \n        String node = request.getParameter(\"pid\");  \n          \n        int id = Integer.parseInt(node);  \n          \n        DAO dao = new DAO();  \n        List list = new ArrayList();  \n          \n        list = dao.findAll(id);  \n                response.getWriter().write(JSONTools.getJsonArray(list).toString());  \n          \n    }  \n}  \n```\n- 下面就是页面js文件了。\n``` javascript\nvar tree = new Ext.tree.TreePanel({  \n el:'tree-div',  \n loader: new   \n//第一次访问的时候只加载根节点下的数据  \nExt.tree.TreeLoader({dataUrl:'../TreeServlet?pid=23010000'})  \n});  \nvar root = new Ext.tree.AsyncTreeNode({  \n    text: 'harbin',  \n    draggable:false,  \n    id:'23010000'  \n});  \ntree.setRootNode(root);  \ntree.render();  \n//根据点击的节点加载该节点下的数据,点击哪个节点就加载哪个节点的数据  \ntree.on('beforeload',function(node){     \n    if(node.id != '23010000'){    \n        tree.loader.dataUrl = '../TreeServlet?pid='+node.id;           \n    }      \n}); \n```\n这样整个异步加载的树也就完成了。完成了异步加载的树，那么ExtJS Tree这块的主要内容也就差不多了，还有一些细节大家研究研究就可以了。如果哪有错误或不足希望指出。\n","slug":"Tree-3","published":1,"updated":"2017-01-19T11:10:49.477Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyo3mvp90010tsr8uwopyqjs","content":"<p>前两次我介绍了静态树和根据数据库加载的数据生成的树，今天我就把ExtJS Tree这剩的一些主要的东西说一说，剩下的主要就是：树的事件处理、可编辑的树和可拖拽的树，最后再实现一下异步加载的树。<a id=\"more\"></a></p>\n<h2 id=\"树的事件处理\"><a href=\"#树的事件处理\" class=\"headerlink\" title=\"树的事件处理\"></a>树的事件处理</h2><p>树的事件主要有：1、展开节点事件。2、折叠节点事件。3、单击节点事件。4、双击节点事件。下面我们以一个静态树来测试树的主要事件。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//普通的静态树  </span></div><div class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </div><div class=\"line\"> <span class=\"attr\">el</span>:<span class=\"string\">'tree-div'</span>  </div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"comment\">//创建根节点  </span></div><div class=\"line\"><span class=\"keyword\">var</span> root = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'AllShengFen'</span>&#125;);  </div><div class=\"line\"><span class=\"comment\">//创建父节点  </span></div><div class=\"line\"><span class=\"keyword\">var</span> shengfen1 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'HeiLongJiang'</span>&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> shengfen2 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'LiaoNing'</span>&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> city1 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'harbin'</span>&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> city2 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'daqiang'</span>&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> city3 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'shenyang'</span>&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> city4 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'dalian'</span>&#125;);  </div><div class=\"line\"><span class=\"comment\">//将子节点添加到父节点中  </span></div><div class=\"line\">shengfen1.appendChild(city1);  </div><div class=\"line\">shengfen1.appendChild(city2);  </div><div class=\"line\">shengfen2.appendChild(city3);  </div><div class=\"line\">shengfen2.appendChild(city4);  </div><div class=\"line\"><span class=\"comment\">//将子节点添加到父节点中  </span></div><div class=\"line\">root.appendChild(shengfen1);  </div><div class=\"line\">root.appendChild(shengfen2);  </div><div class=\"line\"><span class=\"comment\">//将root节点设置为根节点  </span></div><div class=\"line\">tree.setRootNode(root);  </div><div class=\"line\"><span class=\"comment\">//使这棵树显示在div标签中  </span></div><div class=\"line\">tree.render();  </div><div class=\"line\"><span class=\"comment\">//展开节点事件  </span></div><div class=\"line\">tree.on(<span class=\"string\">\"expandnode\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>)</span>&#123;  </div><div class=\"line\"> alert(<span class=\"string\">\"[\"</span>+node.text+<span class=\"string\">\"]open\"</span>);  </div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"comment\">//折叠节点事件  </span></div><div class=\"line\">tree.on(<span class=\"string\">\"collapsenode\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>)</span>&#123;  </div><div class=\"line\"> alert(<span class=\"string\">\"[\"</span>+node.text+<span class=\"string\">\"]close\"</span>);  </div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"comment\">//单击节点事件  </span></div><div class=\"line\">tree.on(<span class=\"string\">\"click\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>)</span>&#123;  </div><div class=\"line\"> alert(<span class=\"string\">\"[\"</span>+node.text+<span class=\"string\">\"]click\"</span>);  </div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"comment\">//双击节点事件  </span></div><div class=\"line\">tree.on(<span class=\"string\">\"dblclick\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>)</span>&#123;  </div><div class=\"line\"> alert(<span class=\"string\">\"[\"</span>+node.text+<span class=\"string\">\"]double click\"</span>);  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>由于单击和双击有冲突，所以我们在测试的时候可以先注释掉一个，单独测试。</p>\n<h2 id=\"可编辑的树\"><a href=\"#可编辑的树\" class=\"headerlink\" title=\"可编辑的树\"></a>可编辑的树</h2><p>有了前面我们ExtJS的基础我就直接上代码了。简单的功能我都在代码的注释里写了。下面的例子中都会用到TreeNodeServlet.Java这个类所以我把这个代码也贴出来。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNodeServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;  </div><div class=\"line\">         </div><div class=\"line\">    <span class=\"comment\">/** </span></div><div class=\"line\">     * <span class=\"doctag\">@see</span> HttpServlet#HttpServlet() </div><div class=\"line\">     */  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TreeNodeServlet</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">super</span>();  </div><div class=\"line\">        <span class=\"comment\">// TODO Auto-generated constructor stub  </span></div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"meta\">@Override</span>  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span>  </span></div><div class=\"line\">            <span class=\"keyword\">throws</span> ServletException, IOException &#123;  </div><div class=\"line\">      </div><div class=\"line\">        response.setContentType(<span class=\"string\">\"text/html;charset=utf-8\"</span>);  </div><div class=\"line\">        PrintWriter out = response.getWriter();  </div><div class=\"line\">        String node = request.getParameter(<span class=\"string\">\"node\"</span>);  </div><div class=\"line\">        String json = <span class=\"string\">\"\"</span>;  </div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"string\">\"0\"</span>.equals(node))&#123;  </div><div class=\"line\">              </div><div class=\"line\">            json += <span class=\"string\">\"[&#123;id:1,text:'节点1'&#125;,&#123;id:2,text:'节点2'&#125;]\"</span>;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"string\">\"1\"</span>.equals(node))&#123;  </div><div class=\"line\">              </div><div class=\"line\">            json += <span class=\"string\">\"[&#123;id:11,text:'节点11',leaf:true&#125;,&#123;id:12,text:'节点12',leaf:true&#125;]\"</span>;  </div><div class=\"line\">              </div><div class=\"line\">        &#125;  </div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"string\">\"2\"</span>.equals(node))&#123;  </div><div class=\"line\">              </div><div class=\"line\">            json += <span class=\"string\">\"[&#123;id:21,text:'节点21'&#125;,&#123;id:22,text:'节点22',leaf:true&#125;]\"</span>;  </div><div class=\"line\">              </div><div class=\"line\">        &#125;  </div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"string\">\"21\"</span>.equals(node))&#123;  </div><div class=\"line\">              </div><div class=\"line\">            json += <span class=\"string\">\"[&#123;id:211,text:'节点211',leaf:true&#125;,&#123;id:212,text:'节点212',leaf:true&#125;]\"</span>;  </div><div class=\"line\">              </div><div class=\"line\">        &#125;  </div><div class=\"line\">          </div><div class=\"line\">        out.write(json);  </div><div class=\"line\">          </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>前端代码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </div><div class=\"line\"> <span class=\"attr\">el</span>:<span class=\"string\">'tree-div'</span>,  </div><div class=\"line\"> <span class=\"attr\">loader</span>: <span class=\"keyword\">new</span> Ext.tree.TreeLoader(&#123;<span class=\"attr\">dataUrl</span>:<span class=\"string\">'../TreeNodeServlet'</span>&#125;)  </div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> root = <span class=\"keyword\">new</span> Ext.tree.AsyncTreeNode(&#123;  </div><div class=\"line\"> <span class=\"attr\">id</span>:<span class=\"string\">'0'</span>,<span class=\"attr\">text</span>: <span class=\"string\">'harbin'</span>  </div><div class=\"line\">&#125;);  </div><div class=\"line\">tree.setRootNode(root);  </div><div class=\"line\">tree.render();  </div><div class=\"line\"><span class=\"comment\">//设置该树可编辑  </span></div><div class=\"line\"><span class=\"keyword\">var</span> treeEditor = <span class=\"keyword\">new</span> Ext.tree.TreeEditor(tree,&#123;<span class=\"attr\">allowBlank</span>:<span class=\"literal\">false</span>&#125;);  </div><div class=\"line\"><span class=\"comment\">//设置只有叶子节点可编辑  </span></div><div class=\"line\">treeEditor.on(<span class=\"string\">\"beforestartedit\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">treeEditor</span>)</span>&#123;  </div><div class=\"line\"> <span class=\"keyword\">return</span> treeEditor.editNode.isLeaf();  </div><div class=\"line\">&#125;);  </div><div class=\"line\">tree.on(<span class=\"string\">\"click\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>)</span>&#123;  </div><div class=\"line\">   </div><div class=\"line\"> alert(<span class=\"string\">\"The name is:\"</span>+node.text+<span class=\"string\">\"***\"</span>+node.id);  </div><div class=\"line\">   </div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"comment\">//此处将编辑的值输出  </span></div><div class=\"line\">treeEditor.on(<span class=\"string\">\"complete\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">treeEditor,newValue</span>)</span>&#123;  </div><div class=\"line\"> alert(<span class=\"string\">\"The name had been modified,the result is:\"</span>+newValue);  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h2 id=\"可拖拽的树\"><a href=\"#可拖拽的树\" class=\"headerlink\" title=\"可拖拽的树\"></a>可拖拽的树</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </div><div class=\"line\"> <span class=\"attr\">el</span>:<span class=\"string\">'tree-div'</span>,  </div><div class=\"line\"><span class=\"comment\">//设置可拖拽  </span></div><div class=\"line\"> enableDD:<span class=\"literal\">true</span>,  </div><div class=\"line\"> <span class=\"attr\">loader</span>: <span class=\"keyword\">new</span> Ext.tree.TreeLoader(&#123;<span class=\"attr\">dataUrl</span>:<span class=\"string\">'../TreeNodeServlet'</span>&#125;)  </div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> root = <span class=\"keyword\">new</span> Ext.tree.AsyncTreeNode(&#123;  </div><div class=\"line\"> <span class=\"attr\">id</span>:<span class=\"string\">'0'</span>,  </div><div class=\"line\">    <span class=\"attr\">text</span>: <span class=\"string\">'harbin'</span>  </div><div class=\"line\">&#125;);  </div><div class=\"line\">tree.setRootNode(root);  </div><div class=\"line\">tree.render();  </div><div class=\"line\"><span class=\"comment\">//设置叶子节点可追加元素  </span></div><div class=\"line\">tree.on(<span class=\"string\">\"nodedragover\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;  </div><div class=\"line\"> <span class=\"keyword\">var</span> node = e.target;  </div><div class=\"line\"> <span class=\"keyword\">if</span>(node.leaf)  </div><div class=\"line\">  node.leaf = <span class=\"literal\">false</span>;  </div><div class=\"line\"> <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"异步加载树\"><a href=\"#异步加载树\" class=\"headerlink\" title=\"异步加载树\"></a>异步加载树</h2><p>异步加载树是非常常用的，因为我们页面上生成的树往往都是从数据库中查出来的数据，有时候我们的数据量很大，如果每次都全加载那么很浪费资源，所以我们就用到了异步加载的树。所谓异步加载的树就是：我们点击哪个节点，就只加载这个节点下的元素，并不查询其他元素。但数据量大，并且树的层次特别多的时候就非常好用了，下面我们就实现一个异步加载的树。我将所有代码都粘出来，方便大家直接运行测试。</p>\n<ul>\n<li>准备数据库的数据。这个我们就用在第二节给的数据就可以了。</li>\n<li><p>vo也就是JavaBean的写法，我们也在第二节将过了，下面是代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tree</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;  </div><div class=\"line\">    <span class=\"keyword\">private</span> String text;  </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> leaf;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Tree</span><span class=\"params\">()</span></span>&#123;  </div><div class=\"line\">          </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Tree</span><span class=\"params\">(<span class=\"keyword\">int</span> id,String text,<span class=\"keyword\">boolean</span> leaf)</span></span>&#123;  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"keyword\">this</span>.id = id;  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"keyword\">this</span>.text = text;  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"keyword\">this</span>.leaf = leaf;  </div><div class=\"line\">          </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span> id;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">this</span>.id = id;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getText</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span> text;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setText</span><span class=\"params\">(String text)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">this</span>.text = text;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isLeaf</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span> leaf;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setLeaf</span><span class=\"params\">(<span class=\"keyword\">boolean</span> leaf)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">this</span>.leaf = leaf;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>接着是查询的DAO，其实也和第二节的差不多，只不过第二节用的是查询所有，而这里我们只是查询点击的节点下的数据，所以我们就根据传递过来的id进行查询部分数据进行显示。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DAO</span> </span>&#123;  </div><div class=\"line\">    Connection conn;  </div><div class=\"line\">      </div><div class=\"line\">    PreparedStatement pstate;  </div><div class=\"line\">      </div><div class=\"line\">    ResultSet rs;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List <span class=\"title\">findAll</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span></span>&#123;  </div><div class=\"line\">          </div><div class=\"line\">        List list = <span class=\"keyword\">new</span> ArrayList();  </div><div class=\"line\">          </div><div class=\"line\">        String sql = <span class=\"string\">\" select deptid,deptname from dept where higherDept = \"</span>+id ;  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"keyword\">try</span>&#123;  </div><div class=\"line\">              </div><div class=\"line\">            conn = DBConn.getConn();  </div><div class=\"line\">              </div><div class=\"line\">            pstate = conn.prepareStatement(sql);  </div><div class=\"line\">              </div><div class=\"line\">            rs = pstate.executeQuery();  </div><div class=\"line\">              </div><div class=\"line\">            <span class=\"keyword\">while</span>(rs.next())&#123;  </div><div class=\"line\">                  </div><div class=\"line\">                Tree vo = <span class=\"keyword\">new</span> Tree();  </div><div class=\"line\">                  </div><div class=\"line\">                vo.setId(rs.getInt(<span class=\"string\">\"deptid\"</span>));  </div><div class=\"line\">                vo.setText(rs.getString(<span class=\"string\">\"deptname\"</span>));  </div><div class=\"line\">                vo.setLeaf(<span class=\"keyword\">false</span>);  </div><div class=\"line\">                list.add(vo);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">              </div><div class=\"line\">              </div><div class=\"line\">        &#125;<span class=\"keyword\">catch</span>(Exception e)&#123;  </div><div class=\"line\">              </div><div class=\"line\">            e.printStackTrace();  </div><div class=\"line\">              </div><div class=\"line\">        &#125;<span class=\"keyword\">finally</span>&#123;  </div><div class=\"line\">              </div><div class=\"line\">            DBConn.closeRs(rs);  </div><div class=\"line\">              </div><div class=\"line\">            DBConn.closePreState(pstate);  </div><div class=\"line\">              </div><div class=\"line\">            DBConn.closeConn(conn);  </div><div class=\"line\">              </div><div class=\"line\">        &#125;  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"keyword\">return</span> list;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这里涉及到了另外一个工具类，就是连接数据库用的类，这个非常简单大家都应该没有问题。</p>\n<ul>\n<li><p>然后是servlet，servlet里我们也简单的处理一下，就是接收一下页面传递过来的节点id，并根据这个id查询数据。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;  </div><div class=\"line\">         </div><div class=\"line\">    <span class=\"comment\">/** </span></div><div class=\"line\">     * <span class=\"doctag\">@see</span> HttpServlet#HttpServlet() </div><div class=\"line\">     */  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TreeServlet</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">super</span>();  </div><div class=\"line\">        <span class=\"comment\">// TODO Auto-generated constructor stub  </span></div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"meta\">@Override</span>  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span>  </span></div><div class=\"line\">            <span class=\"keyword\">throws</span> ServletException, IOException &#123;  </div><div class=\"line\">        response.setContentType(<span class=\"string\">\"text/html;charset=utf-8\"</span>);  </div><div class=\"line\">        PrintWriter out = response.getWriter();  </div><div class=\"line\">        String node = request.getParameter(<span class=\"string\">\"pid\"</span>);  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"keyword\">int</span> id = Integer.parseInt(node);  </div><div class=\"line\">          </div><div class=\"line\">        DAO dao = <span class=\"keyword\">new</span> DAO();  </div><div class=\"line\">        List list = <span class=\"keyword\">new</span> ArrayList();  </div><div class=\"line\">          </div><div class=\"line\">        list = dao.findAll(id);  </div><div class=\"line\">                response.getWriter().write(JSONTools.getJsonArray(list).toString());  </div><div class=\"line\">          </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>下面就是页面js文件了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </div><div class=\"line\"> <span class=\"attr\">el</span>:<span class=\"string\">'tree-div'</span>,  </div><div class=\"line\"> <span class=\"attr\">loader</span>: <span class=\"keyword\">new</span>   </div><div class=\"line\"><span class=\"comment\">//第一次访问的时候只加载根节点下的数据  </span></div><div class=\"line\">Ext.tree.TreeLoader(&#123;<span class=\"attr\">dataUrl</span>:<span class=\"string\">'../TreeServlet?pid=23010000'</span>&#125;)  </div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> root = <span class=\"keyword\">new</span> Ext.tree.AsyncTreeNode(&#123;  </div><div class=\"line\">    <span class=\"attr\">text</span>: <span class=\"string\">'harbin'</span>,  </div><div class=\"line\">    <span class=\"attr\">draggable</span>:<span class=\"literal\">false</span>,  </div><div class=\"line\">    <span class=\"attr\">id</span>:<span class=\"string\">'23010000'</span>  </div><div class=\"line\">&#125;);  </div><div class=\"line\">tree.setRootNode(root);  </div><div class=\"line\">tree.render();  </div><div class=\"line\"><span class=\"comment\">//根据点击的节点加载该节点下的数据,点击哪个节点就加载哪个节点的数据  </span></div><div class=\"line\">tree.on(<span class=\"string\">'beforeload'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>)</span>&#123;     </div><div class=\"line\">    <span class=\"keyword\">if</span>(node.id != <span class=\"string\">'23010000'</span>)&#123;    </div><div class=\"line\">        tree.loader.dataUrl = <span class=\"string\">'../TreeServlet?pid='</span>+node.id;           </div><div class=\"line\">    &#125;      </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这样整个异步加载的树也就完成了。完成了异步加载的树，那么ExtJS Tree这块的主要内容也就差不多了，还有一些细节大家研究研究就可以了。如果哪有错误或不足希望指出。</p>\n","excerpt":"<p>前两次我介绍了静态树和根据数据库加载的数据生成的树，今天我就把ExtJS Tree这剩的一些主要的东西说一说，剩下的主要就是：树的事件处理、可编辑的树和可拖拽的树，最后再实现一下异步加载的树。","more":"</p>\n<h2 id=\"树的事件处理\"><a href=\"#树的事件处理\" class=\"headerlink\" title=\"树的事件处理\"></a>树的事件处理</h2><p>树的事件主要有：1、展开节点事件。2、折叠节点事件。3、单击节点事件。4、双击节点事件。下面我们以一个静态树来测试树的主要事件。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//普通的静态树  </span></div><div class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </div><div class=\"line\"> <span class=\"attr\">el</span>:<span class=\"string\">'tree-div'</span>  </div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"comment\">//创建根节点  </span></div><div class=\"line\"><span class=\"keyword\">var</span> root = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'AllShengFen'</span>&#125;);  </div><div class=\"line\"><span class=\"comment\">//创建父节点  </span></div><div class=\"line\"><span class=\"keyword\">var</span> shengfen1 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'HeiLongJiang'</span>&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> shengfen2 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'LiaoNing'</span>&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> city1 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'harbin'</span>&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> city2 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'daqiang'</span>&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> city3 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'shenyang'</span>&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> city4 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'dalian'</span>&#125;);  </div><div class=\"line\"><span class=\"comment\">//将子节点添加到父节点中  </span></div><div class=\"line\">shengfen1.appendChild(city1);  </div><div class=\"line\">shengfen1.appendChild(city2);  </div><div class=\"line\">shengfen2.appendChild(city3);  </div><div class=\"line\">shengfen2.appendChild(city4);  </div><div class=\"line\"><span class=\"comment\">//将子节点添加到父节点中  </span></div><div class=\"line\">root.appendChild(shengfen1);  </div><div class=\"line\">root.appendChild(shengfen2);  </div><div class=\"line\"><span class=\"comment\">//将root节点设置为根节点  </span></div><div class=\"line\">tree.setRootNode(root);  </div><div class=\"line\"><span class=\"comment\">//使这棵树显示在div标签中  </span></div><div class=\"line\">tree.render();  </div><div class=\"line\"><span class=\"comment\">//展开节点事件  </span></div><div class=\"line\">tree.on(<span class=\"string\">\"expandnode\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>)</span>&#123;  </div><div class=\"line\"> alert(<span class=\"string\">\"[\"</span>+node.text+<span class=\"string\">\"]open\"</span>);  </div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"comment\">//折叠节点事件  </span></div><div class=\"line\">tree.on(<span class=\"string\">\"collapsenode\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>)</span>&#123;  </div><div class=\"line\"> alert(<span class=\"string\">\"[\"</span>+node.text+<span class=\"string\">\"]close\"</span>);  </div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"comment\">//单击节点事件  </span></div><div class=\"line\">tree.on(<span class=\"string\">\"click\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>)</span>&#123;  </div><div class=\"line\"> alert(<span class=\"string\">\"[\"</span>+node.text+<span class=\"string\">\"]click\"</span>);  </div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"comment\">//双击节点事件  </span></div><div class=\"line\">tree.on(<span class=\"string\">\"dblclick\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>)</span>&#123;  </div><div class=\"line\"> alert(<span class=\"string\">\"[\"</span>+node.text+<span class=\"string\">\"]double click\"</span>);  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>由于单击和双击有冲突，所以我们在测试的时候可以先注释掉一个，单独测试。</p>\n<h2 id=\"可编辑的树\"><a href=\"#可编辑的树\" class=\"headerlink\" title=\"可编辑的树\"></a>可编辑的树</h2><p>有了前面我们ExtJS的基础我就直接上代码了。简单的功能我都在代码的注释里写了。下面的例子中都会用到TreeNodeServlet.Java这个类所以我把这个代码也贴出来。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNodeServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;  </div><div class=\"line\">         </div><div class=\"line\">    <span class=\"comment\">/** </div><div class=\"line\">     * <span class=\"doctag\">@see</span> HttpServlet#HttpServlet() </div><div class=\"line\">     */</span>  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TreeNodeServlet</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">super</span>();  </div><div class=\"line\">        <span class=\"comment\">// TODO Auto-generated constructor stub  </span></div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"meta\">@Override</span>  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span>  </div><div class=\"line\">            <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;  </div><div class=\"line\">      </div><div class=\"line\">        response.setContentType(<span class=\"string\">\"text/html;charset=utf-8\"</span>);  </div><div class=\"line\">        PrintWriter out = response.getWriter();  </div><div class=\"line\">        String node = request.getParameter(<span class=\"string\">\"node\"</span>);  </div><div class=\"line\">        String json = <span class=\"string\">\"\"</span>;  </div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"string\">\"0\"</span>.equals(node))&#123;  </div><div class=\"line\">              </div><div class=\"line\">            json += <span class=\"string\">\"[&#123;id:1,text:'节点1'&#125;,&#123;id:2,text:'节点2'&#125;]\"</span>;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"string\">\"1\"</span>.equals(node))&#123;  </div><div class=\"line\">              </div><div class=\"line\">            json += <span class=\"string\">\"[&#123;id:11,text:'节点11',leaf:true&#125;,&#123;id:12,text:'节点12',leaf:true&#125;]\"</span>;  </div><div class=\"line\">              </div><div class=\"line\">        &#125;  </div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"string\">\"2\"</span>.equals(node))&#123;  </div><div class=\"line\">              </div><div class=\"line\">            json += <span class=\"string\">\"[&#123;id:21,text:'节点21'&#125;,&#123;id:22,text:'节点22',leaf:true&#125;]\"</span>;  </div><div class=\"line\">              </div><div class=\"line\">        &#125;  </div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"string\">\"21\"</span>.equals(node))&#123;  </div><div class=\"line\">              </div><div class=\"line\">            json += <span class=\"string\">\"[&#123;id:211,text:'节点211',leaf:true&#125;,&#123;id:212,text:'节点212',leaf:true&#125;]\"</span>;  </div><div class=\"line\">              </div><div class=\"line\">        &#125;  </div><div class=\"line\">          </div><div class=\"line\">        out.write(json);  </div><div class=\"line\">          </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>前端代码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </div><div class=\"line\"> <span class=\"attr\">el</span>:<span class=\"string\">'tree-div'</span>,  </div><div class=\"line\"> <span class=\"attr\">loader</span>: <span class=\"keyword\">new</span> Ext.tree.TreeLoader(&#123;<span class=\"attr\">dataUrl</span>:<span class=\"string\">'../TreeNodeServlet'</span>&#125;)  </div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> root = <span class=\"keyword\">new</span> Ext.tree.AsyncTreeNode(&#123;  </div><div class=\"line\"> <span class=\"attr\">id</span>:<span class=\"string\">'0'</span>,<span class=\"attr\">text</span>: <span class=\"string\">'harbin'</span>  </div><div class=\"line\">&#125;);  </div><div class=\"line\">tree.setRootNode(root);  </div><div class=\"line\">tree.render();  </div><div class=\"line\"><span class=\"comment\">//设置该树可编辑  </span></div><div class=\"line\"><span class=\"keyword\">var</span> treeEditor = <span class=\"keyword\">new</span> Ext.tree.TreeEditor(tree,&#123;<span class=\"attr\">allowBlank</span>:<span class=\"literal\">false</span>&#125;);  </div><div class=\"line\"><span class=\"comment\">//设置只有叶子节点可编辑  </span></div><div class=\"line\">treeEditor.on(<span class=\"string\">\"beforestartedit\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">treeEditor</span>)</span>&#123;  </div><div class=\"line\"> <span class=\"keyword\">return</span> treeEditor.editNode.isLeaf();  </div><div class=\"line\">&#125;);  </div><div class=\"line\">tree.on(<span class=\"string\">\"click\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>)</span>&#123;  </div><div class=\"line\">   </div><div class=\"line\"> alert(<span class=\"string\">\"The name is:\"</span>+node.text+<span class=\"string\">\"***\"</span>+node.id);  </div><div class=\"line\">   </div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"comment\">//此处将编辑的值输出  </span></div><div class=\"line\">treeEditor.on(<span class=\"string\">\"complete\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">treeEditor,newValue</span>)</span>&#123;  </div><div class=\"line\"> alert(<span class=\"string\">\"The name had been modified,the result is:\"</span>+newValue);  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h2 id=\"可拖拽的树\"><a href=\"#可拖拽的树\" class=\"headerlink\" title=\"可拖拽的树\"></a>可拖拽的树</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </div><div class=\"line\"> <span class=\"attr\">el</span>:<span class=\"string\">'tree-div'</span>,  </div><div class=\"line\"><span class=\"comment\">//设置可拖拽  </span></div><div class=\"line\"> enableDD:<span class=\"literal\">true</span>,  </div><div class=\"line\"> <span class=\"attr\">loader</span>: <span class=\"keyword\">new</span> Ext.tree.TreeLoader(&#123;<span class=\"attr\">dataUrl</span>:<span class=\"string\">'../TreeNodeServlet'</span>&#125;)  </div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> root = <span class=\"keyword\">new</span> Ext.tree.AsyncTreeNode(&#123;  </div><div class=\"line\"> <span class=\"attr\">id</span>:<span class=\"string\">'0'</span>,  </div><div class=\"line\">    <span class=\"attr\">text</span>: <span class=\"string\">'harbin'</span>  </div><div class=\"line\">&#125;);  </div><div class=\"line\">tree.setRootNode(root);  </div><div class=\"line\">tree.render();  </div><div class=\"line\"><span class=\"comment\">//设置叶子节点可追加元素  </span></div><div class=\"line\">tree.on(<span class=\"string\">\"nodedragover\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;  </div><div class=\"line\"> <span class=\"keyword\">var</span> node = e.target;  </div><div class=\"line\"> <span class=\"keyword\">if</span>(node.leaf)  </div><div class=\"line\">  node.leaf = <span class=\"literal\">false</span>;  </div><div class=\"line\"> <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"异步加载树\"><a href=\"#异步加载树\" class=\"headerlink\" title=\"异步加载树\"></a>异步加载树</h2><p>异步加载树是非常常用的，因为我们页面上生成的树往往都是从数据库中查出来的数据，有时候我们的数据量很大，如果每次都全加载那么很浪费资源，所以我们就用到了异步加载的树。所谓异步加载的树就是：我们点击哪个节点，就只加载这个节点下的元素，并不查询其他元素。但数据量大，并且树的层次特别多的时候就非常好用了，下面我们就实现一个异步加载的树。我将所有代码都粘出来，方便大家直接运行测试。</p>\n<ul>\n<li>准备数据库的数据。这个我们就用在第二节给的数据就可以了。</li>\n<li><p>vo也就是JavaBean的写法，我们也在第二节将过了，下面是代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tree</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;  </div><div class=\"line\">    <span class=\"keyword\">private</span> String text;  </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> leaf;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Tree</span><span class=\"params\">()</span></span>&#123;  </div><div class=\"line\">          </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Tree</span><span class=\"params\">(<span class=\"keyword\">int</span> id,String text,<span class=\"keyword\">boolean</span> leaf)</span></span>&#123;  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"keyword\">this</span>.id = id;  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"keyword\">this</span>.text = text;  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"keyword\">this</span>.leaf = leaf;  </div><div class=\"line\">          </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span> id;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">this</span>.id = id;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getText</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span> text;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setText</span><span class=\"params\">(String text)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">this</span>.text = text;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isLeaf</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span> leaf;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setLeaf</span><span class=\"params\">(<span class=\"keyword\">boolean</span> leaf)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">this</span>.leaf = leaf;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>接着是查询的DAO，其实也和第二节的差不多，只不过第二节用的是查询所有，而这里我们只是查询点击的节点下的数据，所以我们就根据传递过来的id进行查询部分数据进行显示。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DAO</span> </span>&#123;  </div><div class=\"line\">    Connection conn;  </div><div class=\"line\">      </div><div class=\"line\">    PreparedStatement pstate;  </div><div class=\"line\">      </div><div class=\"line\">    ResultSet rs;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List <span class=\"title\">findAll</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span></span>&#123;  </div><div class=\"line\">          </div><div class=\"line\">        List list = <span class=\"keyword\">new</span> ArrayList();  </div><div class=\"line\">          </div><div class=\"line\">        String sql = <span class=\"string\">\" select deptid,deptname from dept where higherDept = \"</span>+id ;  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"keyword\">try</span>&#123;  </div><div class=\"line\">              </div><div class=\"line\">            conn = DBConn.getConn();  </div><div class=\"line\">              </div><div class=\"line\">            pstate = conn.prepareStatement(sql);  </div><div class=\"line\">              </div><div class=\"line\">            rs = pstate.executeQuery();  </div><div class=\"line\">              </div><div class=\"line\">            <span class=\"keyword\">while</span>(rs.next())&#123;  </div><div class=\"line\">                  </div><div class=\"line\">                Tree vo = <span class=\"keyword\">new</span> Tree();  </div><div class=\"line\">                  </div><div class=\"line\">                vo.setId(rs.getInt(<span class=\"string\">\"deptid\"</span>));  </div><div class=\"line\">                vo.setText(rs.getString(<span class=\"string\">\"deptname\"</span>));  </div><div class=\"line\">                vo.setLeaf(<span class=\"keyword\">false</span>);  </div><div class=\"line\">                list.add(vo);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">              </div><div class=\"line\">              </div><div class=\"line\">        &#125;<span class=\"keyword\">catch</span>(Exception e)&#123;  </div><div class=\"line\">              </div><div class=\"line\">            e.printStackTrace();  </div><div class=\"line\">              </div><div class=\"line\">        &#125;<span class=\"keyword\">finally</span>&#123;  </div><div class=\"line\">              </div><div class=\"line\">            DBConn.closeRs(rs);  </div><div class=\"line\">              </div><div class=\"line\">            DBConn.closePreState(pstate);  </div><div class=\"line\">              </div><div class=\"line\">            DBConn.closeConn(conn);  </div><div class=\"line\">              </div><div class=\"line\">        &#125;  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"keyword\">return</span> list;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这里涉及到了另外一个工具类，就是连接数据库用的类，这个非常简单大家都应该没有问题。</p>\n<ul>\n<li><p>然后是servlet，servlet里我们也简单的处理一下，就是接收一下页面传递过来的节点id，并根据这个id查询数据。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;  </div><div class=\"line\">         </div><div class=\"line\">    <span class=\"comment\">/** </div><div class=\"line\">     * <span class=\"doctag\">@see</span> HttpServlet#HttpServlet() </div><div class=\"line\">     */</span>  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TreeServlet</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">super</span>();  </div><div class=\"line\">        <span class=\"comment\">// TODO Auto-generated constructor stub  </span></div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"meta\">@Override</span>  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span>  </div><div class=\"line\">            <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;  </div><div class=\"line\">        response.setContentType(<span class=\"string\">\"text/html;charset=utf-8\"</span>);  </div><div class=\"line\">        PrintWriter out = response.getWriter();  </div><div class=\"line\">        String node = request.getParameter(<span class=\"string\">\"pid\"</span>);  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"keyword\">int</span> id = Integer.parseInt(node);  </div><div class=\"line\">          </div><div class=\"line\">        DAO dao = <span class=\"keyword\">new</span> DAO();  </div><div class=\"line\">        List list = <span class=\"keyword\">new</span> ArrayList();  </div><div class=\"line\">          </div><div class=\"line\">        list = dao.findAll(id);  </div><div class=\"line\">                response.getWriter().write(JSONTools.getJsonArray(list).toString());  </div><div class=\"line\">          </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>下面就是页面js文件了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </div><div class=\"line\"> <span class=\"attr\">el</span>:<span class=\"string\">'tree-div'</span>,  </div><div class=\"line\"> <span class=\"attr\">loader</span>: <span class=\"keyword\">new</span>   </div><div class=\"line\"><span class=\"comment\">//第一次访问的时候只加载根节点下的数据  </span></div><div class=\"line\">Ext.tree.TreeLoader(&#123;<span class=\"attr\">dataUrl</span>:<span class=\"string\">'../TreeServlet?pid=23010000'</span>&#125;)  </div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> root = <span class=\"keyword\">new</span> Ext.tree.AsyncTreeNode(&#123;  </div><div class=\"line\">    <span class=\"attr\">text</span>: <span class=\"string\">'harbin'</span>,  </div><div class=\"line\">    <span class=\"attr\">draggable</span>:<span class=\"literal\">false</span>,  </div><div class=\"line\">    <span class=\"attr\">id</span>:<span class=\"string\">'23010000'</span>  </div><div class=\"line\">&#125;);  </div><div class=\"line\">tree.setRootNode(root);  </div><div class=\"line\">tree.render();  </div><div class=\"line\"><span class=\"comment\">//根据点击的节点加载该节点下的数据,点击哪个节点就加载哪个节点的数据  </span></div><div class=\"line\">tree.on(<span class=\"string\">'beforeload'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>)</span>&#123;     </div><div class=\"line\">    <span class=\"keyword\">if</span>(node.id != <span class=\"string\">'23010000'</span>)&#123;    </div><div class=\"line\">        tree.loader.dataUrl = <span class=\"string\">'../TreeServlet?pid='</span>+node.id;           </div><div class=\"line\">    &#125;      </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这样整个异步加载的树也就完成了。完成了异步加载的树，那么ExtJS Tree这块的主要内容也就差不多了，还有一些细节大家研究研究就可以了。如果哪有错误或不足希望指出。</p>"},{"title":"第一篇文章","date":"2016-11-27T08:45:24.000Z","_content":"# 我在Hexo上的第一篇博客\n\n这是我在Hexo上的第一篇博客，后面我会将我之前在其它博客平台上写的博客全部迁移到这里，并坚持写新的博客，希望大家支持，谢谢！","source":"_posts/第一篇文章.md","raw":"---\ntitle: 第一篇文章\ndate: 2016-11-27 16:45:24\ntags:\n---\n# 我在Hexo上的第一篇博客\n\n这是我在Hexo上的第一篇博客，后面我会将我之前在其它博客平台上写的博客全部迁移到这里，并坚持写新的博客，希望大家支持，谢谢！","slug":"第一篇文章","published":1,"updated":"2017-01-19T11:10:49.478Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyo3mvpb0014tsr8rrtyzgaq","content":"<h1 id=\"我在Hexo上的第一篇博客\"><a href=\"#我在Hexo上的第一篇博客\" class=\"headerlink\" title=\"我在Hexo上的第一篇博客\"></a>我在Hexo上的第一篇博客</h1><p>这是我在Hexo上的第一篇博客，后面我会将我之前在其它博客平台上写的博客全部迁移到这里，并坚持写新的博客，希望大家支持，谢谢！</p>\n","excerpt":"","more":"<h1 id=\"我在Hexo上的第一篇博客\"><a href=\"#我在Hexo上的第一篇博客\" class=\"headerlink\" title=\"我在Hexo上的第一篇博客\"></a>我在Hexo上的第一篇博客</h1><p>这是我在Hexo上的第一篇博客，后面我会将我之前在其它博客平台上写的博客全部迁移到这里，并坚持写新的博客，希望大家支持，谢谢！</p>\n"},{"title":"设计模式在游戏开发中的应用之单例模式","date":"2016-12-01T15:07:14.000Z","_content":"# 单例模式\n## 通俗的定义\n是指在运行中只有一个实例对象存在。\n## 结构图如下\n![single](/images/design_3_single.png)\n<!--more-->\n## 游戏开发中的使用\n游戏开发中单例模式的使用也是非常普遍的，比如在Cocos2d-x中的Director就是一个单例。比如游戏中的很多工具类都是做成单例或者静态类的方式来使用。单例还有一种写法，很少有人使用，然而这种写法在做游戏开发时却很好用。比如，我们在需要分享时，往往都需要每个平台都有单独的功能和实现方式，很多时候我们都这么写：\n``` java\nclass ShareUtils {  \n    private _instance = new ShareUtils();  \n  \n    private ShareUtils() {  \n    }  \n  \n    public getInstance() {  \n        return _instance;  \n    }  \n      \n    public void shareToIOS () {  \n        //todo iOS share  \n    }  \n      \n    public void shareToAndroid () {  \n        //todo android share  \n    }  \n}  \n```\n然后再根据不同平台调用不同的函数。其实我们完全可以写的再优雅一些：\n``` java\nclass ShareUtils {  \n    private ShareUtils _instance = null;  \n  \n    private ShareUtils() {  \n    }  \n  \n    public getInstance() {  \n        if (_instance == null) {  \n            if (PLATFORM == IOS) {  \n                _instance = new IOSShare()  \n            } else if (PLATFORM == ANDROID) {  \n                _instance = new AndroidShare()  \n            }  \n        }  \n        return _instance;  \n    }  \n      \n    public void share();  \n}  \n  \nclass IOSShare extends ShareUtils {  \n    public void share() {  \n        //todo ios share  \n    }  \n}  \n  \nclass AndroidShare extends ShareUtils {  \n    public void share() {  \n        //todo android share  \n    }  \n}  \n```\n其实这里我们更重要的是要讨论一下单例模式的问题。\n## 单例模式的问题\n最大问题之一就是它本身是一个全局变量。全局变量会让人很难阅读和理解，当我们去查找一个别人写的代码中的bug时，如果这里没有使用全局变量的话，我们只要理解这个函数体内的代码和传递的参数就可以了。然而当这里充斥着全局变量的时候，性质就不一样了，你要全局搜索这个全局变量都在哪里引用了，做了什么修改，为什么这么修改，理解和修改的代价就会变得特别大。同时全局变量还增加了代码的耦合性，这也是个问题。在很多项目中我们都能看见这样的类：SoundManager,GameManager,DataUtils等等，各种各样的Manager和Utils，大多数时候它们很管用，但是当你要创建这么一个类的时候，你应该思考一下真的需要一个单例的类么？在《游戏编程模式》中有下面这个例子：\n``` java\nclass Bullet  \n{  \npublic:  \n  int getX() const { return x_; }  \n  int getY() const { return y_; }  \n  \n  void setX(int x) { x_ = x; }  \n  void setY(int y) { y_ = y; }  \n  \nprivate:  \n  int x_, y_;  \n};  \n  \nclass BulletManager  \n{  \npublic:  \n  Bullet* create(int x, int y)  \n  {  \n    Bullet* bullet = new Bullet();  \n    bullet->setX(x);  \n    bullet->setY(y);  \n  \n    return bullet;  \n  }  \n  \n  bool isOnScreen(Bullet& bullet)  \n  {  \n    return bullet.getX() >= 0 &&  \n           bullet.getX() < SCREEN_WIDTH &&  \n           bullet.getY() >= 0 &&  \n           bullet.getY() < SCREEN_HEIGHT;  \n  }  \n  \n  void move(Bullet& bullet)  \n  {  \n    bullet.setX(bullet.getX() + 5);  \n  }  \n}; \n```\n这里的BulletManager就是一个管理Bullet的单例类，看起来这里很合理，但是真的需要吗？答案是不需要：\n``` java\nclass Bullet  \n{  \npublic:  \n  Bullet(int x, int y) : x_(x), y_(y) {}  \n  \n  bool isOnScreen()  \n  {  \n    return x_ >= 0 && x_ < SCREEN_WIDTH &&  \n           y_ >= 0 && y_ < SCREEN_HEIGHT;  \n  }  \n  \n  void move() { x_ += 5; }  \n  \nprivate:  \n  int x_, y_;  \n};  \n```\n总之，单例是很方便，有时也很管用，但是要慎用，如果项目中充斥着大量的单例，那么这个项目肯定是难以维护的。","source":"_posts/design-single.md","raw":"---\ntitle: 设计模式在游戏开发中的应用之单例模式\ndate: 2016-12-01 23:07:14\ntags: 单例模式\ncategories: 设计模式\n---\n# 单例模式\n## 通俗的定义\n是指在运行中只有一个实例对象存在。\n## 结构图如下\n![single](/images/design_3_single.png)\n<!--more-->\n## 游戏开发中的使用\n游戏开发中单例模式的使用也是非常普遍的，比如在Cocos2d-x中的Director就是一个单例。比如游戏中的很多工具类都是做成单例或者静态类的方式来使用。单例还有一种写法，很少有人使用，然而这种写法在做游戏开发时却很好用。比如，我们在需要分享时，往往都需要每个平台都有单独的功能和实现方式，很多时候我们都这么写：\n``` java\nclass ShareUtils {  \n    private _instance = new ShareUtils();  \n  \n    private ShareUtils() {  \n    }  \n  \n    public getInstance() {  \n        return _instance;  \n    }  \n      \n    public void shareToIOS () {  \n        //todo iOS share  \n    }  \n      \n    public void shareToAndroid () {  \n        //todo android share  \n    }  \n}  \n```\n然后再根据不同平台调用不同的函数。其实我们完全可以写的再优雅一些：\n``` java\nclass ShareUtils {  \n    private ShareUtils _instance = null;  \n  \n    private ShareUtils() {  \n    }  \n  \n    public getInstance() {  \n        if (_instance == null) {  \n            if (PLATFORM == IOS) {  \n                _instance = new IOSShare()  \n            } else if (PLATFORM == ANDROID) {  \n                _instance = new AndroidShare()  \n            }  \n        }  \n        return _instance;  \n    }  \n      \n    public void share();  \n}  \n  \nclass IOSShare extends ShareUtils {  \n    public void share() {  \n        //todo ios share  \n    }  \n}  \n  \nclass AndroidShare extends ShareUtils {  \n    public void share() {  \n        //todo android share  \n    }  \n}  \n```\n其实这里我们更重要的是要讨论一下单例模式的问题。\n## 单例模式的问题\n最大问题之一就是它本身是一个全局变量。全局变量会让人很难阅读和理解，当我们去查找一个别人写的代码中的bug时，如果这里没有使用全局变量的话，我们只要理解这个函数体内的代码和传递的参数就可以了。然而当这里充斥着全局变量的时候，性质就不一样了，你要全局搜索这个全局变量都在哪里引用了，做了什么修改，为什么这么修改，理解和修改的代价就会变得特别大。同时全局变量还增加了代码的耦合性，这也是个问题。在很多项目中我们都能看见这样的类：SoundManager,GameManager,DataUtils等等，各种各样的Manager和Utils，大多数时候它们很管用，但是当你要创建这么一个类的时候，你应该思考一下真的需要一个单例的类么？在《游戏编程模式》中有下面这个例子：\n``` java\nclass Bullet  \n{  \npublic:  \n  int getX() const { return x_; }  \n  int getY() const { return y_; }  \n  \n  void setX(int x) { x_ = x; }  \n  void setY(int y) { y_ = y; }  \n  \nprivate:  \n  int x_, y_;  \n};  \n  \nclass BulletManager  \n{  \npublic:  \n  Bullet* create(int x, int y)  \n  {  \n    Bullet* bullet = new Bullet();  \n    bullet->setX(x);  \n    bullet->setY(y);  \n  \n    return bullet;  \n  }  \n  \n  bool isOnScreen(Bullet& bullet)  \n  {  \n    return bullet.getX() >= 0 &&  \n           bullet.getX() < SCREEN_WIDTH &&  \n           bullet.getY() >= 0 &&  \n           bullet.getY() < SCREEN_HEIGHT;  \n  }  \n  \n  void move(Bullet& bullet)  \n  {  \n    bullet.setX(bullet.getX() + 5);  \n  }  \n}; \n```\n这里的BulletManager就是一个管理Bullet的单例类，看起来这里很合理，但是真的需要吗？答案是不需要：\n``` java\nclass Bullet  \n{  \npublic:  \n  Bullet(int x, int y) : x_(x), y_(y) {}  \n  \n  bool isOnScreen()  \n  {  \n    return x_ >= 0 && x_ < SCREEN_WIDTH &&  \n           y_ >= 0 && y_ < SCREEN_HEIGHT;  \n  }  \n  \n  void move() { x_ += 5; }  \n  \nprivate:  \n  int x_, y_;  \n};  \n```\n总之，单例是很方便，有时也很管用，但是要慎用，如果项目中充斥着大量的单例，那么这个项目肯定是难以维护的。","slug":"design-single","published":1,"updated":"2017-01-19T11:10:49.478Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyo3mvpc0016tsr8ymocne93","content":"<h1 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h1><h2 id=\"通俗的定义\"><a href=\"#通俗的定义\" class=\"headerlink\" title=\"通俗的定义\"></a>通俗的定义</h2><p>是指在运行中只有一个实例对象存在。</p>\n<h2 id=\"结构图如下\"><a href=\"#结构图如下\" class=\"headerlink\" title=\"结构图如下\"></a>结构图如下</h2><p><img src=\"/images/design_3_single.png\" alt=\"single\"><br><a id=\"more\"></a></p>\n<h2 id=\"游戏开发中的使用\"><a href=\"#游戏开发中的使用\" class=\"headerlink\" title=\"游戏开发中的使用\"></a>游戏开发中的使用</h2><p>游戏开发中单例模式的使用也是非常普遍的，比如在Cocos2d-x中的Director就是一个单例。比如游戏中的很多工具类都是做成单例或者静态类的方式来使用。单例还有一种写法，很少有人使用，然而这种写法在做游戏开发时却很好用。比如，我们在需要分享时，往往都需要每个平台都有单独的功能和实现方式，很多时候我们都这么写：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShareUtils</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">private</span> _instance = <span class=\"keyword\">new</span> ShareUtils();  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">ShareUtils</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span> _instance;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shareToIOS</span> <span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"comment\">//todo iOS share  </span></div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shareToAndroid</span> <span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"comment\">//todo android share  </span></div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然后再根据不同平台调用不同的函数。其实我们完全可以写的再优雅一些：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShareUtils</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">private</span> ShareUtils _instance = <span class=\"keyword\">null</span>;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">ShareUtils</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span> (_instance == <span class=\"keyword\">null</span>) &#123;  </div><div class=\"line\">            <span class=\"keyword\">if</span> (PLATFORM == IOS) &#123;  </div><div class=\"line\">                _instance = <span class=\"keyword\">new</span> IOSShare()  </div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (PLATFORM == ANDROID) &#123;  </div><div class=\"line\">                _instance = <span class=\"keyword\">new</span> AndroidShare()  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        <span class=\"keyword\">return</span> _instance;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">share</span><span class=\"params\">()</span></span>;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IOSShare</span> <span class=\"keyword\">extends</span> <span class=\"title\">ShareUtils</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">share</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"comment\">//todo ios share  </span></div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AndroidShare</span> <span class=\"keyword\">extends</span> <span class=\"title\">ShareUtils</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">share</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"comment\">//todo android share  </span></div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>其实这里我们更重要的是要讨论一下单例模式的问题。</p>\n<h2 id=\"单例模式的问题\"><a href=\"#单例模式的问题\" class=\"headerlink\" title=\"单例模式的问题\"></a>单例模式的问题</h2><p>最大问题之一就是它本身是一个全局变量。全局变量会让人很难阅读和理解，当我们去查找一个别人写的代码中的bug时，如果这里没有使用全局变量的话，我们只要理解这个函数体内的代码和传递的参数就可以了。然而当这里充斥着全局变量的时候，性质就不一样了，你要全局搜索这个全局变量都在哪里引用了，做了什么修改，为什么这么修改，理解和修改的代价就会变得特别大。同时全局变量还增加了代码的耦合性，这也是个问题。在很多项目中我们都能看见这样的类：SoundManager,GameManager,DataUtils等等，各种各样的Manager和Utils，大多数时候它们很管用，但是当你要创建这么一个类的时候，你应该思考一下真的需要一个单例的类么？在《游戏编程模式》中有下面这个例子：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bullet</span>  </span></div><div class=\"line\">&#123;  </div><div class=\"line\"><span class=\"keyword\">public</span>:  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getX</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123; <span class=\"keyword\">return</span> x_; &#125;  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getY</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123; <span class=\"keyword\">return</span> y_; &#125;  </div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setX</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123; x_ = x; &#125;  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setY</span><span class=\"params\">(<span class=\"keyword\">int</span> y)</span> </span>&#123; y_ = y; &#125;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">private</span>:  </div><div class=\"line\">  <span class=\"keyword\">int</span> x_, y_;  </div><div class=\"line\">&#125;;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BulletManager</span>  </span></div><div class=\"line\">&#123;  </div><div class=\"line\"><span class=\"keyword\">public</span>:  </div><div class=\"line\">  Bullet* create(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)  </div><div class=\"line\">  &#123;  </div><div class=\"line\">    Bullet* bullet = <span class=\"keyword\">new</span> Bullet();  </div><div class=\"line\">    bullet-&gt;setX(x);  </div><div class=\"line\">    bullet-&gt;setY(y);  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">return</span> bullet;  </div><div class=\"line\">  &#125;  </div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\">bool <span class=\"title\">isOnScreen</span><span class=\"params\">(Bullet&amp; bullet)</span>  </span></div><div class=\"line\">  &#123;  </div><div class=\"line\">    <span class=\"keyword\">return</span> bullet.getX() &gt;= <span class=\"number\">0</span> &amp;&amp;  </div><div class=\"line\">           bullet.getX() &lt; SCREEN_WIDTH &amp;&amp;  </div><div class=\"line\">           bullet.getY() &gt;= <span class=\"number\">0</span> &amp;&amp;  </div><div class=\"line\">           bullet.getY() &lt; SCREEN_HEIGHT;  </div><div class=\"line\">  &#125;  </div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">move</span><span class=\"params\">(Bullet&amp; bullet)</span>  </span></div><div class=\"line\">  &#123;  </div><div class=\"line\">    bullet.setX(bullet.getX() + <span class=\"number\">5</span>);  </div><div class=\"line\">  &#125;  </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>这里的BulletManager就是一个管理Bullet的单例类，看起来这里很合理，但是真的需要吗？答案是不需要：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bullet</span>  </span></div><div class=\"line\">&#123;  </div><div class=\"line\"><span class=\"keyword\">public</span>:  </div><div class=\"line\">  Bullet(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y) : x_(x), y_(y) &#123;&#125;  </div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\">bool <span class=\"title\">isOnScreen</span><span class=\"params\">()</span>  </span></div><div class=\"line\">  &#123;  </div><div class=\"line\">    <span class=\"keyword\">return</span> x_ &gt;= <span class=\"number\">0</span> &amp;&amp; x_ &lt; SCREEN_WIDTH &amp;&amp;  </div><div class=\"line\">           y_ &gt;= <span class=\"number\">0</span> &amp;&amp; y_ &lt; SCREEN_HEIGHT;  </div><div class=\"line\">  &#125;  </div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">move</span><span class=\"params\">()</span> </span>&#123; x_ += <span class=\"number\">5</span>; &#125;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">private</span>:  </div><div class=\"line\">  <span class=\"keyword\">int</span> x_, y_;  </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>总之，单例是很方便，有时也很管用，但是要慎用，如果项目中充斥着大量的单例，那么这个项目肯定是难以维护的。</p>\n","excerpt":"<h1 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h1><h2 id=\"通俗的定义\"><a href=\"#通俗的定义\" class=\"headerlink\" title=\"通俗的定义\"></a>通俗的定义</h2><p>是指在运行中只有一个实例对象存在。</p>\n<h2 id=\"结构图如下\"><a href=\"#结构图如下\" class=\"headerlink\" title=\"结构图如下\"></a>结构图如下</h2><p><img src=\"/images/design_3_single.png\" alt=\"single\"><br>","more":"</p>\n<h2 id=\"游戏开发中的使用\"><a href=\"#游戏开发中的使用\" class=\"headerlink\" title=\"游戏开发中的使用\"></a>游戏开发中的使用</h2><p>游戏开发中单例模式的使用也是非常普遍的，比如在Cocos2d-x中的Director就是一个单例。比如游戏中的很多工具类都是做成单例或者静态类的方式来使用。单例还有一种写法，很少有人使用，然而这种写法在做游戏开发时却很好用。比如，我们在需要分享时，往往都需要每个平台都有单独的功能和实现方式，很多时候我们都这么写：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShareUtils</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">private</span> _instance = <span class=\"keyword\">new</span> ShareUtils();  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">ShareUtils</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span> _instance;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shareToIOS</span> <span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"comment\">//todo iOS share  </span></div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shareToAndroid</span> <span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"comment\">//todo android share  </span></div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然后再根据不同平台调用不同的函数。其实我们完全可以写的再优雅一些：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShareUtils</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">private</span> ShareUtils _instance = <span class=\"keyword\">null</span>;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">ShareUtils</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span> (_instance == <span class=\"keyword\">null</span>) &#123;  </div><div class=\"line\">            <span class=\"keyword\">if</span> (PLATFORM == IOS) &#123;  </div><div class=\"line\">                _instance = <span class=\"keyword\">new</span> IOSShare()  </div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (PLATFORM == ANDROID) &#123;  </div><div class=\"line\">                _instance = <span class=\"keyword\">new</span> AndroidShare()  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        <span class=\"keyword\">return</span> _instance;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">share</span><span class=\"params\">()</span></span>;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IOSShare</span> <span class=\"keyword\">extends</span> <span class=\"title\">ShareUtils</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">share</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"comment\">//todo ios share  </span></div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AndroidShare</span> <span class=\"keyword\">extends</span> <span class=\"title\">ShareUtils</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">share</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"comment\">//todo android share  </span></div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>其实这里我们更重要的是要讨论一下单例模式的问题。</p>\n<h2 id=\"单例模式的问题\"><a href=\"#单例模式的问题\" class=\"headerlink\" title=\"单例模式的问题\"></a>单例模式的问题</h2><p>最大问题之一就是它本身是一个全局变量。全局变量会让人很难阅读和理解，当我们去查找一个别人写的代码中的bug时，如果这里没有使用全局变量的话，我们只要理解这个函数体内的代码和传递的参数就可以了。然而当这里充斥着全局变量的时候，性质就不一样了，你要全局搜索这个全局变量都在哪里引用了，做了什么修改，为什么这么修改，理解和修改的代价就会变得特别大。同时全局变量还增加了代码的耦合性，这也是个问题。在很多项目中我们都能看见这样的类：SoundManager,GameManager,DataUtils等等，各种各样的Manager和Utils，大多数时候它们很管用，但是当你要创建这么一个类的时候，你应该思考一下真的需要一个单例的类么？在《游戏编程模式》中有下面这个例子：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bullet</span>  </div><div class=\"line\"></span>&#123;  </div><div class=\"line\"><span class=\"keyword\">public</span>:  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getX</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123; <span class=\"keyword\">return</span> x_; &#125;  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getY</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123; <span class=\"keyword\">return</span> y_; &#125;  </div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setX</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123; x_ = x; &#125;  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setY</span><span class=\"params\">(<span class=\"keyword\">int</span> y)</span> </span>&#123; y_ = y; &#125;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">private</span>:  </div><div class=\"line\">  <span class=\"keyword\">int</span> x_, y_;  </div><div class=\"line\">&#125;;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BulletManager</span>  </div><div class=\"line\"></span>&#123;  </div><div class=\"line\"><span class=\"keyword\">public</span>:  </div><div class=\"line\">  Bullet* create(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)  </div><div class=\"line\">  &#123;  </div><div class=\"line\">    Bullet* bullet = <span class=\"keyword\">new</span> Bullet();  </div><div class=\"line\">    bullet-&gt;setX(x);  </div><div class=\"line\">    bullet-&gt;setY(y);  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">return</span> bullet;  </div><div class=\"line\">  &#125;  </div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\">bool <span class=\"title\">isOnScreen</span><span class=\"params\">(Bullet&amp; bullet)</span>  </div><div class=\"line\">  </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">return</span> bullet.getX() &gt;= <span class=\"number\">0</span> &amp;&amp;  </div><div class=\"line\">           bullet.getX() &lt; SCREEN_WIDTH &amp;&amp;  </div><div class=\"line\">           bullet.getY() &gt;= <span class=\"number\">0</span> &amp;&amp;  </div><div class=\"line\">           bullet.getY() &lt; SCREEN_HEIGHT;  </div><div class=\"line\">  &#125;  </div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">move</span><span class=\"params\">(Bullet&amp; bullet)</span>  </div><div class=\"line\">  </span>&#123;  </div><div class=\"line\">    bullet.setX(bullet.getX() + <span class=\"number\">5</span>);  </div><div class=\"line\">  &#125;  </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>这里的BulletManager就是一个管理Bullet的单例类，看起来这里很合理，但是真的需要吗？答案是不需要：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bullet</span>  </div><div class=\"line\"></span>&#123;  </div><div class=\"line\"><span class=\"keyword\">public</span>:  </div><div class=\"line\">  Bullet(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y) : x_(x), y_(y) &#123;&#125;  </div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\">bool <span class=\"title\">isOnScreen</span><span class=\"params\">()</span>  </div><div class=\"line\">  </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">return</span> x_ &gt;= <span class=\"number\">0</span> &amp;&amp; x_ &lt; SCREEN_WIDTH &amp;&amp;  </div><div class=\"line\">           y_ &gt;= <span class=\"number\">0</span> &amp;&amp; y_ &lt; SCREEN_HEIGHT;  </div><div class=\"line\">  &#125;  </div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">move</span><span class=\"params\">()</span> </span>&#123; x_ += <span class=\"number\">5</span>; &#125;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">private</span>:  </div><div class=\"line\">  <span class=\"keyword\">int</span> x_, y_;  </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>总之，单例是很方便，有时也很管用，但是要慎用，如果项目中充斥着大量的单例，那么这个项目肯定是难以维护的。</p>"},{"title":"JS闭包总结","date":"2017-02-02T08:04:34.000Z","_content":"## 闭包的用途\n#### 1.防止全局变量污染\n在JavaScript中全局变量是个不小的毒瘤，全局变量有时是很方便，但是很多项目滥用全局变量成灾，维护起来非常困难。所以这里的作用就是防止全局变量污染，例子如下：\n``` javascript\nvar add = (function() {    \n    var i = 0;   \n    return function add () {       \n        i++;        \n        cc.log(i); // 1    \n    }\n})();\n\nadd();\n```\n<!--more-->\n这个例子实现的功能就是，减少了全局变量的滥用，同时这个功能也是达到了下面的用途，就是访问局部变量。\n#### 2.局部变量访问\n上面防止全局变量污染的例子中i是一个局部变量，但是在函数外依然可以间接的访问控制，就是达到了在作用域外访问局部变量。\n#### 3.匿名初始化\n匿名初始化很简单，有时我们需要一个界面打开做一些初始化，只需要执行一遍，可以采用这种形式：\n```\n(function () {    \n    cc.log(\"init something...\");\n})();\n```\n这样在加载时直接就执行了匿名函数里的东西，有效的防止了，一些在不知情的情况下重复的调用了初始化函数。\n#### 4.私有成员封装\n这个是比较常用的，JavaScript中并没有很多语言中拥有的访问控制，所以我们可以使用闭包来达到私有化的目的：\n```\nvar person = (function () {    \n    var age = 18;    \n    return {        \n        getAge:function () {            \n            return age;       \n        },        \n        setAge:function (a) {           \n            age = a;        \n        }    \n    }\n})();\n\ncc.log(person.getAge()); // 18\nperson.setAge(99);\ncc.log(person.getAge()); // 99\n```\n这样在外部就不能访问age变量，只能通过getAge和setAge来访问，达到了私有化和封装的目的，这点在开发中比较常用。\n#### 5.制作缓存池\n这个用途是使用了闭包里的局部变量不会被销毁的特点，实现缓冲池的方法有很多，使用闭包只是其中一种，大家可以看自己的情况来使用，下面是使用闭包来实现缓存池简单大意的例子：\n```\nvar person = (function () {    \n    var pool = null;    \n    return {        \n        getObj:function (key) {            \n            return pool[key];        \n        },        \n        setObj:function (key, obj) {            \n            pool[key] = obj;        \n        }    \n    }\n})();\n```\n#### 6.循环中保存索引\n开发过程中在循环里注册回调很常见，但是刚接触js的同学常常会遇到注册完了回调，发现索引值不对，可以看下面的例子：\n```\nvar arr = [];\nvar show = function () {    \n    for (var i = 0; i < 3; i++) {        \n        arr[i] = function test () {            \n            cc.log(i);        \n        }    \n    }\n}\n\nshow();\n\narr[0](); // 3\narr[1](); // 3\narr[2](); // 3\n```\n运行会发现，输出的都是最后一个索引，这种情况是因为，内部函数并没有立即执行，而且内部函数中只是对这个变量进行了引用，所以最后记录的都是这个引用地址中的最终值。要想得到我们想要的效果就需要让内部函数立即执行，捕捉当时索引值，可做如下改动：\n```\nvar arr = [];\nvar show = function () {    \n    for (var i = 0; i < 3; i++) {        \n        arr[i] = (function (j){            \n            return function () {                \n                cc.log(j);            \n            }        \n        })(i);    \n    }\n}\n\nshow();\n\narr[0](); // 0\narr[1](); // 1\narr[2](); // 2\n```\n这样就获得了我们想要的结果。  \n#### 7.闭包的其他问题  \n- 因为闭包中的局部变量不会释放，所以闭包和全局变量一样会占用大量内存。\n- 闭包中变量引用由于不会释放，很有可能造成内存泄露。\n- 大量的闭包使用可能会降低程序的可读性，增加维护成本。\n\n总之闭包有很多地方用起来很方便，闭包的特性也能帮助我们实现很多巧妙的设计，但是闭包也会引起很多问题，所以在开发过程中应该尽量少用闭包。","source":"_posts/js-closure.md","raw":"---\ntitle: JS闭包总结\ndate: 2017-02-02 16:04:34\ntags: 闭包\ncategories: javascript\n---\n## 闭包的用途\n#### 1.防止全局变量污染\n在JavaScript中全局变量是个不小的毒瘤，全局变量有时是很方便，但是很多项目滥用全局变量成灾，维护起来非常困难。所以这里的作用就是防止全局变量污染，例子如下：\n``` javascript\nvar add = (function() {    \n    var i = 0;   \n    return function add () {       \n        i++;        \n        cc.log(i); // 1    \n    }\n})();\n\nadd();\n```\n<!--more-->\n这个例子实现的功能就是，减少了全局变量的滥用，同时这个功能也是达到了下面的用途，就是访问局部变量。\n#### 2.局部变量访问\n上面防止全局变量污染的例子中i是一个局部变量，但是在函数外依然可以间接的访问控制，就是达到了在作用域外访问局部变量。\n#### 3.匿名初始化\n匿名初始化很简单，有时我们需要一个界面打开做一些初始化，只需要执行一遍，可以采用这种形式：\n```\n(function () {    \n    cc.log(\"init something...\");\n})();\n```\n这样在加载时直接就执行了匿名函数里的东西，有效的防止了，一些在不知情的情况下重复的调用了初始化函数。\n#### 4.私有成员封装\n这个是比较常用的，JavaScript中并没有很多语言中拥有的访问控制，所以我们可以使用闭包来达到私有化的目的：\n```\nvar person = (function () {    \n    var age = 18;    \n    return {        \n        getAge:function () {            \n            return age;       \n        },        \n        setAge:function (a) {           \n            age = a;        \n        }    \n    }\n})();\n\ncc.log(person.getAge()); // 18\nperson.setAge(99);\ncc.log(person.getAge()); // 99\n```\n这样在外部就不能访问age变量，只能通过getAge和setAge来访问，达到了私有化和封装的目的，这点在开发中比较常用。\n#### 5.制作缓存池\n这个用途是使用了闭包里的局部变量不会被销毁的特点，实现缓冲池的方法有很多，使用闭包只是其中一种，大家可以看自己的情况来使用，下面是使用闭包来实现缓存池简单大意的例子：\n```\nvar person = (function () {    \n    var pool = null;    \n    return {        \n        getObj:function (key) {            \n            return pool[key];        \n        },        \n        setObj:function (key, obj) {            \n            pool[key] = obj;        \n        }    \n    }\n})();\n```\n#### 6.循环中保存索引\n开发过程中在循环里注册回调很常见，但是刚接触js的同学常常会遇到注册完了回调，发现索引值不对，可以看下面的例子：\n```\nvar arr = [];\nvar show = function () {    \n    for (var i = 0; i < 3; i++) {        \n        arr[i] = function test () {            \n            cc.log(i);        \n        }    \n    }\n}\n\nshow();\n\narr[0](); // 3\narr[1](); // 3\narr[2](); // 3\n```\n运行会发现，输出的都是最后一个索引，这种情况是因为，内部函数并没有立即执行，而且内部函数中只是对这个变量进行了引用，所以最后记录的都是这个引用地址中的最终值。要想得到我们想要的效果就需要让内部函数立即执行，捕捉当时索引值，可做如下改动：\n```\nvar arr = [];\nvar show = function () {    \n    for (var i = 0; i < 3; i++) {        \n        arr[i] = (function (j){            \n            return function () {                \n                cc.log(j);            \n            }        \n        })(i);    \n    }\n}\n\nshow();\n\narr[0](); // 0\narr[1](); // 1\narr[2](); // 2\n```\n这样就获得了我们想要的结果。  \n#### 7.闭包的其他问题  \n- 因为闭包中的局部变量不会释放，所以闭包和全局变量一样会占用大量内存。\n- 闭包中变量引用由于不会释放，很有可能造成内存泄露。\n- 大量的闭包使用可能会降低程序的可读性，增加维护成本。\n\n总之闭包有很多地方用起来很方便，闭包的特性也能帮助我们实现很多巧妙的设计，但是闭包也会引起很多问题，所以在开发过程中应该尽量少用闭包。","slug":"js-closure","published":1,"updated":"2017-02-02T08:14:23.205Z","_id":"ciyo3mvpd001atsr8k23aohgq","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"闭包的用途\"><a href=\"#闭包的用途\" class=\"headerlink\" title=\"闭包的用途\"></a>闭包的用途</h2><h4 id=\"1-防止全局变量污染\"><a href=\"#1-防止全局变量污染\" class=\"headerlink\" title=\"1.防止全局变量污染\"></a>1.防止全局变量污染</h4><p>在JavaScript中全局变量是个不小的毒瘤，全局变量有时是很方便，但是很多项目滥用全局变量成灾，维护起来非常困难。所以这里的作用就是防止全局变量污染，例子如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> add = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;    </div><div class=\"line\">    <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;   </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span> (<span class=\"params\"></span>) </span>&#123;       </div><div class=\"line\">        i++;        </div><div class=\"line\">        cc.log(i); <span class=\"comment\">// 1    </span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)();</div><div class=\"line\"></div><div class=\"line\">add();</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>这个例子实现的功能就是，减少了全局变量的滥用，同时这个功能也是达到了下面的用途，就是访问局部变量。</p>\n<h4 id=\"2-局部变量访问\"><a href=\"#2-局部变量访问\" class=\"headerlink\" title=\"2.局部变量访问\"></a>2.局部变量访问</h4><p>上面防止全局变量污染的例子中i是一个局部变量，但是在函数外依然可以间接的访问控制，就是达到了在作用域外访问局部变量。</p>\n<h4 id=\"3-匿名初始化\"><a href=\"#3-匿名初始化\" class=\"headerlink\" title=\"3.匿名初始化\"></a>3.匿名初始化</h4><p>匿名初始化很简单，有时我们需要一个界面打开做一些初始化，只需要执行一遍，可以采用这种形式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function () &#123;    </div><div class=\"line\">    cc.log(&quot;init something...&quot;);</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure></p>\n<p>这样在加载时直接就执行了匿名函数里的东西，有效的防止了，一些在不知情的情况下重复的调用了初始化函数。</p>\n<h4 id=\"4-私有成员封装\"><a href=\"#4-私有成员封装\" class=\"headerlink\" title=\"4.私有成员封装\"></a>4.私有成员封装</h4><p>这个是比较常用的，JavaScript中并没有很多语言中拥有的访问控制，所以我们可以使用闭包来达到私有化的目的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">var person = (function () &#123;    </div><div class=\"line\">    var age = 18;    </div><div class=\"line\">    return &#123;        </div><div class=\"line\">        getAge:function () &#123;            </div><div class=\"line\">            return age;       </div><div class=\"line\">        &#125;,        </div><div class=\"line\">        setAge:function (a) &#123;           </div><div class=\"line\">            age = a;        </div><div class=\"line\">        &#125;    </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)();</div><div class=\"line\"></div><div class=\"line\">cc.log(person.getAge()); // 18</div><div class=\"line\">person.setAge(99);</div><div class=\"line\">cc.log(person.getAge()); // 99</div></pre></td></tr></table></figure></p>\n<p>这样在外部就不能访问age变量，只能通过getAge和setAge来访问，达到了私有化和封装的目的，这点在开发中比较常用。</p>\n<h4 id=\"5-制作缓存池\"><a href=\"#5-制作缓存池\" class=\"headerlink\" title=\"5.制作缓存池\"></a>5.制作缓存池</h4><p>这个用途是使用了闭包里的局部变量不会被销毁的特点，实现缓冲池的方法有很多，使用闭包只是其中一种，大家可以看自己的情况来使用，下面是使用闭包来实现缓存池简单大意的例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var person = (function () &#123;    </div><div class=\"line\">    var pool = null;    </div><div class=\"line\">    return &#123;        </div><div class=\"line\">        getObj:function (key) &#123;            </div><div class=\"line\">            return pool[key];        </div><div class=\"line\">        &#125;,        </div><div class=\"line\">        setObj:function (key, obj) &#123;            </div><div class=\"line\">            pool[key] = obj;        </div><div class=\"line\">        &#125;    </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure></p>\n<h4 id=\"6-循环中保存索引\"><a href=\"#6-循环中保存索引\" class=\"headerlink\" title=\"6.循环中保存索引\"></a>6.循环中保存索引</h4><p>开发过程中在循环里注册回调很常见，但是刚接触js的同学常常会遇到注册完了回调，发现索引值不对，可以看下面的例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr = [];</div><div class=\"line\">var show = function () &#123;    </div><div class=\"line\">    for (var i = 0; i &lt; 3; i++) &#123;        </div><div class=\"line\">        arr[i] = function test () &#123;            </div><div class=\"line\">            cc.log(i);        </div><div class=\"line\">        &#125;    </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">show();</div><div class=\"line\"></div><div class=\"line\">arr[0](); // 3</div><div class=\"line\">arr[1](); // 3</div><div class=\"line\">arr[2](); // 3</div></pre></td></tr></table></figure></p>\n<p>运行会发现，输出的都是最后一个索引，这种情况是因为，内部函数并没有立即执行，而且内部函数中只是对这个变量进行了引用，所以最后记录的都是这个引用地址中的最终值。要想得到我们想要的效果就需要让内部函数立即执行，捕捉当时索引值，可做如下改动：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr = [];</div><div class=\"line\">var show = function () &#123;    </div><div class=\"line\">    for (var i = 0; i &lt; 3; i++) &#123;        </div><div class=\"line\">        arr[i] = (function (j)&#123;            </div><div class=\"line\">            return function () &#123;                </div><div class=\"line\">                cc.log(j);            </div><div class=\"line\">            &#125;        </div><div class=\"line\">        &#125;)(i);    </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">show();</div><div class=\"line\"></div><div class=\"line\">arr[0](); // 0</div><div class=\"line\">arr[1](); // 1</div><div class=\"line\">arr[2](); // 2</div></pre></td></tr></table></figure></p>\n<p>这样就获得了我们想要的结果。  </p>\n<h4 id=\"7-闭包的其他问题\"><a href=\"#7-闭包的其他问题\" class=\"headerlink\" title=\"7.闭包的其他问题\"></a>7.闭包的其他问题</h4><ul>\n<li>因为闭包中的局部变量不会释放，所以闭包和全局变量一样会占用大量内存。</li>\n<li>闭包中变量引用由于不会释放，很有可能造成内存泄露。</li>\n<li>大量的闭包使用可能会降低程序的可读性，增加维护成本。</li>\n</ul>\n<p>总之闭包有很多地方用起来很方便，闭包的特性也能帮助我们实现很多巧妙的设计，但是闭包也会引起很多问题，所以在开发过程中应该尽量少用闭包。</p>\n","excerpt":"<h2 id=\"闭包的用途\"><a href=\"#闭包的用途\" class=\"headerlink\" title=\"闭包的用途\"></a>闭包的用途</h2><h4 id=\"1-防止全局变量污染\"><a href=\"#1-防止全局变量污染\" class=\"headerlink\" title=\"1.防止全局变量污染\"></a>1.防止全局变量污染</h4><p>在JavaScript中全局变量是个不小的毒瘤，全局变量有时是很方便，但是很多项目滥用全局变量成灾，维护起来非常困难。所以这里的作用就是防止全局变量污染，例子如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> add = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;    </div><div class=\"line\">    <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;   </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span> (<span class=\"params\"></span>) </span>&#123;       </div><div class=\"line\">        i++;        </div><div class=\"line\">        cc.log(i); <span class=\"comment\">// 1    </span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)();</div><div class=\"line\"></div><div class=\"line\">add();</div></pre></td></tr></table></figure></p>","more":"<p>这个例子实现的功能就是，减少了全局变量的滥用，同时这个功能也是达到了下面的用途，就是访问局部变量。</p>\n<h4 id=\"2-局部变量访问\"><a href=\"#2-局部变量访问\" class=\"headerlink\" title=\"2.局部变量访问\"></a>2.局部变量访问</h4><p>上面防止全局变量污染的例子中i是一个局部变量，但是在函数外依然可以间接的访问控制，就是达到了在作用域外访问局部变量。</p>\n<h4 id=\"3-匿名初始化\"><a href=\"#3-匿名初始化\" class=\"headerlink\" title=\"3.匿名初始化\"></a>3.匿名初始化</h4><p>匿名初始化很简单，有时我们需要一个界面打开做一些初始化，只需要执行一遍，可以采用这种形式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function () &#123;    </div><div class=\"line\">    cc.log(&quot;init something...&quot;);</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure></p>\n<p>这样在加载时直接就执行了匿名函数里的东西，有效的防止了，一些在不知情的情况下重复的调用了初始化函数。</p>\n<h4 id=\"4-私有成员封装\"><a href=\"#4-私有成员封装\" class=\"headerlink\" title=\"4.私有成员封装\"></a>4.私有成员封装</h4><p>这个是比较常用的，JavaScript中并没有很多语言中拥有的访问控制，所以我们可以使用闭包来达到私有化的目的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">var person = (function () &#123;    </div><div class=\"line\">    var age = 18;    </div><div class=\"line\">    return &#123;        </div><div class=\"line\">        getAge:function () &#123;            </div><div class=\"line\">            return age;       </div><div class=\"line\">        &#125;,        </div><div class=\"line\">        setAge:function (a) &#123;           </div><div class=\"line\">            age = a;        </div><div class=\"line\">        &#125;    </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)();</div><div class=\"line\"></div><div class=\"line\">cc.log(person.getAge()); // 18</div><div class=\"line\">person.setAge(99);</div><div class=\"line\">cc.log(person.getAge()); // 99</div></pre></td></tr></table></figure></p>\n<p>这样在外部就不能访问age变量，只能通过getAge和setAge来访问，达到了私有化和封装的目的，这点在开发中比较常用。</p>\n<h4 id=\"5-制作缓存池\"><a href=\"#5-制作缓存池\" class=\"headerlink\" title=\"5.制作缓存池\"></a>5.制作缓存池</h4><p>这个用途是使用了闭包里的局部变量不会被销毁的特点，实现缓冲池的方法有很多，使用闭包只是其中一种，大家可以看自己的情况来使用，下面是使用闭包来实现缓存池简单大意的例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var person = (function () &#123;    </div><div class=\"line\">    var pool = null;    </div><div class=\"line\">    return &#123;        </div><div class=\"line\">        getObj:function (key) &#123;            </div><div class=\"line\">            return pool[key];        </div><div class=\"line\">        &#125;,        </div><div class=\"line\">        setObj:function (key, obj) &#123;            </div><div class=\"line\">            pool[key] = obj;        </div><div class=\"line\">        &#125;    </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure></p>\n<h4 id=\"6-循环中保存索引\"><a href=\"#6-循环中保存索引\" class=\"headerlink\" title=\"6.循环中保存索引\"></a>6.循环中保存索引</h4><p>开发过程中在循环里注册回调很常见，但是刚接触js的同学常常会遇到注册完了回调，发现索引值不对，可以看下面的例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr = [];</div><div class=\"line\">var show = function () &#123;    </div><div class=\"line\">    for (var i = 0; i &lt; 3; i++) &#123;        </div><div class=\"line\">        arr[i] = function test () &#123;            </div><div class=\"line\">            cc.log(i);        </div><div class=\"line\">        &#125;    </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">show();</div><div class=\"line\"></div><div class=\"line\">arr[0](); // 3</div><div class=\"line\">arr[1](); // 3</div><div class=\"line\">arr[2](); // 3</div></pre></td></tr></table></figure></p>\n<p>运行会发现，输出的都是最后一个索引，这种情况是因为，内部函数并没有立即执行，而且内部函数中只是对这个变量进行了引用，所以最后记录的都是这个引用地址中的最终值。要想得到我们想要的效果就需要让内部函数立即执行，捕捉当时索引值，可做如下改动：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr = [];</div><div class=\"line\">var show = function () &#123;    </div><div class=\"line\">    for (var i = 0; i &lt; 3; i++) &#123;        </div><div class=\"line\">        arr[i] = (function (j)&#123;            </div><div class=\"line\">            return function () &#123;                </div><div class=\"line\">                cc.log(j);            </div><div class=\"line\">            &#125;        </div><div class=\"line\">        &#125;)(i);    </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">show();</div><div class=\"line\"></div><div class=\"line\">arr[0](); // 0</div><div class=\"line\">arr[1](); // 1</div><div class=\"line\">arr[2](); // 2</div></pre></td></tr></table></figure></p>\n<p>这样就获得了我们想要的结果。  </p>\n<h4 id=\"7-闭包的其他问题\"><a href=\"#7-闭包的其他问题\" class=\"headerlink\" title=\"7.闭包的其他问题\"></a>7.闭包的其他问题</h4><ul>\n<li>因为闭包中的局部变量不会释放，所以闭包和全局变量一样会占用大量内存。</li>\n<li>闭包中变量引用由于不会释放，很有可能造成内存泄露。</li>\n<li>大量的闭包使用可能会降低程序的可读性，增加维护成本。</li>\n</ul>\n<p>总之闭包有很多地方用起来很方便，闭包的特性也能帮助我们实现很多巧妙的设计，但是闭包也会引起很多问题，所以在开发过程中应该尽量少用闭包。</p>"},{"title":"WebService复杂类型数据传输-dom4j方式","date":"2016-11-27T11:39:57.000Z","_content":"WebService在传递数据的时候只能传递字符串，当我们返回一些简单的字符串时我们可以直接返回，但是当我们想返回比如List，Map等复杂类型的数据时拼接字符串就是个很麻烦的工作，这时我们就用到了dom4j这个工具。\n\n当我们从数据库中查询出很多个对象类型时，我们一般都存放在List中。像这种数据就很难用拼接字符串的形式进行传递。我的解决办法就是利用dom4j把它写成一个xml格式的字符串，然后在客户端再利用dom4j解释。\n<!--more-->\n假如我们从数据库中查询的是一个Student对象，该对象有name和agel两个属性，我们将大量的Student对象储存在List中。下面我们想利用dom4j把List数据变成如下格式的xml文件类型的字符串：  \n``` xml\n\t<?xml version=\"1.0\" encoding=\"UTF-8\"?>  \n    <root>  \n        <student>  \n            <name>张三</name>  \n            <age>26</age>  \n        </student>  \n        <student>  \n            <name>赵四</name>  \n            <age>34</age>  \n        </student>  \n    </root> \n```\nwebservice端Java代码如下：  \n``` java\nimport java.util.List;  \nimport org.dom4j.Document;  \nimport org.dom4j.DocumentHelper;  \nimport org.dom4j.Element;  \nimport org.dom4j.io.OutputFormat;  \nimport vo.UnitPO;  \nimport DAO.unitDao;  \npublic class Service02 {     \n    public String method(){  \n         \n        Document document = DocumentHelper.createDocument();  \n        Element root = document.addElement(\"root\");  \n         \n        Element stuElement = null;  \n        Element nameElement = null;  \n        Element ageElement = null;  \n         \n        //第一个student节点  \n        stuElement = root.addElement(\"student\");  \n        //添加两个子节点  \n        nameElement = stuElement.addElement(\"name\");  \n        ageElement = stuElement.addElement(\"age\");     \n        //向两个子节点中添加文本内容  \n        nameElement.addText(\"张三\");  \n        ageElement.addText(\"26\");  \n         \n        //同理第二个student节点  \n        stuElement = root.addElement(\"student\");         \n        nameElement = stuElement.addElement(\"name\");  \n        ageElement = stuElement.addElement(\"age\");     \n        nameElement.addText(\"赵四\");  \n        ageElement.addText(\"34\");  \n        try {  \n            OutputFormat format = OutputFormat.createPrettyPrint();  \n            // 设置XML文件的编码格式  \n            format.setEncoding(\"UTF-8\");  \n            return document.asXML();  \n        } catch (Exception e) {  \n            System.out.println(e.getMessage());  \n            return \"error\";  \n        }  \n    }  \n} \n```\n这样就将我们想传送的复杂数据变成了xml格式是字符串，下面在客户端就可以解释出我们想要的数据了。client端java代码如下：\n``` java\nimport java.io.StringReader;  \nimport java.util.List;  \nimport org.dom4j.Document;  \nimport org.dom4j.Element;  \nimport org.dom4j.io.SAXReader;  \nimport webservice.Service02Proxy;  \npublic class Test {  \n    public static void main(String[] args) {         \n        try{  \n            //创建代理类  \n            Service02Proxy proxy = new Service02Proxy();  \n            //接受传过来的XML字符串  \n            String str = proxy.method();  \n            //解释该字符串  \n            StringReader read = new StringReader(str);  \n            SAXReader reader = new SAXReader();  \n            Document doc = reader.read(read);   \n            Element root = doc.getRootElement();  \n            //该节点由多个student构成，所以返回值是List类型  \n            List list = root.elements(\"student\");   \n             \n            for(int i = 0;i < list.size();i++){  \n                 \n                Element student = (Element)list.get(i);  \n                Element name = student.element(\"name\");  \n                Element age = student.element(\"age\");  \n                 \n                //打印得到的数据  \n                System.out.println(name.getTextTrim()+\":\"+age.getTextTrim());  \n                 \n            }  \n     \n        }catch(Exception e){  \n             \n            e.printStackTrace();  \n             \n        }  \n    }  \n}\n```\n控制台输出为：\n> **张三:26\n赵四:34 **\n\n每种编程语言可能接受时用的类型不同，但方法大同小异。代码如有问题，欢迎给予评价。","source":"_posts/WebService复杂类型数据传输-dom4j方式.md","raw":"---\ntitle: WebService复杂类型数据传输-dom4j方式\ndate: 2016-11-27 19:39:57\ntags: ［WebService,java］\ncategories: java\n---\nWebService在传递数据的时候只能传递字符串，当我们返回一些简单的字符串时我们可以直接返回，但是当我们想返回比如List，Map等复杂类型的数据时拼接字符串就是个很麻烦的工作，这时我们就用到了dom4j这个工具。\n\n当我们从数据库中查询出很多个对象类型时，我们一般都存放在List中。像这种数据就很难用拼接字符串的形式进行传递。我的解决办法就是利用dom4j把它写成一个xml格式的字符串，然后在客户端再利用dom4j解释。\n<!--more-->\n假如我们从数据库中查询的是一个Student对象，该对象有name和agel两个属性，我们将大量的Student对象储存在List中。下面我们想利用dom4j把List数据变成如下格式的xml文件类型的字符串：  \n``` xml\n\t<?xml version=\"1.0\" encoding=\"UTF-8\"?>  \n    <root>  \n        <student>  \n            <name>张三</name>  \n            <age>26</age>  \n        </student>  \n        <student>  \n            <name>赵四</name>  \n            <age>34</age>  \n        </student>  \n    </root> \n```\nwebservice端Java代码如下：  \n``` java\nimport java.util.List;  \nimport org.dom4j.Document;  \nimport org.dom4j.DocumentHelper;  \nimport org.dom4j.Element;  \nimport org.dom4j.io.OutputFormat;  \nimport vo.UnitPO;  \nimport DAO.unitDao;  \npublic class Service02 {     \n    public String method(){  \n         \n        Document document = DocumentHelper.createDocument();  \n        Element root = document.addElement(\"root\");  \n         \n        Element stuElement = null;  \n        Element nameElement = null;  \n        Element ageElement = null;  \n         \n        //第一个student节点  \n        stuElement = root.addElement(\"student\");  \n        //添加两个子节点  \n        nameElement = stuElement.addElement(\"name\");  \n        ageElement = stuElement.addElement(\"age\");     \n        //向两个子节点中添加文本内容  \n        nameElement.addText(\"张三\");  \n        ageElement.addText(\"26\");  \n         \n        //同理第二个student节点  \n        stuElement = root.addElement(\"student\");         \n        nameElement = stuElement.addElement(\"name\");  \n        ageElement = stuElement.addElement(\"age\");     \n        nameElement.addText(\"赵四\");  \n        ageElement.addText(\"34\");  \n        try {  \n            OutputFormat format = OutputFormat.createPrettyPrint();  \n            // 设置XML文件的编码格式  \n            format.setEncoding(\"UTF-8\");  \n            return document.asXML();  \n        } catch (Exception e) {  \n            System.out.println(e.getMessage());  \n            return \"error\";  \n        }  \n    }  \n} \n```\n这样就将我们想传送的复杂数据变成了xml格式是字符串，下面在客户端就可以解释出我们想要的数据了。client端java代码如下：\n``` java\nimport java.io.StringReader;  \nimport java.util.List;  \nimport org.dom4j.Document;  \nimport org.dom4j.Element;  \nimport org.dom4j.io.SAXReader;  \nimport webservice.Service02Proxy;  \npublic class Test {  \n    public static void main(String[] args) {         \n        try{  \n            //创建代理类  \n            Service02Proxy proxy = new Service02Proxy();  \n            //接受传过来的XML字符串  \n            String str = proxy.method();  \n            //解释该字符串  \n            StringReader read = new StringReader(str);  \n            SAXReader reader = new SAXReader();  \n            Document doc = reader.read(read);   \n            Element root = doc.getRootElement();  \n            //该节点由多个student构成，所以返回值是List类型  \n            List list = root.elements(\"student\");   \n             \n            for(int i = 0;i < list.size();i++){  \n                 \n                Element student = (Element)list.get(i);  \n                Element name = student.element(\"name\");  \n                Element age = student.element(\"age\");  \n                 \n                //打印得到的数据  \n                System.out.println(name.getTextTrim()+\":\"+age.getTextTrim());  \n                 \n            }  \n     \n        }catch(Exception e){  \n             \n            e.printStackTrace();  \n             \n        }  \n    }  \n}\n```\n控制台输出为：\n> **张三:26\n赵四:34 **\n\n每种编程语言可能接受时用的类型不同，但方法大同小异。代码如有问题，欢迎给予评价。","slug":"WebService复杂类型数据传输-dom4j方式","published":1,"updated":"2017-01-19T11:10:49.477Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyo3mvpe001btsr8uuudv5vl","content":"<p>WebService在传递数据的时候只能传递字符串，当我们返回一些简单的字符串时我们可以直接返回，但是当我们想返回比如List，Map等复杂类型的数据时拼接字符串就是个很麻烦的工作，这时我们就用到了dom4j这个工具。</p>\n<p>当我们从数据库中查询出很多个对象类型时，我们一般都存放在List中。像这种数据就很难用拼接字符串的形式进行传递。我的解决办法就是利用dom4j把它写成一个xml格式的字符串，然后在客户端再利用dom4j解释。<br><a id=\"more\"></a><br>假如我们从数据库中查询的是一个Student对象，该对象有name和agel两个属性，我们将大量的Student对象储存在List中。下面我们想利用dom4j把List数据变成如下格式的xml文件类型的字符串：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;  </div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">root</span>&gt;</span>  </div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">student</span>&gt;</span>  </div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>张三<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>  </div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">age</span>&gt;</span>26<span class=\"tag\">&lt;/<span class=\"name\">age</span>&gt;</span>  </div><div class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">student</span>&gt;</span>  </div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">student</span>&gt;</span>  </div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>赵四<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>  </div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">age</span>&gt;</span>34<span class=\"tag\">&lt;/<span class=\"name\">age</span>&gt;</span>  </div><div class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">student</span>&gt;</span>  </div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>webservice端Java代码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.dom4j.Document;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.dom4j.DocumentHelper;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.dom4j.Element;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.dom4j.io.OutputFormat;  </div><div class=\"line\"><span class=\"keyword\">import</span> vo.UnitPO;  </div><div class=\"line\"><span class=\"keyword\">import</span> DAO.unitDao;  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Service02</span> </span>&#123;     </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">method</span><span class=\"params\">()</span></span>&#123;  </div><div class=\"line\">         </div><div class=\"line\">        Document document = DocumentHelper.createDocument();  </div><div class=\"line\">        Element root = document.addElement(<span class=\"string\">\"root\"</span>);  </div><div class=\"line\">         </div><div class=\"line\">        Element stuElement = <span class=\"keyword\">null</span>;  </div><div class=\"line\">        Element nameElement = <span class=\"keyword\">null</span>;  </div><div class=\"line\">        Element ageElement = <span class=\"keyword\">null</span>;  </div><div class=\"line\">         </div><div class=\"line\">        <span class=\"comment\">//第一个student节点  </span></div><div class=\"line\">        stuElement = root.addElement(<span class=\"string\">\"student\"</span>);  </div><div class=\"line\">        <span class=\"comment\">//添加两个子节点  </span></div><div class=\"line\">        nameElement = stuElement.addElement(<span class=\"string\">\"name\"</span>);  </div><div class=\"line\">        ageElement = stuElement.addElement(<span class=\"string\">\"age\"</span>);     </div><div class=\"line\">        <span class=\"comment\">//向两个子节点中添加文本内容  </span></div><div class=\"line\">        nameElement.addText(<span class=\"string\">\"张三\"</span>);  </div><div class=\"line\">        ageElement.addText(<span class=\"string\">\"26\"</span>);  </div><div class=\"line\">         </div><div class=\"line\">        <span class=\"comment\">//同理第二个student节点  </span></div><div class=\"line\">        stuElement = root.addElement(<span class=\"string\">\"student\"</span>);         </div><div class=\"line\">        nameElement = stuElement.addElement(<span class=\"string\">\"name\"</span>);  </div><div class=\"line\">        ageElement = stuElement.addElement(<span class=\"string\">\"age\"</span>);     </div><div class=\"line\">        nameElement.addText(<span class=\"string\">\"赵四\"</span>);  </div><div class=\"line\">        ageElement.addText(<span class=\"string\">\"34\"</span>);  </div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">            OutputFormat format = OutputFormat.createPrettyPrint();  </div><div class=\"line\">            <span class=\"comment\">// 设置XML文件的编码格式  </span></div><div class=\"line\">            format.setEncoding(<span class=\"string\">\"UTF-8\"</span>);  </div><div class=\"line\">            <span class=\"keyword\">return</span> document.asXML();  </div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;  </div><div class=\"line\">            System.out.println(e.getMessage());  </div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"error\"</span>;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这样就将我们想传送的复杂数据变成了xml格式是字符串，下面在客户端就可以解释出我们想要的数据了。client端java代码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.io.StringReader;  </div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.dom4j.Document;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.dom4j.Element;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.dom4j.io.SAXReader;  </div><div class=\"line\"><span class=\"keyword\">import</span> webservice.Service02Proxy;  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;         </div><div class=\"line\">        <span class=\"keyword\">try</span>&#123;  </div><div class=\"line\">            <span class=\"comment\">//创建代理类  </span></div><div class=\"line\">            Service02Proxy proxy = <span class=\"keyword\">new</span> Service02Proxy();  </div><div class=\"line\">            <span class=\"comment\">//接受传过来的XML字符串  </span></div><div class=\"line\">            String str = proxy.method();  </div><div class=\"line\">            <span class=\"comment\">//解释该字符串  </span></div><div class=\"line\">            StringReader read = <span class=\"keyword\">new</span> StringReader(str);  </div><div class=\"line\">            SAXReader reader = <span class=\"keyword\">new</span> SAXReader();  </div><div class=\"line\">            Document doc = reader.read(read);   </div><div class=\"line\">            Element root = doc.getRootElement();  </div><div class=\"line\">            <span class=\"comment\">//该节点由多个student构成，所以返回值是List类型  </span></div><div class=\"line\">            List list = root.elements(<span class=\"string\">\"student\"</span>);   </div><div class=\"line\">             </div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; list.size();i++)&#123;  </div><div class=\"line\">                 </div><div class=\"line\">                Element student = (Element)list.get(i);  </div><div class=\"line\">                Element name = student.element(<span class=\"string\">\"name\"</span>);  </div><div class=\"line\">                Element age = student.element(<span class=\"string\">\"age\"</span>);  </div><div class=\"line\">                 </div><div class=\"line\">                <span class=\"comment\">//打印得到的数据  </span></div><div class=\"line\">                System.out.println(name.getTextTrim()+<span class=\"string\">\":\"</span>+age.getTextTrim());  </div><div class=\"line\">                 </div><div class=\"line\">            &#125;  </div><div class=\"line\">     </div><div class=\"line\">        &#125;<span class=\"keyword\">catch</span>(Exception e)&#123;  </div><div class=\"line\">             </div><div class=\"line\">            e.printStackTrace();  </div><div class=\"line\">             </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>控制台输出为：</p>\n<blockquote>\n<p><strong>张三:26<br>赵四:34 </strong></p>\n</blockquote>\n<p>每种编程语言可能接受时用的类型不同，但方法大同小异。代码如有问题，欢迎给予评价。</p>\n","excerpt":"<p>WebService在传递数据的时候只能传递字符串，当我们返回一些简单的字符串时我们可以直接返回，但是当我们想返回比如List，Map等复杂类型的数据时拼接字符串就是个很麻烦的工作，这时我们就用到了dom4j这个工具。</p>\n<p>当我们从数据库中查询出很多个对象类型时，我们一般都存放在List中。像这种数据就很难用拼接字符串的形式进行传递。我的解决办法就是利用dom4j把它写成一个xml格式的字符串，然后在客户端再利用dom4j解释。<br>","more":"<br>假如我们从数据库中查询的是一个Student对象，该对象有name和agel两个属性，我们将大量的Student对象储存在List中。下面我们想利用dom4j把List数据变成如下格式的xml文件类型的字符串：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;  </div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">root</span>&gt;</span>  </div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">student</span>&gt;</span>  </div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>张三<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>  </div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">age</span>&gt;</span>26<span class=\"tag\">&lt;/<span class=\"name\">age</span>&gt;</span>  </div><div class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">student</span>&gt;</span>  </div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">student</span>&gt;</span>  </div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>赵四<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>  </div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">age</span>&gt;</span>34<span class=\"tag\">&lt;/<span class=\"name\">age</span>&gt;</span>  </div><div class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">student</span>&gt;</span>  </div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>webservice端Java代码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.dom4j.Document;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.dom4j.DocumentHelper;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.dom4j.Element;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.dom4j.io.OutputFormat;  </div><div class=\"line\"><span class=\"keyword\">import</span> vo.UnitPO;  </div><div class=\"line\"><span class=\"keyword\">import</span> DAO.unitDao;  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Service02</span> </span>&#123;     </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">method</span><span class=\"params\">()</span></span>&#123;  </div><div class=\"line\">         </div><div class=\"line\">        Document document = DocumentHelper.createDocument();  </div><div class=\"line\">        Element root = document.addElement(<span class=\"string\">\"root\"</span>);  </div><div class=\"line\">         </div><div class=\"line\">        Element stuElement = <span class=\"keyword\">null</span>;  </div><div class=\"line\">        Element nameElement = <span class=\"keyword\">null</span>;  </div><div class=\"line\">        Element ageElement = <span class=\"keyword\">null</span>;  </div><div class=\"line\">         </div><div class=\"line\">        <span class=\"comment\">//第一个student节点  </span></div><div class=\"line\">        stuElement = root.addElement(<span class=\"string\">\"student\"</span>);  </div><div class=\"line\">        <span class=\"comment\">//添加两个子节点  </span></div><div class=\"line\">        nameElement = stuElement.addElement(<span class=\"string\">\"name\"</span>);  </div><div class=\"line\">        ageElement = stuElement.addElement(<span class=\"string\">\"age\"</span>);     </div><div class=\"line\">        <span class=\"comment\">//向两个子节点中添加文本内容  </span></div><div class=\"line\">        nameElement.addText(<span class=\"string\">\"张三\"</span>);  </div><div class=\"line\">        ageElement.addText(<span class=\"string\">\"26\"</span>);  </div><div class=\"line\">         </div><div class=\"line\">        <span class=\"comment\">//同理第二个student节点  </span></div><div class=\"line\">        stuElement = root.addElement(<span class=\"string\">\"student\"</span>);         </div><div class=\"line\">        nameElement = stuElement.addElement(<span class=\"string\">\"name\"</span>);  </div><div class=\"line\">        ageElement = stuElement.addElement(<span class=\"string\">\"age\"</span>);     </div><div class=\"line\">        nameElement.addText(<span class=\"string\">\"赵四\"</span>);  </div><div class=\"line\">        ageElement.addText(<span class=\"string\">\"34\"</span>);  </div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">            OutputFormat format = OutputFormat.createPrettyPrint();  </div><div class=\"line\">            <span class=\"comment\">// 设置XML文件的编码格式  </span></div><div class=\"line\">            format.setEncoding(<span class=\"string\">\"UTF-8\"</span>);  </div><div class=\"line\">            <span class=\"keyword\">return</span> document.asXML();  </div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;  </div><div class=\"line\">            System.out.println(e.getMessage());  </div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"error\"</span>;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这样就将我们想传送的复杂数据变成了xml格式是字符串，下面在客户端就可以解释出我们想要的数据了。client端java代码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.io.StringReader;  </div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.dom4j.Document;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.dom4j.Element;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.dom4j.io.SAXReader;  </div><div class=\"line\"><span class=\"keyword\">import</span> webservice.Service02Proxy;  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;         </div><div class=\"line\">        <span class=\"keyword\">try</span>&#123;  </div><div class=\"line\">            <span class=\"comment\">//创建代理类  </span></div><div class=\"line\">            Service02Proxy proxy = <span class=\"keyword\">new</span> Service02Proxy();  </div><div class=\"line\">            <span class=\"comment\">//接受传过来的XML字符串  </span></div><div class=\"line\">            String str = proxy.method();  </div><div class=\"line\">            <span class=\"comment\">//解释该字符串  </span></div><div class=\"line\">            StringReader read = <span class=\"keyword\">new</span> StringReader(str);  </div><div class=\"line\">            SAXReader reader = <span class=\"keyword\">new</span> SAXReader();  </div><div class=\"line\">            Document doc = reader.read(read);   </div><div class=\"line\">            Element root = doc.getRootElement();  </div><div class=\"line\">            <span class=\"comment\">//该节点由多个student构成，所以返回值是List类型  </span></div><div class=\"line\">            List list = root.elements(<span class=\"string\">\"student\"</span>);   </div><div class=\"line\">             </div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; list.size();i++)&#123;  </div><div class=\"line\">                 </div><div class=\"line\">                Element student = (Element)list.get(i);  </div><div class=\"line\">                Element name = student.element(<span class=\"string\">\"name\"</span>);  </div><div class=\"line\">                Element age = student.element(<span class=\"string\">\"age\"</span>);  </div><div class=\"line\">                 </div><div class=\"line\">                <span class=\"comment\">//打印得到的数据  </span></div><div class=\"line\">                System.out.println(name.getTextTrim()+<span class=\"string\">\":\"</span>+age.getTextTrim());  </div><div class=\"line\">                 </div><div class=\"line\">            &#125;  </div><div class=\"line\">     </div><div class=\"line\">        &#125;<span class=\"keyword\">catch</span>(Exception e)&#123;  </div><div class=\"line\">             </div><div class=\"line\">            e.printStackTrace();  </div><div class=\"line\">             </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>控制台输出为：</p>\n<blockquote>\n<p><strong>张三:26<br>赵四:34 </strong></p>\n</blockquote>\n<p>每种编程语言可能接受时用的类型不同，但方法大同小异。代码如有问题，欢迎给予评价。</p>"},{"title":"cocos2d-x游戏中的性能优化和内存优化","date":"2017-01-06T15:14:36.000Z","_content":"在游行开发的中后期所有的团队基本都会遇到两个通性问题：卡顿和崩溃。造成卡顿也就是迪奥帧的原因主要是CPU计算量和GPU渲染压力过大。造成程序崩溃的原因基本也是两种情况，一种是代码错误造成的崩溃，另一种是我们主要讨论的内存过高造成的崩溃。下面就对游戏中遇到的这两个问题进行讨论，讨论的游戏主要是针对2D游戏，当然很多情况是2D和3D游戏中共同存在的。<!--more-->\n\n- __载入纹理时按照从大到小的顺序，并且分帧加载。__因为cocos2dx中加载一张纹理，要占用两倍的纹理空间，多余的内存会在这帧结束时释放掉，所以从大到小，分帧加载的策略可以高效的使用内存防止内存峰值过高造成崩溃。需要注意的是避免使用超大纹理。\n- __资源格式的选择。__主要有3个因素会影响纹理内存，即纹理格式（压缩还是非压缩）、颜色深度和大小。我们可以使用PVR格式纹理减少内存使用。推荐纹理格式为pvr.ccz。纹理使用的每种颜色位数越多，图像质量越好，但是越耗内存。所以我们可以使用颜色深度为RGB4444的纹理代替RGB8888，这样内存消耗会降低一半。如果图片不需要透明通道就不要加上透明通道，这样还可以节省内存的使用。同时pvr格式的纹理在上传到gpu时的速度也要比其他格式更快一些。\n- __减少绘制调用和上传gpu压力。__首先纹理需要上传到gpu中渲染绘制，越小的纹理上传的速度越快，所以要控制避免有较大的纹理一次上传到显存中，上面说过pvr格式的纹理上传速度会快些，同时大量的纹理上传会造成程序瞬间卡顿，因为纹理上传是占用主线程的，所以低一点中的分帧加载在这里也适用。还有就是绘制的压力，同屏中显示对象的数量会影响绘制的性能，所以在合理的情况下要尽量减少显示对象的数量。同时我们要尽量将散图打到一张整图中，因为在cocos2dx引擎的底层中，在同一张纹理上的显示对象只会调用一次绘制命令，相当于BatchNode。这里需要特别注意的是减少绘制要打到整图中和为了加快纹理上传速度要减小纹理大小是个相悖的条件，所以我们要根据实际情况来衡量这两点。一般情况下每帧上传一张1024*1024的rgba8888格式的纹理是不会出现卡顿的，所以建议每次上传不要超过这个大小。如果是rgb4444的纹理那么大小会减少一半，上传会更快一些。\n- __降低UI复杂度。__降低复杂度有很多方式，第一种方式是减少显示对象数量，比如拿文本框来说，经常在游戏中会有显示金币的地方，例如：“金币：99”。有很多人在ui里会将标题和数量分开，定义两个文本框，这里如果没有特殊表现的话，就应该合并成一个文本框，这样就减少了一个对象的绘制。同理有很多东西都可以减少，例如Sprite等，项目中具体情况具体对待。第二种方式是降低UI树的复杂度，上一点中减少数量也会达到一个降低UIU树复杂度的效果，在这个同时，我们还要尽量降低UI树的深度，降低树的深度可以有效的提高绘制遍历的速度，在设计ui的时候，我们往往为了易于管理，会创建很多空面板，或节点，来达到管理ui中各个部件的作用，但是有时我们会增加的过于复杂，这里尽量降低这种复杂度就可以提高绘制效率。最后我们还要控制资源的规格，首先游戏中很多ui是通用的，比如通用的按钮，图标，面板等，我们打到一张贴图上，作为通用资源常驻内存，然后每个ui独特的资源单独打成贴图，在使用的时候加载到内存中，使用结束后释放掉。\n- __UI设计的时候要提高UI通用资源的使用率。__优化资源到最小，比如使用九宫格图片，采用旋转缩放等丰富资源表现力等。\n- __动画文件的处理。__动画一般有两种选择，帧动画和骨骼动画。帧动画的优点就是运算不耗性能，并且表现较好，缺点就是当帧数较多时，资源量比较大，并且占用内存较高，所以不太适合做过于复杂的动画，比如动作和技能较多的ARPG角色如果纯用帧动画来实现，会使用很多资源，在加载时就不能加载过多的角色，这样就局限了游戏的设计，同场景角色数量不能过多。与之相对应的就是骨骼动画，骨骼动画的特点就是节省资源，一套骨骼可以做很多套动作，新增动作也不会对文件大小有明显的增加，缺点也比较明显，就是因为骨骼动画是通过计算，然后进行旋转，位移等实现的，所以当动画比较复杂，骨骼数量较多时，计算量就会很大，对CPU的计算增加了压力，压力过大时就会掉帧卡顿。当团队技术较好，并且美术程序沟通配合默契的团队可以采用帧动画与骨骼动画相结合的方案。美术在设计时动作大部分采用骨骼，局部需要表现效果的地方使用帧动画到处的贴图来实现，美术人员在设计时要充分考虑到资源利用，利用旋转缩放功能丰富动画，同时还要考虑骨骼数量、节点深度等队性能等影响。\n- __游戏音效的规格及优化。__游戏音效在使用中也有很多问题，音效占用的资源空间、运行时内存和加载效率等。首先需要考虑使用资源的格式，在各个平台下，资源格式的支持也都不同，平台及支持的常见文件格式如下：  \nAndroid ：mp3, mid, oggg, wav  \niOS ：mac, caf, mp3, m4a, wav  \nWindows ： mid, mp3, wav  \n通常我在项目中会针对不同平台加载不通资源，一般android常用oggg，iOS中常用caf，windows下一般都是调试用的，也没怎么优化过，直接用的mp3格式。同时音效资源也需要处理，音频优化,3个因素会影响音频文件的内存使用，即音频文件数据格式、比特率及采样率。推荐使用MP3数据格式的音频文件，因为Android平台和iOS平台均支持MP3格式，此外MP3格式经过压缩和硬件加速。背景音乐文件大小应该低于800KB，最简单的方法就是减少背景音乐时间然后重复播放。音频文件采样率大约在96-128kbps为佳，比特率44kHz就够了。\n- __游戏逻辑的相关优化。__在代码中，不要在主循环中做复杂的逻辑处理，例如for循环更新、查找等，可以利用缓冲等技术，解决和优化在主循环中每帧的效能。部分不重要的逻辑，或者要求即时反馈不高的逻辑可以适当的采取抽帧，也就是不是每帧都进行运算和刷新，这样可以降低很多运算量。同时游戏的玩法逻辑也有很多可以优化的地方，比如射击游戏的子弹可以做缓存，减少频繁的创建和销毁对象；RPG游戏中的地图可以做成异步分块加载，不显示的可以不去加载渲染等。\n- __代码级别的优化。__这点比较简单，在编写程序时，算法最优，并且不要有内存泄漏等。\n- __最后就是引擎级别的优化。__我们使用的是cocos2dx进行的项目开发，在该引擎中，存在的bug、性能等问题也有很多可以优化的地方。在我们项目中，就修改过spine的内存泄漏问题、ui加载速度问题、还有关于对象拷贝的性能问题等。修改引擎要对引擎比较了解，并且修改后引擎的版本再次升级是还要把修改合并过去，这里也建议大家发现问题可以到引擎的Github上提交request。如果对渲染比较了解的还可以对渲染级别进行优化。\n\n\n\n\n","source":"_posts/cocos2dx-xingneng.md","raw":"---\ntitle: cocos2d-x游戏中的性能优化和内存优化\ndate: 2017-01-06 23:14:36\ntags: cocos2d-x,性能优化\ncategories: cocos2d-x\n---\n在游行开发的中后期所有的团队基本都会遇到两个通性问题：卡顿和崩溃。造成卡顿也就是迪奥帧的原因主要是CPU计算量和GPU渲染压力过大。造成程序崩溃的原因基本也是两种情况，一种是代码错误造成的崩溃，另一种是我们主要讨论的内存过高造成的崩溃。下面就对游戏中遇到的这两个问题进行讨论，讨论的游戏主要是针对2D游戏，当然很多情况是2D和3D游戏中共同存在的。<!--more-->\n\n- __载入纹理时按照从大到小的顺序，并且分帧加载。__因为cocos2dx中加载一张纹理，要占用两倍的纹理空间，多余的内存会在这帧结束时释放掉，所以从大到小，分帧加载的策略可以高效的使用内存防止内存峰值过高造成崩溃。需要注意的是避免使用超大纹理。\n- __资源格式的选择。__主要有3个因素会影响纹理内存，即纹理格式（压缩还是非压缩）、颜色深度和大小。我们可以使用PVR格式纹理减少内存使用。推荐纹理格式为pvr.ccz。纹理使用的每种颜色位数越多，图像质量越好，但是越耗内存。所以我们可以使用颜色深度为RGB4444的纹理代替RGB8888，这样内存消耗会降低一半。如果图片不需要透明通道就不要加上透明通道，这样还可以节省内存的使用。同时pvr格式的纹理在上传到gpu时的速度也要比其他格式更快一些。\n- __减少绘制调用和上传gpu压力。__首先纹理需要上传到gpu中渲染绘制，越小的纹理上传的速度越快，所以要控制避免有较大的纹理一次上传到显存中，上面说过pvr格式的纹理上传速度会快些，同时大量的纹理上传会造成程序瞬间卡顿，因为纹理上传是占用主线程的，所以低一点中的分帧加载在这里也适用。还有就是绘制的压力，同屏中显示对象的数量会影响绘制的性能，所以在合理的情况下要尽量减少显示对象的数量。同时我们要尽量将散图打到一张整图中，因为在cocos2dx引擎的底层中，在同一张纹理上的显示对象只会调用一次绘制命令，相当于BatchNode。这里需要特别注意的是减少绘制要打到整图中和为了加快纹理上传速度要减小纹理大小是个相悖的条件，所以我们要根据实际情况来衡量这两点。一般情况下每帧上传一张1024*1024的rgba8888格式的纹理是不会出现卡顿的，所以建议每次上传不要超过这个大小。如果是rgb4444的纹理那么大小会减少一半，上传会更快一些。\n- __降低UI复杂度。__降低复杂度有很多方式，第一种方式是减少显示对象数量，比如拿文本框来说，经常在游戏中会有显示金币的地方，例如：“金币：99”。有很多人在ui里会将标题和数量分开，定义两个文本框，这里如果没有特殊表现的话，就应该合并成一个文本框，这样就减少了一个对象的绘制。同理有很多东西都可以减少，例如Sprite等，项目中具体情况具体对待。第二种方式是降低UI树的复杂度，上一点中减少数量也会达到一个降低UIU树复杂度的效果，在这个同时，我们还要尽量降低UI树的深度，降低树的深度可以有效的提高绘制遍历的速度，在设计ui的时候，我们往往为了易于管理，会创建很多空面板，或节点，来达到管理ui中各个部件的作用，但是有时我们会增加的过于复杂，这里尽量降低这种复杂度就可以提高绘制效率。最后我们还要控制资源的规格，首先游戏中很多ui是通用的，比如通用的按钮，图标，面板等，我们打到一张贴图上，作为通用资源常驻内存，然后每个ui独特的资源单独打成贴图，在使用的时候加载到内存中，使用结束后释放掉。\n- __UI设计的时候要提高UI通用资源的使用率。__优化资源到最小，比如使用九宫格图片，采用旋转缩放等丰富资源表现力等。\n- __动画文件的处理。__动画一般有两种选择，帧动画和骨骼动画。帧动画的优点就是运算不耗性能，并且表现较好，缺点就是当帧数较多时，资源量比较大，并且占用内存较高，所以不太适合做过于复杂的动画，比如动作和技能较多的ARPG角色如果纯用帧动画来实现，会使用很多资源，在加载时就不能加载过多的角色，这样就局限了游戏的设计，同场景角色数量不能过多。与之相对应的就是骨骼动画，骨骼动画的特点就是节省资源，一套骨骼可以做很多套动作，新增动作也不会对文件大小有明显的增加，缺点也比较明显，就是因为骨骼动画是通过计算，然后进行旋转，位移等实现的，所以当动画比较复杂，骨骼数量较多时，计算量就会很大，对CPU的计算增加了压力，压力过大时就会掉帧卡顿。当团队技术较好，并且美术程序沟通配合默契的团队可以采用帧动画与骨骼动画相结合的方案。美术在设计时动作大部分采用骨骼，局部需要表现效果的地方使用帧动画到处的贴图来实现，美术人员在设计时要充分考虑到资源利用，利用旋转缩放功能丰富动画，同时还要考虑骨骼数量、节点深度等队性能等影响。\n- __游戏音效的规格及优化。__游戏音效在使用中也有很多问题，音效占用的资源空间、运行时内存和加载效率等。首先需要考虑使用资源的格式，在各个平台下，资源格式的支持也都不同，平台及支持的常见文件格式如下：  \nAndroid ：mp3, mid, oggg, wav  \niOS ：mac, caf, mp3, m4a, wav  \nWindows ： mid, mp3, wav  \n通常我在项目中会针对不同平台加载不通资源，一般android常用oggg，iOS中常用caf，windows下一般都是调试用的，也没怎么优化过，直接用的mp3格式。同时音效资源也需要处理，音频优化,3个因素会影响音频文件的内存使用，即音频文件数据格式、比特率及采样率。推荐使用MP3数据格式的音频文件，因为Android平台和iOS平台均支持MP3格式，此外MP3格式经过压缩和硬件加速。背景音乐文件大小应该低于800KB，最简单的方法就是减少背景音乐时间然后重复播放。音频文件采样率大约在96-128kbps为佳，比特率44kHz就够了。\n- __游戏逻辑的相关优化。__在代码中，不要在主循环中做复杂的逻辑处理，例如for循环更新、查找等，可以利用缓冲等技术，解决和优化在主循环中每帧的效能。部分不重要的逻辑，或者要求即时反馈不高的逻辑可以适当的采取抽帧，也就是不是每帧都进行运算和刷新，这样可以降低很多运算量。同时游戏的玩法逻辑也有很多可以优化的地方，比如射击游戏的子弹可以做缓存，减少频繁的创建和销毁对象；RPG游戏中的地图可以做成异步分块加载，不显示的可以不去加载渲染等。\n- __代码级别的优化。__这点比较简单，在编写程序时，算法最优，并且不要有内存泄漏等。\n- __最后就是引擎级别的优化。__我们使用的是cocos2dx进行的项目开发，在该引擎中，存在的bug、性能等问题也有很多可以优化的地方。在我们项目中，就修改过spine的内存泄漏问题、ui加载速度问题、还有关于对象拷贝的性能问题等。修改引擎要对引擎比较了解，并且修改后引擎的版本再次升级是还要把修改合并过去，这里也建议大家发现问题可以到引擎的Github上提交request。如果对渲染比较了解的还可以对渲染级别进行优化。\n\n\n\n\n","slug":"cocos2dx-xingneng","published":1,"updated":"2017-01-19T11:10:49.477Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyo3mvpg001ftsr8rp1p27x7","content":"<p>在游行开发的中后期所有的团队基本都会遇到两个通性问题：卡顿和崩溃。造成卡顿也就是迪奥帧的原因主要是CPU计算量和GPU渲染压力过大。造成程序崩溃的原因基本也是两种情况，一种是代码错误造成的崩溃，另一种是我们主要讨论的内存过高造成的崩溃。下面就对游戏中遇到的这两个问题进行讨论，讨论的游戏主要是针对2D游戏，当然很多情况是2D和3D游戏中共同存在的。<a id=\"more\"></a></p>\n<ul>\n<li><strong>载入纹理时按照从大到小的顺序，并且分帧加载。</strong>因为cocos2dx中加载一张纹理，要占用两倍的纹理空间，多余的内存会在这帧结束时释放掉，所以从大到小，分帧加载的策略可以高效的使用内存防止内存峰值过高造成崩溃。需要注意的是避免使用超大纹理。</li>\n<li><strong>资源格式的选择。</strong>主要有3个因素会影响纹理内存，即纹理格式（压缩还是非压缩）、颜色深度和大小。我们可以使用PVR格式纹理减少内存使用。推荐纹理格式为pvr.ccz。纹理使用的每种颜色位数越多，图像质量越好，但是越耗内存。所以我们可以使用颜色深度为RGB4444的纹理代替RGB8888，这样内存消耗会降低一半。如果图片不需要透明通道就不要加上透明通道，这样还可以节省内存的使用。同时pvr格式的纹理在上传到gpu时的速度也要比其他格式更快一些。</li>\n<li><strong>减少绘制调用和上传gpu压力。</strong>首先纹理需要上传到gpu中渲染绘制，越小的纹理上传的速度越快，所以要控制避免有较大的纹理一次上传到显存中，上面说过pvr格式的纹理上传速度会快些，同时大量的纹理上传会造成程序瞬间卡顿，因为纹理上传是占用主线程的，所以低一点中的分帧加载在这里也适用。还有就是绘制的压力，同屏中显示对象的数量会影响绘制的性能，所以在合理的情况下要尽量减少显示对象的数量。同时我们要尽量将散图打到一张整图中，因为在cocos2dx引擎的底层中，在同一张纹理上的显示对象只会调用一次绘制命令，相当于BatchNode。这里需要特别注意的是减少绘制要打到整图中和为了加快纹理上传速度要减小纹理大小是个相悖的条件，所以我们要根据实际情况来衡量这两点。一般情况下每帧上传一张1024*1024的rgba8888格式的纹理是不会出现卡顿的，所以建议每次上传不要超过这个大小。如果是rgb4444的纹理那么大小会减少一半，上传会更快一些。</li>\n<li><strong>降低UI复杂度。</strong>降低复杂度有很多方式，第一种方式是减少显示对象数量，比如拿文本框来说，经常在游戏中会有显示金币的地方，例如：“金币：99”。有很多人在ui里会将标题和数量分开，定义两个文本框，这里如果没有特殊表现的话，就应该合并成一个文本框，这样就减少了一个对象的绘制。同理有很多东西都可以减少，例如Sprite等，项目中具体情况具体对待。第二种方式是降低UI树的复杂度，上一点中减少数量也会达到一个降低UIU树复杂度的效果，在这个同时，我们还要尽量降低UI树的深度，降低树的深度可以有效的提高绘制遍历的速度，在设计ui的时候，我们往往为了易于管理，会创建很多空面板，或节点，来达到管理ui中各个部件的作用，但是有时我们会增加的过于复杂，这里尽量降低这种复杂度就可以提高绘制效率。最后我们还要控制资源的规格，首先游戏中很多ui是通用的，比如通用的按钮，图标，面板等，我们打到一张贴图上，作为通用资源常驻内存，然后每个ui独特的资源单独打成贴图，在使用的时候加载到内存中，使用结束后释放掉。</li>\n<li><strong>UI设计的时候要提高UI通用资源的使用率。</strong>优化资源到最小，比如使用九宫格图片，采用旋转缩放等丰富资源表现力等。</li>\n<li><strong>动画文件的处理。</strong>动画一般有两种选择，帧动画和骨骼动画。帧动画的优点就是运算不耗性能，并且表现较好，缺点就是当帧数较多时，资源量比较大，并且占用内存较高，所以不太适合做过于复杂的动画，比如动作和技能较多的ARPG角色如果纯用帧动画来实现，会使用很多资源，在加载时就不能加载过多的角色，这样就局限了游戏的设计，同场景角色数量不能过多。与之相对应的就是骨骼动画，骨骼动画的特点就是节省资源，一套骨骼可以做很多套动作，新增动作也不会对文件大小有明显的增加，缺点也比较明显，就是因为骨骼动画是通过计算，然后进行旋转，位移等实现的，所以当动画比较复杂，骨骼数量较多时，计算量就会很大，对CPU的计算增加了压力，压力过大时就会掉帧卡顿。当团队技术较好，并且美术程序沟通配合默契的团队可以采用帧动画与骨骼动画相结合的方案。美术在设计时动作大部分采用骨骼，局部需要表现效果的地方使用帧动画到处的贴图来实现，美术人员在设计时要充分考虑到资源利用，利用旋转缩放功能丰富动画，同时还要考虑骨骼数量、节点深度等队性能等影响。</li>\n<li><strong>游戏音效的规格及优化。</strong>游戏音效在使用中也有很多问题，音效占用的资源空间、运行时内存和加载效率等。首先需要考虑使用资源的格式，在各个平台下，资源格式的支持也都不同，平台及支持的常见文件格式如下：<br>Android ：mp3, mid, oggg, wav<br>iOS ：mac, caf, mp3, m4a, wav<br>Windows ： mid, mp3, wav<br>通常我在项目中会针对不同平台加载不通资源，一般android常用oggg，iOS中常用caf，windows下一般都是调试用的，也没怎么优化过，直接用的mp3格式。同时音效资源也需要处理，音频优化,3个因素会影响音频文件的内存使用，即音频文件数据格式、比特率及采样率。推荐使用MP3数据格式的音频文件，因为Android平台和iOS平台均支持MP3格式，此外MP3格式经过压缩和硬件加速。背景音乐文件大小应该低于800KB，最简单的方法就是减少背景音乐时间然后重复播放。音频文件采样率大约在96-128kbps为佳，比特率44kHz就够了。</li>\n<li><strong>游戏逻辑的相关优化。</strong>在代码中，不要在主循环中做复杂的逻辑处理，例如for循环更新、查找等，可以利用缓冲等技术，解决和优化在主循环中每帧的效能。部分不重要的逻辑，或者要求即时反馈不高的逻辑可以适当的采取抽帧，也就是不是每帧都进行运算和刷新，这样可以降低很多运算量。同时游戏的玩法逻辑也有很多可以优化的地方，比如射击游戏的子弹可以做缓存，减少频繁的创建和销毁对象；RPG游戏中的地图可以做成异步分块加载，不显示的可以不去加载渲染等。</li>\n<li><strong>代码级别的优化。</strong>这点比较简单，在编写程序时，算法最优，并且不要有内存泄漏等。</li>\n<li><strong>最后就是引擎级别的优化。</strong>我们使用的是cocos2dx进行的项目开发，在该引擎中，存在的bug、性能等问题也有很多可以优化的地方。在我们项目中，就修改过spine的内存泄漏问题、ui加载速度问题、还有关于对象拷贝的性能问题等。修改引擎要对引擎比较了解，并且修改后引擎的版本再次升级是还要把修改合并过去，这里也建议大家发现问题可以到引擎的Github上提交request。如果对渲染比较了解的还可以对渲染级别进行优化。</li>\n</ul>\n","excerpt":"<p>在游行开发的中后期所有的团队基本都会遇到两个通性问题：卡顿和崩溃。造成卡顿也就是迪奥帧的原因主要是CPU计算量和GPU渲染压力过大。造成程序崩溃的原因基本也是两种情况，一种是代码错误造成的崩溃，另一种是我们主要讨论的内存过高造成的崩溃。下面就对游戏中遇到的这两个问题进行讨论，讨论的游戏主要是针对2D游戏，当然很多情况是2D和3D游戏中共同存在的。","more":"</p>\n<ul>\n<li><strong>载入纹理时按照从大到小的顺序，并且分帧加载。</strong>因为cocos2dx中加载一张纹理，要占用两倍的纹理空间，多余的内存会在这帧结束时释放掉，所以从大到小，分帧加载的策略可以高效的使用内存防止内存峰值过高造成崩溃。需要注意的是避免使用超大纹理。</li>\n<li><strong>资源格式的选择。</strong>主要有3个因素会影响纹理内存，即纹理格式（压缩还是非压缩）、颜色深度和大小。我们可以使用PVR格式纹理减少内存使用。推荐纹理格式为pvr.ccz。纹理使用的每种颜色位数越多，图像质量越好，但是越耗内存。所以我们可以使用颜色深度为RGB4444的纹理代替RGB8888，这样内存消耗会降低一半。如果图片不需要透明通道就不要加上透明通道，这样还可以节省内存的使用。同时pvr格式的纹理在上传到gpu时的速度也要比其他格式更快一些。</li>\n<li><strong>减少绘制调用和上传gpu压力。</strong>首先纹理需要上传到gpu中渲染绘制，越小的纹理上传的速度越快，所以要控制避免有较大的纹理一次上传到显存中，上面说过pvr格式的纹理上传速度会快些，同时大量的纹理上传会造成程序瞬间卡顿，因为纹理上传是占用主线程的，所以低一点中的分帧加载在这里也适用。还有就是绘制的压力，同屏中显示对象的数量会影响绘制的性能，所以在合理的情况下要尽量减少显示对象的数量。同时我们要尽量将散图打到一张整图中，因为在cocos2dx引擎的底层中，在同一张纹理上的显示对象只会调用一次绘制命令，相当于BatchNode。这里需要特别注意的是减少绘制要打到整图中和为了加快纹理上传速度要减小纹理大小是个相悖的条件，所以我们要根据实际情况来衡量这两点。一般情况下每帧上传一张1024*1024的rgba8888格式的纹理是不会出现卡顿的，所以建议每次上传不要超过这个大小。如果是rgb4444的纹理那么大小会减少一半，上传会更快一些。</li>\n<li><strong>降低UI复杂度。</strong>降低复杂度有很多方式，第一种方式是减少显示对象数量，比如拿文本框来说，经常在游戏中会有显示金币的地方，例如：“金币：99”。有很多人在ui里会将标题和数量分开，定义两个文本框，这里如果没有特殊表现的话，就应该合并成一个文本框，这样就减少了一个对象的绘制。同理有很多东西都可以减少，例如Sprite等，项目中具体情况具体对待。第二种方式是降低UI树的复杂度，上一点中减少数量也会达到一个降低UIU树复杂度的效果，在这个同时，我们还要尽量降低UI树的深度，降低树的深度可以有效的提高绘制遍历的速度，在设计ui的时候，我们往往为了易于管理，会创建很多空面板，或节点，来达到管理ui中各个部件的作用，但是有时我们会增加的过于复杂，这里尽量降低这种复杂度就可以提高绘制效率。最后我们还要控制资源的规格，首先游戏中很多ui是通用的，比如通用的按钮，图标，面板等，我们打到一张贴图上，作为通用资源常驻内存，然后每个ui独特的资源单独打成贴图，在使用的时候加载到内存中，使用结束后释放掉。</li>\n<li><strong>UI设计的时候要提高UI通用资源的使用率。</strong>优化资源到最小，比如使用九宫格图片，采用旋转缩放等丰富资源表现力等。</li>\n<li><strong>动画文件的处理。</strong>动画一般有两种选择，帧动画和骨骼动画。帧动画的优点就是运算不耗性能，并且表现较好，缺点就是当帧数较多时，资源量比较大，并且占用内存较高，所以不太适合做过于复杂的动画，比如动作和技能较多的ARPG角色如果纯用帧动画来实现，会使用很多资源，在加载时就不能加载过多的角色，这样就局限了游戏的设计，同场景角色数量不能过多。与之相对应的就是骨骼动画，骨骼动画的特点就是节省资源，一套骨骼可以做很多套动作，新增动作也不会对文件大小有明显的增加，缺点也比较明显，就是因为骨骼动画是通过计算，然后进行旋转，位移等实现的，所以当动画比较复杂，骨骼数量较多时，计算量就会很大，对CPU的计算增加了压力，压力过大时就会掉帧卡顿。当团队技术较好，并且美术程序沟通配合默契的团队可以采用帧动画与骨骼动画相结合的方案。美术在设计时动作大部分采用骨骼，局部需要表现效果的地方使用帧动画到处的贴图来实现，美术人员在设计时要充分考虑到资源利用，利用旋转缩放功能丰富动画，同时还要考虑骨骼数量、节点深度等队性能等影响。</li>\n<li><strong>游戏音效的规格及优化。</strong>游戏音效在使用中也有很多问题，音效占用的资源空间、运行时内存和加载效率等。首先需要考虑使用资源的格式，在各个平台下，资源格式的支持也都不同，平台及支持的常见文件格式如下：<br>Android ：mp3, mid, oggg, wav<br>iOS ：mac, caf, mp3, m4a, wav<br>Windows ： mid, mp3, wav<br>通常我在项目中会针对不同平台加载不通资源，一般android常用oggg，iOS中常用caf，windows下一般都是调试用的，也没怎么优化过，直接用的mp3格式。同时音效资源也需要处理，音频优化,3个因素会影响音频文件的内存使用，即音频文件数据格式、比特率及采样率。推荐使用MP3数据格式的音频文件，因为Android平台和iOS平台均支持MP3格式，此外MP3格式经过压缩和硬件加速。背景音乐文件大小应该低于800KB，最简单的方法就是减少背景音乐时间然后重复播放。音频文件采样率大约在96-128kbps为佳，比特率44kHz就够了。</li>\n<li><strong>游戏逻辑的相关优化。</strong>在代码中，不要在主循环中做复杂的逻辑处理，例如for循环更新、查找等，可以利用缓冲等技术，解决和优化在主循环中每帧的效能。部分不重要的逻辑，或者要求即时反馈不高的逻辑可以适当的采取抽帧，也就是不是每帧都进行运算和刷新，这样可以降低很多运算量。同时游戏的玩法逻辑也有很多可以优化的地方，比如射击游戏的子弹可以做缓存，减少频繁的创建和销毁对象；RPG游戏中的地图可以做成异步分块加载，不显示的可以不去加载渲染等。</li>\n<li><strong>代码级别的优化。</strong>这点比较简单，在编写程序时，算法最优，并且不要有内存泄漏等。</li>\n<li><strong>最后就是引擎级别的优化。</strong>我们使用的是cocos2dx进行的项目开发，在该引擎中，存在的bug、性能等问题也有很多可以优化的地方。在我们项目中，就修改过spine的内存泄漏问题、ui加载速度问题、还有关于对象拷贝的性能问题等。修改引擎要对引擎比较了解，并且修改后引擎的版本再次升级是还要把修改合并过去，这里也建议大家发现问题可以到引擎的Github上提交request。如果对渲染比较了解的还可以对渲染级别进行优化。</li>\n</ul>"}],"PostAsset":[],"PostCategory":[{"post_id":"ciyo3mvif0000tsr84cj88r9p","category_id":"ciyo3mviz0001tsr8co0mrl0f","_id":"ciyo3mvj50004tsr8929rxipr"},{"post_id":"ciyo3mvjr000atsr8t4mvmq2a","category_id":"ciyo3mvjp0007tsr8uavs6z29","_id":"ciyo3mvjx000gtsr8gpmmh1ca"},{"post_id":"ciyo3mvjj0005tsr8ja0nr32l","category_id":"ciyo3mvjp0007tsr8uavs6z29","_id":"ciyo3mvjz000ktsr8muiytdy6"},{"post_id":"ciyo3mvjr000btsr8veyqd1t3","category_id":"ciyo3mvjp0007tsr8uavs6z29","_id":"ciyo3mvjz000mtsr8ien3s7sb"},{"post_id":"ciyo3mvjl0006tsr87rr0j6ie","category_id":"ciyo3mvjp0007tsr8uavs6z29","_id":"ciyo3mvk0000qtsr8r435945v"},{"post_id":"ciyo3mvjq0009tsr8jof56448","category_id":"ciyo3mvjy000itsr8b8tgg9d5","_id":"ciyo3mvk1000stsr8mds6pzov"},{"post_id":"ciyo3mvju000ftsr8dkrt0d12","category_id":"ciyo3mvjz000otsr8dzyktuys","_id":"ciyo3mvk2000utsr8ros0i5qz"},{"post_id":"ciyo3mvp5000vtsr85nlm8tcc","category_id":"ciyo3mvjz000otsr8dzyktuys","_id":"ciyo3mvpb0013tsr8bjqop7lt"},{"post_id":"ciyo3mvp90010tsr8uwopyqjs","category_id":"ciyo3mvjp0007tsr8uavs6z29","_id":"ciyo3mvpd0018tsr88jq085ti"},{"post_id":"ciyo3mvpc0016tsr8ymocne93","category_id":"ciyo3mvjz000otsr8dzyktuys","_id":"ciyo3mvpf001etsr8q5poqc29"},{"post_id":"ciyo3mvp7000xtsr8k2vrknx9","category_id":"ciyo3mvpb0012tsr85bdyhck3","_id":"ciyo3mvph001htsr8gz3g3s83"},{"post_id":"ciyo3mvpe001btsr8uuudv5vl","category_id":"ciyo3mvjy000itsr8b8tgg9d5","_id":"ciyo3mvpi001jtsr8sbqkignf"},{"post_id":"ciyo3mvpg001ftsr8rp1p27x7","category_id":"ciyo3mvpi001ktsr8hxyzzww9","_id":"ciyo3mvpk001ptsr8r2b2ndap"},{"post_id":"ciyo3mvpd001atsr8k23aohgq","category_id":"ciyo3mvjp0007tsr8uavs6z29","_id":"ciyo3qdpl0000bwr8m1j1yg2b"}],"PostTag":[{"post_id":"ciyo3mvif0000tsr84cj88r9p","tag_id":"ciyo3mvj10002tsr8n5pxsn4v","_id":"ciyo3mvj40003tsr8kvxr0cvg"},{"post_id":"ciyo3mvjr000atsr8t4mvmq2a","tag_id":"ciyo3mvjp0008tsr87jmio7rw","_id":"ciyo3mvju000etsr8jh579lly"},{"post_id":"ciyo3mvjj0005tsr8ja0nr32l","tag_id":"ciyo3mvjp0008tsr87jmio7rw","_id":"ciyo3mvjy000htsr8golqj7z5"},{"post_id":"ciyo3mvjr000btsr8veyqd1t3","tag_id":"ciyo3mvjp0008tsr87jmio7rw","_id":"ciyo3mvjz000ltsr85j47thtt"},{"post_id":"ciyo3mvjl0006tsr87rr0j6ie","tag_id":"ciyo3mvjp0008tsr87jmio7rw","_id":"ciyo3mvjz000ntsr81z8mq4tv"},{"post_id":"ciyo3mvjq0009tsr8jof56448","tag_id":"ciyo3mvjy000jtsr8xv2z8djw","_id":"ciyo3mvk0000rtsr8nxqwaox8"},{"post_id":"ciyo3mvju000ftsr8dkrt0d12","tag_id":"ciyo3mvk0000ptsr87e32syr2","_id":"ciyo3mvk1000ttsr8tezsq203"},{"post_id":"ciyo3mvp90010tsr8uwopyqjs","tag_id":"ciyo3mvjp0008tsr87jmio7rw","_id":"ciyo3mvpc0015tsr8cthlj51e"},{"post_id":"ciyo3mvp5000vtsr85nlm8tcc","tag_id":"ciyo3mvp9000ztsr8u1g4hw1u","_id":"ciyo3mvpd0019tsr8ozf2azco"},{"post_id":"ciyo3mvp7000xtsr8k2vrknx9","tag_id":"ciyo3mvpd0017tsr8zlvkohrn","_id":"ciyo3mvph001gtsr863f72k04"},{"post_id":"ciyo3mvpc0016tsr8ymocne93","tag_id":"ciyo3mvpf001ctsr8d29gf1we","_id":"ciyo3mvpi001ltsr8kvi5u45b"},{"post_id":"ciyo3mvpd001atsr8k23aohgq","tag_id":"ciyo3mvpi001itsr8h6hvtf5b","_id":"ciyo3mvpj001otsr889kc00gw"},{"post_id":"ciyo3mvpe001btsr8uuudv5vl","tag_id":"ciyo3mvpj001ntsr8okibqnc7","_id":"ciyo3mvpk001rtsr8zql6gl1d"},{"post_id":"ciyo3mvpg001ftsr8rp1p27x7","tag_id":"ciyo3mvpk001qtsr8t1p6wmlc","_id":"ciyo3mvpl001stsr8l9tbb3z6"}],"Tag":[{"name":"番茄工作法","_id":"ciyo3mvj10002tsr8n5pxsn4v"},{"name":"ExtJS","_id":"ciyo3mvjp0008tsr87jmio7rw"},{"name":"多线程","_id":"ciyo3mvjy000jtsr8xv2z8djw"},{"name":"命令模式","_id":"ciyo3mvk0000ptsr87e32syr2"},{"name":"观察者模式","_id":"ciyo3mvp9000ztsr8u1g4hw1u"},{"name":"理财","_id":"ciyo3mvpd0017tsr8zlvkohrn"},{"name":"单例模式","_id":"ciyo3mvpf001ctsr8d29gf1we"},{"name":"闭包","_id":"ciyo3mvpi001itsr8h6hvtf5b"},{"name":"［WebService,java］","_id":"ciyo3mvpj001ntsr8okibqnc7"},{"name":"cocos2d-x,性能优化","_id":"ciyo3mvpk001qtsr8t1p6wmlc"}]}}