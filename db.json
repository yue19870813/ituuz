{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/images/design_1_commond.png","path":"images/design_1_commond.png","modified":0,"renderable":0},{"_id":"source/images/tree_2_sql.png","path":"images/tree_2_sql.png","modified":0,"renderable":0},{"_id":"source/images/design_3_single.png","path":"images/design_3_single.png","modified":0,"renderable":0},{"_id":"source/uploads/avatar.png","path":"uploads/avatar.png","modified":0,"renderable":0},{"_id":"source/uploads/wechat-qcode.jpg","path":"uploads/wechat-qcode.jpg","modified":0,"renderable":0},{"_id":"source/uploads/alipay_charge.jpg","path":"uploads/alipay_charge.jpg","modified":0,"renderable":0},{"_id":"source/uploads/wechat_charge.jpg","path":"uploads/wechat_charge.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"source/images/design_2_observer.png","path":"images/design_2_observer.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"f3ec92164503113069ecd096360a8b82c1c7cde5","modified":1479649787000},{"_id":"source/.DS_Store","hash":"e7b5da53fca14b11469b590d8bcc3bdebdab12af","modified":1480256613000},{"_id":"themes/next/.bowerrc","hash":"80e096fdc1cf912ee85dd9f7e6e77fd40cf60f10","modified":1462394086000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1462394086000},{"_id":"themes/next/.javascript_ignore","hash":"d619ee13031908cd72666e4ff652d2ea3483b1c3","modified":1462394086000},{"_id":"themes/next/.gitignore","hash":"efec790f5b7a0256763e1cc08f12c4f0aff509f6","modified":1462394086000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1462394086000},{"_id":"themes/next/_config.yml","hash":"6d80b67e12b215e19f54b7037189eaa729f1c269","modified":1480609866000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1462394086000},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1462394086000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1462394086000},{"_id":"themes/next/bower.json","hash":"f89c6700a11d81e067cc97273ca6bf96cb88c8f9","modified":1462394086000},{"_id":"themes/next/gulpfile.coffee","hash":"26e5b1b945704c8bc78b928feede895c4c111c95","modified":1462394086000},{"_id":"themes/next/package.json","hash":"63e9c0f1dd9e5d7f51b4ae383981ef939a2ed45d","modified":1462394086000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1480259825000},{"_id":"source/_posts/Java多线程实现生产者与消费者.md","hash":"f15523eb88d4ce08d2c31f103c025c39f670ffb4","modified":1480250487000},{"_id":"source/_posts/Grid-1.md","hash":"b7b955ca89c5de85a42fe81f30a84b40ce1ad325","modified":1480258529000},{"_id":"source/_posts/Grid-2.md","hash":"266ce458643aad13fe62fe7e7859626d5ea03b67","modified":1480259803000},{"_id":"source/_posts/design-commond.md","hash":"847c59ca99d52b982ea364adeb82616e3a1be71d","modified":1480601820000},{"_id":"source/_posts/Tree-2.md","hash":"4074f0bff3c8609e7d8bee66e5e235b8ba298f37","modified":1480257048000},{"_id":"source/_posts/Tree-3.md","hash":"197d1b17cb240bb9d4d605a7d618b205d45b9068","modified":1480257903000},{"_id":"source/_posts/Tree-1.md","hash":"4d506074e4b3a541ea2587177dbf2843849da8da","modified":1480252108000},{"_id":"source/_posts/WebService复杂类型数据传输-dom4j方式.md","hash":"5c34a4996a7437b3df07199523010571cae8ff6a","modified":1480248764000},{"_id":"source/categories/index.md","hash":"89914f71eee8f1e5ea0fa97bd882ab51b0af0dd7","modified":1480248931000},{"_id":"source/_posts/design-single.md","hash":"56ddbff0af4b294fa53dc11fe315fc1a51164b86","modified":1480605607000},{"_id":"source/_posts/第一篇文章.md","hash":"8b62d61891fe257114e25dd1f1a6047c54a25fea","modified":1480245892000},{"_id":"source/_posts/design-observer.md","hash":"c1d38c220f5bd670252801c0518ab3b5bf1fc5a5","modified":1480604380000},{"_id":"source/images/design_1_commond.png","hash":"a94e556b8a58b1f2892a1a39f9a067077275432c","modified":1480601820000},{"_id":"source/images/tree_2_sql.png","hash":"de2b3149af56628db975af173fc3e61b4614b999","modified":1480256631000},{"_id":"source/images/design_3_single.png","hash":"fbffe1afd7c4ff90e14640d3d280b140c1295158","modified":1480605017000},{"_id":"source/about/index.md","hash":"b3275a61d28ac3cea9efa4714ad7244deda04a0c","modified":1480246372000},{"_id":"source/tags/index.md","hash":"5ae176db3b3d495e71c7bdff43e2758c0b18baaa","modified":1480231838000},{"_id":"source/uploads/avatar.png","hash":"a23a4803d776c7e4e73e31614fe22168d1e64186","modified":1480225864000},{"_id":"source/uploads/wechat-qcode.jpg","hash":"66a67a4919f2732680ea19a0b7bcb63bbe3339f3","modified":1480228175000},{"_id":"source/uploads/alipay_charge.jpg","hash":"bf0a359dd5714466cfdfb89ebacb1b83e856cfbc","modified":1480232362000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1462394086000},{"_id":"themes/next/layout/_layout.swig","hash":"74157f6cfd679ea11febec632542793f37c5e5d4","modified":1462394086000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1462394086000},{"_id":"source/uploads/wechat_charge.jpg","hash":"64c05bc1bbc5c32f0871748ca9487a4bd87ea3fc","modified":1480229164000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1462394086000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1462394086000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1462394086000},{"_id":"themes/next/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1462394086000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1462394086000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1462394086000},{"_id":"themes/next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1462394086000},{"_id":"themes/next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1462394086000},{"_id":"themes/next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1462394086000},{"_id":"themes/next/languages/en.yml","hash":"f03799cbdb5a33064ead080bcac4baca1f6bc5f9","modified":1462394086000},{"_id":"themes/next/languages/id.yml","hash":"147c01e41b931085ad14250fa900c2249dcbbdd7","modified":1462394086000},{"_id":"themes/next/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1462394086000},{"_id":"themes/next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1462394086000},{"_id":"themes/next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1462394086000},{"_id":"themes/next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1462394086000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1462394086000},{"_id":"themes/next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1462394086000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"bea452bc49aed171a210d09bd6cddc4e846ea8ab","modified":1462394086000},{"_id":"themes/next/source/404.html","hash":"e71593534c6b530fd2df06be07c8d940b985529c","modified":1480228576000},{"_id":"themes/next/test/.jshintrc","hash":"096ed6df627373edd820f24d46b8baf528dee61d","modified":1462394086000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1462394086000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1462394086000},{"_id":"source/images/design_2_observer.png","hash":"949aa8bbd7492f0dc8bb9d82aa66653121ba8e88","modified":1480603694000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462394086000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1462394086000},{"_id":"themes/next/layout/_macro/post.swig","hash":"1ca03011bed92614832b1343b65be92183957dc5","modified":1462394086000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"b883289054ee54a374caad5d4883591beb94bd8b","modified":1462394086000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1462394086000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"85327c2174d09c6d69c9033592e6c8f7eb7ac3ba","modified":1462394086000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"82a9bc2ba60ce68419128ff60624bd74b15dfb78","modified":1462394086000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"0ce71d8322ea7dea82d9371fa2fe13949aa870e3","modified":1462394086000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1462394086000},{"_id":"themes/next/layout/_partials/head.swig","hash":"f83b1c55bedd2c1a3eb734c72c6997795a4e5f99","modified":1462394086000},{"_id":"themes/next/layout/_partials/header.swig","hash":"963a765dc00e6ac43cfc53ffaf5725eb854cf95e","modified":1462394086000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1462394086000},{"_id":"themes/next/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1462394086000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1462394086000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"82d060fe055d6e423bbc9199f82dfe5c68e74779","modified":1462394086000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1462394086000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1462394086000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1462394086000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1462394086000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1462394086000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1462394086000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1462394086000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1462394086000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1462394086000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1462394086000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1462394086000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1462394086000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1462394086000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1462394086000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1462394086000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1462394086000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1462394086000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1462394086000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1462394086000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462394086000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462394086000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462394086000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462394086000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462394086000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462394086000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462394086000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1462394086000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1462394086000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1462394086000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1462394086000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c07f7b2f264e5215b8ed42d67e8cef2477558364","modified":1462394086000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"7ca5cb4daa58b3504e17f3e02975e794bc634658","modified":1462394086000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1462394086000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1462394086000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1462394086000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"069bb17fb1db3bc7c85c88efa3ed94ab6becbe2c","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"5bafc33f57508d1d04a9930165240f6e9efa8d6d","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"1561bd0c107d725252c6d746e9ac177fc18f93bf","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1462394086000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1462394086000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1462394086000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1462394086000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1462394086000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"3ead77befa064d6327dc7afd0a5af7be59a5f196","modified":1462394086000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1462394086000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1462394086000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1462394086000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"17624186f7a1f28daddea258d044f8e03b2f4bea","modified":1462394086000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1462394086000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1462394086000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1462394086000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1462394086000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1462394086000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1462394086000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1462394086000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1462394086000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1462394086000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1462394086000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1462394086000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1462394086000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1462394086000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1462394086000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1462394086000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1462394086000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1462394086000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1462394086000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1462394086000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1462394086000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1462394086000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1462394086000},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1462394086000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1462394086000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1462394086000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1462394086000},{"_id":"themes/next/source/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1462394086000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"44e761721e8ad787ef571a3cc57bbc12d318a2a3","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"334176d838ee528e58468d8bc74ff3a6d3f25b2b","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"8c7af79407d223486fba72b8150fe045a553bf70","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"3491d3cebabc8a28857200db28a1be65aad6adc2","modified":1462394086000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1462394086000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1462394086000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1462394086000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1462394086000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1462394086000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1462394086000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6ed60cc621bac096c0ed7534fa25b1a52dc571d4","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"8d7cecde4933900c7df2db9d0a98f5f82f88dc93","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1462394086000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1462394086000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1462394086000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1462394086000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1462394086000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1462394086000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1462394086000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1462394086000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1462394086000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1462394086000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1462394086000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1462394086000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1462394086000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1462394086000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1462394086000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1462394086000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1462394086000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1462394086000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1462394086000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1462394086000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1462394086000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1462394086000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1462394086000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"90f8f9706cd7fe829cf06e9959a65fd3f8b994fa","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4da051c7f3924fa2db1e73c55b2baf1c2c150255","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d543d1377c1f61b70e3adb6da0eb12797552e5f2","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"3afc459442c132c480d1d832f1a872f1070bb048","modified":1462394086000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"795d94561888d31cb7a6ff4a125596809ea69b7d","modified":1462394086000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1462394086000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1462394086000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1462394086000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1462394086000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1462394086000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1462394086000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1462394086000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1462394086000},{"_id":"public/categories/index.html","hash":"855e92556429d2000a6abdf220b7347af63eb79d","modified":1480609877724},{"_id":"public/tags/index.html","hash":"8d436b6fa07d31ba4bf42bef657407fd5c5d174e","modified":1480609877733},{"_id":"public/about/index.html","hash":"9008aa0ef2ee4016e2fa6b5ef7d72bfb5cc92192","modified":1480609877733},{"_id":"public/2016/12/01/design-single/index.html","hash":"e97d74985927bbfb51828a1251c554c55c13ab4c","modified":1480609877733},{"_id":"public/2016/12/01/design-observer/index.html","hash":"638ffe150aca4baf8c6c36a42f03bebb2bdb86e1","modified":1480609877733},{"_id":"public/2016/11/27/Grid-2/index.html","hash":"f76340dadb72385a33736157839890b0fa48afa7","modified":1480609877733},{"_id":"public/2016/11/29/design-commond/index.html","hash":"5f7b369e95e3af3e048ccf5a2e4ac10796f72444","modified":1480609877733},{"_id":"public/2016/11/27/Tree-3/index.html","hash":"9b77be44b3ff2d50adc86284742ef912e9c4a07a","modified":1480609877733},{"_id":"public/2016/11/27/Tree-2/index.html","hash":"d0e558209b9c0aa3c9b42edaec8fdef1157ae17b","modified":1480609877733},{"_id":"public/2016/11/27/Tree-1/index.html","hash":"7a3e781cf45c2189e1c6373ecafc96794ffc1d0b","modified":1480609877734},{"_id":"public/2016/11/27/Java多线程实现生产者与消费者/index.html","hash":"36061e4dbbb29e3dbfc6fe66c04bef01dd700d27","modified":1480609877734},{"_id":"public/2016/11/27/第一篇文章/index.html","hash":"63acc5217977825351ac9216497604dc65814873","modified":1480609877771},{"_id":"public/archives/2016/page/2/index.html","hash":"ddbbb2acbb61ae574167a9a12722dc4c105c1815","modified":1480609877771},{"_id":"public/archives/page/2/index.html","hash":"262b804fdfa06beaf6dca21b0cd299064807319f","modified":1480609877771},{"_id":"public/page/2/index.html","hash":"2157882f5d4a11b1536ebc6410ead6db46d82c46","modified":1480609877772},{"_id":"public/categories/javascript/index.html","hash":"c70dd8a22adeceb28a2a32dd25c08f8848618f92","modified":1480609877772},{"_id":"public/categories/java/index.html","hash":"ac546560b830f4b65d024d6b42e6d774fd94d579","modified":1480609877772},{"_id":"public/categories/设计模式/index.html","hash":"f0e0f9f15e259a3ee202bd468f1a5fc80b29b071","modified":1480609877772},{"_id":"public/tags/多线程/index.html","hash":"2d3bcaa354f787bd90f17c7f3b36b22bc2767b06","modified":1480609877772},{"_id":"public/tags/ExtJS/index.html","hash":"35c7261ae59f65eccae98d3f4d458b07a4d13604","modified":1480609877772},{"_id":"public/tags/命令模式/index.html","hash":"bbdc1158310a9ee0d654cb304de1efb3e684d7ad","modified":1480609877772},{"_id":"public/tags/［WebService-java］/index.html","hash":"4937b5c5cd9abb1d4c1444fde39620ea0d4b696f","modified":1480609877772},{"_id":"public/archives/2016/12/index.html","hash":"ee7126568df1d3d2f73f81e9c9e71f0061dbb0e5","modified":1480609877772},{"_id":"public/tags/观察者模式/index.html","hash":"018557f66140688aac26f1a40707f8c13f813601","modified":1480609877772},{"_id":"public/tags/单例模式/index.html","hash":"591cc8e2b19463e700d2eeb4e8b1766a4437d122","modified":1480609877772},{"_id":"public/archives/index.html","hash":"8620f6e569fc52fcbb0a5bf8b7ed6467bb0247f5","modified":1480609877773},{"_id":"public/archives/2016/index.html","hash":"1249b5d1507152d3f565c45af0a6a67756644bce","modified":1480609877773},{"_id":"public/2016/11/27/Grid-1/index.html","hash":"4cee74dbf2387bf8cbba51646b886a2b85b69faa","modified":1480609877773},{"_id":"public/index.html","hash":"5bc41816eb52c440566f450fcb275a6c8c120d43","modified":1480609877773},{"_id":"public/2016/11/27/WebService复杂类型数据传输-dom4j方式/index.html","hash":"39fbb5d11de703fa37c850637c10d565c8f93929","modified":1480609877773},{"_id":"public/archives/2016/11/index.html","hash":"0437d2a97f3220abddda5499b11ad8007e26ce1d","modified":1480609877773},{"_id":"public/CNAME","hash":"f3ec92164503113069ecd096360a8b82c1c7cde5","modified":1480609877782},{"_id":"public/images/design_1_commond.png","hash":"a94e556b8a58b1f2892a1a39f9a067077275432c","modified":1480609877782},{"_id":"public/images/tree_2_sql.png","hash":"de2b3149af56628db975af173fc3e61b4614b999","modified":1480609877782},{"_id":"public/uploads/avatar.png","hash":"a23a4803d776c7e4e73e31614fe22168d1e64186","modified":1480609877783},{"_id":"public/uploads/wechat-qcode.jpg","hash":"66a67a4919f2732680ea19a0b7bcb63bbe3339f3","modified":1480609877783},{"_id":"public/uploads/alipay_charge.jpg","hash":"bf0a359dd5714466cfdfb89ebacb1b83e856cfbc","modified":1480609877783},{"_id":"public/uploads/wechat_charge.jpg","hash":"64c05bc1bbc5c32f0871748ca9487a4bd87ea3fc","modified":1480609877783},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1480609877783},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1480609877783},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1480609877783},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1480609877783},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1480609877783},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1480609877783},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1480609877783},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1480609877783},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1480609877783},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1480609877784},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1480609877784},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1480609877784},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1480609877784},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1480609877784},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1480609877784},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1480609877784},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1480609877784},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1480609877784},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1480609877784},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1480609877784},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1480609877784},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1480609877784},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1480609877784},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1480609877784},{"_id":"public/images/design_3_single.png","hash":"fbffe1afd7c4ff90e14640d3d280b140c1295158","modified":1480609878941},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1480609878944},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1480609878954},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1480609878954},{"_id":"public/404.html","hash":"e71593534c6b530fd2df06be07c8d940b985529c","modified":1480609878960},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1480609878960},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1480609878960},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1480609878960},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1480609878960},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1480609878960},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1480609878960},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1480609878960},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1480609878960},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1480609878960},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1480609878960},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1480609878960},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1480609878960},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1480609878961},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1480609878961},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1480609878961},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1480609878961},{"_id":"public/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1480609878961},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1480609878961},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1480609878961},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1480609878961},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1480609878961},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1480609878961},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1480609878961},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1480609878961},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1480609878962},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1480609878962},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1480609878962},{"_id":"public/css/main.css","hash":"96ed08d3dc299aa67ba885380dea9dab554ac4f1","modified":1480609878962},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1480609878962},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1480609878962},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1480609878962},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1480609878962},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1480609878962},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1480609878962},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1480609878963},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1480609878963},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1480609878963},{"_id":"public/images/design_2_observer.png","hash":"949aa8bbd7492f0dc8bb9d82aa66653121ba8e88","modified":1480609878963},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1480609878963},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1480609878971}],"Category":[{"name":"java","_id":"ciw6kw3th0004p5s6xvubmj64"},{"name":"javascript","_id":"ciw6kw3tw000ap5s6n3vegbk7"},{"name":"设计模式","_id":"ciw6kw3u6000np5s6czhnpd6p"}],"Data":[],"Page":[{"title":"categories","date":"2016-11-27T07:27:52.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-11-27 15:27:52\ntype: \"categories\"\n---\n","updated":"2016-11-27T12:15:31.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ciw6kw3t50001p5s69cajbe4o","content":"","excerpt":"","more":""},{"title":"tags","date":"2016-11-27T07:30:03.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-11-27 15:30:03\ntype: \"tags\"\n---\n","updated":"2016-11-27T07:30:38.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ciw6kw3td0003p5s60wjmbfig","content":"","excerpt":"","more":""},{"title":"about","date":"2016-11-27T07:14:08.000Z","_content":"## 关于我\n\n我是一枚程序员，在游戏开发里深耕。我生活在魔性的帝都，家里有三只猫，它们分别叫kitty、Damon和崽子。最近在开发H5游戏，有志同道合的朋友可以给我留言。\n\nEmail: yue19870813@163.com\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-11-27 15:14:08\n---\n## 关于我\n\n我是一枚程序员，在游戏开发里深耕。我生活在魔性的帝都，家里有三只猫，它们分别叫kitty、Damon和崽子。最近在开发H5游戏，有志同道合的朋友可以给我留言。\n\nEmail: yue19870813@163.com\n","updated":"2016-11-27T11:32:52.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"ciw6kw3tp0007p5s6ne2q4170","content":"<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><p>我是一枚程序员，在游戏开发里深耕。我生活在魔性的帝都，家里有三只猫，它们分别叫kitty、Damon和崽子。最近在开发H5游戏，有志同道合的朋友可以给我留言。</p>\n<p>Email: yue19870813@163.com</p>\n","excerpt":"","more":"<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><p>我是一枚程序员，在游戏开发里深耕。我生活在魔性的帝都，家里有三只猫，它们分别叫kitty、Damon和崽子。最近在开发H5游戏，有志同道合的朋友可以给我留言。</p>\n<p>Email: yue19870813@163.com</p>\n"}],"Post":[{"title":"Java多线程实现生产者与消费者","date":"2016-11-27T12:32:32.000Z","_content":"生产者与消费者问题是指创建一组“生产者”线程和一组“消费者”线程，让他们进行同步互斥的运行，生产者生产一个产品，消费者就消费掉一个产品，下面我就用Java的多线程来实现这个课题。<!--more-->本例子的ChuShi代表生产者，XiaoFei代表消费者。首先是生产者厨师的代码：\n``` java\npackage thread;  \npublic class ChuShi extends Thread{  \n      \n    private GongNeng g;  \n    public ChuShi(GongNeng g){    \n        this.g = g;  \n    }  \n      \n    public void run(){  \n        for(;;){  \n              \n            g.lao();  \n              \n        }  \n    }  \n} \n```\n然后是消费者的代码：  \n``` java\npackage thread;  \npublic class XiaoFei extends Thread{  \n      \n    private GongNeng g;  \n      \n    public XiaoFei(GongNeng g){  \n          \n        this.g = g;  \n          \n    }  \n      \n    public void run(){  \n        for(;;){  \n                  \n            g.chi();  \n              \n        }  \n    }  \n}\n```\n接着是封装了生产者的生产方法和消费者的消费方法的类，该类中的方法要使用synchronized关键字，就可以使run方法同步，也就是说，对于同一个Java类的对象实例，run方法同时只能被一个线程调用，并当前的run执行完后，才能被其他的线程调用。需要注意的是每个线程run()方法调用的synchronized修饰的方法必须是一个实例的方法才能保证同步，所以这个里将生产者和消费者的功能封装在一个实例中，在将他们的实例分别传给生产者和消费者，这样他们就能够同步了，下面是同步的方法代码：\n``` java\npackage thread;  \npublic class GongNeng {  \n    private Bing b;  \n      \n    public GongNeng(Bing b){      \n        this.b = b;   \n    }  \n      \n    public synchronized void lao(){  \n          \n        if(b.getBing()<10){  \n              \n            try {  \n                Thread.sleep(1500);  \n            } catch (InterruptedException e) {  \n                // TODO Auto-generated catch block  \n                e.printStackTrace();  \n            }  \n              \n            System.out.println(Thread.currentThread()+  \n                  \n            \":厨师烙了一张饼，盘里还剩\"+(b.getBing()+1)+\"张饼\");  \n              \n            b.setBing(b.getBing()+1);  \n        }  \n    }  \n      \n    public synchronized void chi(){  \n        if(b.getBing()>0){  \n              \n            try {  \n                Thread.sleep(2000);  \n            } catch (InterruptedException e) {  \n                // TODO Auto-generated catch block  \n                e.printStackTrace();  \n            }  \n            System.out.println(Thread.currentThread()+  \n                  \n            \":消费者吃了一张饼，盘里还剩\"+(b.getBing()-1)+\"张饼\");  \n              \n            b.setBing(b.getBing()-1);  \n              \n        }  \n    }  \n} \n```\n还有他们对一个消费品进行同步的操作，在这里我们用的是饼：\n``` java\npackage thread;  \npublic class Bing {  \n    private int bing = 10;  \n    public int getBing() {  \n        return bing;  \n    }  \n    public void setBing(int bing) {  \n        this.bing = bing;  \n    }  \n      \n}\n```\n下面是主入口方法进行测试：\n``` java\npackage thread;  \npublic class Test {  \n    public static void main(String[] args) {  \n          \n        //创建饼的实例  \n        Bing b = new Bing();  \n        //创建同步的吃饼和烙饼实例  \n        GongNeng g = new GongNeng(b);  \n        //创建线程两个消费者两个生产者  \n        ChuShi c1 = new ChuShi(g);  \n        ChuShi c2 = new ChuShi(g);  \n        XiaoFei x1 = new XiaoFei(g);  \n        XiaoFei x2 = new XiaoFei(g);  \n          \n        //启动线程  \n        c1.start();  \n        c2.start();  \n        x1.start();  \n        x2.start();  \n    }  \n} \n```\n 这个例子就模拟了生产与消费的问题。\n","source":"_posts/Java多线程实现生产者与消费者.md","raw":"---\ntitle: Java多线程实现生产者与消费者\ndate: 2016-11-27 20:32:32\ntags: 多线程\ncategories: java\n---\n生产者与消费者问题是指创建一组“生产者”线程和一组“消费者”线程，让他们进行同步互斥的运行，生产者生产一个产品，消费者就消费掉一个产品，下面我就用Java的多线程来实现这个课题。<!--more-->本例子的ChuShi代表生产者，XiaoFei代表消费者。首先是生产者厨师的代码：\n``` java\npackage thread;  \npublic class ChuShi extends Thread{  \n      \n    private GongNeng g;  \n    public ChuShi(GongNeng g){    \n        this.g = g;  \n    }  \n      \n    public void run(){  \n        for(;;){  \n              \n            g.lao();  \n              \n        }  \n    }  \n} \n```\n然后是消费者的代码：  \n``` java\npackage thread;  \npublic class XiaoFei extends Thread{  \n      \n    private GongNeng g;  \n      \n    public XiaoFei(GongNeng g){  \n          \n        this.g = g;  \n          \n    }  \n      \n    public void run(){  \n        for(;;){  \n                  \n            g.chi();  \n              \n        }  \n    }  \n}\n```\n接着是封装了生产者的生产方法和消费者的消费方法的类，该类中的方法要使用synchronized关键字，就可以使run方法同步，也就是说，对于同一个Java类的对象实例，run方法同时只能被一个线程调用，并当前的run执行完后，才能被其他的线程调用。需要注意的是每个线程run()方法调用的synchronized修饰的方法必须是一个实例的方法才能保证同步，所以这个里将生产者和消费者的功能封装在一个实例中，在将他们的实例分别传给生产者和消费者，这样他们就能够同步了，下面是同步的方法代码：\n``` java\npackage thread;  \npublic class GongNeng {  \n    private Bing b;  \n      \n    public GongNeng(Bing b){      \n        this.b = b;   \n    }  \n      \n    public synchronized void lao(){  \n          \n        if(b.getBing()<10){  \n              \n            try {  \n                Thread.sleep(1500);  \n            } catch (InterruptedException e) {  \n                // TODO Auto-generated catch block  \n                e.printStackTrace();  \n            }  \n              \n            System.out.println(Thread.currentThread()+  \n                  \n            \":厨师烙了一张饼，盘里还剩\"+(b.getBing()+1)+\"张饼\");  \n              \n            b.setBing(b.getBing()+1);  \n        }  \n    }  \n      \n    public synchronized void chi(){  \n        if(b.getBing()>0){  \n              \n            try {  \n                Thread.sleep(2000);  \n            } catch (InterruptedException e) {  \n                // TODO Auto-generated catch block  \n                e.printStackTrace();  \n            }  \n            System.out.println(Thread.currentThread()+  \n                  \n            \":消费者吃了一张饼，盘里还剩\"+(b.getBing()-1)+\"张饼\");  \n              \n            b.setBing(b.getBing()-1);  \n              \n        }  \n    }  \n} \n```\n还有他们对一个消费品进行同步的操作，在这里我们用的是饼：\n``` java\npackage thread;  \npublic class Bing {  \n    private int bing = 10;  \n    public int getBing() {  \n        return bing;  \n    }  \n    public void setBing(int bing) {  \n        this.bing = bing;  \n    }  \n      \n}\n```\n下面是主入口方法进行测试：\n``` java\npackage thread;  \npublic class Test {  \n    public static void main(String[] args) {  \n          \n        //创建饼的实例  \n        Bing b = new Bing();  \n        //创建同步的吃饼和烙饼实例  \n        GongNeng g = new GongNeng(b);  \n        //创建线程两个消费者两个生产者  \n        ChuShi c1 = new ChuShi(g);  \n        ChuShi c2 = new ChuShi(g);  \n        XiaoFei x1 = new XiaoFei(g);  \n        XiaoFei x2 = new XiaoFei(g);  \n          \n        //启动线程  \n        c1.start();  \n        c2.start();  \n        x1.start();  \n        x2.start();  \n    }  \n} \n```\n 这个例子就模拟了生产与消费的问题。\n","slug":"Java多线程实现生产者与消费者","published":1,"updated":"2016-11-27T12:41:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw6kw3t00000p5s6hf0l8vbv","content":"<p>生产者与消费者问题是指创建一组“生产者”线程和一组“消费者”线程，让他们进行同步互斥的运行，生产者生产一个产品，消费者就消费掉一个产品，下面我就用Java的多线程来实现这个课题。<a id=\"more\"></a>本例子的ChuShi代表生产者，XiaoFei代表消费者。首先是生产者厨师的代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> thread;  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChuShi</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"keyword\">private</span> GongNeng g;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ChuShi</span><span class=\"params\">(GongNeng g)</span></span>&#123;    </div><div class=\"line\">        <span class=\"keyword\">this</span>.g = g;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">for</span>(;;)&#123;  </div><div class=\"line\">              </div><div class=\"line\">            g.lao();  </div><div class=\"line\">              </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然后是消费者的代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> thread;  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XiaoFei</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"keyword\">private</span> GongNeng g;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">XiaoFei</span><span class=\"params\">(GongNeng g)</span></span>&#123;  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"keyword\">this</span>.g = g;  </div><div class=\"line\">          </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">for</span>(;;)&#123;  </div><div class=\"line\">                  </div><div class=\"line\">            g.chi();  </div><div class=\"line\">              </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>接着是封装了生产者的生产方法和消费者的消费方法的类，该类中的方法要使用synchronized关键字，就可以使run方法同步，也就是说，对于同一个Java类的对象实例，run方法同时只能被一个线程调用，并当前的run执行完后，才能被其他的线程调用。需要注意的是每个线程run()方法调用的synchronized修饰的方法必须是一个实例的方法才能保证同步，所以这个里将生产者和消费者的功能封装在一个实例中，在将他们的实例分别传给生产者和消费者，这样他们就能够同步了，下面是同步的方法代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> thread;  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GongNeng</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">private</span> Bing b;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">GongNeng</span><span class=\"params\">(Bing b)</span></span>&#123;      </div><div class=\"line\">        <span class=\"keyword\">this</span>.b = b;   </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">lao</span><span class=\"params\">()</span></span>&#123;  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"keyword\">if</span>(b.getBing()&lt;<span class=\"number\">10</span>)&#123;  </div><div class=\"line\">              </div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">                Thread.sleep(<span class=\"number\">1500</span>);  </div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;  </div><div class=\"line\">                <span class=\"comment\">// TODO Auto-generated catch block  </span></div><div class=\"line\">                e.printStackTrace();  </div><div class=\"line\">            &#125;  </div><div class=\"line\">              </div><div class=\"line\">            System.out.println(Thread.currentThread()+  </div><div class=\"line\">                  </div><div class=\"line\">            <span class=\"string\">\":厨师烙了一张饼，盘里还剩\"</span>+(b.getBing()+<span class=\"number\">1</span>)+<span class=\"string\">\"张饼\"</span>);  </div><div class=\"line\">              </div><div class=\"line\">            b.setBing(b.getBing()+<span class=\"number\">1</span>);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">chi</span><span class=\"params\">()</span></span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span>(b.getBing()&gt;<span class=\"number\">0</span>)&#123;  </div><div class=\"line\">              </div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">                Thread.sleep(<span class=\"number\">2000</span>);  </div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;  </div><div class=\"line\">                <span class=\"comment\">// TODO Auto-generated catch block  </span></div><div class=\"line\">                e.printStackTrace();  </div><div class=\"line\">            &#125;  </div><div class=\"line\">            System.out.println(Thread.currentThread()+  </div><div class=\"line\">                  </div><div class=\"line\">            <span class=\"string\">\":消费者吃了一张饼，盘里还剩\"</span>+(b.getBing()-<span class=\"number\">1</span>)+<span class=\"string\">\"张饼\"</span>);  </div><div class=\"line\">              </div><div class=\"line\">            b.setBing(b.getBing()-<span class=\"number\">1</span>);  </div><div class=\"line\">              </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>还有他们对一个消费品进行同步的操作，在这里我们用的是饼：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> thread;  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bing</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> bing = <span class=\"number\">10</span>;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getBing</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span> bing;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setBing</span><span class=\"params\">(<span class=\"keyword\">int</span> bing)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">this</span>.bing = bing;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>下面是主入口方法进行测试：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> thread;  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"comment\">//创建饼的实例  </span></div><div class=\"line\">        Bing b = <span class=\"keyword\">new</span> Bing();  </div><div class=\"line\">        <span class=\"comment\">//创建同步的吃饼和烙饼实例  </span></div><div class=\"line\">        GongNeng g = <span class=\"keyword\">new</span> GongNeng(b);  </div><div class=\"line\">        <span class=\"comment\">//创建线程两个消费者两个生产者  </span></div><div class=\"line\">        ChuShi c1 = <span class=\"keyword\">new</span> ChuShi(g);  </div><div class=\"line\">        ChuShi c2 = <span class=\"keyword\">new</span> ChuShi(g);  </div><div class=\"line\">        XiaoFei x1 = <span class=\"keyword\">new</span> XiaoFei(g);  </div><div class=\"line\">        XiaoFei x2 = <span class=\"keyword\">new</span> XiaoFei(g);  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"comment\">//启动线程  </span></div><div class=\"line\">        c1.start();  </div><div class=\"line\">        c2.start();  </div><div class=\"line\">        x1.start();  </div><div class=\"line\">        x2.start();  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p> 这个例子就模拟了生产与消费的问题。</p>\n","excerpt":"<p>生产者与消费者问题是指创建一组“生产者”线程和一组“消费者”线程，让他们进行同步互斥的运行，生产者生产一个产品，消费者就消费掉一个产品，下面我就用Java的多线程来实现这个课题。","more":"本例子的ChuShi代表生产者，XiaoFei代表消费者。首先是生产者厨师的代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> thread;  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChuShi</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"keyword\">private</span> GongNeng g;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ChuShi</span><span class=\"params\">(GongNeng g)</span></span>&#123;    </div><div class=\"line\">        <span class=\"keyword\">this</span>.g = g;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">for</span>(;;)&#123;  </div><div class=\"line\">              </div><div class=\"line\">            g.lao();  </div><div class=\"line\">              </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然后是消费者的代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> thread;  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XiaoFei</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"keyword\">private</span> GongNeng g;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">XiaoFei</span><span class=\"params\">(GongNeng g)</span></span>&#123;  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"keyword\">this</span>.g = g;  </div><div class=\"line\">          </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">for</span>(;;)&#123;  </div><div class=\"line\">                  </div><div class=\"line\">            g.chi();  </div><div class=\"line\">              </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>接着是封装了生产者的生产方法和消费者的消费方法的类，该类中的方法要使用synchronized关键字，就可以使run方法同步，也就是说，对于同一个Java类的对象实例，run方法同时只能被一个线程调用，并当前的run执行完后，才能被其他的线程调用。需要注意的是每个线程run()方法调用的synchronized修饰的方法必须是一个实例的方法才能保证同步，所以这个里将生产者和消费者的功能封装在一个实例中，在将他们的实例分别传给生产者和消费者，这样他们就能够同步了，下面是同步的方法代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> thread;  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GongNeng</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">private</span> Bing b;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">GongNeng</span><span class=\"params\">(Bing b)</span></span>&#123;      </div><div class=\"line\">        <span class=\"keyword\">this</span>.b = b;   </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">lao</span><span class=\"params\">()</span></span>&#123;  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"keyword\">if</span>(b.getBing()&lt;<span class=\"number\">10</span>)&#123;  </div><div class=\"line\">              </div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">                Thread.sleep(<span class=\"number\">1500</span>);  </div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;  </div><div class=\"line\">                <span class=\"comment\">// TODO Auto-generated catch block  </span></div><div class=\"line\">                e.printStackTrace();  </div><div class=\"line\">            &#125;  </div><div class=\"line\">              </div><div class=\"line\">            System.out.println(Thread.currentThread()+  </div><div class=\"line\">                  </div><div class=\"line\">            <span class=\"string\">\":厨师烙了一张饼，盘里还剩\"</span>+(b.getBing()+<span class=\"number\">1</span>)+<span class=\"string\">\"张饼\"</span>);  </div><div class=\"line\">              </div><div class=\"line\">            b.setBing(b.getBing()+<span class=\"number\">1</span>);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">chi</span><span class=\"params\">()</span></span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span>(b.getBing()&gt;<span class=\"number\">0</span>)&#123;  </div><div class=\"line\">              </div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">                Thread.sleep(<span class=\"number\">2000</span>);  </div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;  </div><div class=\"line\">                <span class=\"comment\">// TODO Auto-generated catch block  </span></div><div class=\"line\">                e.printStackTrace();  </div><div class=\"line\">            &#125;  </div><div class=\"line\">            System.out.println(Thread.currentThread()+  </div><div class=\"line\">                  </div><div class=\"line\">            <span class=\"string\">\":消费者吃了一张饼，盘里还剩\"</span>+(b.getBing()-<span class=\"number\">1</span>)+<span class=\"string\">\"张饼\"</span>);  </div><div class=\"line\">              </div><div class=\"line\">            b.setBing(b.getBing()-<span class=\"number\">1</span>);  </div><div class=\"line\">              </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>还有他们对一个消费品进行同步的操作，在这里我们用的是饼：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> thread;  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bing</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> bing = <span class=\"number\">10</span>;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getBing</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span> bing;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setBing</span><span class=\"params\">(<span class=\"keyword\">int</span> bing)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">this</span>.bing = bing;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>下面是主入口方法进行测试：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> thread;  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"comment\">//创建饼的实例  </span></div><div class=\"line\">        Bing b = <span class=\"keyword\">new</span> Bing();  </div><div class=\"line\">        <span class=\"comment\">//创建同步的吃饼和烙饼实例  </span></div><div class=\"line\">        GongNeng g = <span class=\"keyword\">new</span> GongNeng(b);  </div><div class=\"line\">        <span class=\"comment\">//创建线程两个消费者两个生产者  </span></div><div class=\"line\">        ChuShi c1 = <span class=\"keyword\">new</span> ChuShi(g);  </div><div class=\"line\">        ChuShi c2 = <span class=\"keyword\">new</span> ChuShi(g);  </div><div class=\"line\">        XiaoFei x1 = <span class=\"keyword\">new</span> XiaoFei(g);  </div><div class=\"line\">        XiaoFei x2 = <span class=\"keyword\">new</span> XiaoFei(g);  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"comment\">//启动线程  </span></div><div class=\"line\">        c1.start();  </div><div class=\"line\">        c2.start();  </div><div class=\"line\">        x1.start();  </div><div class=\"line\">        x2.start();  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p> 这个例子就模拟了生产与消费的问题。</p>"},{"title":"ExtJS初级教程之ExtJS Grid(一)","date":"2016-11-27T14:45:35.000Z","_content":"我们在很多网站都能看到表格的影子，而ExtJS Grid在页面表现上又非常强大，下面我们就创建我们的第一个表格。<!--more-->\n在ExtJS中我们是通过Ext.grid.ColumnModel这个类来描述列属性的。下面我们建立一个ColumnModel对象。\n``` javascript\nvar cm = new Ext.grid.ColumnModel([  \n {header:'产品编号',dataIndex:'product_id'},  \n {header:'产品名称',dataIndex:'product_name'},  \n {header:'产品价格',dataIndex:'product_price'}  \n]);\n```\n接下来我们定义表格中要显示的数据。\n``` javascript\nvar data = [  \n    ['01','电脑','4800'],  \n    ['02','手机','2100'],  \n    ['03','相机','1800'],  \n    ['04','衣服','220']  \n];  \n```\n数据中的列是和定义表格列属性时是相对应的。下面我们要创建一个Store对象来讲data装载到stroe对象中。\n``` javascript\nvar store = new Ext.data.Store({  \n proxy:new Ext.data.MemoryProxy(data),  \n reader:new Ext.data.ArrayReader({},[  \n       {name:'product_id'},  \n       {name:'product_name'},  \n       {name:'product_price'}  \n ])  \n});  \n```\nproxy属性是一个代理类对象，该对象可以封装一个静态数组。ArrayReader对象可以将数组解析，但是要使用mapping属性来进行映射。\n``` javascript\nvar store = new Ext.data.Store({  \n proxy:new Ext.data.MemoryProxy(data),  \n reader:new Ext.data.ArrayReader({},[  \n       {name:'product_id',mapping:0},  \n       {name:'product_name',mapping:1},  \n       {name:'product_price',mapping:2}  \n ])  \n});  \nstore.load();  \n```\n接着就是创建一个GridPanel对象来装置表格并显示在页面上。\n``` javascript\nvar gridPanel = new Ext.grid.GridPanel( {  \n autoHeigth : false,  \n renderTo : 'grid',  \n store : store,  \n cm : cm  \n});  \n```\n这样，我们第一个静态表格就完成了。下面是完整的代码：\n``` javascript\n\nExt.onReady(function() {  \n var cm = new Ext.grid.ColumnModel( [ {  \n  header : 'id',  \n  dataIndex : 'product_id'  \n }, {  \n  header : 'name',  \n  dataIndex : 'product_name'  \n }, {  \n  header : 'price',  \n  dataIndex : 'product_price'  \n } ]);  \n var data = [ [ '01', 'computer', '4800' ], [ '02', 'phone', '2100' ],  \n   [ '03', 'ffff', '1800' ], [ '04', 'closes', '220' ] ];  \n var store = new Ext.data.Store( {  \n  proxy : new Ext.data.MemoryProxy(data),  \n  reader : new Ext.data.ArrayReader( {}, [ {  \n   name : 'product_id',  \n   mapping : 0  \n  }, {  \n   name : 'product_name',  \n   mapping : 1  \n  }, {  \n   name : 'product_price',  \n   mapping : 2  \n  } ])  \n });  \n store.load();  \n var gridPanel = new Ext.grid.GridPanel( {  \n  autoHeigth : false,  \n  renderTo : 'grid',  \n  store : store,  \n  cm : cm  \n });  \n});  \n```\n通过这个简单的代码例子我们也大概了解了创建一个Grid的基本流程了，下面我们简单介绍一下Grid的一些其他的简单属性。\n\n阻止移动列和改变列的宽度：\n``` javascript\nvar gridPanel = new Ext.grid.GridPanel( {         \n    autoHeigth : true,    \n    renderTo : 'grid',    \n    enableColumnMove:false,   \n    enableColumnResize:false,     \n    store : store,    \n    cm : cm   \n}); \n```\n代码中enableColumnMove:false设置的是阻止列的移动，enableColumnResize:false设置的是让列的宽度禁止改变。\n\n按列排序：\n``` javascript\nvar cm = new Ext.grid.ColumnModel( [ {                \n        header : 'id',        \n        dataIndex : 'product_id'          \n    }, {              \n        header : 'name',          \n        dataIndex : 'product_name',       \n        sortable:true         \n    }, {              \n        header : 'price',         \n        dataIndex : 'product_price'       \n    } ]); \n```\n在该列设置sortable：true之后，该列就拥有了排序的功能。\n\n有很多时候我们需要在表格的每列前加一个复选框，用来标记选中的，进行操作，下面我们就加入复选框试试。首先，我们要创建复选框对象，这时我们要用到Ext.grid.CheckboxSelectionModel这个类。\n``` javascript\nvar sm = new Ext.grid.CheckboxSelectionModel();           \nvar cm = new Ext.grid.ColumnModel( [              \n              \n   {              \n    header : 'id',        \n    dataIndex : 'product_id',         \n    sortable:true         \n}, {              \n    header : 'name',          \n    dataIndex : 'product_name',       \n    sortable:true  \n}, {      \n    header : 'price',  \n    dataIndex : 'product_price',  \n    sortable:true  \n} ]);  \n```\n创建完复选框对象后，我们还要将这个复选框对象添加到ColumnModel对象中去。接着还要将复选框对象添加到Panel上:\n``` javascript\nvar gridPanel = new Ext.grid.GridPanel( {     \n    autoHeigth : true,  \n    renderTo : 'grid',  \n    enableColumnMove:false,  \n    enableColumnResize:false,  \n    store : store,  \n    cm : cm,  \n    sm:sm  \n});  \n```\n下面我们做一个非常频繁用到的功能：将复选框选中的行删除。首先要在页面添加一个删除按钮。\n``` html\n<input type = \"button\" value = \"删除选中行\" onclick = \"deleteCheckbox()\" style = \"margin-top:20px\"/>  \n```\n这个JavaScript函数就是页面按钮要调用的函数：\n``` javascript\nfunction deleteCheckbox(){                \n     //从后往前扫描             \n     for(var i = store.getCount();i>=0;i--){           \n        if(mm.isSelected(i)){         \n                //删除当前行  \n                store.removeAt(i);  \n            }  \n     }        \n     //重新加载表数据        \n     gridPanel.reconfigure(store,cm);         \n  }; \n```\n这样一个主要功能都健全的Grid就完成了，今天我就写这些，下次我将继续ExtJS Grid的分页和编辑表格的研究。","source":"_posts/Grid-1.md","raw":"---\ntitle: ExtJS初级教程之ExtJS Grid(一)\ndate: 2016-11-27 22:45:35\ntags: ExtJS\ncategories: javascript\n---\n我们在很多网站都能看到表格的影子，而ExtJS Grid在页面表现上又非常强大，下面我们就创建我们的第一个表格。<!--more-->\n在ExtJS中我们是通过Ext.grid.ColumnModel这个类来描述列属性的。下面我们建立一个ColumnModel对象。\n``` javascript\nvar cm = new Ext.grid.ColumnModel([  \n {header:'产品编号',dataIndex:'product_id'},  \n {header:'产品名称',dataIndex:'product_name'},  \n {header:'产品价格',dataIndex:'product_price'}  \n]);\n```\n接下来我们定义表格中要显示的数据。\n``` javascript\nvar data = [  \n    ['01','电脑','4800'],  \n    ['02','手机','2100'],  \n    ['03','相机','1800'],  \n    ['04','衣服','220']  \n];  \n```\n数据中的列是和定义表格列属性时是相对应的。下面我们要创建一个Store对象来讲data装载到stroe对象中。\n``` javascript\nvar store = new Ext.data.Store({  \n proxy:new Ext.data.MemoryProxy(data),  \n reader:new Ext.data.ArrayReader({},[  \n       {name:'product_id'},  \n       {name:'product_name'},  \n       {name:'product_price'}  \n ])  \n});  \n```\nproxy属性是一个代理类对象，该对象可以封装一个静态数组。ArrayReader对象可以将数组解析，但是要使用mapping属性来进行映射。\n``` javascript\nvar store = new Ext.data.Store({  \n proxy:new Ext.data.MemoryProxy(data),  \n reader:new Ext.data.ArrayReader({},[  \n       {name:'product_id',mapping:0},  \n       {name:'product_name',mapping:1},  \n       {name:'product_price',mapping:2}  \n ])  \n});  \nstore.load();  \n```\n接着就是创建一个GridPanel对象来装置表格并显示在页面上。\n``` javascript\nvar gridPanel = new Ext.grid.GridPanel( {  \n autoHeigth : false,  \n renderTo : 'grid',  \n store : store,  \n cm : cm  \n});  \n```\n这样，我们第一个静态表格就完成了。下面是完整的代码：\n``` javascript\n\nExt.onReady(function() {  \n var cm = new Ext.grid.ColumnModel( [ {  \n  header : 'id',  \n  dataIndex : 'product_id'  \n }, {  \n  header : 'name',  \n  dataIndex : 'product_name'  \n }, {  \n  header : 'price',  \n  dataIndex : 'product_price'  \n } ]);  \n var data = [ [ '01', 'computer', '4800' ], [ '02', 'phone', '2100' ],  \n   [ '03', 'ffff', '1800' ], [ '04', 'closes', '220' ] ];  \n var store = new Ext.data.Store( {  \n  proxy : new Ext.data.MemoryProxy(data),  \n  reader : new Ext.data.ArrayReader( {}, [ {  \n   name : 'product_id',  \n   mapping : 0  \n  }, {  \n   name : 'product_name',  \n   mapping : 1  \n  }, {  \n   name : 'product_price',  \n   mapping : 2  \n  } ])  \n });  \n store.load();  \n var gridPanel = new Ext.grid.GridPanel( {  \n  autoHeigth : false,  \n  renderTo : 'grid',  \n  store : store,  \n  cm : cm  \n });  \n});  \n```\n通过这个简单的代码例子我们也大概了解了创建一个Grid的基本流程了，下面我们简单介绍一下Grid的一些其他的简单属性。\n\n阻止移动列和改变列的宽度：\n``` javascript\nvar gridPanel = new Ext.grid.GridPanel( {         \n    autoHeigth : true,    \n    renderTo : 'grid',    \n    enableColumnMove:false,   \n    enableColumnResize:false,     \n    store : store,    \n    cm : cm   \n}); \n```\n代码中enableColumnMove:false设置的是阻止列的移动，enableColumnResize:false设置的是让列的宽度禁止改变。\n\n按列排序：\n``` javascript\nvar cm = new Ext.grid.ColumnModel( [ {                \n        header : 'id',        \n        dataIndex : 'product_id'          \n    }, {              \n        header : 'name',          \n        dataIndex : 'product_name',       \n        sortable:true         \n    }, {              \n        header : 'price',         \n        dataIndex : 'product_price'       \n    } ]); \n```\n在该列设置sortable：true之后，该列就拥有了排序的功能。\n\n有很多时候我们需要在表格的每列前加一个复选框，用来标记选中的，进行操作，下面我们就加入复选框试试。首先，我们要创建复选框对象，这时我们要用到Ext.grid.CheckboxSelectionModel这个类。\n``` javascript\nvar sm = new Ext.grid.CheckboxSelectionModel();           \nvar cm = new Ext.grid.ColumnModel( [              \n              \n   {              \n    header : 'id',        \n    dataIndex : 'product_id',         \n    sortable:true         \n}, {              \n    header : 'name',          \n    dataIndex : 'product_name',       \n    sortable:true  \n}, {      \n    header : 'price',  \n    dataIndex : 'product_price',  \n    sortable:true  \n} ]);  \n```\n创建完复选框对象后，我们还要将这个复选框对象添加到ColumnModel对象中去。接着还要将复选框对象添加到Panel上:\n``` javascript\nvar gridPanel = new Ext.grid.GridPanel( {     \n    autoHeigth : true,  \n    renderTo : 'grid',  \n    enableColumnMove:false,  \n    enableColumnResize:false,  \n    store : store,  \n    cm : cm,  \n    sm:sm  \n});  \n```\n下面我们做一个非常频繁用到的功能：将复选框选中的行删除。首先要在页面添加一个删除按钮。\n``` html\n<input type = \"button\" value = \"删除选中行\" onclick = \"deleteCheckbox()\" style = \"margin-top:20px\"/>  \n```\n这个JavaScript函数就是页面按钮要调用的函数：\n``` javascript\nfunction deleteCheckbox(){                \n     //从后往前扫描             \n     for(var i = store.getCount();i>=0;i--){           \n        if(mm.isSelected(i)){         \n                //删除当前行  \n                store.removeAt(i);  \n            }  \n     }        \n     //重新加载表数据        \n     gridPanel.reconfigure(store,cm);         \n  }; \n```\n这样一个主要功能都健全的Grid就完成了，今天我就写这些，下次我将继续ExtJS Grid的分页和编辑表格的研究。","slug":"Grid-1","published":1,"updated":"2016-11-27T14:55:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw6kw3t90002p5s6emmsca72","content":"<p>我们在很多网站都能看到表格的影子，而ExtJS Grid在页面表现上又非常强大，下面我们就创建我们的第一个表格。<a id=\"more\"></a><br>在ExtJS中我们是通过Ext.grid.ColumnModel这个类来描述列属性的。下面我们建立一个ColumnModel对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> cm = <span class=\"keyword\">new</span> Ext.grid.ColumnModel([  </div><div class=\"line\"> &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品编号'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_id'</span>&#125;,  </div><div class=\"line\"> &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品名称'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_name'</span>&#125;,  </div><div class=\"line\"> &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品价格'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_price'</span>&#125;  </div><div class=\"line\">]);</div></pre></td></tr></table></figure></p>\n<p>接下来我们定义表格中要显示的数据。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> data = [  </div><div class=\"line\">    [<span class=\"string\">'01'</span>,<span class=\"string\">'电脑'</span>,<span class=\"string\">'4800'</span>],  </div><div class=\"line\">    [<span class=\"string\">'02'</span>,<span class=\"string\">'手机'</span>,<span class=\"string\">'2100'</span>],  </div><div class=\"line\">    [<span class=\"string\">'03'</span>,<span class=\"string\">'相机'</span>,<span class=\"string\">'1800'</span>],  </div><div class=\"line\">    [<span class=\"string\">'04'</span>,<span class=\"string\">'衣服'</span>,<span class=\"string\">'220'</span>]  </div><div class=\"line\">];</div></pre></td></tr></table></figure></p>\n<p>数据中的列是和定义表格列属性时是相对应的。下面我们要创建一个Store对象来讲data装载到stroe对象中。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> store = <span class=\"keyword\">new</span> Ext.data.Store(&#123;  </div><div class=\"line\"> <span class=\"attr\">proxy</span>:<span class=\"keyword\">new</span> Ext.data.MemoryProxy(data),  </div><div class=\"line\"> <span class=\"attr\">reader</span>:<span class=\"keyword\">new</span> Ext.data.ArrayReader(&#123;&#125;,[  </div><div class=\"line\">       &#123;<span class=\"attr\">name</span>:<span class=\"string\">'product_id'</span>&#125;,  </div><div class=\"line\">       &#123;<span class=\"attr\">name</span>:<span class=\"string\">'product_name'</span>&#125;,  </div><div class=\"line\">       &#123;<span class=\"attr\">name</span>:<span class=\"string\">'product_price'</span>&#125;  </div><div class=\"line\"> ])  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>proxy属性是一个代理类对象，该对象可以封装一个静态数组。ArrayReader对象可以将数组解析，但是要使用mapping属性来进行映射。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> store = <span class=\"keyword\">new</span> Ext.data.Store(&#123;  </div><div class=\"line\"> <span class=\"attr\">proxy</span>:<span class=\"keyword\">new</span> Ext.data.MemoryProxy(data),  </div><div class=\"line\"> <span class=\"attr\">reader</span>:<span class=\"keyword\">new</span> Ext.data.ArrayReader(&#123;&#125;,[  </div><div class=\"line\">       &#123;<span class=\"attr\">name</span>:<span class=\"string\">'product_id'</span>,<span class=\"attr\">mapping</span>:<span class=\"number\">0</span>&#125;,  </div><div class=\"line\">       &#123;<span class=\"attr\">name</span>:<span class=\"string\">'product_name'</span>,<span class=\"attr\">mapping</span>:<span class=\"number\">1</span>&#125;,  </div><div class=\"line\">       &#123;<span class=\"attr\">name</span>:<span class=\"string\">'product_price'</span>,<span class=\"attr\">mapping</span>:<span class=\"number\">2</span>&#125;  </div><div class=\"line\"> ])  </div><div class=\"line\">&#125;);  </div><div class=\"line\">store.load();</div></pre></td></tr></table></figure></p>\n<p>接着就是创建一个GridPanel对象来装置表格并显示在页面上。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> gridPanel = <span class=\"keyword\">new</span> Ext.grid.GridPanel( &#123;  </div><div class=\"line\"> <span class=\"attr\">autoHeigth</span> : <span class=\"literal\">false</span>,  </div><div class=\"line\"> <span class=\"attr\">renderTo</span> : <span class=\"string\">'grid'</span>,  </div><div class=\"line\"> <span class=\"attr\">store</span> : store,  </div><div class=\"line\"> <span class=\"attr\">cm</span> : cm  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>这样，我们第一个静态表格就完成了。下面是完整的代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Ext.onReady(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\"> <span class=\"keyword\">var</span> cm = <span class=\"keyword\">new</span> Ext.grid.ColumnModel( [ &#123;  </div><div class=\"line\">  <span class=\"attr\">header</span> : <span class=\"string\">'id'</span>,  </div><div class=\"line\">  <span class=\"attr\">dataIndex</span> : <span class=\"string\">'product_id'</span>  </div><div class=\"line\"> &#125;, &#123;  </div><div class=\"line\">  <span class=\"attr\">header</span> : <span class=\"string\">'name'</span>,  </div><div class=\"line\">  <span class=\"attr\">dataIndex</span> : <span class=\"string\">'product_name'</span>  </div><div class=\"line\"> &#125;, &#123;  </div><div class=\"line\">  <span class=\"attr\">header</span> : <span class=\"string\">'price'</span>,  </div><div class=\"line\">  <span class=\"attr\">dataIndex</span> : <span class=\"string\">'product_price'</span>  </div><div class=\"line\"> &#125; ]);  </div><div class=\"line\"> <span class=\"keyword\">var</span> data = [ [ <span class=\"string\">'01'</span>, <span class=\"string\">'computer'</span>, <span class=\"string\">'4800'</span> ], [ <span class=\"string\">'02'</span>, <span class=\"string\">'phone'</span>, <span class=\"string\">'2100'</span> ],  </div><div class=\"line\">   [ <span class=\"string\">'03'</span>, <span class=\"string\">'ffff'</span>, <span class=\"string\">'1800'</span> ], [ <span class=\"string\">'04'</span>, <span class=\"string\">'closes'</span>, <span class=\"string\">'220'</span> ] ];  </div><div class=\"line\"> <span class=\"keyword\">var</span> store = <span class=\"keyword\">new</span> Ext.data.Store( &#123;  </div><div class=\"line\">  <span class=\"attr\">proxy</span> : <span class=\"keyword\">new</span> Ext.data.MemoryProxy(data),  </div><div class=\"line\">  <span class=\"attr\">reader</span> : <span class=\"keyword\">new</span> Ext.data.ArrayReader( &#123;&#125;, [ &#123;  </div><div class=\"line\">   <span class=\"attr\">name</span> : <span class=\"string\">'product_id'</span>,  </div><div class=\"line\">   <span class=\"attr\">mapping</span> : <span class=\"number\">0</span>  </div><div class=\"line\">  &#125;, &#123;  </div><div class=\"line\">   <span class=\"attr\">name</span> : <span class=\"string\">'product_name'</span>,  </div><div class=\"line\">   <span class=\"attr\">mapping</span> : <span class=\"number\">1</span>  </div><div class=\"line\">  &#125;, &#123;  </div><div class=\"line\">   <span class=\"attr\">name</span> : <span class=\"string\">'product_price'</span>,  </div><div class=\"line\">   <span class=\"attr\">mapping</span> : <span class=\"number\">2</span>  </div><div class=\"line\">  &#125; ])  </div><div class=\"line\"> &#125;);  </div><div class=\"line\"> store.load();  </div><div class=\"line\"> <span class=\"keyword\">var</span> gridPanel = <span class=\"keyword\">new</span> Ext.grid.GridPanel( &#123;  </div><div class=\"line\">  <span class=\"attr\">autoHeigth</span> : <span class=\"literal\">false</span>,  </div><div class=\"line\">  <span class=\"attr\">renderTo</span> : <span class=\"string\">'grid'</span>,  </div><div class=\"line\">  <span class=\"attr\">store</span> : store,  </div><div class=\"line\">  <span class=\"attr\">cm</span> : cm  </div><div class=\"line\"> &#125;);  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>通过这个简单的代码例子我们也大概了解了创建一个Grid的基本流程了，下面我们简单介绍一下Grid的一些其他的简单属性。</p>\n<p>阻止移动列和改变列的宽度：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> gridPanel = <span class=\"keyword\">new</span> Ext.grid.GridPanel( &#123;         </div><div class=\"line\">    <span class=\"attr\">autoHeigth</span> : <span class=\"literal\">true</span>,    </div><div class=\"line\">    <span class=\"attr\">renderTo</span> : <span class=\"string\">'grid'</span>,    </div><div class=\"line\">    <span class=\"attr\">enableColumnMove</span>:<span class=\"literal\">false</span>,   </div><div class=\"line\">    <span class=\"attr\">enableColumnResize</span>:<span class=\"literal\">false</span>,     </div><div class=\"line\">    <span class=\"attr\">store</span> : store,    </div><div class=\"line\">    <span class=\"attr\">cm</span> : cm   </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>代码中enableColumnMove:false设置的是阻止列的移动，enableColumnResize:false设置的是让列的宽度禁止改变。</p>\n<p>按列排序：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> cm = <span class=\"keyword\">new</span> Ext.grid.ColumnModel( [ &#123;                </div><div class=\"line\">        <span class=\"attr\">header</span> : <span class=\"string\">'id'</span>,        </div><div class=\"line\">        <span class=\"attr\">dataIndex</span> : <span class=\"string\">'product_id'</span>          </div><div class=\"line\">    &#125;, &#123;              </div><div class=\"line\">        <span class=\"attr\">header</span> : <span class=\"string\">'name'</span>,          </div><div class=\"line\">        <span class=\"attr\">dataIndex</span> : <span class=\"string\">'product_name'</span>,       </div><div class=\"line\">        <span class=\"attr\">sortable</span>:<span class=\"literal\">true</span>         </div><div class=\"line\">    &#125;, &#123;              </div><div class=\"line\">        <span class=\"attr\">header</span> : <span class=\"string\">'price'</span>,         </div><div class=\"line\">        <span class=\"attr\">dataIndex</span> : <span class=\"string\">'product_price'</span>       </div><div class=\"line\">    &#125; ]);</div></pre></td></tr></table></figure></p>\n<p>在该列设置sortable：true之后，该列就拥有了排序的功能。</p>\n<p>有很多时候我们需要在表格的每列前加一个复选框，用来标记选中的，进行操作，下面我们就加入复选框试试。首先，我们要创建复选框对象，这时我们要用到Ext.grid.CheckboxSelectionModel这个类。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> sm = <span class=\"keyword\">new</span> Ext.grid.CheckboxSelectionModel();           </div><div class=\"line\"><span class=\"keyword\">var</span> cm = <span class=\"keyword\">new</span> Ext.grid.ColumnModel( [              </div><div class=\"line\">              </div><div class=\"line\">   &#123;              </div><div class=\"line\">    <span class=\"attr\">header</span> : <span class=\"string\">'id'</span>,        </div><div class=\"line\">    <span class=\"attr\">dataIndex</span> : <span class=\"string\">'product_id'</span>,         </div><div class=\"line\">    <span class=\"attr\">sortable</span>:<span class=\"literal\">true</span>         </div><div class=\"line\">&#125;, &#123;              </div><div class=\"line\">    <span class=\"attr\">header</span> : <span class=\"string\">'name'</span>,          </div><div class=\"line\">    <span class=\"attr\">dataIndex</span> : <span class=\"string\">'product_name'</span>,       </div><div class=\"line\">    <span class=\"attr\">sortable</span>:<span class=\"literal\">true</span>  </div><div class=\"line\">&#125;, &#123;      </div><div class=\"line\">    <span class=\"attr\">header</span> : <span class=\"string\">'price'</span>,  </div><div class=\"line\">    <span class=\"attr\">dataIndex</span> : <span class=\"string\">'product_price'</span>,  </div><div class=\"line\">    <span class=\"attr\">sortable</span>:<span class=\"literal\">true</span>  </div><div class=\"line\">&#125; ]);</div></pre></td></tr></table></figure></p>\n<p>创建完复选框对象后，我们还要将这个复选框对象添加到ColumnModel对象中去。接着还要将复选框对象添加到Panel上:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> gridPanel = <span class=\"keyword\">new</span> Ext.grid.GridPanel( &#123;     </div><div class=\"line\">    <span class=\"attr\">autoHeigth</span> : <span class=\"literal\">true</span>,  </div><div class=\"line\">    <span class=\"attr\">renderTo</span> : <span class=\"string\">'grid'</span>,  </div><div class=\"line\">    <span class=\"attr\">enableColumnMove</span>:<span class=\"literal\">false</span>,  </div><div class=\"line\">    <span class=\"attr\">enableColumnResize</span>:<span class=\"literal\">false</span>,  </div><div class=\"line\">    <span class=\"attr\">store</span> : store,  </div><div class=\"line\">    <span class=\"attr\">cm</span> : cm,  </div><div class=\"line\">    <span class=\"attr\">sm</span>:sm  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>下面我们做一个非常频繁用到的功能：将复选框选中的行删除。首先要在页面添加一个删除按钮。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span> = <span class=\"string\">\"button\"</span> <span class=\"attr\">value</span> = <span class=\"string\">\"删除选中行\"</span> <span class=\"attr\">onclick</span> = <span class=\"string\">\"deleteCheckbox()\"</span> <span class=\"attr\">style</span> = <span class=\"string\">\"margin-top:20px\"</span>/&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这个JavaScript函数就是页面按钮要调用的函数：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deleteCheckbox</span>(<span class=\"params\"></span>)</span>&#123;                </div><div class=\"line\">     <span class=\"comment\">//从后往前扫描             </span></div><div class=\"line\">     <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = store.getCount();i&gt;=<span class=\"number\">0</span>;i--)&#123;           </div><div class=\"line\">        <span class=\"keyword\">if</span>(mm.isSelected(i))&#123;         </div><div class=\"line\">                <span class=\"comment\">//删除当前行  </span></div><div class=\"line\">                store.removeAt(i);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">     &#125;        </div><div class=\"line\">     <span class=\"comment\">//重新加载表数据        </span></div><div class=\"line\">     gridPanel.reconfigure(store,cm);         </div><div class=\"line\">  &#125;;</div></pre></td></tr></table></figure></p>\n<p>这样一个主要功能都健全的Grid就完成了，今天我就写这些，下次我将继续ExtJS Grid的分页和编辑表格的研究。</p>\n","excerpt":"<p>我们在很多网站都能看到表格的影子，而ExtJS Grid在页面表现上又非常强大，下面我们就创建我们的第一个表格。","more":"<br>在ExtJS中我们是通过Ext.grid.ColumnModel这个类来描述列属性的。下面我们建立一个ColumnModel对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> cm = <span class=\"keyword\">new</span> Ext.grid.ColumnModel([  </div><div class=\"line\"> &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品编号'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_id'</span>&#125;,  </div><div class=\"line\"> &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品名称'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_name'</span>&#125;,  </div><div class=\"line\"> &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品价格'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_price'</span>&#125;  </div><div class=\"line\">]);</div></pre></td></tr></table></figure></p>\n<p>接下来我们定义表格中要显示的数据。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> data = [  </div><div class=\"line\">    [<span class=\"string\">'01'</span>,<span class=\"string\">'电脑'</span>,<span class=\"string\">'4800'</span>],  </div><div class=\"line\">    [<span class=\"string\">'02'</span>,<span class=\"string\">'手机'</span>,<span class=\"string\">'2100'</span>],  </div><div class=\"line\">    [<span class=\"string\">'03'</span>,<span class=\"string\">'相机'</span>,<span class=\"string\">'1800'</span>],  </div><div class=\"line\">    [<span class=\"string\">'04'</span>,<span class=\"string\">'衣服'</span>,<span class=\"string\">'220'</span>]  </div><div class=\"line\">];</div></pre></td></tr></table></figure></p>\n<p>数据中的列是和定义表格列属性时是相对应的。下面我们要创建一个Store对象来讲data装载到stroe对象中。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> store = <span class=\"keyword\">new</span> Ext.data.Store(&#123;  </div><div class=\"line\"> <span class=\"attr\">proxy</span>:<span class=\"keyword\">new</span> Ext.data.MemoryProxy(data),  </div><div class=\"line\"> <span class=\"attr\">reader</span>:<span class=\"keyword\">new</span> Ext.data.ArrayReader(&#123;&#125;,[  </div><div class=\"line\">       &#123;<span class=\"attr\">name</span>:<span class=\"string\">'product_id'</span>&#125;,  </div><div class=\"line\">       &#123;<span class=\"attr\">name</span>:<span class=\"string\">'product_name'</span>&#125;,  </div><div class=\"line\">       &#123;<span class=\"attr\">name</span>:<span class=\"string\">'product_price'</span>&#125;  </div><div class=\"line\"> ])  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>proxy属性是一个代理类对象，该对象可以封装一个静态数组。ArrayReader对象可以将数组解析，但是要使用mapping属性来进行映射。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> store = <span class=\"keyword\">new</span> Ext.data.Store(&#123;  </div><div class=\"line\"> <span class=\"attr\">proxy</span>:<span class=\"keyword\">new</span> Ext.data.MemoryProxy(data),  </div><div class=\"line\"> <span class=\"attr\">reader</span>:<span class=\"keyword\">new</span> Ext.data.ArrayReader(&#123;&#125;,[  </div><div class=\"line\">       &#123;<span class=\"attr\">name</span>:<span class=\"string\">'product_id'</span>,<span class=\"attr\">mapping</span>:<span class=\"number\">0</span>&#125;,  </div><div class=\"line\">       &#123;<span class=\"attr\">name</span>:<span class=\"string\">'product_name'</span>,<span class=\"attr\">mapping</span>:<span class=\"number\">1</span>&#125;,  </div><div class=\"line\">       &#123;<span class=\"attr\">name</span>:<span class=\"string\">'product_price'</span>,<span class=\"attr\">mapping</span>:<span class=\"number\">2</span>&#125;  </div><div class=\"line\"> ])  </div><div class=\"line\">&#125;);  </div><div class=\"line\">store.load();</div></pre></td></tr></table></figure></p>\n<p>接着就是创建一个GridPanel对象来装置表格并显示在页面上。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> gridPanel = <span class=\"keyword\">new</span> Ext.grid.GridPanel( &#123;  </div><div class=\"line\"> <span class=\"attr\">autoHeigth</span> : <span class=\"literal\">false</span>,  </div><div class=\"line\"> <span class=\"attr\">renderTo</span> : <span class=\"string\">'grid'</span>,  </div><div class=\"line\"> <span class=\"attr\">store</span> : store,  </div><div class=\"line\"> <span class=\"attr\">cm</span> : cm  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>这样，我们第一个静态表格就完成了。下面是完整的代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Ext.onReady(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\"> <span class=\"keyword\">var</span> cm = <span class=\"keyword\">new</span> Ext.grid.ColumnModel( [ &#123;  </div><div class=\"line\">  <span class=\"attr\">header</span> : <span class=\"string\">'id'</span>,  </div><div class=\"line\">  <span class=\"attr\">dataIndex</span> : <span class=\"string\">'product_id'</span>  </div><div class=\"line\"> &#125;, &#123;  </div><div class=\"line\">  <span class=\"attr\">header</span> : <span class=\"string\">'name'</span>,  </div><div class=\"line\">  <span class=\"attr\">dataIndex</span> : <span class=\"string\">'product_name'</span>  </div><div class=\"line\"> &#125;, &#123;  </div><div class=\"line\">  <span class=\"attr\">header</span> : <span class=\"string\">'price'</span>,  </div><div class=\"line\">  <span class=\"attr\">dataIndex</span> : <span class=\"string\">'product_price'</span>  </div><div class=\"line\"> &#125; ]);  </div><div class=\"line\"> <span class=\"keyword\">var</span> data = [ [ <span class=\"string\">'01'</span>, <span class=\"string\">'computer'</span>, <span class=\"string\">'4800'</span> ], [ <span class=\"string\">'02'</span>, <span class=\"string\">'phone'</span>, <span class=\"string\">'2100'</span> ],  </div><div class=\"line\">   [ <span class=\"string\">'03'</span>, <span class=\"string\">'ffff'</span>, <span class=\"string\">'1800'</span> ], [ <span class=\"string\">'04'</span>, <span class=\"string\">'closes'</span>, <span class=\"string\">'220'</span> ] ];  </div><div class=\"line\"> <span class=\"keyword\">var</span> store = <span class=\"keyword\">new</span> Ext.data.Store( &#123;  </div><div class=\"line\">  <span class=\"attr\">proxy</span> : <span class=\"keyword\">new</span> Ext.data.MemoryProxy(data),  </div><div class=\"line\">  <span class=\"attr\">reader</span> : <span class=\"keyword\">new</span> Ext.data.ArrayReader( &#123;&#125;, [ &#123;  </div><div class=\"line\">   <span class=\"attr\">name</span> : <span class=\"string\">'product_id'</span>,  </div><div class=\"line\">   <span class=\"attr\">mapping</span> : <span class=\"number\">0</span>  </div><div class=\"line\">  &#125;, &#123;  </div><div class=\"line\">   <span class=\"attr\">name</span> : <span class=\"string\">'product_name'</span>,  </div><div class=\"line\">   <span class=\"attr\">mapping</span> : <span class=\"number\">1</span>  </div><div class=\"line\">  &#125;, &#123;  </div><div class=\"line\">   <span class=\"attr\">name</span> : <span class=\"string\">'product_price'</span>,  </div><div class=\"line\">   <span class=\"attr\">mapping</span> : <span class=\"number\">2</span>  </div><div class=\"line\">  &#125; ])  </div><div class=\"line\"> &#125;);  </div><div class=\"line\"> store.load();  </div><div class=\"line\"> <span class=\"keyword\">var</span> gridPanel = <span class=\"keyword\">new</span> Ext.grid.GridPanel( &#123;  </div><div class=\"line\">  <span class=\"attr\">autoHeigth</span> : <span class=\"literal\">false</span>,  </div><div class=\"line\">  <span class=\"attr\">renderTo</span> : <span class=\"string\">'grid'</span>,  </div><div class=\"line\">  <span class=\"attr\">store</span> : store,  </div><div class=\"line\">  <span class=\"attr\">cm</span> : cm  </div><div class=\"line\"> &#125;);  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>通过这个简单的代码例子我们也大概了解了创建一个Grid的基本流程了，下面我们简单介绍一下Grid的一些其他的简单属性。</p>\n<p>阻止移动列和改变列的宽度：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> gridPanel = <span class=\"keyword\">new</span> Ext.grid.GridPanel( &#123;         </div><div class=\"line\">    <span class=\"attr\">autoHeigth</span> : <span class=\"literal\">true</span>,    </div><div class=\"line\">    <span class=\"attr\">renderTo</span> : <span class=\"string\">'grid'</span>,    </div><div class=\"line\">    <span class=\"attr\">enableColumnMove</span>:<span class=\"literal\">false</span>,   </div><div class=\"line\">    <span class=\"attr\">enableColumnResize</span>:<span class=\"literal\">false</span>,     </div><div class=\"line\">    <span class=\"attr\">store</span> : store,    </div><div class=\"line\">    <span class=\"attr\">cm</span> : cm   </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>代码中enableColumnMove:false设置的是阻止列的移动，enableColumnResize:false设置的是让列的宽度禁止改变。</p>\n<p>按列排序：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> cm = <span class=\"keyword\">new</span> Ext.grid.ColumnModel( [ &#123;                </div><div class=\"line\">        <span class=\"attr\">header</span> : <span class=\"string\">'id'</span>,        </div><div class=\"line\">        <span class=\"attr\">dataIndex</span> : <span class=\"string\">'product_id'</span>          </div><div class=\"line\">    &#125;, &#123;              </div><div class=\"line\">        <span class=\"attr\">header</span> : <span class=\"string\">'name'</span>,          </div><div class=\"line\">        <span class=\"attr\">dataIndex</span> : <span class=\"string\">'product_name'</span>,       </div><div class=\"line\">        <span class=\"attr\">sortable</span>:<span class=\"literal\">true</span>         </div><div class=\"line\">    &#125;, &#123;              </div><div class=\"line\">        <span class=\"attr\">header</span> : <span class=\"string\">'price'</span>,         </div><div class=\"line\">        <span class=\"attr\">dataIndex</span> : <span class=\"string\">'product_price'</span>       </div><div class=\"line\">    &#125; ]);</div></pre></td></tr></table></figure></p>\n<p>在该列设置sortable：true之后，该列就拥有了排序的功能。</p>\n<p>有很多时候我们需要在表格的每列前加一个复选框，用来标记选中的，进行操作，下面我们就加入复选框试试。首先，我们要创建复选框对象，这时我们要用到Ext.grid.CheckboxSelectionModel这个类。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> sm = <span class=\"keyword\">new</span> Ext.grid.CheckboxSelectionModel();           </div><div class=\"line\"><span class=\"keyword\">var</span> cm = <span class=\"keyword\">new</span> Ext.grid.ColumnModel( [              </div><div class=\"line\">              </div><div class=\"line\">   &#123;              </div><div class=\"line\">    <span class=\"attr\">header</span> : <span class=\"string\">'id'</span>,        </div><div class=\"line\">    <span class=\"attr\">dataIndex</span> : <span class=\"string\">'product_id'</span>,         </div><div class=\"line\">    <span class=\"attr\">sortable</span>:<span class=\"literal\">true</span>         </div><div class=\"line\">&#125;, &#123;              </div><div class=\"line\">    <span class=\"attr\">header</span> : <span class=\"string\">'name'</span>,          </div><div class=\"line\">    <span class=\"attr\">dataIndex</span> : <span class=\"string\">'product_name'</span>,       </div><div class=\"line\">    <span class=\"attr\">sortable</span>:<span class=\"literal\">true</span>  </div><div class=\"line\">&#125;, &#123;      </div><div class=\"line\">    <span class=\"attr\">header</span> : <span class=\"string\">'price'</span>,  </div><div class=\"line\">    <span class=\"attr\">dataIndex</span> : <span class=\"string\">'product_price'</span>,  </div><div class=\"line\">    <span class=\"attr\">sortable</span>:<span class=\"literal\">true</span>  </div><div class=\"line\">&#125; ]);</div></pre></td></tr></table></figure></p>\n<p>创建完复选框对象后，我们还要将这个复选框对象添加到ColumnModel对象中去。接着还要将复选框对象添加到Panel上:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> gridPanel = <span class=\"keyword\">new</span> Ext.grid.GridPanel( &#123;     </div><div class=\"line\">    <span class=\"attr\">autoHeigth</span> : <span class=\"literal\">true</span>,  </div><div class=\"line\">    <span class=\"attr\">renderTo</span> : <span class=\"string\">'grid'</span>,  </div><div class=\"line\">    <span class=\"attr\">enableColumnMove</span>:<span class=\"literal\">false</span>,  </div><div class=\"line\">    <span class=\"attr\">enableColumnResize</span>:<span class=\"literal\">false</span>,  </div><div class=\"line\">    <span class=\"attr\">store</span> : store,  </div><div class=\"line\">    <span class=\"attr\">cm</span> : cm,  </div><div class=\"line\">    <span class=\"attr\">sm</span>:sm  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>下面我们做一个非常频繁用到的功能：将复选框选中的行删除。首先要在页面添加一个删除按钮。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span> = <span class=\"string\">\"button\"</span> <span class=\"attr\">value</span> = <span class=\"string\">\"删除选中行\"</span> <span class=\"attr\">onclick</span> = <span class=\"string\">\"deleteCheckbox()\"</span> <span class=\"attr\">style</span> = <span class=\"string\">\"margin-top:20px\"</span>/&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这个JavaScript函数就是页面按钮要调用的函数：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deleteCheckbox</span>(<span class=\"params\"></span>)</span>&#123;                </div><div class=\"line\">     <span class=\"comment\">//从后往前扫描             </span></div><div class=\"line\">     <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = store.getCount();i&gt;=<span class=\"number\">0</span>;i--)&#123;           </div><div class=\"line\">        <span class=\"keyword\">if</span>(mm.isSelected(i))&#123;         </div><div class=\"line\">                <span class=\"comment\">//删除当前行  </span></div><div class=\"line\">                store.removeAt(i);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">     &#125;        </div><div class=\"line\">     <span class=\"comment\">//重新加载表数据        </span></div><div class=\"line\">     gridPanel.reconfigure(store,cm);         </div><div class=\"line\">  &#125;;</div></pre></td></tr></table></figure></p>\n<p>这样一个主要功能都健全的Grid就完成了，今天我就写这些，下次我将继续ExtJS Grid的分页和编辑表格的研究。</p>"},{"title":"ExtJS初级教程之ExtJS Grid(二)","date":"2016-11-27T14:45:40.000Z","_content":"很多时候我们表格里显示的数据是从后台查询出来的海量数据，那么海量的数据显示在表格里用户的体验肯定会很差，效率也会很低。ExtJS为了解决这个问题，就给我们提供了一个非常强大的分页组件。今天我们就研究一下ExtJS的分页技术。<!--more-->\n## 为表格添加分页组件\n要为表格添加分页组件，就要先创建Ext.PagingToolbar类的实例对象，然后将它添加到Panel中去。\n``` javascript\ngridPanel = new Ext.grid.GridPanel({  \n      autoHeight: true,  \n      renderTo: 'grid',   \n      store: store,       \n      cm: cm,   \n      sm:mm,  \n      bbar:new Ext.PagingToolbar({  \n      pageSize:3,  \n      store:store,  \n      displayInfo:true,  \n      displayMsg:'显示记录 {0} - {1} of {2}',  \n      emptyMsg:\"没有记录\"  \n      })  \n }); \n```\nPagingToolbar类的属性描述：\n- pageSize：每页显示的记录条数。\n- displayInfo：是否显示记录信息。\n- displayMsg：该属性值为true时，该属性才有效。{0}：表示当前显示的记录起始数。{1}：表示显示记录数的结尾数。{2}：表示总共多少记录。\n- emptyMsg：当没有记录的时候显示的文本信息。  \n\n## 从服务器端获得分页数据\n如果使用静态数据，Grid每次都会将所有数据显示。所以这里我们就编写一个Servlet来生成动态数据生成Grid。Servlet将接受两个请求数据start和limit。Start表示当前页显示记录的起始位置，limit表示每页显示的记录数。\n``` java\npublic class GridServlet extends HttpServlet {  \n private static final long serialVersionUID = 1L;      \n protected void service(HttpServletRequest request, HttpServletResponse response)  \n   throws ServletException, IOException {  \n  response.setContentType(\"text/html;charset=gbk\");  \n  PrintWriter out = response.getWriter();  \n  String start = request.getParameter(\"start\");  \n  String limit = request.getParameter(\"limit\");  \n  int index = Integer.parseInt(start);  \n  int pageSize = Integer.parseInt(limit);  \n  int total = 100000;  \n  String jsonStr = \"{total:\" + total + \",root:[\";  \n  for (int i = index; i < pageSize + index; i++)  \n  {  \n   int productIndex = i + 1;  \n   jsonStr += \"{product_id:\" + productIndex + \",product_name:'产品\"  \n     + productIndex + \"',product_price:'价格\" + productIndex  \n     + \"'}\";  \n   if (i != pageSize + index - 1)  \n    jsonStr += \",\";  \n  }  \n  jsonStr += \"]}\";  \n  out.println(jsonStr);  \n }  \n} \n```\n要通过服务器来接收数据生成表格，就必须使用HttpProxy来制定URL。还有，服务器传递过来的数据是Json格式的，就不能使用ArrayReader了，需要使用的是JsonReader。\n``` javascript\nExt.onReady(function(){  \n var mm = new Ext.grid.CheckboxSelectionModel();  \n    var cm = new Ext.grid.ColumnModel([  \n        new Ext.grid.RowNumberer(),  \n        mm,  \n        {header:'产品编号',dataIndex:'product_id'},  \n        {header:'产品名称',dataIndex:'product_name'},  \n        {header:'产品价格',dataIndex:'product_price'}  \n    ]);    \n var store = new Ext.data.Store({  \n        proxy: new Ext.data.HttpProxy({url:'../GridServlet'}),  \n        reader: new Ext.data.JsonReader({  \n         totalProperty:'total',  \n         root:'root'  \n        },[  \n           {name:'product_id'},  \n           {name:'product_name'},  \n           {name:'product_price'}  \n        ])   \n    });  \nstore.load({params:{start:0,limit:10}});  \n    var gridPanel = new Ext.grid.GridPanel({  \n        autoHeight: true,  \n        renderTo: 'grid',          \n        store: store,  \n        cm: cm,  \n        sm:mm,  \n        bbar:new Ext.PagingToolbar({  \n         pageSize:10,  \n         store:store,  \n         displayInfo:true,  \n         displayMsg:'显示记录 {0} - {1} of {2}',  \n         emptyMsg:\"没有记录\"  \n        })  \n    });   \n}); \n```\n这样一个简单的ExtJS Grid分页就实现了。要想让用户体验更高就应该让用户可以在自己刚刚查询出来的数据表格上进行数据编辑，可以进行增删改查。可编辑的表格就在在想要能编辑的列里注册一个TextField组件，这个组件需要使用Ext.grid.GridEditor类来封装。  \n## 第一个可编辑表格\n``` javascript\ncm = new Ext.grid.ColumnModel([  \nnew Ext.grid.RowNumberer(),  \n {header:'产品编号',dataIndex:'product_id'},  \n {header:'产品名称',dataIndex:'product_name',editor:new Ext.grid.GridEditor(new Ext.form.TextField({allowBlank:false}))},  \n {header:'产品价格',dataIndex:'product_price',editor:new Ext.grid.GridEditor(new Ext.form.TextField({allowBlank:false}))}  \n]); \n```\n使用了可编辑的对象就需要建立一个Ext.grid.EditorGridPanel来代替Ext.grid.GridPanel。\n``` javascript\ngridPanel = new Ext.grid.EditorGridPanel({  \n  autoHeight: true,  \n  renderTo: 'grid',      \n  store: store,  \n  cm: cm,  \n});  \n```\n这时默认的是双击编辑，如果想设置成单击编辑的话就需要做如下改动。\n``` javascript\n\ngridPanel = new Ext.grid.EditorGridPanel({  \n  autoHeight: true,  \n  renderTo: 'grid',          \n  store: store,  \n  //值为1的时候就是单击，2就是双击。  \n  clicksToEdit:1,  \n  cm: cm,  \n  sm:mm  \n});\n```\n## 向表格中添加新行和删除一行\n添加新的一行是使用Store类的insert方法插入一个新的Ext.data.Record对象，删除用的是remove方法,为了使插入的新行所有列都能编辑，我们要把所有列都设为可编辑。\n``` javascript\ncm = new Ext.grid.ColumnModel([  \n  new Ext.grid.RowNumberer(),  \n  mm,  \n  {header:'产品编号',dataIndex:'product_id',editor:new Ext.grid.GridEditor(new Ext.form.TextField({allowBlank:false}))},  \n  {header:'产品名称',dataIndex:'product_name',editor:new Ext.grid.GridEditor(new Ext.form.TextField({allowBlank:false}))},  \n  {header:'产品价格',dataIndex:'product_price',editor:new Ext.grid.GridEditor(new Ext.form.TextField({allowBlank:false}))}  \n]);\n```\n将所想要编辑的列添加Ext.grid.GridEditor对象就能是该列可编辑,接着我们要在表格组件的上方添加两个按键，分别是增加和删除。代码如下：\n``` javascript\nvar gridPanel = new Ext.grid.EditorGridPanel({    \n       autoHeight: true,      \n       renderTo: 'grid',      \n       store: store,      \n       cm: cm,    \n       tbar: new Ext.Toolbar(['-', {      \n           text: '添加一行',      \n           handler: function(){   \n               var record = new Ext.data.Record({     \n                product_id:'',  \n                product_name:'',  \n                product_price:''  \n               });  \n               gridPanel.stopEditing();                  \n               store.insert(store.getCount(),record);  \n               gridPanel.startEditing(store.getCount()-1,0);  \n           }  \n       }, '-', {  \n           text: '删除一行',  \n           handler: function(){  \n               Ext.Msg.confirm('信息', '是否删除当前记录？', function(btn){  \n                   if (btn == 'yes') {  \n                       var sm = gridPanel.getSelectionModel();  \n                       var cell = sm.getSelectedCell();  \n                       var record = store.getAt(cell[0]);  \n                       store.remove(record);  \n                   }  \n               });    \n           }      \n       }, '-'])   \n   });  \n```\n## 保存数据\n论是添加或是修改了表格中的数据后，一般我们都要将结果提交到服务器，在ExtJS中Slice类就是干这个用的。\n``` javascript\n{  \n           text: '保存',    \n           handler: function(){   \n               var m = store.modified.slice(0);   \n               var data = [];     \n               Ext.each(m, function(item) {   \n                   data.push(item.data);      \n               });    \n               alert(Ext.encode(data));   \n               Ext.lib.Ajax.request(      \n                   'POST',    \n                   'SaveData',    \n                   {success: function(response){      \n                       Ext.Msg.alert('信息', response.responseText, function(){     \n                           store.reload();    \n                       });    \n                   }},    \n                   'row=' + encodeURIComponent(Ext.encode(data))      \n               );     \n           }      \n}  \n```\n## 对记录进行分组  \n此外ExtJS Grid还可以对数据进行分组，要建立一个按列分组的表格就要使用Ext.data.GroupingStore这个类。\n``` javascript\n\nvar store = new Ext.data.GroupingStore({  \n    reader: reader,  \n    data: data,  \n    groupField: 'sex',  \n    sortInfo: {field: 'name', direction: \"ASC\"}  \n});  \nvar grid = new Ext.grid.GridPanel({  \n    autoHeight: true,  \n    store: store,  \n    columns: columns,  \n    view: new Ext.grid.GroupingView(),  \n    renderTo: 'grid'  \n});  \n```\nExtJS各种各样的组件和控件有很多，做的都很漂亮，还可以自己定制样式，使用继承来拓展ExtJS的功能，ExtJS的介绍就到这了，更多的功能我今后还会继续研究的。\n\n","source":"_posts/Grid-2.md","raw":"---\ntitle: ExtJS初级教程之ExtJS Grid(二)\ndate: 2016-11-27 22:45:40\ntags: ExtJS\ncategories: javascript\n---\n很多时候我们表格里显示的数据是从后台查询出来的海量数据，那么海量的数据显示在表格里用户的体验肯定会很差，效率也会很低。ExtJS为了解决这个问题，就给我们提供了一个非常强大的分页组件。今天我们就研究一下ExtJS的分页技术。<!--more-->\n## 为表格添加分页组件\n要为表格添加分页组件，就要先创建Ext.PagingToolbar类的实例对象，然后将它添加到Panel中去。\n``` javascript\ngridPanel = new Ext.grid.GridPanel({  \n      autoHeight: true,  \n      renderTo: 'grid',   \n      store: store,       \n      cm: cm,   \n      sm:mm,  \n      bbar:new Ext.PagingToolbar({  \n      pageSize:3,  \n      store:store,  \n      displayInfo:true,  \n      displayMsg:'显示记录 {0} - {1} of {2}',  \n      emptyMsg:\"没有记录\"  \n      })  \n }); \n```\nPagingToolbar类的属性描述：\n- pageSize：每页显示的记录条数。\n- displayInfo：是否显示记录信息。\n- displayMsg：该属性值为true时，该属性才有效。{0}：表示当前显示的记录起始数。{1}：表示显示记录数的结尾数。{2}：表示总共多少记录。\n- emptyMsg：当没有记录的时候显示的文本信息。  \n\n## 从服务器端获得分页数据\n如果使用静态数据，Grid每次都会将所有数据显示。所以这里我们就编写一个Servlet来生成动态数据生成Grid。Servlet将接受两个请求数据start和limit。Start表示当前页显示记录的起始位置，limit表示每页显示的记录数。\n``` java\npublic class GridServlet extends HttpServlet {  \n private static final long serialVersionUID = 1L;      \n protected void service(HttpServletRequest request, HttpServletResponse response)  \n   throws ServletException, IOException {  \n  response.setContentType(\"text/html;charset=gbk\");  \n  PrintWriter out = response.getWriter();  \n  String start = request.getParameter(\"start\");  \n  String limit = request.getParameter(\"limit\");  \n  int index = Integer.parseInt(start);  \n  int pageSize = Integer.parseInt(limit);  \n  int total = 100000;  \n  String jsonStr = \"{total:\" + total + \",root:[\";  \n  for (int i = index; i < pageSize + index; i++)  \n  {  \n   int productIndex = i + 1;  \n   jsonStr += \"{product_id:\" + productIndex + \",product_name:'产品\"  \n     + productIndex + \"',product_price:'价格\" + productIndex  \n     + \"'}\";  \n   if (i != pageSize + index - 1)  \n    jsonStr += \",\";  \n  }  \n  jsonStr += \"]}\";  \n  out.println(jsonStr);  \n }  \n} \n```\n要通过服务器来接收数据生成表格，就必须使用HttpProxy来制定URL。还有，服务器传递过来的数据是Json格式的，就不能使用ArrayReader了，需要使用的是JsonReader。\n``` javascript\nExt.onReady(function(){  \n var mm = new Ext.grid.CheckboxSelectionModel();  \n    var cm = new Ext.grid.ColumnModel([  \n        new Ext.grid.RowNumberer(),  \n        mm,  \n        {header:'产品编号',dataIndex:'product_id'},  \n        {header:'产品名称',dataIndex:'product_name'},  \n        {header:'产品价格',dataIndex:'product_price'}  \n    ]);    \n var store = new Ext.data.Store({  \n        proxy: new Ext.data.HttpProxy({url:'../GridServlet'}),  \n        reader: new Ext.data.JsonReader({  \n         totalProperty:'total',  \n         root:'root'  \n        },[  \n           {name:'product_id'},  \n           {name:'product_name'},  \n           {name:'product_price'}  \n        ])   \n    });  \nstore.load({params:{start:0,limit:10}});  \n    var gridPanel = new Ext.grid.GridPanel({  \n        autoHeight: true,  \n        renderTo: 'grid',          \n        store: store,  \n        cm: cm,  \n        sm:mm,  \n        bbar:new Ext.PagingToolbar({  \n         pageSize:10,  \n         store:store,  \n         displayInfo:true,  \n         displayMsg:'显示记录 {0} - {1} of {2}',  \n         emptyMsg:\"没有记录\"  \n        })  \n    });   \n}); \n```\n这样一个简单的ExtJS Grid分页就实现了。要想让用户体验更高就应该让用户可以在自己刚刚查询出来的数据表格上进行数据编辑，可以进行增删改查。可编辑的表格就在在想要能编辑的列里注册一个TextField组件，这个组件需要使用Ext.grid.GridEditor类来封装。  \n## 第一个可编辑表格\n``` javascript\ncm = new Ext.grid.ColumnModel([  \nnew Ext.grid.RowNumberer(),  \n {header:'产品编号',dataIndex:'product_id'},  \n {header:'产品名称',dataIndex:'product_name',editor:new Ext.grid.GridEditor(new Ext.form.TextField({allowBlank:false}))},  \n {header:'产品价格',dataIndex:'product_price',editor:new Ext.grid.GridEditor(new Ext.form.TextField({allowBlank:false}))}  \n]); \n```\n使用了可编辑的对象就需要建立一个Ext.grid.EditorGridPanel来代替Ext.grid.GridPanel。\n``` javascript\ngridPanel = new Ext.grid.EditorGridPanel({  \n  autoHeight: true,  \n  renderTo: 'grid',      \n  store: store,  \n  cm: cm,  \n});  \n```\n这时默认的是双击编辑，如果想设置成单击编辑的话就需要做如下改动。\n``` javascript\n\ngridPanel = new Ext.grid.EditorGridPanel({  \n  autoHeight: true,  \n  renderTo: 'grid',          \n  store: store,  \n  //值为1的时候就是单击，2就是双击。  \n  clicksToEdit:1,  \n  cm: cm,  \n  sm:mm  \n});\n```\n## 向表格中添加新行和删除一行\n添加新的一行是使用Store类的insert方法插入一个新的Ext.data.Record对象，删除用的是remove方法,为了使插入的新行所有列都能编辑，我们要把所有列都设为可编辑。\n``` javascript\ncm = new Ext.grid.ColumnModel([  \n  new Ext.grid.RowNumberer(),  \n  mm,  \n  {header:'产品编号',dataIndex:'product_id',editor:new Ext.grid.GridEditor(new Ext.form.TextField({allowBlank:false}))},  \n  {header:'产品名称',dataIndex:'product_name',editor:new Ext.grid.GridEditor(new Ext.form.TextField({allowBlank:false}))},  \n  {header:'产品价格',dataIndex:'product_price',editor:new Ext.grid.GridEditor(new Ext.form.TextField({allowBlank:false}))}  \n]);\n```\n将所想要编辑的列添加Ext.grid.GridEditor对象就能是该列可编辑,接着我们要在表格组件的上方添加两个按键，分别是增加和删除。代码如下：\n``` javascript\nvar gridPanel = new Ext.grid.EditorGridPanel({    \n       autoHeight: true,      \n       renderTo: 'grid',      \n       store: store,      \n       cm: cm,    \n       tbar: new Ext.Toolbar(['-', {      \n           text: '添加一行',      \n           handler: function(){   \n               var record = new Ext.data.Record({     \n                product_id:'',  \n                product_name:'',  \n                product_price:''  \n               });  \n               gridPanel.stopEditing();                  \n               store.insert(store.getCount(),record);  \n               gridPanel.startEditing(store.getCount()-1,0);  \n           }  \n       }, '-', {  \n           text: '删除一行',  \n           handler: function(){  \n               Ext.Msg.confirm('信息', '是否删除当前记录？', function(btn){  \n                   if (btn == 'yes') {  \n                       var sm = gridPanel.getSelectionModel();  \n                       var cell = sm.getSelectedCell();  \n                       var record = store.getAt(cell[0]);  \n                       store.remove(record);  \n                   }  \n               });    \n           }      \n       }, '-'])   \n   });  \n```\n## 保存数据\n论是添加或是修改了表格中的数据后，一般我们都要将结果提交到服务器，在ExtJS中Slice类就是干这个用的。\n``` javascript\n{  \n           text: '保存',    \n           handler: function(){   \n               var m = store.modified.slice(0);   \n               var data = [];     \n               Ext.each(m, function(item) {   \n                   data.push(item.data);      \n               });    \n               alert(Ext.encode(data));   \n               Ext.lib.Ajax.request(      \n                   'POST',    \n                   'SaveData',    \n                   {success: function(response){      \n                       Ext.Msg.alert('信息', response.responseText, function(){     \n                           store.reload();    \n                       });    \n                   }},    \n                   'row=' + encodeURIComponent(Ext.encode(data))      \n               );     \n           }      \n}  \n```\n## 对记录进行分组  \n此外ExtJS Grid还可以对数据进行分组，要建立一个按列分组的表格就要使用Ext.data.GroupingStore这个类。\n``` javascript\n\nvar store = new Ext.data.GroupingStore({  \n    reader: reader,  \n    data: data,  \n    groupField: 'sex',  \n    sortInfo: {field: 'name', direction: \"ASC\"}  \n});  \nvar grid = new Ext.grid.GridPanel({  \n    autoHeight: true,  \n    store: store,  \n    columns: columns,  \n    view: new Ext.grid.GroupingView(),  \n    renderTo: 'grid'  \n});  \n```\nExtJS各种各样的组件和控件有很多，做的都很漂亮，还可以自己定制样式，使用继承来拓展ExtJS的功能，ExtJS的介绍就到这了，更多的功能我今后还会继续研究的。\n\n","slug":"Grid-2","published":1,"updated":"2016-11-27T15:16:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw6kw3tn0006p5s6l5j9lx6p","content":"<p>很多时候我们表格里显示的数据是从后台查询出来的海量数据，那么海量的数据显示在表格里用户的体验肯定会很差，效率也会很低。ExtJS为了解决这个问题，就给我们提供了一个非常强大的分页组件。今天我们就研究一下ExtJS的分页技术。<a id=\"more\"></a></p>\n<h2 id=\"为表格添加分页组件\"><a href=\"#为表格添加分页组件\" class=\"headerlink\" title=\"为表格添加分页组件\"></a>为表格添加分页组件</h2><p>要为表格添加分页组件，就要先创建Ext.PagingToolbar类的实例对象，然后将它添加到Panel中去。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">gridPanel = <span class=\"keyword\">new</span> Ext.grid.GridPanel(&#123;  </div><div class=\"line\">      <span class=\"attr\">autoHeight</span>: <span class=\"literal\">true</span>,  </div><div class=\"line\">      <span class=\"attr\">renderTo</span>: <span class=\"string\">'grid'</span>,   </div><div class=\"line\">      <span class=\"attr\">store</span>: store,       </div><div class=\"line\">      <span class=\"attr\">cm</span>: cm,   </div><div class=\"line\">      <span class=\"attr\">sm</span>:mm,  </div><div class=\"line\">      <span class=\"attr\">bbar</span>:<span class=\"keyword\">new</span> Ext.PagingToolbar(&#123;  </div><div class=\"line\">      <span class=\"attr\">pageSize</span>:<span class=\"number\">3</span>,  </div><div class=\"line\">      <span class=\"attr\">store</span>:store,  </div><div class=\"line\">      <span class=\"attr\">displayInfo</span>:<span class=\"literal\">true</span>,  </div><div class=\"line\">      <span class=\"attr\">displayMsg</span>:<span class=\"string\">'显示记录 &#123;0&#125; - &#123;1&#125; of &#123;2&#125;'</span>,  </div><div class=\"line\">      <span class=\"attr\">emptyMsg</span>:<span class=\"string\">\"没有记录\"</span>  </div><div class=\"line\">      &#125;)  </div><div class=\"line\"> &#125;);</div></pre></td></tr></table></figure></p>\n<p>PagingToolbar类的属性描述：</p>\n<ul>\n<li>pageSize：每页显示的记录条数。</li>\n<li>displayInfo：是否显示记录信息。</li>\n<li>displayMsg：该属性值为true时，该属性才有效。{0}：表示当前显示的记录起始数。{1}：表示显示记录数的结尾数。{2}：表示总共多少记录。</li>\n<li>emptyMsg：当没有记录的时候显示的文本信息。  </li>\n</ul>\n<h2 id=\"从服务器端获得分页数据\"><a href=\"#从服务器端获得分页数据\" class=\"headerlink\" title=\"从服务器端获得分页数据\"></a>从服务器端获得分页数据</h2><p>如果使用静态数据，Grid每次都会将所有数据显示。所以这里我们就编写一个Servlet来生成动态数据生成Grid。Servlet将接受两个请求数据start和limit。Start表示当前页显示记录的起始位置，limit表示每页显示的记录数。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GridServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;  </div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;      </div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span>  </span></div><div class=\"line\">   <span class=\"keyword\">throws</span> ServletException, IOException &#123;  </div><div class=\"line\">  response.setContentType(<span class=\"string\">\"text/html;charset=gbk\"</span>);  </div><div class=\"line\">  PrintWriter out = response.getWriter();  </div><div class=\"line\">  String start = request.getParameter(<span class=\"string\">\"start\"</span>);  </div><div class=\"line\">  String limit = request.getParameter(<span class=\"string\">\"limit\"</span>);  </div><div class=\"line\">  <span class=\"keyword\">int</span> index = Integer.parseInt(start);  </div><div class=\"line\">  <span class=\"keyword\">int</span> pageSize = Integer.parseInt(limit);  </div><div class=\"line\">  <span class=\"keyword\">int</span> total = <span class=\"number\">100000</span>;  </div><div class=\"line\">  String jsonStr = <span class=\"string\">\"&#123;total:\"</span> + total + <span class=\"string\">\",root:[\"</span>;  </div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = index; i &lt; pageSize + index; i++)  </div><div class=\"line\">  &#123;  </div><div class=\"line\">   <span class=\"keyword\">int</span> productIndex = i + <span class=\"number\">1</span>;  </div><div class=\"line\">   jsonStr += <span class=\"string\">\"&#123;product_id:\"</span> + productIndex + <span class=\"string\">\",product_name:'产品\"</span>  </div><div class=\"line\">     + productIndex + <span class=\"string\">\"',product_price:'价格\"</span> + productIndex  </div><div class=\"line\">     + <span class=\"string\">\"'&#125;\"</span>;  </div><div class=\"line\">   <span class=\"keyword\">if</span> (i != pageSize + index - <span class=\"number\">1</span>)  </div><div class=\"line\">    jsonStr += <span class=\"string\">\",\"</span>;  </div><div class=\"line\">  &#125;  </div><div class=\"line\">  jsonStr += <span class=\"string\">\"]&#125;\"</span>;  </div><div class=\"line\">  out.println(jsonStr);  </div><div class=\"line\"> &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>要通过服务器来接收数据生成表格，就必须使用HttpProxy来制定URL。还有，服务器传递过来的数据是Json格式的，就不能使用ArrayReader了，需要使用的是JsonReader。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">Ext.onReady(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;  </div><div class=\"line\"> <span class=\"keyword\">var</span> mm = <span class=\"keyword\">new</span> Ext.grid.CheckboxSelectionModel();  </div><div class=\"line\">    <span class=\"keyword\">var</span> cm = <span class=\"keyword\">new</span> Ext.grid.ColumnModel([  </div><div class=\"line\">        <span class=\"keyword\">new</span> Ext.grid.RowNumberer(),  </div><div class=\"line\">        mm,  </div><div class=\"line\">        &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品编号'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_id'</span>&#125;,  </div><div class=\"line\">        &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品名称'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_name'</span>&#125;,  </div><div class=\"line\">        &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品价格'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_price'</span>&#125;  </div><div class=\"line\">    ]);    </div><div class=\"line\"> <span class=\"keyword\">var</span> store = <span class=\"keyword\">new</span> Ext.data.Store(&#123;  </div><div class=\"line\">        <span class=\"attr\">proxy</span>: <span class=\"keyword\">new</span> Ext.data.HttpProxy(&#123;<span class=\"attr\">url</span>:<span class=\"string\">'../GridServlet'</span>&#125;),  </div><div class=\"line\">        <span class=\"attr\">reader</span>: <span class=\"keyword\">new</span> Ext.data.JsonReader(&#123;  </div><div class=\"line\">         <span class=\"attr\">totalProperty</span>:<span class=\"string\">'total'</span>,  </div><div class=\"line\">         <span class=\"attr\">root</span>:<span class=\"string\">'root'</span>  </div><div class=\"line\">        &#125;,[  </div><div class=\"line\">           &#123;<span class=\"attr\">name</span>:<span class=\"string\">'product_id'</span>&#125;,  </div><div class=\"line\">           &#123;<span class=\"attr\">name</span>:<span class=\"string\">'product_name'</span>&#125;,  </div><div class=\"line\">           &#123;<span class=\"attr\">name</span>:<span class=\"string\">'product_price'</span>&#125;  </div><div class=\"line\">        ])   </div><div class=\"line\">    &#125;);  </div><div class=\"line\">store.load(&#123;<span class=\"attr\">params</span>:&#123;<span class=\"attr\">start</span>:<span class=\"number\">0</span>,<span class=\"attr\">limit</span>:<span class=\"number\">10</span>&#125;&#125;);  </div><div class=\"line\">    <span class=\"keyword\">var</span> gridPanel = <span class=\"keyword\">new</span> Ext.grid.GridPanel(&#123;  </div><div class=\"line\">        <span class=\"attr\">autoHeight</span>: <span class=\"literal\">true</span>,  </div><div class=\"line\">        <span class=\"attr\">renderTo</span>: <span class=\"string\">'grid'</span>,          </div><div class=\"line\">        <span class=\"attr\">store</span>: store,  </div><div class=\"line\">        <span class=\"attr\">cm</span>: cm,  </div><div class=\"line\">        <span class=\"attr\">sm</span>:mm,  </div><div class=\"line\">        <span class=\"attr\">bbar</span>:<span class=\"keyword\">new</span> Ext.PagingToolbar(&#123;  </div><div class=\"line\">         <span class=\"attr\">pageSize</span>:<span class=\"number\">10</span>,  </div><div class=\"line\">         <span class=\"attr\">store</span>:store,  </div><div class=\"line\">         <span class=\"attr\">displayInfo</span>:<span class=\"literal\">true</span>,  </div><div class=\"line\">         <span class=\"attr\">displayMsg</span>:<span class=\"string\">'显示记录 &#123;0&#125; - &#123;1&#125; of &#123;2&#125;'</span>,  </div><div class=\"line\">         <span class=\"attr\">emptyMsg</span>:<span class=\"string\">\"没有记录\"</span>  </div><div class=\"line\">        &#125;)  </div><div class=\"line\">    &#125;);   </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>这样一个简单的ExtJS Grid分页就实现了。要想让用户体验更高就应该让用户可以在自己刚刚查询出来的数据表格上进行数据编辑，可以进行增删改查。可编辑的表格就在在想要能编辑的列里注册一个TextField组件，这个组件需要使用Ext.grid.GridEditor类来封装。  </p>\n<h2 id=\"第一个可编辑表格\"><a href=\"#第一个可编辑表格\" class=\"headerlink\" title=\"第一个可编辑表格\"></a>第一个可编辑表格</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">cm = <span class=\"keyword\">new</span> Ext.grid.ColumnModel([  </div><div class=\"line\"><span class=\"keyword\">new</span> Ext.grid.RowNumberer(),  </div><div class=\"line\"> &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品编号'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_id'</span>&#125;,  </div><div class=\"line\"> &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品名称'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_name'</span>,<span class=\"attr\">editor</span>:<span class=\"keyword\">new</span> Ext.grid.GridEditor(<span class=\"keyword\">new</span> Ext.form.TextField(&#123;<span class=\"attr\">allowBlank</span>:<span class=\"literal\">false</span>&#125;))&#125;,  </div><div class=\"line\"> &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品价格'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_price'</span>,<span class=\"attr\">editor</span>:<span class=\"keyword\">new</span> Ext.grid.GridEditor(<span class=\"keyword\">new</span> Ext.form.TextField(&#123;<span class=\"attr\">allowBlank</span>:<span class=\"literal\">false</span>&#125;))&#125;  </div><div class=\"line\">]);</div></pre></td></tr></table></figure>\n<p>使用了可编辑的对象就需要建立一个Ext.grid.EditorGridPanel来代替Ext.grid.GridPanel。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">gridPanel = <span class=\"keyword\">new</span> Ext.grid.EditorGridPanel(&#123;  </div><div class=\"line\">  <span class=\"attr\">autoHeight</span>: <span class=\"literal\">true</span>,  </div><div class=\"line\">  <span class=\"attr\">renderTo</span>: <span class=\"string\">'grid'</span>,      </div><div class=\"line\">  <span class=\"attr\">store</span>: store,  </div><div class=\"line\">  <span class=\"attr\">cm</span>: cm,  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>这时默认的是双击编辑，如果想设置成单击编辑的话就需要做如下改动。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">gridPanel = <span class=\"keyword\">new</span> Ext.grid.EditorGridPanel(&#123;  </div><div class=\"line\">  <span class=\"attr\">autoHeight</span>: <span class=\"literal\">true</span>,  </div><div class=\"line\">  <span class=\"attr\">renderTo</span>: <span class=\"string\">'grid'</span>,          </div><div class=\"line\">  <span class=\"attr\">store</span>: store,  </div><div class=\"line\">  <span class=\"comment\">//值为1的时候就是单击，2就是双击。  </span></div><div class=\"line\">  clicksToEdit:<span class=\"number\">1</span>,  </div><div class=\"line\">  <span class=\"attr\">cm</span>: cm,  </div><div class=\"line\">  <span class=\"attr\">sm</span>:mm  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h2 id=\"向表格中添加新行和删除一行\"><a href=\"#向表格中添加新行和删除一行\" class=\"headerlink\" title=\"向表格中添加新行和删除一行\"></a>向表格中添加新行和删除一行</h2><p>添加新的一行是使用Store类的insert方法插入一个新的Ext.data.Record对象，删除用的是remove方法,为了使插入的新行所有列都能编辑，我们要把所有列都设为可编辑。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">cm = <span class=\"keyword\">new</span> Ext.grid.ColumnModel([  </div><div class=\"line\">  <span class=\"keyword\">new</span> Ext.grid.RowNumberer(),  </div><div class=\"line\">  mm,  </div><div class=\"line\">  &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品编号'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_id'</span>,<span class=\"attr\">editor</span>:<span class=\"keyword\">new</span> Ext.grid.GridEditor(<span class=\"keyword\">new</span> Ext.form.TextField(&#123;<span class=\"attr\">allowBlank</span>:<span class=\"literal\">false</span>&#125;))&#125;,  </div><div class=\"line\">  &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品名称'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_name'</span>,<span class=\"attr\">editor</span>:<span class=\"keyword\">new</span> Ext.grid.GridEditor(<span class=\"keyword\">new</span> Ext.form.TextField(&#123;<span class=\"attr\">allowBlank</span>:<span class=\"literal\">false</span>&#125;))&#125;,  </div><div class=\"line\">  &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品价格'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_price'</span>,<span class=\"attr\">editor</span>:<span class=\"keyword\">new</span> Ext.grid.GridEditor(<span class=\"keyword\">new</span> Ext.form.TextField(&#123;<span class=\"attr\">allowBlank</span>:<span class=\"literal\">false</span>&#125;))&#125;  </div><div class=\"line\">]);</div></pre></td></tr></table></figure></p>\n<p>将所想要编辑的列添加Ext.grid.GridEditor对象就能是该列可编辑,接着我们要在表格组件的上方添加两个按键，分别是增加和删除。代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> gridPanel = <span class=\"keyword\">new</span> Ext.grid.EditorGridPanel(&#123;    </div><div class=\"line\">       <span class=\"attr\">autoHeight</span>: <span class=\"literal\">true</span>,      </div><div class=\"line\">       <span class=\"attr\">renderTo</span>: <span class=\"string\">'grid'</span>,      </div><div class=\"line\">       <span class=\"attr\">store</span>: store,      </div><div class=\"line\">       <span class=\"attr\">cm</span>: cm,    </div><div class=\"line\">       <span class=\"attr\">tbar</span>: <span class=\"keyword\">new</span> Ext.Toolbar([<span class=\"string\">'-'</span>, &#123;      </div><div class=\"line\">           <span class=\"attr\">text</span>: <span class=\"string\">'添加一行'</span>,      </div><div class=\"line\">           <span class=\"attr\">handler</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;   </div><div class=\"line\">               <span class=\"keyword\">var</span> record = <span class=\"keyword\">new</span> Ext.data.Record(&#123;     </div><div class=\"line\">                <span class=\"attr\">product_id</span>:<span class=\"string\">''</span>,  </div><div class=\"line\">                <span class=\"attr\">product_name</span>:<span class=\"string\">''</span>,  </div><div class=\"line\">                <span class=\"attr\">product_price</span>:<span class=\"string\">''</span>  </div><div class=\"line\">               &#125;);  </div><div class=\"line\">               gridPanel.stopEditing();                  </div><div class=\"line\">               store.insert(store.getCount(),record);  </div><div class=\"line\">               gridPanel.startEditing(store.getCount()<span class=\"number\">-1</span>,<span class=\"number\">0</span>);  </div><div class=\"line\">           &#125;  </div><div class=\"line\">       &#125;, <span class=\"string\">'-'</span>, &#123;  </div><div class=\"line\">           <span class=\"attr\">text</span>: <span class=\"string\">'删除一行'</span>,  </div><div class=\"line\">           <span class=\"attr\">handler</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;  </div><div class=\"line\">               Ext.Msg.confirm(<span class=\"string\">'信息'</span>, <span class=\"string\">'是否删除当前记录？'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">btn</span>)</span>&#123;  </div><div class=\"line\">                   <span class=\"keyword\">if</span> (btn == <span class=\"string\">'yes'</span>) &#123;  </div><div class=\"line\">                       <span class=\"keyword\">var</span> sm = gridPanel.getSelectionModel();  </div><div class=\"line\">                       <span class=\"keyword\">var</span> cell = sm.getSelectedCell();  </div><div class=\"line\">                       <span class=\"keyword\">var</span> record = store.getAt(cell[<span class=\"number\">0</span>]);  </div><div class=\"line\">                       store.remove(record);  </div><div class=\"line\">                   &#125;  </div><div class=\"line\">               &#125;);    </div><div class=\"line\">           &#125;      </div><div class=\"line\">       &#125;, <span class=\"string\">'-'</span>])   </div><div class=\"line\">   &#125;);</div></pre></td></tr></table></figure></p>\n<h2 id=\"保存数据\"><a href=\"#保存数据\" class=\"headerlink\" title=\"保存数据\"></a>保存数据</h2><p>论是添加或是修改了表格中的数据后，一般我们都要将结果提交到服务器，在ExtJS中Slice类就是干这个用的。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;  </div><div class=\"line\">           <span class=\"attr\">text</span>: <span class=\"string\">'保存'</span>,    </div><div class=\"line\">           <span class=\"attr\">handler</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;   </div><div class=\"line\">               <span class=\"keyword\">var</span> m = store.modified.slice(<span class=\"number\">0</span>);   </div><div class=\"line\">               <span class=\"keyword\">var</span> data = [];     </div><div class=\"line\">               Ext.each(m, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>) </span>&#123;   </div><div class=\"line\">                   data.push(item.data);      </div><div class=\"line\">               &#125;);    </div><div class=\"line\">               alert(Ext.encode(data));   </div><div class=\"line\">               Ext.lib.Ajax.request(      </div><div class=\"line\">                   <span class=\"string\">'POST'</span>,    </div><div class=\"line\">                   <span class=\"string\">'SaveData'</span>,    </div><div class=\"line\">                   &#123;<span class=\"attr\">success</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>)</span>&#123;      </div><div class=\"line\">                       Ext.Msg.alert(<span class=\"string\">'信息'</span>, response.responseText, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;     </div><div class=\"line\">                           store.reload();    </div><div class=\"line\">                       &#125;);    </div><div class=\"line\">                   &#125;&#125;,    </div><div class=\"line\">                   <span class=\"string\">'row='</span> + <span class=\"built_in\">encodeURIComponent</span>(Ext.encode(data))      </div><div class=\"line\">               );     </div><div class=\"line\">           &#125;      </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"对记录进行分组\"><a href=\"#对记录进行分组\" class=\"headerlink\" title=\"对记录进行分组\"></a>对记录进行分组</h2><p>此外ExtJS Grid还可以对数据进行分组，要建立一个按列分组的表格就要使用Ext.data.GroupingStore这个类。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> store = <span class=\"keyword\">new</span> Ext.data.GroupingStore(&#123;  </div><div class=\"line\">    <span class=\"attr\">reader</span>: reader,  </div><div class=\"line\">    <span class=\"attr\">data</span>: data,  </div><div class=\"line\">    <span class=\"attr\">groupField</span>: <span class=\"string\">'sex'</span>,  </div><div class=\"line\">    <span class=\"attr\">sortInfo</span>: &#123;<span class=\"attr\">field</span>: <span class=\"string\">'name'</span>, <span class=\"attr\">direction</span>: <span class=\"string\">\"ASC\"</span>&#125;  </div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> grid = <span class=\"keyword\">new</span> Ext.grid.GridPanel(&#123;  </div><div class=\"line\">    <span class=\"attr\">autoHeight</span>: <span class=\"literal\">true</span>,  </div><div class=\"line\">    <span class=\"attr\">store</span>: store,  </div><div class=\"line\">    <span class=\"attr\">columns</span>: columns,  </div><div class=\"line\">    <span class=\"attr\">view</span>: <span class=\"keyword\">new</span> Ext.grid.GroupingView(),  </div><div class=\"line\">    <span class=\"attr\">renderTo</span>: <span class=\"string\">'grid'</span>  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>ExtJS各种各样的组件和控件有很多，做的都很漂亮，还可以自己定制样式，使用继承来拓展ExtJS的功能，ExtJS的介绍就到这了，更多的功能我今后还会继续研究的。</p>\n","excerpt":"<p>很多时候我们表格里显示的数据是从后台查询出来的海量数据，那么海量的数据显示在表格里用户的体验肯定会很差，效率也会很低。ExtJS为了解决这个问题，就给我们提供了一个非常强大的分页组件。今天我们就研究一下ExtJS的分页技术。","more":"</p>\n<h2 id=\"为表格添加分页组件\"><a href=\"#为表格添加分页组件\" class=\"headerlink\" title=\"为表格添加分页组件\"></a>为表格添加分页组件</h2><p>要为表格添加分页组件，就要先创建Ext.PagingToolbar类的实例对象，然后将它添加到Panel中去。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">gridPanel = <span class=\"keyword\">new</span> Ext.grid.GridPanel(&#123;  </div><div class=\"line\">      <span class=\"attr\">autoHeight</span>: <span class=\"literal\">true</span>,  </div><div class=\"line\">      <span class=\"attr\">renderTo</span>: <span class=\"string\">'grid'</span>,   </div><div class=\"line\">      <span class=\"attr\">store</span>: store,       </div><div class=\"line\">      <span class=\"attr\">cm</span>: cm,   </div><div class=\"line\">      <span class=\"attr\">sm</span>:mm,  </div><div class=\"line\">      <span class=\"attr\">bbar</span>:<span class=\"keyword\">new</span> Ext.PagingToolbar(&#123;  </div><div class=\"line\">      <span class=\"attr\">pageSize</span>:<span class=\"number\">3</span>,  </div><div class=\"line\">      <span class=\"attr\">store</span>:store,  </div><div class=\"line\">      <span class=\"attr\">displayInfo</span>:<span class=\"literal\">true</span>,  </div><div class=\"line\">      <span class=\"attr\">displayMsg</span>:<span class=\"string\">'显示记录 &#123;0&#125; - &#123;1&#125; of &#123;2&#125;'</span>,  </div><div class=\"line\">      <span class=\"attr\">emptyMsg</span>:<span class=\"string\">\"没有记录\"</span>  </div><div class=\"line\">      &#125;)  </div><div class=\"line\"> &#125;);</div></pre></td></tr></table></figure></p>\n<p>PagingToolbar类的属性描述：</p>\n<ul>\n<li>pageSize：每页显示的记录条数。</li>\n<li>displayInfo：是否显示记录信息。</li>\n<li>displayMsg：该属性值为true时，该属性才有效。{0}：表示当前显示的记录起始数。{1}：表示显示记录数的结尾数。{2}：表示总共多少记录。</li>\n<li>emptyMsg：当没有记录的时候显示的文本信息。  </li>\n</ul>\n<h2 id=\"从服务器端获得分页数据\"><a href=\"#从服务器端获得分页数据\" class=\"headerlink\" title=\"从服务器端获得分页数据\"></a>从服务器端获得分页数据</h2><p>如果使用静态数据，Grid每次都会将所有数据显示。所以这里我们就编写一个Servlet来生成动态数据生成Grid。Servlet将接受两个请求数据start和limit。Start表示当前页显示记录的起始位置，limit表示每页显示的记录数。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GridServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;  </div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;      </div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span>  </div><div class=\"line\">   <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;  </div><div class=\"line\">  response.setContentType(<span class=\"string\">\"text/html;charset=gbk\"</span>);  </div><div class=\"line\">  PrintWriter out = response.getWriter();  </div><div class=\"line\">  String start = request.getParameter(<span class=\"string\">\"start\"</span>);  </div><div class=\"line\">  String limit = request.getParameter(<span class=\"string\">\"limit\"</span>);  </div><div class=\"line\">  <span class=\"keyword\">int</span> index = Integer.parseInt(start);  </div><div class=\"line\">  <span class=\"keyword\">int</span> pageSize = Integer.parseInt(limit);  </div><div class=\"line\">  <span class=\"keyword\">int</span> total = <span class=\"number\">100000</span>;  </div><div class=\"line\">  String jsonStr = <span class=\"string\">\"&#123;total:\"</span> + total + <span class=\"string\">\",root:[\"</span>;  </div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = index; i &lt; pageSize + index; i++)  </div><div class=\"line\">  &#123;  </div><div class=\"line\">   <span class=\"keyword\">int</span> productIndex = i + <span class=\"number\">1</span>;  </div><div class=\"line\">   jsonStr += <span class=\"string\">\"&#123;product_id:\"</span> + productIndex + <span class=\"string\">\",product_name:'产品\"</span>  </div><div class=\"line\">     + productIndex + <span class=\"string\">\"',product_price:'价格\"</span> + productIndex  </div><div class=\"line\">     + <span class=\"string\">\"'&#125;\"</span>;  </div><div class=\"line\">   <span class=\"keyword\">if</span> (i != pageSize + index - <span class=\"number\">1</span>)  </div><div class=\"line\">    jsonStr += <span class=\"string\">\",\"</span>;  </div><div class=\"line\">  &#125;  </div><div class=\"line\">  jsonStr += <span class=\"string\">\"]&#125;\"</span>;  </div><div class=\"line\">  out.println(jsonStr);  </div><div class=\"line\"> &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>要通过服务器来接收数据生成表格，就必须使用HttpProxy来制定URL。还有，服务器传递过来的数据是Json格式的，就不能使用ArrayReader了，需要使用的是JsonReader。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">Ext.onReady(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;  </div><div class=\"line\"> <span class=\"keyword\">var</span> mm = <span class=\"keyword\">new</span> Ext.grid.CheckboxSelectionModel();  </div><div class=\"line\">    <span class=\"keyword\">var</span> cm = <span class=\"keyword\">new</span> Ext.grid.ColumnModel([  </div><div class=\"line\">        <span class=\"keyword\">new</span> Ext.grid.RowNumberer(),  </div><div class=\"line\">        mm,  </div><div class=\"line\">        &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品编号'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_id'</span>&#125;,  </div><div class=\"line\">        &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品名称'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_name'</span>&#125;,  </div><div class=\"line\">        &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品价格'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_price'</span>&#125;  </div><div class=\"line\">    ]);    </div><div class=\"line\"> <span class=\"keyword\">var</span> store = <span class=\"keyword\">new</span> Ext.data.Store(&#123;  </div><div class=\"line\">        <span class=\"attr\">proxy</span>: <span class=\"keyword\">new</span> Ext.data.HttpProxy(&#123;<span class=\"attr\">url</span>:<span class=\"string\">'../GridServlet'</span>&#125;),  </div><div class=\"line\">        <span class=\"attr\">reader</span>: <span class=\"keyword\">new</span> Ext.data.JsonReader(&#123;  </div><div class=\"line\">         <span class=\"attr\">totalProperty</span>:<span class=\"string\">'total'</span>,  </div><div class=\"line\">         <span class=\"attr\">root</span>:<span class=\"string\">'root'</span>  </div><div class=\"line\">        &#125;,[  </div><div class=\"line\">           &#123;<span class=\"attr\">name</span>:<span class=\"string\">'product_id'</span>&#125;,  </div><div class=\"line\">           &#123;<span class=\"attr\">name</span>:<span class=\"string\">'product_name'</span>&#125;,  </div><div class=\"line\">           &#123;<span class=\"attr\">name</span>:<span class=\"string\">'product_price'</span>&#125;  </div><div class=\"line\">        ])   </div><div class=\"line\">    &#125;);  </div><div class=\"line\">store.load(&#123;<span class=\"attr\">params</span>:&#123;<span class=\"attr\">start</span>:<span class=\"number\">0</span>,<span class=\"attr\">limit</span>:<span class=\"number\">10</span>&#125;&#125;);  </div><div class=\"line\">    <span class=\"keyword\">var</span> gridPanel = <span class=\"keyword\">new</span> Ext.grid.GridPanel(&#123;  </div><div class=\"line\">        <span class=\"attr\">autoHeight</span>: <span class=\"literal\">true</span>,  </div><div class=\"line\">        <span class=\"attr\">renderTo</span>: <span class=\"string\">'grid'</span>,          </div><div class=\"line\">        <span class=\"attr\">store</span>: store,  </div><div class=\"line\">        <span class=\"attr\">cm</span>: cm,  </div><div class=\"line\">        <span class=\"attr\">sm</span>:mm,  </div><div class=\"line\">        <span class=\"attr\">bbar</span>:<span class=\"keyword\">new</span> Ext.PagingToolbar(&#123;  </div><div class=\"line\">         <span class=\"attr\">pageSize</span>:<span class=\"number\">10</span>,  </div><div class=\"line\">         <span class=\"attr\">store</span>:store,  </div><div class=\"line\">         <span class=\"attr\">displayInfo</span>:<span class=\"literal\">true</span>,  </div><div class=\"line\">         <span class=\"attr\">displayMsg</span>:<span class=\"string\">'显示记录 &#123;0&#125; - &#123;1&#125; of &#123;2&#125;'</span>,  </div><div class=\"line\">         <span class=\"attr\">emptyMsg</span>:<span class=\"string\">\"没有记录\"</span>  </div><div class=\"line\">        &#125;)  </div><div class=\"line\">    &#125;);   </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>这样一个简单的ExtJS Grid分页就实现了。要想让用户体验更高就应该让用户可以在自己刚刚查询出来的数据表格上进行数据编辑，可以进行增删改查。可编辑的表格就在在想要能编辑的列里注册一个TextField组件，这个组件需要使用Ext.grid.GridEditor类来封装。  </p>\n<h2 id=\"第一个可编辑表格\"><a href=\"#第一个可编辑表格\" class=\"headerlink\" title=\"第一个可编辑表格\"></a>第一个可编辑表格</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">cm = <span class=\"keyword\">new</span> Ext.grid.ColumnModel([  </div><div class=\"line\"><span class=\"keyword\">new</span> Ext.grid.RowNumberer(),  </div><div class=\"line\"> &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品编号'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_id'</span>&#125;,  </div><div class=\"line\"> &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品名称'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_name'</span>,<span class=\"attr\">editor</span>:<span class=\"keyword\">new</span> Ext.grid.GridEditor(<span class=\"keyword\">new</span> Ext.form.TextField(&#123;<span class=\"attr\">allowBlank</span>:<span class=\"literal\">false</span>&#125;))&#125;,  </div><div class=\"line\"> &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品价格'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_price'</span>,<span class=\"attr\">editor</span>:<span class=\"keyword\">new</span> Ext.grid.GridEditor(<span class=\"keyword\">new</span> Ext.form.TextField(&#123;<span class=\"attr\">allowBlank</span>:<span class=\"literal\">false</span>&#125;))&#125;  </div><div class=\"line\">]);</div></pre></td></tr></table></figure>\n<p>使用了可编辑的对象就需要建立一个Ext.grid.EditorGridPanel来代替Ext.grid.GridPanel。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">gridPanel = <span class=\"keyword\">new</span> Ext.grid.EditorGridPanel(&#123;  </div><div class=\"line\">  <span class=\"attr\">autoHeight</span>: <span class=\"literal\">true</span>,  </div><div class=\"line\">  <span class=\"attr\">renderTo</span>: <span class=\"string\">'grid'</span>,      </div><div class=\"line\">  <span class=\"attr\">store</span>: store,  </div><div class=\"line\">  <span class=\"attr\">cm</span>: cm,  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>这时默认的是双击编辑，如果想设置成单击编辑的话就需要做如下改动。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">gridPanel = <span class=\"keyword\">new</span> Ext.grid.EditorGridPanel(&#123;  </div><div class=\"line\">  <span class=\"attr\">autoHeight</span>: <span class=\"literal\">true</span>,  </div><div class=\"line\">  <span class=\"attr\">renderTo</span>: <span class=\"string\">'grid'</span>,          </div><div class=\"line\">  <span class=\"attr\">store</span>: store,  </div><div class=\"line\">  <span class=\"comment\">//值为1的时候就是单击，2就是双击。  </span></div><div class=\"line\">  clicksToEdit:<span class=\"number\">1</span>,  </div><div class=\"line\">  <span class=\"attr\">cm</span>: cm,  </div><div class=\"line\">  <span class=\"attr\">sm</span>:mm  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h2 id=\"向表格中添加新行和删除一行\"><a href=\"#向表格中添加新行和删除一行\" class=\"headerlink\" title=\"向表格中添加新行和删除一行\"></a>向表格中添加新行和删除一行</h2><p>添加新的一行是使用Store类的insert方法插入一个新的Ext.data.Record对象，删除用的是remove方法,为了使插入的新行所有列都能编辑，我们要把所有列都设为可编辑。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">cm = <span class=\"keyword\">new</span> Ext.grid.ColumnModel([  </div><div class=\"line\">  <span class=\"keyword\">new</span> Ext.grid.RowNumberer(),  </div><div class=\"line\">  mm,  </div><div class=\"line\">  &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品编号'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_id'</span>,<span class=\"attr\">editor</span>:<span class=\"keyword\">new</span> Ext.grid.GridEditor(<span class=\"keyword\">new</span> Ext.form.TextField(&#123;<span class=\"attr\">allowBlank</span>:<span class=\"literal\">false</span>&#125;))&#125;,  </div><div class=\"line\">  &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品名称'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_name'</span>,<span class=\"attr\">editor</span>:<span class=\"keyword\">new</span> Ext.grid.GridEditor(<span class=\"keyword\">new</span> Ext.form.TextField(&#123;<span class=\"attr\">allowBlank</span>:<span class=\"literal\">false</span>&#125;))&#125;,  </div><div class=\"line\">  &#123;<span class=\"attr\">header</span>:<span class=\"string\">'产品价格'</span>,<span class=\"attr\">dataIndex</span>:<span class=\"string\">'product_price'</span>,<span class=\"attr\">editor</span>:<span class=\"keyword\">new</span> Ext.grid.GridEditor(<span class=\"keyword\">new</span> Ext.form.TextField(&#123;<span class=\"attr\">allowBlank</span>:<span class=\"literal\">false</span>&#125;))&#125;  </div><div class=\"line\">]);</div></pre></td></tr></table></figure></p>\n<p>将所想要编辑的列添加Ext.grid.GridEditor对象就能是该列可编辑,接着我们要在表格组件的上方添加两个按键，分别是增加和删除。代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> gridPanel = <span class=\"keyword\">new</span> Ext.grid.EditorGridPanel(&#123;    </div><div class=\"line\">       <span class=\"attr\">autoHeight</span>: <span class=\"literal\">true</span>,      </div><div class=\"line\">       <span class=\"attr\">renderTo</span>: <span class=\"string\">'grid'</span>,      </div><div class=\"line\">       <span class=\"attr\">store</span>: store,      </div><div class=\"line\">       <span class=\"attr\">cm</span>: cm,    </div><div class=\"line\">       <span class=\"attr\">tbar</span>: <span class=\"keyword\">new</span> Ext.Toolbar([<span class=\"string\">'-'</span>, &#123;      </div><div class=\"line\">           <span class=\"attr\">text</span>: <span class=\"string\">'添加一行'</span>,      </div><div class=\"line\">           <span class=\"attr\">handler</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;   </div><div class=\"line\">               <span class=\"keyword\">var</span> record = <span class=\"keyword\">new</span> Ext.data.Record(&#123;     </div><div class=\"line\">                <span class=\"attr\">product_id</span>:<span class=\"string\">''</span>,  </div><div class=\"line\">                <span class=\"attr\">product_name</span>:<span class=\"string\">''</span>,  </div><div class=\"line\">                <span class=\"attr\">product_price</span>:<span class=\"string\">''</span>  </div><div class=\"line\">               &#125;);  </div><div class=\"line\">               gridPanel.stopEditing();                  </div><div class=\"line\">               store.insert(store.getCount(),record);  </div><div class=\"line\">               gridPanel.startEditing(store.getCount()<span class=\"number\">-1</span>,<span class=\"number\">0</span>);  </div><div class=\"line\">           &#125;  </div><div class=\"line\">       &#125;, <span class=\"string\">'-'</span>, &#123;  </div><div class=\"line\">           <span class=\"attr\">text</span>: <span class=\"string\">'删除一行'</span>,  </div><div class=\"line\">           <span class=\"attr\">handler</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;  </div><div class=\"line\">               Ext.Msg.confirm(<span class=\"string\">'信息'</span>, <span class=\"string\">'是否删除当前记录？'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">btn</span>)</span>&#123;  </div><div class=\"line\">                   <span class=\"keyword\">if</span> (btn == <span class=\"string\">'yes'</span>) &#123;  </div><div class=\"line\">                       <span class=\"keyword\">var</span> sm = gridPanel.getSelectionModel();  </div><div class=\"line\">                       <span class=\"keyword\">var</span> cell = sm.getSelectedCell();  </div><div class=\"line\">                       <span class=\"keyword\">var</span> record = store.getAt(cell[<span class=\"number\">0</span>]);  </div><div class=\"line\">                       store.remove(record);  </div><div class=\"line\">                   &#125;  </div><div class=\"line\">               &#125;);    </div><div class=\"line\">           &#125;      </div><div class=\"line\">       &#125;, <span class=\"string\">'-'</span>])   </div><div class=\"line\">   &#125;);</div></pre></td></tr></table></figure></p>\n<h2 id=\"保存数据\"><a href=\"#保存数据\" class=\"headerlink\" title=\"保存数据\"></a>保存数据</h2><p>论是添加或是修改了表格中的数据后，一般我们都要将结果提交到服务器，在ExtJS中Slice类就是干这个用的。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;  </div><div class=\"line\">           <span class=\"attr\">text</span>: <span class=\"string\">'保存'</span>,    </div><div class=\"line\">           <span class=\"attr\">handler</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;   </div><div class=\"line\">               <span class=\"keyword\">var</span> m = store.modified.slice(<span class=\"number\">0</span>);   </div><div class=\"line\">               <span class=\"keyword\">var</span> data = [];     </div><div class=\"line\">               Ext.each(m, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>) </span>&#123;   </div><div class=\"line\">                   data.push(item.data);      </div><div class=\"line\">               &#125;);    </div><div class=\"line\">               alert(Ext.encode(data));   </div><div class=\"line\">               Ext.lib.Ajax.request(      </div><div class=\"line\">                   <span class=\"string\">'POST'</span>,    </div><div class=\"line\">                   <span class=\"string\">'SaveData'</span>,    </div><div class=\"line\">                   &#123;<span class=\"attr\">success</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>)</span>&#123;      </div><div class=\"line\">                       Ext.Msg.alert(<span class=\"string\">'信息'</span>, response.responseText, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;     </div><div class=\"line\">                           store.reload();    </div><div class=\"line\">                       &#125;);    </div><div class=\"line\">                   &#125;&#125;,    </div><div class=\"line\">                   <span class=\"string\">'row='</span> + <span class=\"built_in\">encodeURIComponent</span>(Ext.encode(data))      </div><div class=\"line\">               );     </div><div class=\"line\">           &#125;      </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"对记录进行分组\"><a href=\"#对记录进行分组\" class=\"headerlink\" title=\"对记录进行分组\"></a>对记录进行分组</h2><p>此外ExtJS Grid还可以对数据进行分组，要建立一个按列分组的表格就要使用Ext.data.GroupingStore这个类。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> store = <span class=\"keyword\">new</span> Ext.data.GroupingStore(&#123;  </div><div class=\"line\">    <span class=\"attr\">reader</span>: reader,  </div><div class=\"line\">    <span class=\"attr\">data</span>: data,  </div><div class=\"line\">    <span class=\"attr\">groupField</span>: <span class=\"string\">'sex'</span>,  </div><div class=\"line\">    <span class=\"attr\">sortInfo</span>: &#123;<span class=\"attr\">field</span>: <span class=\"string\">'name'</span>, <span class=\"attr\">direction</span>: <span class=\"string\">\"ASC\"</span>&#125;  </div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> grid = <span class=\"keyword\">new</span> Ext.grid.GridPanel(&#123;  </div><div class=\"line\">    <span class=\"attr\">autoHeight</span>: <span class=\"literal\">true</span>,  </div><div class=\"line\">    <span class=\"attr\">store</span>: store,  </div><div class=\"line\">    <span class=\"attr\">columns</span>: columns,  </div><div class=\"line\">    <span class=\"attr\">view</span>: <span class=\"keyword\">new</span> Ext.grid.GroupingView(),  </div><div class=\"line\">    <span class=\"attr\">renderTo</span>: <span class=\"string\">'grid'</span>  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>ExtJS各种各样的组件和控件有很多，做的都很漂亮，还可以自己定制样式，使用继承来拓展ExtJS的功能，ExtJS的介绍就到这了，更多的功能我今后还会继续研究的。</p>"},{"title":"设计模式在游戏开发中的应用之命令模式","date":"2016-11-29T06:13:45.000Z","_content":"设计模式在一些大型的软件系统中非常常用，用来处理复杂的结构和逻辑。游戏其实也是一个软件系统，也会有庞大的系统，复杂的逻辑关系，对设计模式的合理使用可以帮助我们更好的去组织各个系统模块，优化逻辑关系，使之可以更好的维护和拓展。本文对常用的设计模式在游戏中的应用进行讨论，而不对设计模式的原理进行过多的阐述了。本文的例子代码也是伪代码，不能够运行。<!--more-->\n\n# 命令模式\n## 通俗的定义  \n将一组行为抽象为对象，使用不同的组合方式来执行命令，以实现解耦。本文介绍的命令模式可能与GoF上的稍有不同，是我自己对游戏开发中设计模式应用的理解。  \n## 结构图：\n![commond](/images/design_1_commond.png)\n## 游戏开发中的使用\n考虑以下场景，假如我们在设计一款RPG游戏，在野外地图肯定会有野怪，野怪会有一些AI逻辑，我们打算设计一套合理的怪物模块。大概如下：\n``` java\n//怪物基类  \nclass Monster {  \n    //行走巡逻  \n    public walk();  \n    //攻击  \n    public attack();  \n    //逃跑  \n    public escape();  \n}\n``` 大体设计包含了怪物行走、攻击和逃跑三个通用的行为特征。很快策划提出了新需求，要加入精英怪物类型，并且精英怪物有他自己独特的逻辑。嗯，幸好我们抽象出了怪物基类，只要继承过来，再增加新的行为即可，新增的精英怪物如下：\n``` java\n//精英怪物  \nclass EliteMonster extends Monster {  \n    //精英怪物独有的行为  \n    public eliteBehavior()  \n}  \n```\n这样就很快的实现了新的需求，EliteMonster继承了Monster基础行为，并且增加了新的行为。接着没过多久策划又提出我们要有BOSS，是的，游戏怎么能没有BOSS呢，好吧我们来添加，毕竟我们设计好了基础行为，只要继承过来，在添加新的行为就好了：\n``` java\n//BOSS  \nclass BossMonster extends Monster {  \n    //BOSS独有的行为  \n    public bossBehavior()  \n}  \n```\n看来我们的代码还是挺健壮的，每次都可以快速的增加新的怪物。但是紧接着新都修改需求提出来了：我们要让BOSS拥有精英怪物的行为。怎么办？还好，我们的程序足够健壮，修改一下继承关系就好了，我们让BossMonster来继承EliteMonster，虽然修改继承关系看起来很危险，但是我们还是完美的解决了问题，BOSS拥有了新的行为。经过一段时间，我们有设计了新的怪物：\n``` java\n//普通怪物  \nclass SimpleMonster extends Monster {  \n    //普通怪物独有的行为  \n    public simpleBehavior()  \n} \n```\n这时不幸的消息传来了：我们想让BOSS同时拥有精英怪物和普通怪物的行为！现在我们有几种解决方案：\n- 把精英怪物的行为和普通怪物的行为，封装到Monster里，作为基础行为，但是这样的话，就是所有怪物都会继承这两种行为，这种多余的基础是我们不想看到的。\n- 就是把SimpleMonster的行为复制一份给BOSS，让BOSS在继承EliteMonster的同时拥有SimpleMonster的行为，但是这样就会有代码的冗余，后面我们修改这种行为的时候就要在两个地方修改。\n- 期望你使用的语言可以多继承。然而多继承并不是一个好的特性和方案。\n\n这时我们想一想，算了，代码冗余就冗余一下吧，毕竟大多数需求我们还是可以很好的实现的。就在我们觉得可以满足需求时，更糟糕的需求又提交过来了：我们需要挂机功能，玩家的角色需要实现一部分AI功能，这时就麻烦了，我们怎么调整这个继承关系，让Player继承谁？看起来继承谁都不太合理。这时我们就要思考一下到底该怎么设计行为这部分，才能让我们适应各种需求的改动。看一下下面这种设计：\n``` java\n//游戏中行为对象的基类  \nclass GameActor {  \n}  \n//玩家对象  \nclass Player extends GameActor {  \n  \n}  \n//命令抽象接口  \ninterface ICommond {  \n    public execute(GameActor ga);  \n}  \n//攻击命令  \nclass AttackCommond {  \n    //参数可以是任何一个行为对象  \n    public execute(GameActor ga);  \n}  \n//执行命令的类  \nclass CommondInvoke {  \n    public addCommond(ICommond commond);  \n    public execute();  \n}  \n//创建一个玩家对象  \nPlayer p = new Player();  \n//创建一个攻击命令  \nICommond attackCommond = new AttackCommond(p);  \n//让玩家执行攻击命令  \nCommondInvoke invoke = new CommondInvoke();  \ninvoke.addCommond(attackCommond);  \ninvoke.execute() \n```\n行为对象都继承GameActor，可以随时增加新的对象。行为命令需要传入一个行为对象来执行行为动作，这里命令与对象进行了解耦，命令与对象可以随意增加与组合。CommondInvoke也可以进一步优化，可以执行多条命令，可以倒序或顺序执行，可以同步或异步，甚至可以随时添加、删除和修改。多个命令的组合也是命令模式的一个特点。此外命令模式还可以处理事务回滚：\n``` java\n//命令抽象接口  \ninterface ICommond {  \n    public execute(GameActor ga);  \n    //撤销函数  \n    public undo();  \n}  \n```\n事务回滚这个特性在服务器中比较常用，比如玩家的一次购买行为，肯定是要保障金钱扣除，道具添加同时打成，否则就算是事务失败，要把修改的内容还原，这时就可以调用undo进行回滚。命令模式暂时介绍这些，下一篇会介绍观察者模式。\n\n","source":"_posts/design-commond.md","raw":"---\ntitle: 设计模式在游戏开发中的应用之命令模式\ndate: 2016-11-29 14:13:45\ntags: 命令模式\ncategories: 设计模式\n---\n设计模式在一些大型的软件系统中非常常用，用来处理复杂的结构和逻辑。游戏其实也是一个软件系统，也会有庞大的系统，复杂的逻辑关系，对设计模式的合理使用可以帮助我们更好的去组织各个系统模块，优化逻辑关系，使之可以更好的维护和拓展。本文对常用的设计模式在游戏中的应用进行讨论，而不对设计模式的原理进行过多的阐述了。本文的例子代码也是伪代码，不能够运行。<!--more-->\n\n# 命令模式\n## 通俗的定义  \n将一组行为抽象为对象，使用不同的组合方式来执行命令，以实现解耦。本文介绍的命令模式可能与GoF上的稍有不同，是我自己对游戏开发中设计模式应用的理解。  \n## 结构图：\n![commond](/images/design_1_commond.png)\n## 游戏开发中的使用\n考虑以下场景，假如我们在设计一款RPG游戏，在野外地图肯定会有野怪，野怪会有一些AI逻辑，我们打算设计一套合理的怪物模块。大概如下：\n``` java\n//怪物基类  \nclass Monster {  \n    //行走巡逻  \n    public walk();  \n    //攻击  \n    public attack();  \n    //逃跑  \n    public escape();  \n}\n``` 大体设计包含了怪物行走、攻击和逃跑三个通用的行为特征。很快策划提出了新需求，要加入精英怪物类型，并且精英怪物有他自己独特的逻辑。嗯，幸好我们抽象出了怪物基类，只要继承过来，再增加新的行为即可，新增的精英怪物如下：\n``` java\n//精英怪物  \nclass EliteMonster extends Monster {  \n    //精英怪物独有的行为  \n    public eliteBehavior()  \n}  \n```\n这样就很快的实现了新的需求，EliteMonster继承了Monster基础行为，并且增加了新的行为。接着没过多久策划又提出我们要有BOSS，是的，游戏怎么能没有BOSS呢，好吧我们来添加，毕竟我们设计好了基础行为，只要继承过来，在添加新的行为就好了：\n``` java\n//BOSS  \nclass BossMonster extends Monster {  \n    //BOSS独有的行为  \n    public bossBehavior()  \n}  \n```\n看来我们的代码还是挺健壮的，每次都可以快速的增加新的怪物。但是紧接着新都修改需求提出来了：我们要让BOSS拥有精英怪物的行为。怎么办？还好，我们的程序足够健壮，修改一下继承关系就好了，我们让BossMonster来继承EliteMonster，虽然修改继承关系看起来很危险，但是我们还是完美的解决了问题，BOSS拥有了新的行为。经过一段时间，我们有设计了新的怪物：\n``` java\n//普通怪物  \nclass SimpleMonster extends Monster {  \n    //普通怪物独有的行为  \n    public simpleBehavior()  \n} \n```\n这时不幸的消息传来了：我们想让BOSS同时拥有精英怪物和普通怪物的行为！现在我们有几种解决方案：\n- 把精英怪物的行为和普通怪物的行为，封装到Monster里，作为基础行为，但是这样的话，就是所有怪物都会继承这两种行为，这种多余的基础是我们不想看到的。\n- 就是把SimpleMonster的行为复制一份给BOSS，让BOSS在继承EliteMonster的同时拥有SimpleMonster的行为，但是这样就会有代码的冗余，后面我们修改这种行为的时候就要在两个地方修改。\n- 期望你使用的语言可以多继承。然而多继承并不是一个好的特性和方案。\n\n这时我们想一想，算了，代码冗余就冗余一下吧，毕竟大多数需求我们还是可以很好的实现的。就在我们觉得可以满足需求时，更糟糕的需求又提交过来了：我们需要挂机功能，玩家的角色需要实现一部分AI功能，这时就麻烦了，我们怎么调整这个继承关系，让Player继承谁？看起来继承谁都不太合理。这时我们就要思考一下到底该怎么设计行为这部分，才能让我们适应各种需求的改动。看一下下面这种设计：\n``` java\n//游戏中行为对象的基类  \nclass GameActor {  \n}  \n//玩家对象  \nclass Player extends GameActor {  \n  \n}  \n//命令抽象接口  \ninterface ICommond {  \n    public execute(GameActor ga);  \n}  \n//攻击命令  \nclass AttackCommond {  \n    //参数可以是任何一个行为对象  \n    public execute(GameActor ga);  \n}  \n//执行命令的类  \nclass CommondInvoke {  \n    public addCommond(ICommond commond);  \n    public execute();  \n}  \n//创建一个玩家对象  \nPlayer p = new Player();  \n//创建一个攻击命令  \nICommond attackCommond = new AttackCommond(p);  \n//让玩家执行攻击命令  \nCommondInvoke invoke = new CommondInvoke();  \ninvoke.addCommond(attackCommond);  \ninvoke.execute() \n```\n行为对象都继承GameActor，可以随时增加新的对象。行为命令需要传入一个行为对象来执行行为动作，这里命令与对象进行了解耦，命令与对象可以随意增加与组合。CommondInvoke也可以进一步优化，可以执行多条命令，可以倒序或顺序执行，可以同步或异步，甚至可以随时添加、删除和修改。多个命令的组合也是命令模式的一个特点。此外命令模式还可以处理事务回滚：\n``` java\n//命令抽象接口  \ninterface ICommond {  \n    public execute(GameActor ga);  \n    //撤销函数  \n    public undo();  \n}  \n```\n事务回滚这个特性在服务器中比较常用，比如玩家的一次购买行为，肯定是要保障金钱扣除，道具添加同时打成，否则就算是事务失败，要把修改的内容还原，这时就可以调用undo进行回滚。命令模式暂时介绍这些，下一篇会介绍观察者模式。\n\n","slug":"design-commond","published":1,"updated":"2016-12-01T14:17:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw6kw3tr0008p5s6c0r5bkfj","content":"<p>设计模式在一些大型的软件系统中非常常用，用来处理复杂的结构和逻辑。游戏其实也是一个软件系统，也会有庞大的系统，复杂的逻辑关系，对设计模式的合理使用可以帮助我们更好的去组织各个系统模块，优化逻辑关系，使之可以更好的维护和拓展。本文对常用的设计模式在游戏中的应用进行讨论，而不对设计模式的原理进行过多的阐述了。本文的例子代码也是伪代码，不能够运行。<a id=\"more\"></a></p>\n<h1 id=\"命令模式\"><a href=\"#命令模式\" class=\"headerlink\" title=\"命令模式\"></a>命令模式</h1><h2 id=\"通俗的定义\"><a href=\"#通俗的定义\" class=\"headerlink\" title=\"通俗的定义\"></a>通俗的定义</h2><p>将一组行为抽象为对象，使用不同的组合方式来执行命令，以实现解耦。本文介绍的命令模式可能与GoF上的稍有不同，是我自己对游戏开发中设计模式应用的理解。  </p>\n<h2 id=\"结构图：\"><a href=\"#结构图：\" class=\"headerlink\" title=\"结构图：\"></a>结构图：</h2><p><img src=\"/images/design_1_commond.png\" alt=\"commond\"></p>\n<h2 id=\"游戏开发中的使用\"><a href=\"#游戏开发中的使用\" class=\"headerlink\" title=\"游戏开发中的使用\"></a>游戏开发中的使用</h2><p>考虑以下场景，假如我们在设计一款RPG游戏，在野外地图肯定会有野怪，野怪会有一些AI逻辑，我们打算设计一套合理的怪物模块。大概如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//怪物基类  </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Monster</span> </span>&#123;  </div><div class=\"line\">    <span class=\"comment\">//行走巡逻  </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">walk</span><span class=\"params\">()</span></span>;  </div><div class=\"line\">    <span class=\"comment\">//攻击  </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">attack</span><span class=\"params\">()</span></span>;  </div><div class=\"line\">    <span class=\"comment\">//逃跑  </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">escape</span><span class=\"params\">()</span></span>;  </div><div class=\"line\">&#125;</div><div class=\"line\">``` 大体设计包含了怪物行走、攻击和逃跑三个通用的行为特征。很快策划提出了新需求，要加入精英怪物类型，并且精英怪物有他自己独特的逻辑。嗯，幸好我们抽象出了怪物基类，只要继承过来，再增加新的行为即可，新增的精英怪物如下：</div><div class=\"line\">``` java</div><div class=\"line\"><span class=\"comment\">//精英怪物  </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EliteMonster</span> <span class=\"keyword\">extends</span> <span class=\"title\">Monster</span> </span>&#123;  </div><div class=\"line\">    <span class=\"comment\">//精英怪物独有的行为  </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">eliteBehavior</span><span class=\"params\">()</span>  </span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这样就很快的实现了新的需求，EliteMonster继承了Monster基础行为，并且增加了新的行为。接着没过多久策划又提出我们要有BOSS，是的，游戏怎么能没有BOSS呢，好吧我们来添加，毕竟我们设计好了基础行为，只要继承过来，在添加新的行为就好了：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//BOSS  </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BossMonster</span> <span class=\"keyword\">extends</span> <span class=\"title\">Monster</span> </span>&#123;  </div><div class=\"line\">    <span class=\"comment\">//BOSS独有的行为  </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">bossBehavior</span><span class=\"params\">()</span>  </span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>看来我们的代码还是挺健壮的，每次都可以快速的增加新的怪物。但是紧接着新都修改需求提出来了：我们要让BOSS拥有精英怪物的行为。怎么办？还好，我们的程序足够健壮，修改一下继承关系就好了，我们让BossMonster来继承EliteMonster，虽然修改继承关系看起来很危险，但是我们还是完美的解决了问题，BOSS拥有了新的行为。经过一段时间，我们有设计了新的怪物：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//普通怪物  </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleMonster</span> <span class=\"keyword\">extends</span> <span class=\"title\">Monster</span> </span>&#123;  </div><div class=\"line\">    <span class=\"comment\">//普通怪物独有的行为  </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">simpleBehavior</span><span class=\"params\">()</span>  </span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这时不幸的消息传来了：我们想让BOSS同时拥有精英怪物和普通怪物的行为！现在我们有几种解决方案：</p>\n<ul>\n<li>把精英怪物的行为和普通怪物的行为，封装到Monster里，作为基础行为，但是这样的话，就是所有怪物都会继承这两种行为，这种多余的基础是我们不想看到的。</li>\n<li>就是把SimpleMonster的行为复制一份给BOSS，让BOSS在继承EliteMonster的同时拥有SimpleMonster的行为，但是这样就会有代码的冗余，后面我们修改这种行为的时候就要在两个地方修改。</li>\n<li>期望你使用的语言可以多继承。然而多继承并不是一个好的特性和方案。</li>\n</ul>\n<p>这时我们想一想，算了，代码冗余就冗余一下吧，毕竟大多数需求我们还是可以很好的实现的。就在我们觉得可以满足需求时，更糟糕的需求又提交过来了：我们需要挂机功能，玩家的角色需要实现一部分AI功能，这时就麻烦了，我们怎么调整这个继承关系，让Player继承谁？看起来继承谁都不太合理。这时我们就要思考一下到底该怎么设计行为这部分，才能让我们适应各种需求的改动。看一下下面这种设计：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//游戏中行为对象的基类  </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GameActor</span> </span>&#123;  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"comment\">//玩家对象  </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Player</span> <span class=\"keyword\">extends</span> <span class=\"title\">GameActor</span> </span>&#123;  </div><div class=\"line\">  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"comment\">//命令抽象接口  </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ICommond</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">execute</span><span class=\"params\">(GameActor ga)</span></span>;  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"comment\">//攻击命令  </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AttackCommond</span> </span>&#123;  </div><div class=\"line\">    <span class=\"comment\">//参数可以是任何一个行为对象  </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">execute</span><span class=\"params\">(GameActor ga)</span></span>;  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"comment\">//执行命令的类  </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommondInvoke</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">addCommond</span><span class=\"params\">(ICommond commond)</span></span>;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">execute</span><span class=\"params\">()</span></span>;  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"comment\">//创建一个玩家对象  </span></div><div class=\"line\">Player p = <span class=\"keyword\">new</span> Player();  </div><div class=\"line\"><span class=\"comment\">//创建一个攻击命令  </span></div><div class=\"line\">ICommond attackCommond = <span class=\"keyword\">new</span> AttackCommond(p);  </div><div class=\"line\"><span class=\"comment\">//让玩家执行攻击命令  </span></div><div class=\"line\">CommondInvoke invoke = <span class=\"keyword\">new</span> CommondInvoke();  </div><div class=\"line\">invoke.addCommond(attackCommond);  </div><div class=\"line\">invoke.execute()</div></pre></td></tr></table></figure></p>\n<p>行为对象都继承GameActor，可以随时增加新的对象。行为命令需要传入一个行为对象来执行行为动作，这里命令与对象进行了解耦，命令与对象可以随意增加与组合。CommondInvoke也可以进一步优化，可以执行多条命令，可以倒序或顺序执行，可以同步或异步，甚至可以随时添加、删除和修改。多个命令的组合也是命令模式的一个特点。此外命令模式还可以处理事务回滚：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//命令抽象接口  </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ICommond</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">execute</span><span class=\"params\">(GameActor ga)</span></span>;  </div><div class=\"line\">    <span class=\"comment\">//撤销函数  </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">undo</span><span class=\"params\">()</span></span>;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>事务回滚这个特性在服务器中比较常用，比如玩家的一次购买行为，肯定是要保障金钱扣除，道具添加同时打成，否则就算是事务失败，要把修改的内容还原，这时就可以调用undo进行回滚。命令模式暂时介绍这些，下一篇会介绍观察者模式。</p>\n","excerpt":"<p>设计模式在一些大型的软件系统中非常常用，用来处理复杂的结构和逻辑。游戏其实也是一个软件系统，也会有庞大的系统，复杂的逻辑关系，对设计模式的合理使用可以帮助我们更好的去组织各个系统模块，优化逻辑关系，使之可以更好的维护和拓展。本文对常用的设计模式在游戏中的应用进行讨论，而不对设计模式的原理进行过多的阐述了。本文的例子代码也是伪代码，不能够运行。","more":"</p>\n<h1 id=\"命令模式\"><a href=\"#命令模式\" class=\"headerlink\" title=\"命令模式\"></a>命令模式</h1><h2 id=\"通俗的定义\"><a href=\"#通俗的定义\" class=\"headerlink\" title=\"通俗的定义\"></a>通俗的定义</h2><p>将一组行为抽象为对象，使用不同的组合方式来执行命令，以实现解耦。本文介绍的命令模式可能与GoF上的稍有不同，是我自己对游戏开发中设计模式应用的理解。  </p>\n<h2 id=\"结构图：\"><a href=\"#结构图：\" class=\"headerlink\" title=\"结构图：\"></a>结构图：</h2><p><img src=\"/images/design_1_commond.png\" alt=\"commond\"></p>\n<h2 id=\"游戏开发中的使用\"><a href=\"#游戏开发中的使用\" class=\"headerlink\" title=\"游戏开发中的使用\"></a>游戏开发中的使用</h2><p>考虑以下场景，假如我们在设计一款RPG游戏，在野外地图肯定会有野怪，野怪会有一些AI逻辑，我们打算设计一套合理的怪物模块。大概如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//怪物基类  </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Monster</span> </span>&#123;  </div><div class=\"line\">    <span class=\"comment\">//行走巡逻  </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">walk</span><span class=\"params\">()</span></span>;  </div><div class=\"line\">    <span class=\"comment\">//攻击  </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">attack</span><span class=\"params\">()</span></span>;  </div><div class=\"line\">    <span class=\"comment\">//逃跑  </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">escape</span><span class=\"params\">()</span></span>;  </div><div class=\"line\">&#125;</div><div class=\"line\">``` 大体设计包含了怪物行走、攻击和逃跑三个通用的行为特征。很快策划提出了新需求，要加入精英怪物类型，并且精英怪物有他自己独特的逻辑。嗯，幸好我们抽象出了怪物基类，只要继承过来，再增加新的行为即可，新增的精英怪物如下：</div><div class=\"line\">``` java</div><div class=\"line\"><span class=\"comment\">//精英怪物  </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EliteMonster</span> <span class=\"keyword\">extends</span> <span class=\"title\">Monster</span> </span>&#123;  </div><div class=\"line\">    <span class=\"comment\">//精英怪物独有的行为  </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">eliteBehavior</span><span class=\"params\">()</span>  </div><div class=\"line\">&#125;</span></div></pre></td></tr></table></figure></p>\n<p>这样就很快的实现了新的需求，EliteMonster继承了Monster基础行为，并且增加了新的行为。接着没过多久策划又提出我们要有BOSS，是的，游戏怎么能没有BOSS呢，好吧我们来添加，毕竟我们设计好了基础行为，只要继承过来，在添加新的行为就好了：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//BOSS  </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BossMonster</span> <span class=\"keyword\">extends</span> <span class=\"title\">Monster</span> </span>&#123;  </div><div class=\"line\">    <span class=\"comment\">//BOSS独有的行为  </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">bossBehavior</span><span class=\"params\">()</span>  </div><div class=\"line\">&#125;</span></div></pre></td></tr></table></figure></p>\n<p>看来我们的代码还是挺健壮的，每次都可以快速的增加新的怪物。但是紧接着新都修改需求提出来了：我们要让BOSS拥有精英怪物的行为。怎么办？还好，我们的程序足够健壮，修改一下继承关系就好了，我们让BossMonster来继承EliteMonster，虽然修改继承关系看起来很危险，但是我们还是完美的解决了问题，BOSS拥有了新的行为。经过一段时间，我们有设计了新的怪物：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//普通怪物  </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleMonster</span> <span class=\"keyword\">extends</span> <span class=\"title\">Monster</span> </span>&#123;  </div><div class=\"line\">    <span class=\"comment\">//普通怪物独有的行为  </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">simpleBehavior</span><span class=\"params\">()</span>  </div><div class=\"line\">&#125;</span></div></pre></td></tr></table></figure></p>\n<p>这时不幸的消息传来了：我们想让BOSS同时拥有精英怪物和普通怪物的行为！现在我们有几种解决方案：</p>\n<ul>\n<li>把精英怪物的行为和普通怪物的行为，封装到Monster里，作为基础行为，但是这样的话，就是所有怪物都会继承这两种行为，这种多余的基础是我们不想看到的。</li>\n<li>就是把SimpleMonster的行为复制一份给BOSS，让BOSS在继承EliteMonster的同时拥有SimpleMonster的行为，但是这样就会有代码的冗余，后面我们修改这种行为的时候就要在两个地方修改。</li>\n<li>期望你使用的语言可以多继承。然而多继承并不是一个好的特性和方案。</li>\n</ul>\n<p>这时我们想一想，算了，代码冗余就冗余一下吧，毕竟大多数需求我们还是可以很好的实现的。就在我们觉得可以满足需求时，更糟糕的需求又提交过来了：我们需要挂机功能，玩家的角色需要实现一部分AI功能，这时就麻烦了，我们怎么调整这个继承关系，让Player继承谁？看起来继承谁都不太合理。这时我们就要思考一下到底该怎么设计行为这部分，才能让我们适应各种需求的改动。看一下下面这种设计：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//游戏中行为对象的基类  </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GameActor</span> </span>&#123;  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"comment\">//玩家对象  </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Player</span> <span class=\"keyword\">extends</span> <span class=\"title\">GameActor</span> </span>&#123;  </div><div class=\"line\">  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"comment\">//命令抽象接口  </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ICommond</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">execute</span><span class=\"params\">(GameActor ga)</span></span>;  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"comment\">//攻击命令  </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AttackCommond</span> </span>&#123;  </div><div class=\"line\">    <span class=\"comment\">//参数可以是任何一个行为对象  </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">execute</span><span class=\"params\">(GameActor ga)</span></span>;  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"comment\">//执行命令的类  </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommondInvoke</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">addCommond</span><span class=\"params\">(ICommond commond)</span></span>;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">execute</span><span class=\"params\">()</span></span>;  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"comment\">//创建一个玩家对象  </span></div><div class=\"line\">Player p = <span class=\"keyword\">new</span> Player();  </div><div class=\"line\"><span class=\"comment\">//创建一个攻击命令  </span></div><div class=\"line\">ICommond attackCommond = <span class=\"keyword\">new</span> AttackCommond(p);  </div><div class=\"line\"><span class=\"comment\">//让玩家执行攻击命令  </span></div><div class=\"line\">CommondInvoke invoke = <span class=\"keyword\">new</span> CommondInvoke();  </div><div class=\"line\">invoke.addCommond(attackCommond);  </div><div class=\"line\">invoke.execute()</div></pre></td></tr></table></figure></p>\n<p>行为对象都继承GameActor，可以随时增加新的对象。行为命令需要传入一个行为对象来执行行为动作，这里命令与对象进行了解耦，命令与对象可以随意增加与组合。CommondInvoke也可以进一步优化，可以执行多条命令，可以倒序或顺序执行，可以同步或异步，甚至可以随时添加、删除和修改。多个命令的组合也是命令模式的一个特点。此外命令模式还可以处理事务回滚：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//命令抽象接口  </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ICommond</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">execute</span><span class=\"params\">(GameActor ga)</span></span>;  </div><div class=\"line\">    <span class=\"comment\">//撤销函数  </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">undo</span><span class=\"params\">()</span></span>;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>事务回滚这个特性在服务器中比较常用，比如玩家的一次购买行为，肯定是要保障金钱扣除，道具添加同时打成，否则就算是事务失败，要把修改的内容还原，这时就可以调用undo进行回滚。命令模式暂时介绍这些，下一篇会介绍观察者模式。</p>"},{"title":"ExtJS初级教程之ExtJS Tree(二)","date":"2016-11-27T14:07:37.000Z","_content":"上次我将ExtJS Tree的静态树和加载服务器文件生成的树跟大家阐述了一下，今天我把怎么根据从数据库中查出的数据生成树根大家讨论一下。<!--more-->\n\n要想根据数据库生成树首先我们先要准备数据库数据，大概表的结构如下：\n![SQL](/images/tree_2_sql.png)\nsql语句我也为大家准备好了，如下：\n``` sql\n//oracle建表语句  \ncreate table  dept   (  \n    deptId              NUMBER(20)                      not null,  \n    deptName            VARCHAR2(20),  \n    higherDept          NUMBER(20),  \n   constraint PK_DEPT primary key ( deptId )  \n);  \n//测试数据  \ninsert into dept values(23010000,'哈尔滨市公安局',0);  \ninsert into dept values(23011000,'国家安全保卫队',23010000);  \ninsert into dept values(23011001,'国家安全保支队政工科',23010000);  \ninsert into dept values(23011002,'国家安全保支队秘书科',23010000);  \ninsert into dept values(23011003,'国家安全保支队一大队',23011001);  \ninsert into dept values(23011004,'国家安全保支队二大队',23011001);  \ninsert into dept values(23011005,'国家安全保支队三大队',23011004);  \ninsert into dept values(23011006,'国家安全保支队四大队',23011004);  \ninsert into dept values(23011007,'国家安全保支队五大队',23010000);  \ninsert into dept values(23011008,'国家安全保支队六大队',23011002); \n```\n当数据都准备完毕后，首先要写一个vo用来储存我们将要查询出来的数据。这个vo属性的名字有一定的要求，必须遵守以下的命名： private int id;这个是保存数据的主键的，也就是deptId，这个id是生成树结构的关键。然后是 private String text;这个是生成树时显示的内容。最后是private boolean leaf;这个属性也挺关键，它是用来决定该树的节点是否是叶子节点。先不多说，等我们把树写完就了解这些属性的功能了。  \n下面是DAO的查询方法，这个非常简单的用JDBC实现一下就好：\n``` java\npublic class DAO {  \n Connection conn;   \n PreparedStatement pstate;  \n ResultSet rs;  \n public List findAll(){  \n   \n  List list = new ArrayList();  \n  String sql = \" select deptid,deptname from dept \" ;   \n  try{  \n     \n   conn = DBConn.getConn();   \n   pstate = conn.prepareStatement(sql);  \n   rs = pstate.executeQuery();  \n     \n   while(rs.next()){    \n    Tree vo = new Tree();  \n    vo.setId(rs.getInt(\"deptid\"));  \n    vo.setText(rs.getString(\"deptname\"));  \n    vo.setLeaf(true);  \n    list.add(vo);  \n   }   \n  }catch(Exception e){     \n   e.printStackTrace();     \n  }finally{  \n    //释放资源  \n  }  \n  return list;  \n }  \n}\n```\n接着我们要在servlet中将查询出来的List数据转换成json字符串，这样ExtJS才能解析。\n``` java\nprotected void service(HttpServletRequest request, HttpServletResponse response)throws ServletException, IOException {  \n //转码  \n response.setContentType(\"text/html;charset=utf-8\");  \n PrintWriter out = response.getWriter();  \n    \n DAO dao = new DAO();  \n List list = new ArrayList();  \n list = dao.findAll();  \n //转换成json并传递给ExtJS Tree  \n response.getWriter().write(JSONTools.getJsonArray(list).toString());   \n}  \n```\n代码中的JSONTools就是将List转换成json字符串的一个工具类。最后就是关键的页面树的实现部分了：\n``` javascript\nvar tree = new Ext.tree.TreePanel({  \n el:'tree-div',  \n loader: new Ext.tree.TreeLoader({dataUrl:'../TreeNodeServlet'})  \n});  \nvar root = new Ext.tree.AsyncTreeNode({  \n    text: 'harbin',  \n    id:'23010000'  \n});  \ntree.setRootNode(root);  \ntree.render();\n```\n这样将项目部署到服务器上运行就可以看到效果了。\n\n\n","source":"_posts/Tree-2.md","raw":"---\ntitle: ExtJS初级教程之ExtJS Tree(二)\ndate: 2016-11-27 22:07:37\ntags: ExtJS\ncategories: javascript\n---\n上次我将ExtJS Tree的静态树和加载服务器文件生成的树跟大家阐述了一下，今天我把怎么根据从数据库中查出的数据生成树根大家讨论一下。<!--more-->\n\n要想根据数据库生成树首先我们先要准备数据库数据，大概表的结构如下：\n![SQL](/images/tree_2_sql.png)\nsql语句我也为大家准备好了，如下：\n``` sql\n//oracle建表语句  \ncreate table  dept   (  \n    deptId              NUMBER(20)                      not null,  \n    deptName            VARCHAR2(20),  \n    higherDept          NUMBER(20),  \n   constraint PK_DEPT primary key ( deptId )  \n);  \n//测试数据  \ninsert into dept values(23010000,'哈尔滨市公安局',0);  \ninsert into dept values(23011000,'国家安全保卫队',23010000);  \ninsert into dept values(23011001,'国家安全保支队政工科',23010000);  \ninsert into dept values(23011002,'国家安全保支队秘书科',23010000);  \ninsert into dept values(23011003,'国家安全保支队一大队',23011001);  \ninsert into dept values(23011004,'国家安全保支队二大队',23011001);  \ninsert into dept values(23011005,'国家安全保支队三大队',23011004);  \ninsert into dept values(23011006,'国家安全保支队四大队',23011004);  \ninsert into dept values(23011007,'国家安全保支队五大队',23010000);  \ninsert into dept values(23011008,'国家安全保支队六大队',23011002); \n```\n当数据都准备完毕后，首先要写一个vo用来储存我们将要查询出来的数据。这个vo属性的名字有一定的要求，必须遵守以下的命名： private int id;这个是保存数据的主键的，也就是deptId，这个id是生成树结构的关键。然后是 private String text;这个是生成树时显示的内容。最后是private boolean leaf;这个属性也挺关键，它是用来决定该树的节点是否是叶子节点。先不多说，等我们把树写完就了解这些属性的功能了。  \n下面是DAO的查询方法，这个非常简单的用JDBC实现一下就好：\n``` java\npublic class DAO {  \n Connection conn;   \n PreparedStatement pstate;  \n ResultSet rs;  \n public List findAll(){  \n   \n  List list = new ArrayList();  \n  String sql = \" select deptid,deptname from dept \" ;   \n  try{  \n     \n   conn = DBConn.getConn();   \n   pstate = conn.prepareStatement(sql);  \n   rs = pstate.executeQuery();  \n     \n   while(rs.next()){    \n    Tree vo = new Tree();  \n    vo.setId(rs.getInt(\"deptid\"));  \n    vo.setText(rs.getString(\"deptname\"));  \n    vo.setLeaf(true);  \n    list.add(vo);  \n   }   \n  }catch(Exception e){     \n   e.printStackTrace();     \n  }finally{  \n    //释放资源  \n  }  \n  return list;  \n }  \n}\n```\n接着我们要在servlet中将查询出来的List数据转换成json字符串，这样ExtJS才能解析。\n``` java\nprotected void service(HttpServletRequest request, HttpServletResponse response)throws ServletException, IOException {  \n //转码  \n response.setContentType(\"text/html;charset=utf-8\");  \n PrintWriter out = response.getWriter();  \n    \n DAO dao = new DAO();  \n List list = new ArrayList();  \n list = dao.findAll();  \n //转换成json并传递给ExtJS Tree  \n response.getWriter().write(JSONTools.getJsonArray(list).toString());   \n}  \n```\n代码中的JSONTools就是将List转换成json字符串的一个工具类。最后就是关键的页面树的实现部分了：\n``` javascript\nvar tree = new Ext.tree.TreePanel({  \n el:'tree-div',  \n loader: new Ext.tree.TreeLoader({dataUrl:'../TreeNodeServlet'})  \n});  \nvar root = new Ext.tree.AsyncTreeNode({  \n    text: 'harbin',  \n    id:'23010000'  \n});  \ntree.setRootNode(root);  \ntree.render();\n```\n这样将项目部署到服务器上运行就可以看到效果了。\n\n\n","slug":"Tree-2","published":1,"updated":"2016-11-27T14:30:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw6kw3tv0009p5s678luii9x","content":"<p>上次我将ExtJS Tree的静态树和加载服务器文件生成的树跟大家阐述了一下，今天我把怎么根据从数据库中查出的数据生成树根大家讨论一下。<a id=\"more\"></a></p>\n<p>要想根据数据库生成树首先我们先要准备数据库数据，大概表的结构如下：<br><img src=\"/images/tree_2_sql.png\" alt=\"SQL\"><br>sql语句我也为大家准备好了，如下：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">//oracle建表语句  </div><div class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span>  dept   (  </div><div class=\"line\">    deptId              <span class=\"built_in\">NUMBER</span>(<span class=\"number\">20</span>)                      <span class=\"keyword\">not</span> <span class=\"literal\">null</span>,  </div><div class=\"line\">    deptName            VARCHAR2(<span class=\"number\">20</span>),  </div><div class=\"line\">    higherDept          <span class=\"built_in\">NUMBER</span>(<span class=\"number\">20</span>),  </div><div class=\"line\">   <span class=\"keyword\">constraint</span> PK_DEPT primary <span class=\"keyword\">key</span> ( deptId )  </div><div class=\"line\">);  </div><div class=\"line\">//测试数据  </div><div class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">23010000</span>,<span class=\"string\">'哈尔滨市公安局'</span>,<span class=\"number\">0</span>);  </div><div class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">23011000</span>,<span class=\"string\">'国家安全保卫队'</span>,<span class=\"number\">23010000</span>);  </div><div class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">23011001</span>,<span class=\"string\">'国家安全保支队政工科'</span>,<span class=\"number\">23010000</span>);  </div><div class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">23011002</span>,<span class=\"string\">'国家安全保支队秘书科'</span>,<span class=\"number\">23010000</span>);  </div><div class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">23011003</span>,<span class=\"string\">'国家安全保支队一大队'</span>,<span class=\"number\">23011001</span>);  </div><div class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">23011004</span>,<span class=\"string\">'国家安全保支队二大队'</span>,<span class=\"number\">23011001</span>);  </div><div class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">23011005</span>,<span class=\"string\">'国家安全保支队三大队'</span>,<span class=\"number\">23011004</span>);  </div><div class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">23011006</span>,<span class=\"string\">'国家安全保支队四大队'</span>,<span class=\"number\">23011004</span>);  </div><div class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">23011007</span>,<span class=\"string\">'国家安全保支队五大队'</span>,<span class=\"number\">23010000</span>);  </div><div class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">23011008</span>,<span class=\"string\">'国家安全保支队六大队'</span>,<span class=\"number\">23011002</span>);</div></pre></td></tr></table></figure></p>\n<p>当数据都准备完毕后，首先要写一个vo用来储存我们将要查询出来的数据。这个vo属性的名字有一定的要求，必须遵守以下的命名： private int id;这个是保存数据的主键的，也就是deptId，这个id是生成树结构的关键。然后是 private String text;这个是生成树时显示的内容。最后是private boolean leaf;这个属性也挺关键，它是用来决定该树的节点是否是叶子节点。先不多说，等我们把树写完就了解这些属性的功能了。<br>下面是DAO的查询方法，这个非常简单的用JDBC实现一下就好：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DAO</span> </span>&#123;  </div><div class=\"line\"> Connection conn;   </div><div class=\"line\"> PreparedStatement pstate;  </div><div class=\"line\"> ResultSet rs;  </div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> List <span class=\"title\">findAll</span><span class=\"params\">()</span></span>&#123;  </div><div class=\"line\">   </div><div class=\"line\">  List list = <span class=\"keyword\">new</span> ArrayList();  </div><div class=\"line\">  String sql = <span class=\"string\">\" select deptid,deptname from dept \"</span> ;   </div><div class=\"line\">  <span class=\"keyword\">try</span>&#123;  </div><div class=\"line\">     </div><div class=\"line\">   conn = DBConn.getConn();   </div><div class=\"line\">   pstate = conn.prepareStatement(sql);  </div><div class=\"line\">   rs = pstate.executeQuery();  </div><div class=\"line\">     </div><div class=\"line\">   <span class=\"keyword\">while</span>(rs.next())&#123;    </div><div class=\"line\">    Tree vo = <span class=\"keyword\">new</span> Tree();  </div><div class=\"line\">    vo.setId(rs.getInt(<span class=\"string\">\"deptid\"</span>));  </div><div class=\"line\">    vo.setText(rs.getString(<span class=\"string\">\"deptname\"</span>));  </div><div class=\"line\">    vo.setLeaf(<span class=\"keyword\">true</span>);  </div><div class=\"line\">    list.add(vo);  </div><div class=\"line\">   &#125;   </div><div class=\"line\">  &#125;<span class=\"keyword\">catch</span>(Exception e)&#123;     </div><div class=\"line\">   e.printStackTrace();     </div><div class=\"line\">  &#125;<span class=\"keyword\">finally</span>&#123;  </div><div class=\"line\">    <span class=\"comment\">//释放资源  </span></div><div class=\"line\">  &#125;  </div><div class=\"line\">  <span class=\"keyword\">return</span> list;  </div><div class=\"line\"> &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>接着我们要在servlet中将查询出来的List数据转换成json字符串，这样ExtJS才能解析。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span><span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;  </div><div class=\"line\"> <span class=\"comment\">//转码  </span></div><div class=\"line\"> response.setContentType(<span class=\"string\">\"text/html;charset=utf-8\"</span>);  </div><div class=\"line\"> PrintWriter out = response.getWriter();  </div><div class=\"line\">    </div><div class=\"line\"> DAO dao = <span class=\"keyword\">new</span> DAO();  </div><div class=\"line\"> List list = <span class=\"keyword\">new</span> ArrayList();  </div><div class=\"line\"> list = dao.findAll();  </div><div class=\"line\"> <span class=\"comment\">//转换成json并传递给ExtJS Tree  </span></div><div class=\"line\"> response.getWriter().write(JSONTools.getJsonArray(list).toString());   </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>代码中的JSONTools就是将List转换成json字符串的一个工具类。最后就是关键的页面树的实现部分了：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </div><div class=\"line\"> <span class=\"attr\">el</span>:<span class=\"string\">'tree-div'</span>,  </div><div class=\"line\"> <span class=\"attr\">loader</span>: <span class=\"keyword\">new</span> Ext.tree.TreeLoader(&#123;<span class=\"attr\">dataUrl</span>:<span class=\"string\">'../TreeNodeServlet'</span>&#125;)  </div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> root = <span class=\"keyword\">new</span> Ext.tree.AsyncTreeNode(&#123;  </div><div class=\"line\">    <span class=\"attr\">text</span>: <span class=\"string\">'harbin'</span>,  </div><div class=\"line\">    <span class=\"attr\">id</span>:<span class=\"string\">'23010000'</span>  </div><div class=\"line\">&#125;);  </div><div class=\"line\">tree.setRootNode(root);  </div><div class=\"line\">tree.render();</div></pre></td></tr></table></figure></p>\n<p>这样将项目部署到服务器上运行就可以看到效果了。</p>\n","excerpt":"<p>上次我将ExtJS Tree的静态树和加载服务器文件生成的树跟大家阐述了一下，今天我把怎么根据从数据库中查出的数据生成树根大家讨论一下。","more":"</p>\n<p>要想根据数据库生成树首先我们先要准备数据库数据，大概表的结构如下：<br><img src=\"/images/tree_2_sql.png\" alt=\"SQL\"><br>sql语句我也为大家准备好了，如下：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">//oracle建表语句  </div><div class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span>  dept   (  </div><div class=\"line\">    deptId              <span class=\"built_in\">NUMBER</span>(<span class=\"number\">20</span>)                      <span class=\"keyword\">not</span> <span class=\"literal\">null</span>,  </div><div class=\"line\">    deptName            VARCHAR2(<span class=\"number\">20</span>),  </div><div class=\"line\">    higherDept          <span class=\"built_in\">NUMBER</span>(<span class=\"number\">20</span>),  </div><div class=\"line\">   <span class=\"keyword\">constraint</span> PK_DEPT primary <span class=\"keyword\">key</span> ( deptId )  </div><div class=\"line\">);  </div><div class=\"line\">//测试数据  </div><div class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">23010000</span>,<span class=\"string\">'哈尔滨市公安局'</span>,<span class=\"number\">0</span>);  </div><div class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">23011000</span>,<span class=\"string\">'国家安全保卫队'</span>,<span class=\"number\">23010000</span>);  </div><div class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">23011001</span>,<span class=\"string\">'国家安全保支队政工科'</span>,<span class=\"number\">23010000</span>);  </div><div class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">23011002</span>,<span class=\"string\">'国家安全保支队秘书科'</span>,<span class=\"number\">23010000</span>);  </div><div class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">23011003</span>,<span class=\"string\">'国家安全保支队一大队'</span>,<span class=\"number\">23011001</span>);  </div><div class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">23011004</span>,<span class=\"string\">'国家安全保支队二大队'</span>,<span class=\"number\">23011001</span>);  </div><div class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">23011005</span>,<span class=\"string\">'国家安全保支队三大队'</span>,<span class=\"number\">23011004</span>);  </div><div class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">23011006</span>,<span class=\"string\">'国家安全保支队四大队'</span>,<span class=\"number\">23011004</span>);  </div><div class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">23011007</span>,<span class=\"string\">'国家安全保支队五大队'</span>,<span class=\"number\">23010000</span>);  </div><div class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">23011008</span>,<span class=\"string\">'国家安全保支队六大队'</span>,<span class=\"number\">23011002</span>);</div></pre></td></tr></table></figure></p>\n<p>当数据都准备完毕后，首先要写一个vo用来储存我们将要查询出来的数据。这个vo属性的名字有一定的要求，必须遵守以下的命名： private int id;这个是保存数据的主键的，也就是deptId，这个id是生成树结构的关键。然后是 private String text;这个是生成树时显示的内容。最后是private boolean leaf;这个属性也挺关键，它是用来决定该树的节点是否是叶子节点。先不多说，等我们把树写完就了解这些属性的功能了。<br>下面是DAO的查询方法，这个非常简单的用JDBC实现一下就好：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DAO</span> </span>&#123;  </div><div class=\"line\"> Connection conn;   </div><div class=\"line\"> PreparedStatement pstate;  </div><div class=\"line\"> ResultSet rs;  </div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> List <span class=\"title\">findAll</span><span class=\"params\">()</span></span>&#123;  </div><div class=\"line\">   </div><div class=\"line\">  List list = <span class=\"keyword\">new</span> ArrayList();  </div><div class=\"line\">  String sql = <span class=\"string\">\" select deptid,deptname from dept \"</span> ;   </div><div class=\"line\">  <span class=\"keyword\">try</span>&#123;  </div><div class=\"line\">     </div><div class=\"line\">   conn = DBConn.getConn();   </div><div class=\"line\">   pstate = conn.prepareStatement(sql);  </div><div class=\"line\">   rs = pstate.executeQuery();  </div><div class=\"line\">     </div><div class=\"line\">   <span class=\"keyword\">while</span>(rs.next())&#123;    </div><div class=\"line\">    Tree vo = <span class=\"keyword\">new</span> Tree();  </div><div class=\"line\">    vo.setId(rs.getInt(<span class=\"string\">\"deptid\"</span>));  </div><div class=\"line\">    vo.setText(rs.getString(<span class=\"string\">\"deptname\"</span>));  </div><div class=\"line\">    vo.setLeaf(<span class=\"keyword\">true</span>);  </div><div class=\"line\">    list.add(vo);  </div><div class=\"line\">   &#125;   </div><div class=\"line\">  &#125;<span class=\"keyword\">catch</span>(Exception e)&#123;     </div><div class=\"line\">   e.printStackTrace();     </div><div class=\"line\">  &#125;<span class=\"keyword\">finally</span>&#123;  </div><div class=\"line\">    <span class=\"comment\">//释放资源  </span></div><div class=\"line\">  &#125;  </div><div class=\"line\">  <span class=\"keyword\">return</span> list;  </div><div class=\"line\"> &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>接着我们要在servlet中将查询出来的List数据转换成json字符串，这样ExtJS才能解析。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span><span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;  </div><div class=\"line\"> <span class=\"comment\">//转码  </span></div><div class=\"line\"> response.setContentType(<span class=\"string\">\"text/html;charset=utf-8\"</span>);  </div><div class=\"line\"> PrintWriter out = response.getWriter();  </div><div class=\"line\">    </div><div class=\"line\"> DAO dao = <span class=\"keyword\">new</span> DAO();  </div><div class=\"line\"> List list = <span class=\"keyword\">new</span> ArrayList();  </div><div class=\"line\"> list = dao.findAll();  </div><div class=\"line\"> <span class=\"comment\">//转换成json并传递给ExtJS Tree  </span></div><div class=\"line\"> response.getWriter().write(JSONTools.getJsonArray(list).toString());   </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>代码中的JSONTools就是将List转换成json字符串的一个工具类。最后就是关键的页面树的实现部分了：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </div><div class=\"line\"> <span class=\"attr\">el</span>:<span class=\"string\">'tree-div'</span>,  </div><div class=\"line\"> <span class=\"attr\">loader</span>: <span class=\"keyword\">new</span> Ext.tree.TreeLoader(&#123;<span class=\"attr\">dataUrl</span>:<span class=\"string\">'../TreeNodeServlet'</span>&#125;)  </div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> root = <span class=\"keyword\">new</span> Ext.tree.AsyncTreeNode(&#123;  </div><div class=\"line\">    <span class=\"attr\">text</span>: <span class=\"string\">'harbin'</span>,  </div><div class=\"line\">    <span class=\"attr\">id</span>:<span class=\"string\">'23010000'</span>  </div><div class=\"line\">&#125;);  </div><div class=\"line\">tree.setRootNode(root);  </div><div class=\"line\">tree.render();</div></pre></td></tr></table></figure></p>\n<p>这样将项目部署到服务器上运行就可以看到效果了。</p>"},{"title":"xtJS初级教程之ExtJS Tree(三)","date":"2016-11-27T14:33:05.000Z","_content":"前两次我介绍了静态树和根据数据库加载的数据生成的树，今天我就把ExtJS Tree这剩的一些主要的东西说一说，剩下的主要就是：树的事件处理、可编辑的树和可拖拽的树，最后再实现一下异步加载的树。<!--more-->\n## 树的事件处理\n树的事件主要有：1、展开节点事件。2、折叠节点事件。3、单击节点事件。4、双击节点事件。下面我们以一个静态树来测试树的主要事件。\n``` javascript\n//普通的静态树  \nvar tree = new Ext.tree.TreePanel({  \n el:'tree-div'  \n});  \n//创建根节点  \nvar root = new Ext.tree.TreeNode({text:'AllShengFen'});  \n//创建父节点  \nvar shengfen1 = new Ext.tree.TreeNode({text:'HeiLongJiang'});  \nvar shengfen2 = new Ext.tree.TreeNode({text:'LiaoNing'});  \nvar city1 = new Ext.tree.TreeNode({text:'harbin'});  \nvar city2 = new Ext.tree.TreeNode({text:'daqiang'});  \nvar city3 = new Ext.tree.TreeNode({text:'shenyang'});  \nvar city4 = new Ext.tree.TreeNode({text:'dalian'});  \n//将子节点添加到父节点中  \nshengfen1.appendChild(city1);  \nshengfen1.appendChild(city2);  \nshengfen2.appendChild(city3);  \nshengfen2.appendChild(city4);  \n//将子节点添加到父节点中  \nroot.appendChild(shengfen1);  \nroot.appendChild(shengfen2);  \n//将root节点设置为根节点  \ntree.setRootNode(root);  \n//使这棵树显示在div标签中  \ntree.render();  \n//展开节点事件  \ntree.on(\"expandnode\",function(node){  \n alert(\"[\"+node.text+\"]open\");  \n});  \n//折叠节点事件  \ntree.on(\"collapsenode\",function(node){  \n alert(\"[\"+node.text+\"]close\");  \n});  \n//单击节点事件  \ntree.on(\"click\",function(node){  \n alert(\"[\"+node.text+\"]click\");  \n});  \n//双击节点事件  \ntree.on(\"dblclick\",function(node){  \n alert(\"[\"+node.text+\"]double click\");  \n}); \n```\n由于单击和双击有冲突，所以我们在测试的时候可以先注释掉一个，单独测试。\n## 可编辑的树\n有了前面我们ExtJS的基础我就直接上代码了。简单的功能我都在代码的注释里写了。下面的例子中都会用到TreeNodeServlet.Java这个类所以我把这个代码也贴出来。\n``` java\npublic class TreeNodeServlet extends HttpServlet {  \n    private static final long serialVersionUID = 1L;  \n         \n    /** \n     * @see HttpServlet#HttpServlet() \n     */  \n    public TreeNodeServlet() {  \n        super();  \n        // TODO Auto-generated constructor stub  \n    }  \n    @Override  \n    protected void service(HttpServletRequest request, HttpServletResponse response)  \n            throws ServletException, IOException {  \n      \n        response.setContentType(\"text/html;charset=utf-8\");  \n        PrintWriter out = response.getWriter();  \n        String node = request.getParameter(\"node\");  \n        String json = \"\";  \n        if(\"0\".equals(node)){  \n              \n            json += \"[{id:1,text:'节点1'},{id:2,text:'节点2'}]\";  \n        }  \n        else if(\"1\".equals(node)){  \n              \n            json += \"[{id:11,text:'节点11',leaf:true},{id:12,text:'节点12',leaf:true}]\";  \n              \n        }  \n        else if(\"2\".equals(node)){  \n              \n            json += \"[{id:21,text:'节点21'},{id:22,text:'节点22',leaf:true}]\";  \n              \n        }  \n        else if(\"21\".equals(node)){  \n              \n            json += \"[{id:211,text:'节点211',leaf:true},{id:212,text:'节点212',leaf:true}]\";  \n              \n        }  \n          \n        out.write(json);  \n          \n    }  \n} \n```\n前端代码\n``` javascript\nvar tree = new Ext.tree.TreePanel({  \n el:'tree-div',  \n loader: new Ext.tree.TreeLoader({dataUrl:'../TreeNodeServlet'})  \n});  \nvar root = new Ext.tree.AsyncTreeNode({  \n id:'0',text: 'harbin'  \n});  \ntree.setRootNode(root);  \ntree.render();  \n//设置该树可编辑  \nvar treeEditor = new Ext.tree.TreeEditor(tree,{allowBlank:false});  \n//设置只有叶子节点可编辑  \ntreeEditor.on(\"beforestartedit\",function(treeEditor){  \n return treeEditor.editNode.isLeaf();  \n});  \ntree.on(\"click\",function(node){  \n   \n alert(\"The name is:\"+node.text+\"***\"+node.id);  \n   \n});  \n//此处将编辑的值输出  \ntreeEditor.on(\"complete\",function(treeEditor,newValue){  \n alert(\"The name had been modified,the result is:\"+newValue);  \n});  \n```\n## 可拖拽的树\n``` javascript\nvar tree = new Ext.tree.TreePanel({  \n el:'tree-div',  \n//设置可拖拽  \n enableDD:true,  \n loader: new Ext.tree.TreeLoader({dataUrl:'../TreeNodeServlet'})  \n});  \nvar root = new Ext.tree.AsyncTreeNode({  \n id:'0',  \n    text: 'harbin'  \n});  \ntree.setRootNode(root);  \ntree.render();  \n//设置叶子节点可追加元素  \ntree.on(\"nodedragover\",function(e){  \n var node = e.target;  \n if(node.leaf)  \n  node.leaf = false;  \n return true;  \n}); \n```\n## 异步加载树\n异步加载树是非常常用的，因为我们页面上生成的树往往都是从数据库中查出来的数据，有时候我们的数据量很大，如果每次都全加载那么很浪费资源，所以我们就用到了异步加载的树。所谓异步加载的树就是：我们点击哪个节点，就只加载这个节点下的元素，并不查询其他元素。但数据量大，并且树的层次特别多的时候就非常好用了，下面我们就实现一个异步加载的树。我将所有代码都粘出来，方便大家直接运行测试。\n- 准备数据库的数据。这个我们就用在第二节给的数据就可以了。\n- vo也就是JavaBean的写法，我们也在第二节将过了，下面是代码。\n``` java\npublic class Tree {  \n    private int id;  \n    private String text;  \n    private boolean leaf;  \n    public Tree(){  \n          \n    }  \n    public Tree(int id,String text,boolean leaf){  \n          \n        this.id = id;  \n          \n        this.text = text;  \n          \n        this.leaf = leaf;  \n          \n    }  \n      \n    public int getId() {  \n        return id;  \n    }  \n    public void setId(int id) {  \n        this.id = id;  \n    }  \n    public String getText() {  \n        return text;  \n    }  \n    public void setText(String text) {  \n        this.text = text;  \n    }  \n    public boolean isLeaf() {  \n        return leaf;  \n    }  \n    public void setLeaf(boolean leaf) {  \n        this.leaf = leaf;  \n    }  \n}  \n```\n- 接着是查询的DAO，其实也和第二节的差不多，只不过第二节用的是查询所有，而这里我们只是查询点击的节点下的数据，所以我们就根据传递过来的id进行查询部分数据进行显示。\n``` java\npublic class DAO {  \n    Connection conn;  \n      \n    PreparedStatement pstate;  \n      \n    ResultSet rs;  \n      \n    public List findAll(int id){  \n          \n        List list = new ArrayList();  \n          \n        String sql = \" select deptid,deptname from dept where higherDept = \"+id ;  \n          \n        try{  \n              \n            conn = DBConn.getConn();  \n              \n            pstate = conn.prepareStatement(sql);  \n              \n            rs = pstate.executeQuery();  \n              \n            while(rs.next()){  \n                  \n                Tree vo = new Tree();  \n                  \n                vo.setId(rs.getInt(\"deptid\"));  \n                vo.setText(rs.getString(\"deptname\"));  \n                vo.setLeaf(false);  \n                list.add(vo);  \n            }  \n              \n              \n        }catch(Exception e){  \n              \n            e.printStackTrace();  \n              \n        }finally{  \n              \n            DBConn.closeRs(rs);  \n              \n            DBConn.closePreState(pstate);  \n              \n            DBConn.closeConn(conn);  \n              \n        }  \n          \n        return list;  \n    }  \n} \n```\n这里涉及到了另外一个工具类，就是连接数据库用的类，这个非常简单大家都应该没有问题。\n- 然后是servlet，servlet里我们也简单的处理一下，就是接收一下页面传递过来的节点id，并根据这个id查询数据。\n``` java\n\npublic class TreeServlet extends HttpServlet {  \n    private static final long serialVersionUID = 1L;  \n         \n    /** \n     * @see HttpServlet#HttpServlet() \n     */  \n    public TreeServlet() {  \n        super();  \n        // TODO Auto-generated constructor stub  \n    }  \n    @Override  \n    protected void service(HttpServletRequest request, HttpServletResponse response)  \n            throws ServletException, IOException {  \n        response.setContentType(\"text/html;charset=utf-8\");  \n        PrintWriter out = response.getWriter();  \n        String node = request.getParameter(\"pid\");  \n          \n        int id = Integer.parseInt(node);  \n          \n        DAO dao = new DAO();  \n        List list = new ArrayList();  \n          \n        list = dao.findAll(id);  \n                response.getWriter().write(JSONTools.getJsonArray(list).toString());  \n          \n    }  \n}  \n```\n- 下面就是页面js文件了。\n``` javascript\nvar tree = new Ext.tree.TreePanel({  \n el:'tree-div',  \n loader: new   \n//第一次访问的时候只加载根节点下的数据  \nExt.tree.TreeLoader({dataUrl:'../TreeServlet?pid=23010000'})  \n});  \nvar root = new Ext.tree.AsyncTreeNode({  \n    text: 'harbin',  \n    draggable:false,  \n    id:'23010000'  \n});  \ntree.setRootNode(root);  \ntree.render();  \n//根据点击的节点加载该节点下的数据,点击哪个节点就加载哪个节点的数据  \ntree.on('beforeload',function(node){     \n    if(node.id != '23010000'){    \n        tree.loader.dataUrl = '../TreeServlet?pid='+node.id;           \n    }      \n}); \n```\n这样整个异步加载的树也就完成了。完成了异步加载的树，那么ExtJS Tree这块的主要内容也就差不多了，还有一些细节大家研究研究就可以了。如果哪有错误或不足希望指出。\n","source":"_posts/Tree-3.md","raw":"---\ntitle: xtJS初级教程之ExtJS Tree(三)\ndate: 2016-11-27 22:33:05\ntags: ExtJS\ncategories: javascript\n---\n前两次我介绍了静态树和根据数据库加载的数据生成的树，今天我就把ExtJS Tree这剩的一些主要的东西说一说，剩下的主要就是：树的事件处理、可编辑的树和可拖拽的树，最后再实现一下异步加载的树。<!--more-->\n## 树的事件处理\n树的事件主要有：1、展开节点事件。2、折叠节点事件。3、单击节点事件。4、双击节点事件。下面我们以一个静态树来测试树的主要事件。\n``` javascript\n//普通的静态树  \nvar tree = new Ext.tree.TreePanel({  \n el:'tree-div'  \n});  \n//创建根节点  \nvar root = new Ext.tree.TreeNode({text:'AllShengFen'});  \n//创建父节点  \nvar shengfen1 = new Ext.tree.TreeNode({text:'HeiLongJiang'});  \nvar shengfen2 = new Ext.tree.TreeNode({text:'LiaoNing'});  \nvar city1 = new Ext.tree.TreeNode({text:'harbin'});  \nvar city2 = new Ext.tree.TreeNode({text:'daqiang'});  \nvar city3 = new Ext.tree.TreeNode({text:'shenyang'});  \nvar city4 = new Ext.tree.TreeNode({text:'dalian'});  \n//将子节点添加到父节点中  \nshengfen1.appendChild(city1);  \nshengfen1.appendChild(city2);  \nshengfen2.appendChild(city3);  \nshengfen2.appendChild(city4);  \n//将子节点添加到父节点中  \nroot.appendChild(shengfen1);  \nroot.appendChild(shengfen2);  \n//将root节点设置为根节点  \ntree.setRootNode(root);  \n//使这棵树显示在div标签中  \ntree.render();  \n//展开节点事件  \ntree.on(\"expandnode\",function(node){  \n alert(\"[\"+node.text+\"]open\");  \n});  \n//折叠节点事件  \ntree.on(\"collapsenode\",function(node){  \n alert(\"[\"+node.text+\"]close\");  \n});  \n//单击节点事件  \ntree.on(\"click\",function(node){  \n alert(\"[\"+node.text+\"]click\");  \n});  \n//双击节点事件  \ntree.on(\"dblclick\",function(node){  \n alert(\"[\"+node.text+\"]double click\");  \n}); \n```\n由于单击和双击有冲突，所以我们在测试的时候可以先注释掉一个，单独测试。\n## 可编辑的树\n有了前面我们ExtJS的基础我就直接上代码了。简单的功能我都在代码的注释里写了。下面的例子中都会用到TreeNodeServlet.Java这个类所以我把这个代码也贴出来。\n``` java\npublic class TreeNodeServlet extends HttpServlet {  \n    private static final long serialVersionUID = 1L;  \n         \n    /** \n     * @see HttpServlet#HttpServlet() \n     */  \n    public TreeNodeServlet() {  \n        super();  \n        // TODO Auto-generated constructor stub  \n    }  \n    @Override  \n    protected void service(HttpServletRequest request, HttpServletResponse response)  \n            throws ServletException, IOException {  \n      \n        response.setContentType(\"text/html;charset=utf-8\");  \n        PrintWriter out = response.getWriter();  \n        String node = request.getParameter(\"node\");  \n        String json = \"\";  \n        if(\"0\".equals(node)){  \n              \n            json += \"[{id:1,text:'节点1'},{id:2,text:'节点2'}]\";  \n        }  \n        else if(\"1\".equals(node)){  \n              \n            json += \"[{id:11,text:'节点11',leaf:true},{id:12,text:'节点12',leaf:true}]\";  \n              \n        }  \n        else if(\"2\".equals(node)){  \n              \n            json += \"[{id:21,text:'节点21'},{id:22,text:'节点22',leaf:true}]\";  \n              \n        }  \n        else if(\"21\".equals(node)){  \n              \n            json += \"[{id:211,text:'节点211',leaf:true},{id:212,text:'节点212',leaf:true}]\";  \n              \n        }  \n          \n        out.write(json);  \n          \n    }  \n} \n```\n前端代码\n``` javascript\nvar tree = new Ext.tree.TreePanel({  \n el:'tree-div',  \n loader: new Ext.tree.TreeLoader({dataUrl:'../TreeNodeServlet'})  \n});  \nvar root = new Ext.tree.AsyncTreeNode({  \n id:'0',text: 'harbin'  \n});  \ntree.setRootNode(root);  \ntree.render();  \n//设置该树可编辑  \nvar treeEditor = new Ext.tree.TreeEditor(tree,{allowBlank:false});  \n//设置只有叶子节点可编辑  \ntreeEditor.on(\"beforestartedit\",function(treeEditor){  \n return treeEditor.editNode.isLeaf();  \n});  \ntree.on(\"click\",function(node){  \n   \n alert(\"The name is:\"+node.text+\"***\"+node.id);  \n   \n});  \n//此处将编辑的值输出  \ntreeEditor.on(\"complete\",function(treeEditor,newValue){  \n alert(\"The name had been modified,the result is:\"+newValue);  \n});  \n```\n## 可拖拽的树\n``` javascript\nvar tree = new Ext.tree.TreePanel({  \n el:'tree-div',  \n//设置可拖拽  \n enableDD:true,  \n loader: new Ext.tree.TreeLoader({dataUrl:'../TreeNodeServlet'})  \n});  \nvar root = new Ext.tree.AsyncTreeNode({  \n id:'0',  \n    text: 'harbin'  \n});  \ntree.setRootNode(root);  \ntree.render();  \n//设置叶子节点可追加元素  \ntree.on(\"nodedragover\",function(e){  \n var node = e.target;  \n if(node.leaf)  \n  node.leaf = false;  \n return true;  \n}); \n```\n## 异步加载树\n异步加载树是非常常用的，因为我们页面上生成的树往往都是从数据库中查出来的数据，有时候我们的数据量很大，如果每次都全加载那么很浪费资源，所以我们就用到了异步加载的树。所谓异步加载的树就是：我们点击哪个节点，就只加载这个节点下的元素，并不查询其他元素。但数据量大，并且树的层次特别多的时候就非常好用了，下面我们就实现一个异步加载的树。我将所有代码都粘出来，方便大家直接运行测试。\n- 准备数据库的数据。这个我们就用在第二节给的数据就可以了。\n- vo也就是JavaBean的写法，我们也在第二节将过了，下面是代码。\n``` java\npublic class Tree {  \n    private int id;  \n    private String text;  \n    private boolean leaf;  \n    public Tree(){  \n          \n    }  \n    public Tree(int id,String text,boolean leaf){  \n          \n        this.id = id;  \n          \n        this.text = text;  \n          \n        this.leaf = leaf;  \n          \n    }  \n      \n    public int getId() {  \n        return id;  \n    }  \n    public void setId(int id) {  \n        this.id = id;  \n    }  \n    public String getText() {  \n        return text;  \n    }  \n    public void setText(String text) {  \n        this.text = text;  \n    }  \n    public boolean isLeaf() {  \n        return leaf;  \n    }  \n    public void setLeaf(boolean leaf) {  \n        this.leaf = leaf;  \n    }  \n}  \n```\n- 接着是查询的DAO，其实也和第二节的差不多，只不过第二节用的是查询所有，而这里我们只是查询点击的节点下的数据，所以我们就根据传递过来的id进行查询部分数据进行显示。\n``` java\npublic class DAO {  \n    Connection conn;  \n      \n    PreparedStatement pstate;  \n      \n    ResultSet rs;  \n      \n    public List findAll(int id){  \n          \n        List list = new ArrayList();  \n          \n        String sql = \" select deptid,deptname from dept where higherDept = \"+id ;  \n          \n        try{  \n              \n            conn = DBConn.getConn();  \n              \n            pstate = conn.prepareStatement(sql);  \n              \n            rs = pstate.executeQuery();  \n              \n            while(rs.next()){  \n                  \n                Tree vo = new Tree();  \n                  \n                vo.setId(rs.getInt(\"deptid\"));  \n                vo.setText(rs.getString(\"deptname\"));  \n                vo.setLeaf(false);  \n                list.add(vo);  \n            }  \n              \n              \n        }catch(Exception e){  \n              \n            e.printStackTrace();  \n              \n        }finally{  \n              \n            DBConn.closeRs(rs);  \n              \n            DBConn.closePreState(pstate);  \n              \n            DBConn.closeConn(conn);  \n              \n        }  \n          \n        return list;  \n    }  \n} \n```\n这里涉及到了另外一个工具类，就是连接数据库用的类，这个非常简单大家都应该没有问题。\n- 然后是servlet，servlet里我们也简单的处理一下，就是接收一下页面传递过来的节点id，并根据这个id查询数据。\n``` java\n\npublic class TreeServlet extends HttpServlet {  \n    private static final long serialVersionUID = 1L;  \n         \n    /** \n     * @see HttpServlet#HttpServlet() \n     */  \n    public TreeServlet() {  \n        super();  \n        // TODO Auto-generated constructor stub  \n    }  \n    @Override  \n    protected void service(HttpServletRequest request, HttpServletResponse response)  \n            throws ServletException, IOException {  \n        response.setContentType(\"text/html;charset=utf-8\");  \n        PrintWriter out = response.getWriter();  \n        String node = request.getParameter(\"pid\");  \n          \n        int id = Integer.parseInt(node);  \n          \n        DAO dao = new DAO();  \n        List list = new ArrayList();  \n          \n        list = dao.findAll(id);  \n                response.getWriter().write(JSONTools.getJsonArray(list).toString());  \n          \n    }  \n}  \n```\n- 下面就是页面js文件了。\n``` javascript\nvar tree = new Ext.tree.TreePanel({  \n el:'tree-div',  \n loader: new   \n//第一次访问的时候只加载根节点下的数据  \nExt.tree.TreeLoader({dataUrl:'../TreeServlet?pid=23010000'})  \n});  \nvar root = new Ext.tree.AsyncTreeNode({  \n    text: 'harbin',  \n    draggable:false,  \n    id:'23010000'  \n});  \ntree.setRootNode(root);  \ntree.render();  \n//根据点击的节点加载该节点下的数据,点击哪个节点就加载哪个节点的数据  \ntree.on('beforeload',function(node){     \n    if(node.id != '23010000'){    \n        tree.loader.dataUrl = '../TreeServlet?pid='+node.id;           \n    }      \n}); \n```\n这样整个异步加载的树也就完成了。完成了异步加载的树，那么ExtJS Tree这块的主要内容也就差不多了，还有一些细节大家研究研究就可以了。如果哪有错误或不足希望指出。\n","slug":"Tree-3","published":1,"updated":"2016-11-27T14:45:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw6kw3tx000dp5s6pubedmw9","content":"<p>前两次我介绍了静态树和根据数据库加载的数据生成的树，今天我就把ExtJS Tree这剩的一些主要的东西说一说，剩下的主要就是：树的事件处理、可编辑的树和可拖拽的树，最后再实现一下异步加载的树。<a id=\"more\"></a></p>\n<h2 id=\"树的事件处理\"><a href=\"#树的事件处理\" class=\"headerlink\" title=\"树的事件处理\"></a>树的事件处理</h2><p>树的事件主要有：1、展开节点事件。2、折叠节点事件。3、单击节点事件。4、双击节点事件。下面我们以一个静态树来测试树的主要事件。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//普通的静态树  </span></div><div class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </div><div class=\"line\"> <span class=\"attr\">el</span>:<span class=\"string\">'tree-div'</span>  </div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"comment\">//创建根节点  </span></div><div class=\"line\"><span class=\"keyword\">var</span> root = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'AllShengFen'</span>&#125;);  </div><div class=\"line\"><span class=\"comment\">//创建父节点  </span></div><div class=\"line\"><span class=\"keyword\">var</span> shengfen1 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'HeiLongJiang'</span>&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> shengfen2 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'LiaoNing'</span>&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> city1 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'harbin'</span>&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> city2 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'daqiang'</span>&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> city3 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'shenyang'</span>&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> city4 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'dalian'</span>&#125;);  </div><div class=\"line\"><span class=\"comment\">//将子节点添加到父节点中  </span></div><div class=\"line\">shengfen1.appendChild(city1);  </div><div class=\"line\">shengfen1.appendChild(city2);  </div><div class=\"line\">shengfen2.appendChild(city3);  </div><div class=\"line\">shengfen2.appendChild(city4);  </div><div class=\"line\"><span class=\"comment\">//将子节点添加到父节点中  </span></div><div class=\"line\">root.appendChild(shengfen1);  </div><div class=\"line\">root.appendChild(shengfen2);  </div><div class=\"line\"><span class=\"comment\">//将root节点设置为根节点  </span></div><div class=\"line\">tree.setRootNode(root);  </div><div class=\"line\"><span class=\"comment\">//使这棵树显示在div标签中  </span></div><div class=\"line\">tree.render();  </div><div class=\"line\"><span class=\"comment\">//展开节点事件  </span></div><div class=\"line\">tree.on(<span class=\"string\">\"expandnode\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>)</span>&#123;  </div><div class=\"line\"> alert(<span class=\"string\">\"[\"</span>+node.text+<span class=\"string\">\"]open\"</span>);  </div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"comment\">//折叠节点事件  </span></div><div class=\"line\">tree.on(<span class=\"string\">\"collapsenode\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>)</span>&#123;  </div><div class=\"line\"> alert(<span class=\"string\">\"[\"</span>+node.text+<span class=\"string\">\"]close\"</span>);  </div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"comment\">//单击节点事件  </span></div><div class=\"line\">tree.on(<span class=\"string\">\"click\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>)</span>&#123;  </div><div class=\"line\"> alert(<span class=\"string\">\"[\"</span>+node.text+<span class=\"string\">\"]click\"</span>);  </div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"comment\">//双击节点事件  </span></div><div class=\"line\">tree.on(<span class=\"string\">\"dblclick\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>)</span>&#123;  </div><div class=\"line\"> alert(<span class=\"string\">\"[\"</span>+node.text+<span class=\"string\">\"]double click\"</span>);  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>由于单击和双击有冲突，所以我们在测试的时候可以先注释掉一个，单独测试。</p>\n<h2 id=\"可编辑的树\"><a href=\"#可编辑的树\" class=\"headerlink\" title=\"可编辑的树\"></a>可编辑的树</h2><p>有了前面我们ExtJS的基础我就直接上代码了。简单的功能我都在代码的注释里写了。下面的例子中都会用到TreeNodeServlet.Java这个类所以我把这个代码也贴出来。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNodeServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;  </div><div class=\"line\">         </div><div class=\"line\">    <span class=\"comment\">/** </span></div><div class=\"line\">     * <span class=\"doctag\">@see</span> HttpServlet#HttpServlet() </div><div class=\"line\">     */  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TreeNodeServlet</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">super</span>();  </div><div class=\"line\">        <span class=\"comment\">// TODO Auto-generated constructor stub  </span></div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"meta\">@Override</span>  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span>  </span></div><div class=\"line\">            <span class=\"keyword\">throws</span> ServletException, IOException &#123;  </div><div class=\"line\">      </div><div class=\"line\">        response.setContentType(<span class=\"string\">\"text/html;charset=utf-8\"</span>);  </div><div class=\"line\">        PrintWriter out = response.getWriter();  </div><div class=\"line\">        String node = request.getParameter(<span class=\"string\">\"node\"</span>);  </div><div class=\"line\">        String json = <span class=\"string\">\"\"</span>;  </div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"string\">\"0\"</span>.equals(node))&#123;  </div><div class=\"line\">              </div><div class=\"line\">            json += <span class=\"string\">\"[&#123;id:1,text:'节点1'&#125;,&#123;id:2,text:'节点2'&#125;]\"</span>;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"string\">\"1\"</span>.equals(node))&#123;  </div><div class=\"line\">              </div><div class=\"line\">            json += <span class=\"string\">\"[&#123;id:11,text:'节点11',leaf:true&#125;,&#123;id:12,text:'节点12',leaf:true&#125;]\"</span>;  </div><div class=\"line\">              </div><div class=\"line\">        &#125;  </div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"string\">\"2\"</span>.equals(node))&#123;  </div><div class=\"line\">              </div><div class=\"line\">            json += <span class=\"string\">\"[&#123;id:21,text:'节点21'&#125;,&#123;id:22,text:'节点22',leaf:true&#125;]\"</span>;  </div><div class=\"line\">              </div><div class=\"line\">        &#125;  </div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"string\">\"21\"</span>.equals(node))&#123;  </div><div class=\"line\">              </div><div class=\"line\">            json += <span class=\"string\">\"[&#123;id:211,text:'节点211',leaf:true&#125;,&#123;id:212,text:'节点212',leaf:true&#125;]\"</span>;  </div><div class=\"line\">              </div><div class=\"line\">        &#125;  </div><div class=\"line\">          </div><div class=\"line\">        out.write(json);  </div><div class=\"line\">          </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>前端代码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </div><div class=\"line\"> <span class=\"attr\">el</span>:<span class=\"string\">'tree-div'</span>,  </div><div class=\"line\"> <span class=\"attr\">loader</span>: <span class=\"keyword\">new</span> Ext.tree.TreeLoader(&#123;<span class=\"attr\">dataUrl</span>:<span class=\"string\">'../TreeNodeServlet'</span>&#125;)  </div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> root = <span class=\"keyword\">new</span> Ext.tree.AsyncTreeNode(&#123;  </div><div class=\"line\"> <span class=\"attr\">id</span>:<span class=\"string\">'0'</span>,<span class=\"attr\">text</span>: <span class=\"string\">'harbin'</span>  </div><div class=\"line\">&#125;);  </div><div class=\"line\">tree.setRootNode(root);  </div><div class=\"line\">tree.render();  </div><div class=\"line\"><span class=\"comment\">//设置该树可编辑  </span></div><div class=\"line\"><span class=\"keyword\">var</span> treeEditor = <span class=\"keyword\">new</span> Ext.tree.TreeEditor(tree,&#123;<span class=\"attr\">allowBlank</span>:<span class=\"literal\">false</span>&#125;);  </div><div class=\"line\"><span class=\"comment\">//设置只有叶子节点可编辑  </span></div><div class=\"line\">treeEditor.on(<span class=\"string\">\"beforestartedit\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">treeEditor</span>)</span>&#123;  </div><div class=\"line\"> <span class=\"keyword\">return</span> treeEditor.editNode.isLeaf();  </div><div class=\"line\">&#125;);  </div><div class=\"line\">tree.on(<span class=\"string\">\"click\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>)</span>&#123;  </div><div class=\"line\">   </div><div class=\"line\"> alert(<span class=\"string\">\"The name is:\"</span>+node.text+<span class=\"string\">\"***\"</span>+node.id);  </div><div class=\"line\">   </div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"comment\">//此处将编辑的值输出  </span></div><div class=\"line\">treeEditor.on(<span class=\"string\">\"complete\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">treeEditor,newValue</span>)</span>&#123;  </div><div class=\"line\"> alert(<span class=\"string\">\"The name had been modified,the result is:\"</span>+newValue);  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h2 id=\"可拖拽的树\"><a href=\"#可拖拽的树\" class=\"headerlink\" title=\"可拖拽的树\"></a>可拖拽的树</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </div><div class=\"line\"> <span class=\"attr\">el</span>:<span class=\"string\">'tree-div'</span>,  </div><div class=\"line\"><span class=\"comment\">//设置可拖拽  </span></div><div class=\"line\"> enableDD:<span class=\"literal\">true</span>,  </div><div class=\"line\"> <span class=\"attr\">loader</span>: <span class=\"keyword\">new</span> Ext.tree.TreeLoader(&#123;<span class=\"attr\">dataUrl</span>:<span class=\"string\">'../TreeNodeServlet'</span>&#125;)  </div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> root = <span class=\"keyword\">new</span> Ext.tree.AsyncTreeNode(&#123;  </div><div class=\"line\"> <span class=\"attr\">id</span>:<span class=\"string\">'0'</span>,  </div><div class=\"line\">    <span class=\"attr\">text</span>: <span class=\"string\">'harbin'</span>  </div><div class=\"line\">&#125;);  </div><div class=\"line\">tree.setRootNode(root);  </div><div class=\"line\">tree.render();  </div><div class=\"line\"><span class=\"comment\">//设置叶子节点可追加元素  </span></div><div class=\"line\">tree.on(<span class=\"string\">\"nodedragover\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;  </div><div class=\"line\"> <span class=\"keyword\">var</span> node = e.target;  </div><div class=\"line\"> <span class=\"keyword\">if</span>(node.leaf)  </div><div class=\"line\">  node.leaf = <span class=\"literal\">false</span>;  </div><div class=\"line\"> <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"异步加载树\"><a href=\"#异步加载树\" class=\"headerlink\" title=\"异步加载树\"></a>异步加载树</h2><p>异步加载树是非常常用的，因为我们页面上生成的树往往都是从数据库中查出来的数据，有时候我们的数据量很大，如果每次都全加载那么很浪费资源，所以我们就用到了异步加载的树。所谓异步加载的树就是：我们点击哪个节点，就只加载这个节点下的元素，并不查询其他元素。但数据量大，并且树的层次特别多的时候就非常好用了，下面我们就实现一个异步加载的树。我将所有代码都粘出来，方便大家直接运行测试。</p>\n<ul>\n<li>准备数据库的数据。这个我们就用在第二节给的数据就可以了。</li>\n<li><p>vo也就是JavaBean的写法，我们也在第二节将过了，下面是代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tree</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;  </div><div class=\"line\">    <span class=\"keyword\">private</span> String text;  </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> leaf;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Tree</span><span class=\"params\">()</span></span>&#123;  </div><div class=\"line\">          </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Tree</span><span class=\"params\">(<span class=\"keyword\">int</span> id,String text,<span class=\"keyword\">boolean</span> leaf)</span></span>&#123;  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"keyword\">this</span>.id = id;  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"keyword\">this</span>.text = text;  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"keyword\">this</span>.leaf = leaf;  </div><div class=\"line\">          </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span> id;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">this</span>.id = id;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getText</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span> text;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setText</span><span class=\"params\">(String text)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">this</span>.text = text;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isLeaf</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span> leaf;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setLeaf</span><span class=\"params\">(<span class=\"keyword\">boolean</span> leaf)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">this</span>.leaf = leaf;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>接着是查询的DAO，其实也和第二节的差不多，只不过第二节用的是查询所有，而这里我们只是查询点击的节点下的数据，所以我们就根据传递过来的id进行查询部分数据进行显示。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DAO</span> </span>&#123;  </div><div class=\"line\">    Connection conn;  </div><div class=\"line\">      </div><div class=\"line\">    PreparedStatement pstate;  </div><div class=\"line\">      </div><div class=\"line\">    ResultSet rs;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List <span class=\"title\">findAll</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span></span>&#123;  </div><div class=\"line\">          </div><div class=\"line\">        List list = <span class=\"keyword\">new</span> ArrayList();  </div><div class=\"line\">          </div><div class=\"line\">        String sql = <span class=\"string\">\" select deptid,deptname from dept where higherDept = \"</span>+id ;  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"keyword\">try</span>&#123;  </div><div class=\"line\">              </div><div class=\"line\">            conn = DBConn.getConn();  </div><div class=\"line\">              </div><div class=\"line\">            pstate = conn.prepareStatement(sql);  </div><div class=\"line\">              </div><div class=\"line\">            rs = pstate.executeQuery();  </div><div class=\"line\">              </div><div class=\"line\">            <span class=\"keyword\">while</span>(rs.next())&#123;  </div><div class=\"line\">                  </div><div class=\"line\">                Tree vo = <span class=\"keyword\">new</span> Tree();  </div><div class=\"line\">                  </div><div class=\"line\">                vo.setId(rs.getInt(<span class=\"string\">\"deptid\"</span>));  </div><div class=\"line\">                vo.setText(rs.getString(<span class=\"string\">\"deptname\"</span>));  </div><div class=\"line\">                vo.setLeaf(<span class=\"keyword\">false</span>);  </div><div class=\"line\">                list.add(vo);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">              </div><div class=\"line\">              </div><div class=\"line\">        &#125;<span class=\"keyword\">catch</span>(Exception e)&#123;  </div><div class=\"line\">              </div><div class=\"line\">            e.printStackTrace();  </div><div class=\"line\">              </div><div class=\"line\">        &#125;<span class=\"keyword\">finally</span>&#123;  </div><div class=\"line\">              </div><div class=\"line\">            DBConn.closeRs(rs);  </div><div class=\"line\">              </div><div class=\"line\">            DBConn.closePreState(pstate);  </div><div class=\"line\">              </div><div class=\"line\">            DBConn.closeConn(conn);  </div><div class=\"line\">              </div><div class=\"line\">        &#125;  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"keyword\">return</span> list;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这里涉及到了另外一个工具类，就是连接数据库用的类，这个非常简单大家都应该没有问题。</p>\n<ul>\n<li><p>然后是servlet，servlet里我们也简单的处理一下，就是接收一下页面传递过来的节点id，并根据这个id查询数据。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;  </div><div class=\"line\">         </div><div class=\"line\">    <span class=\"comment\">/** </span></div><div class=\"line\">     * <span class=\"doctag\">@see</span> HttpServlet#HttpServlet() </div><div class=\"line\">     */  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TreeServlet</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">super</span>();  </div><div class=\"line\">        <span class=\"comment\">// TODO Auto-generated constructor stub  </span></div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"meta\">@Override</span>  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span>  </span></div><div class=\"line\">            <span class=\"keyword\">throws</span> ServletException, IOException &#123;  </div><div class=\"line\">        response.setContentType(<span class=\"string\">\"text/html;charset=utf-8\"</span>);  </div><div class=\"line\">        PrintWriter out = response.getWriter();  </div><div class=\"line\">        String node = request.getParameter(<span class=\"string\">\"pid\"</span>);  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"keyword\">int</span> id = Integer.parseInt(node);  </div><div class=\"line\">          </div><div class=\"line\">        DAO dao = <span class=\"keyword\">new</span> DAO();  </div><div class=\"line\">        List list = <span class=\"keyword\">new</span> ArrayList();  </div><div class=\"line\">          </div><div class=\"line\">        list = dao.findAll(id);  </div><div class=\"line\">                response.getWriter().write(JSONTools.getJsonArray(list).toString());  </div><div class=\"line\">          </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>下面就是页面js文件了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </div><div class=\"line\"> <span class=\"attr\">el</span>:<span class=\"string\">'tree-div'</span>,  </div><div class=\"line\"> <span class=\"attr\">loader</span>: <span class=\"keyword\">new</span>   </div><div class=\"line\"><span class=\"comment\">//第一次访问的时候只加载根节点下的数据  </span></div><div class=\"line\">Ext.tree.TreeLoader(&#123;<span class=\"attr\">dataUrl</span>:<span class=\"string\">'../TreeServlet?pid=23010000'</span>&#125;)  </div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> root = <span class=\"keyword\">new</span> Ext.tree.AsyncTreeNode(&#123;  </div><div class=\"line\">    <span class=\"attr\">text</span>: <span class=\"string\">'harbin'</span>,  </div><div class=\"line\">    <span class=\"attr\">draggable</span>:<span class=\"literal\">false</span>,  </div><div class=\"line\">    <span class=\"attr\">id</span>:<span class=\"string\">'23010000'</span>  </div><div class=\"line\">&#125;);  </div><div class=\"line\">tree.setRootNode(root);  </div><div class=\"line\">tree.render();  </div><div class=\"line\"><span class=\"comment\">//根据点击的节点加载该节点下的数据,点击哪个节点就加载哪个节点的数据  </span></div><div class=\"line\">tree.on(<span class=\"string\">'beforeload'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>)</span>&#123;     </div><div class=\"line\">    <span class=\"keyword\">if</span>(node.id != <span class=\"string\">'23010000'</span>)&#123;    </div><div class=\"line\">        tree.loader.dataUrl = <span class=\"string\">'../TreeServlet?pid='</span>+node.id;           </div><div class=\"line\">    &#125;      </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这样整个异步加载的树也就完成了。完成了异步加载的树，那么ExtJS Tree这块的主要内容也就差不多了，还有一些细节大家研究研究就可以了。如果哪有错误或不足希望指出。</p>\n","excerpt":"<p>前两次我介绍了静态树和根据数据库加载的数据生成的树，今天我就把ExtJS Tree这剩的一些主要的东西说一说，剩下的主要就是：树的事件处理、可编辑的树和可拖拽的树，最后再实现一下异步加载的树。","more":"</p>\n<h2 id=\"树的事件处理\"><a href=\"#树的事件处理\" class=\"headerlink\" title=\"树的事件处理\"></a>树的事件处理</h2><p>树的事件主要有：1、展开节点事件。2、折叠节点事件。3、单击节点事件。4、双击节点事件。下面我们以一个静态树来测试树的主要事件。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//普通的静态树  </span></div><div class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </div><div class=\"line\"> <span class=\"attr\">el</span>:<span class=\"string\">'tree-div'</span>  </div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"comment\">//创建根节点  </span></div><div class=\"line\"><span class=\"keyword\">var</span> root = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'AllShengFen'</span>&#125;);  </div><div class=\"line\"><span class=\"comment\">//创建父节点  </span></div><div class=\"line\"><span class=\"keyword\">var</span> shengfen1 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'HeiLongJiang'</span>&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> shengfen2 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'LiaoNing'</span>&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> city1 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'harbin'</span>&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> city2 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'daqiang'</span>&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> city3 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'shenyang'</span>&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> city4 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'dalian'</span>&#125;);  </div><div class=\"line\"><span class=\"comment\">//将子节点添加到父节点中  </span></div><div class=\"line\">shengfen1.appendChild(city1);  </div><div class=\"line\">shengfen1.appendChild(city2);  </div><div class=\"line\">shengfen2.appendChild(city3);  </div><div class=\"line\">shengfen2.appendChild(city4);  </div><div class=\"line\"><span class=\"comment\">//将子节点添加到父节点中  </span></div><div class=\"line\">root.appendChild(shengfen1);  </div><div class=\"line\">root.appendChild(shengfen2);  </div><div class=\"line\"><span class=\"comment\">//将root节点设置为根节点  </span></div><div class=\"line\">tree.setRootNode(root);  </div><div class=\"line\"><span class=\"comment\">//使这棵树显示在div标签中  </span></div><div class=\"line\">tree.render();  </div><div class=\"line\"><span class=\"comment\">//展开节点事件  </span></div><div class=\"line\">tree.on(<span class=\"string\">\"expandnode\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>)</span>&#123;  </div><div class=\"line\"> alert(<span class=\"string\">\"[\"</span>+node.text+<span class=\"string\">\"]open\"</span>);  </div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"comment\">//折叠节点事件  </span></div><div class=\"line\">tree.on(<span class=\"string\">\"collapsenode\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>)</span>&#123;  </div><div class=\"line\"> alert(<span class=\"string\">\"[\"</span>+node.text+<span class=\"string\">\"]close\"</span>);  </div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"comment\">//单击节点事件  </span></div><div class=\"line\">tree.on(<span class=\"string\">\"click\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>)</span>&#123;  </div><div class=\"line\"> alert(<span class=\"string\">\"[\"</span>+node.text+<span class=\"string\">\"]click\"</span>);  </div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"comment\">//双击节点事件  </span></div><div class=\"line\">tree.on(<span class=\"string\">\"dblclick\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>)</span>&#123;  </div><div class=\"line\"> alert(<span class=\"string\">\"[\"</span>+node.text+<span class=\"string\">\"]double click\"</span>);  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>由于单击和双击有冲突，所以我们在测试的时候可以先注释掉一个，单独测试。</p>\n<h2 id=\"可编辑的树\"><a href=\"#可编辑的树\" class=\"headerlink\" title=\"可编辑的树\"></a>可编辑的树</h2><p>有了前面我们ExtJS的基础我就直接上代码了。简单的功能我都在代码的注释里写了。下面的例子中都会用到TreeNodeServlet.Java这个类所以我把这个代码也贴出来。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNodeServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;  </div><div class=\"line\">         </div><div class=\"line\">    <span class=\"comment\">/** </div><div class=\"line\">     * <span class=\"doctag\">@see</span> HttpServlet#HttpServlet() </div><div class=\"line\">     */</span>  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TreeNodeServlet</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">super</span>();  </div><div class=\"line\">        <span class=\"comment\">// TODO Auto-generated constructor stub  </span></div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"meta\">@Override</span>  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span>  </div><div class=\"line\">            <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;  </div><div class=\"line\">      </div><div class=\"line\">        response.setContentType(<span class=\"string\">\"text/html;charset=utf-8\"</span>);  </div><div class=\"line\">        PrintWriter out = response.getWriter();  </div><div class=\"line\">        String node = request.getParameter(<span class=\"string\">\"node\"</span>);  </div><div class=\"line\">        String json = <span class=\"string\">\"\"</span>;  </div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"string\">\"0\"</span>.equals(node))&#123;  </div><div class=\"line\">              </div><div class=\"line\">            json += <span class=\"string\">\"[&#123;id:1,text:'节点1'&#125;,&#123;id:2,text:'节点2'&#125;]\"</span>;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"string\">\"1\"</span>.equals(node))&#123;  </div><div class=\"line\">              </div><div class=\"line\">            json += <span class=\"string\">\"[&#123;id:11,text:'节点11',leaf:true&#125;,&#123;id:12,text:'节点12',leaf:true&#125;]\"</span>;  </div><div class=\"line\">              </div><div class=\"line\">        &#125;  </div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"string\">\"2\"</span>.equals(node))&#123;  </div><div class=\"line\">              </div><div class=\"line\">            json += <span class=\"string\">\"[&#123;id:21,text:'节点21'&#125;,&#123;id:22,text:'节点22',leaf:true&#125;]\"</span>;  </div><div class=\"line\">              </div><div class=\"line\">        &#125;  </div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"string\">\"21\"</span>.equals(node))&#123;  </div><div class=\"line\">              </div><div class=\"line\">            json += <span class=\"string\">\"[&#123;id:211,text:'节点211',leaf:true&#125;,&#123;id:212,text:'节点212',leaf:true&#125;]\"</span>;  </div><div class=\"line\">              </div><div class=\"line\">        &#125;  </div><div class=\"line\">          </div><div class=\"line\">        out.write(json);  </div><div class=\"line\">          </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>前端代码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </div><div class=\"line\"> <span class=\"attr\">el</span>:<span class=\"string\">'tree-div'</span>,  </div><div class=\"line\"> <span class=\"attr\">loader</span>: <span class=\"keyword\">new</span> Ext.tree.TreeLoader(&#123;<span class=\"attr\">dataUrl</span>:<span class=\"string\">'../TreeNodeServlet'</span>&#125;)  </div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> root = <span class=\"keyword\">new</span> Ext.tree.AsyncTreeNode(&#123;  </div><div class=\"line\"> <span class=\"attr\">id</span>:<span class=\"string\">'0'</span>,<span class=\"attr\">text</span>: <span class=\"string\">'harbin'</span>  </div><div class=\"line\">&#125;);  </div><div class=\"line\">tree.setRootNode(root);  </div><div class=\"line\">tree.render();  </div><div class=\"line\"><span class=\"comment\">//设置该树可编辑  </span></div><div class=\"line\"><span class=\"keyword\">var</span> treeEditor = <span class=\"keyword\">new</span> Ext.tree.TreeEditor(tree,&#123;<span class=\"attr\">allowBlank</span>:<span class=\"literal\">false</span>&#125;);  </div><div class=\"line\"><span class=\"comment\">//设置只有叶子节点可编辑  </span></div><div class=\"line\">treeEditor.on(<span class=\"string\">\"beforestartedit\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">treeEditor</span>)</span>&#123;  </div><div class=\"line\"> <span class=\"keyword\">return</span> treeEditor.editNode.isLeaf();  </div><div class=\"line\">&#125;);  </div><div class=\"line\">tree.on(<span class=\"string\">\"click\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>)</span>&#123;  </div><div class=\"line\">   </div><div class=\"line\"> alert(<span class=\"string\">\"The name is:\"</span>+node.text+<span class=\"string\">\"***\"</span>+node.id);  </div><div class=\"line\">   </div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"comment\">//此处将编辑的值输出  </span></div><div class=\"line\">treeEditor.on(<span class=\"string\">\"complete\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">treeEditor,newValue</span>)</span>&#123;  </div><div class=\"line\"> alert(<span class=\"string\">\"The name had been modified,the result is:\"</span>+newValue);  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h2 id=\"可拖拽的树\"><a href=\"#可拖拽的树\" class=\"headerlink\" title=\"可拖拽的树\"></a>可拖拽的树</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </div><div class=\"line\"> <span class=\"attr\">el</span>:<span class=\"string\">'tree-div'</span>,  </div><div class=\"line\"><span class=\"comment\">//设置可拖拽  </span></div><div class=\"line\"> enableDD:<span class=\"literal\">true</span>,  </div><div class=\"line\"> <span class=\"attr\">loader</span>: <span class=\"keyword\">new</span> Ext.tree.TreeLoader(&#123;<span class=\"attr\">dataUrl</span>:<span class=\"string\">'../TreeNodeServlet'</span>&#125;)  </div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> root = <span class=\"keyword\">new</span> Ext.tree.AsyncTreeNode(&#123;  </div><div class=\"line\"> <span class=\"attr\">id</span>:<span class=\"string\">'0'</span>,  </div><div class=\"line\">    <span class=\"attr\">text</span>: <span class=\"string\">'harbin'</span>  </div><div class=\"line\">&#125;);  </div><div class=\"line\">tree.setRootNode(root);  </div><div class=\"line\">tree.render();  </div><div class=\"line\"><span class=\"comment\">//设置叶子节点可追加元素  </span></div><div class=\"line\">tree.on(<span class=\"string\">\"nodedragover\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;  </div><div class=\"line\"> <span class=\"keyword\">var</span> node = e.target;  </div><div class=\"line\"> <span class=\"keyword\">if</span>(node.leaf)  </div><div class=\"line\">  node.leaf = <span class=\"literal\">false</span>;  </div><div class=\"line\"> <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"异步加载树\"><a href=\"#异步加载树\" class=\"headerlink\" title=\"异步加载树\"></a>异步加载树</h2><p>异步加载树是非常常用的，因为我们页面上生成的树往往都是从数据库中查出来的数据，有时候我们的数据量很大，如果每次都全加载那么很浪费资源，所以我们就用到了异步加载的树。所谓异步加载的树就是：我们点击哪个节点，就只加载这个节点下的元素，并不查询其他元素。但数据量大，并且树的层次特别多的时候就非常好用了，下面我们就实现一个异步加载的树。我将所有代码都粘出来，方便大家直接运行测试。</p>\n<ul>\n<li>准备数据库的数据。这个我们就用在第二节给的数据就可以了。</li>\n<li><p>vo也就是JavaBean的写法，我们也在第二节将过了，下面是代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tree</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;  </div><div class=\"line\">    <span class=\"keyword\">private</span> String text;  </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> leaf;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Tree</span><span class=\"params\">()</span></span>&#123;  </div><div class=\"line\">          </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Tree</span><span class=\"params\">(<span class=\"keyword\">int</span> id,String text,<span class=\"keyword\">boolean</span> leaf)</span></span>&#123;  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"keyword\">this</span>.id = id;  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"keyword\">this</span>.text = text;  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"keyword\">this</span>.leaf = leaf;  </div><div class=\"line\">          </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span> id;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">this</span>.id = id;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getText</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span> text;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setText</span><span class=\"params\">(String text)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">this</span>.text = text;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isLeaf</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span> leaf;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setLeaf</span><span class=\"params\">(<span class=\"keyword\">boolean</span> leaf)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">this</span>.leaf = leaf;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>接着是查询的DAO，其实也和第二节的差不多，只不过第二节用的是查询所有，而这里我们只是查询点击的节点下的数据，所以我们就根据传递过来的id进行查询部分数据进行显示。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DAO</span> </span>&#123;  </div><div class=\"line\">    Connection conn;  </div><div class=\"line\">      </div><div class=\"line\">    PreparedStatement pstate;  </div><div class=\"line\">      </div><div class=\"line\">    ResultSet rs;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List <span class=\"title\">findAll</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span></span>&#123;  </div><div class=\"line\">          </div><div class=\"line\">        List list = <span class=\"keyword\">new</span> ArrayList();  </div><div class=\"line\">          </div><div class=\"line\">        String sql = <span class=\"string\">\" select deptid,deptname from dept where higherDept = \"</span>+id ;  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"keyword\">try</span>&#123;  </div><div class=\"line\">              </div><div class=\"line\">            conn = DBConn.getConn();  </div><div class=\"line\">              </div><div class=\"line\">            pstate = conn.prepareStatement(sql);  </div><div class=\"line\">              </div><div class=\"line\">            rs = pstate.executeQuery();  </div><div class=\"line\">              </div><div class=\"line\">            <span class=\"keyword\">while</span>(rs.next())&#123;  </div><div class=\"line\">                  </div><div class=\"line\">                Tree vo = <span class=\"keyword\">new</span> Tree();  </div><div class=\"line\">                  </div><div class=\"line\">                vo.setId(rs.getInt(<span class=\"string\">\"deptid\"</span>));  </div><div class=\"line\">                vo.setText(rs.getString(<span class=\"string\">\"deptname\"</span>));  </div><div class=\"line\">                vo.setLeaf(<span class=\"keyword\">false</span>);  </div><div class=\"line\">                list.add(vo);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">              </div><div class=\"line\">              </div><div class=\"line\">        &#125;<span class=\"keyword\">catch</span>(Exception e)&#123;  </div><div class=\"line\">              </div><div class=\"line\">            e.printStackTrace();  </div><div class=\"line\">              </div><div class=\"line\">        &#125;<span class=\"keyword\">finally</span>&#123;  </div><div class=\"line\">              </div><div class=\"line\">            DBConn.closeRs(rs);  </div><div class=\"line\">              </div><div class=\"line\">            DBConn.closePreState(pstate);  </div><div class=\"line\">              </div><div class=\"line\">            DBConn.closeConn(conn);  </div><div class=\"line\">              </div><div class=\"line\">        &#125;  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"keyword\">return</span> list;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这里涉及到了另外一个工具类，就是连接数据库用的类，这个非常简单大家都应该没有问题。</p>\n<ul>\n<li><p>然后是servlet，servlet里我们也简单的处理一下，就是接收一下页面传递过来的节点id，并根据这个id查询数据。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;  </div><div class=\"line\">         </div><div class=\"line\">    <span class=\"comment\">/** </div><div class=\"line\">     * <span class=\"doctag\">@see</span> HttpServlet#HttpServlet() </div><div class=\"line\">     */</span>  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TreeServlet</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">super</span>();  </div><div class=\"line\">        <span class=\"comment\">// TODO Auto-generated constructor stub  </span></div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"meta\">@Override</span>  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span>  </div><div class=\"line\">            <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;  </div><div class=\"line\">        response.setContentType(<span class=\"string\">\"text/html;charset=utf-8\"</span>);  </div><div class=\"line\">        PrintWriter out = response.getWriter();  </div><div class=\"line\">        String node = request.getParameter(<span class=\"string\">\"pid\"</span>);  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"keyword\">int</span> id = Integer.parseInt(node);  </div><div class=\"line\">          </div><div class=\"line\">        DAO dao = <span class=\"keyword\">new</span> DAO();  </div><div class=\"line\">        List list = <span class=\"keyword\">new</span> ArrayList();  </div><div class=\"line\">          </div><div class=\"line\">        list = dao.findAll(id);  </div><div class=\"line\">                response.getWriter().write(JSONTools.getJsonArray(list).toString());  </div><div class=\"line\">          </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>下面就是页面js文件了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </div><div class=\"line\"> <span class=\"attr\">el</span>:<span class=\"string\">'tree-div'</span>,  </div><div class=\"line\"> <span class=\"attr\">loader</span>: <span class=\"keyword\">new</span>   </div><div class=\"line\"><span class=\"comment\">//第一次访问的时候只加载根节点下的数据  </span></div><div class=\"line\">Ext.tree.TreeLoader(&#123;<span class=\"attr\">dataUrl</span>:<span class=\"string\">'../TreeServlet?pid=23010000'</span>&#125;)  </div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> root = <span class=\"keyword\">new</span> Ext.tree.AsyncTreeNode(&#123;  </div><div class=\"line\">    <span class=\"attr\">text</span>: <span class=\"string\">'harbin'</span>,  </div><div class=\"line\">    <span class=\"attr\">draggable</span>:<span class=\"literal\">false</span>,  </div><div class=\"line\">    <span class=\"attr\">id</span>:<span class=\"string\">'23010000'</span>  </div><div class=\"line\">&#125;);  </div><div class=\"line\">tree.setRootNode(root);  </div><div class=\"line\">tree.render();  </div><div class=\"line\"><span class=\"comment\">//根据点击的节点加载该节点下的数据,点击哪个节点就加载哪个节点的数据  </span></div><div class=\"line\">tree.on(<span class=\"string\">'beforeload'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">node</span>)</span>&#123;     </div><div class=\"line\">    <span class=\"keyword\">if</span>(node.id != <span class=\"string\">'23010000'</span>)&#123;    </div><div class=\"line\">        tree.loader.dataUrl = <span class=\"string\">'../TreeServlet?pid='</span>+node.id;           </div><div class=\"line\">    &#125;      </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这样整个异步加载的树也就完成了。完成了异步加载的树，那么ExtJS Tree这块的主要内容也就差不多了，还有一些细节大家研究研究就可以了。如果哪有错误或不足希望指出。</p>"},{"title":"ExtJS初级教程之ExtJS Tree(一)","date":"2016-11-27T12:51:18.000Z","_content":"ExtJS是一款基于Ajax的web客户端框架，有着更加和漂亮友好的界面，今天起我就开始学习ExtJS了，下面我把我学习的过程与大家分享。<!--more-->  \n\n我先学习我最近用到ExtJS Tree。下面我们开始写我们的第一个静态树。  \n1、首先导入ExtJS提供的js和css文件。\n``` javascript\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"../script/resources/css/ext-all.css\" />\n  <script type=\"text/JavaScript\" src=\"../script/adapter/ext/ext-base.js\"></script>\n  <script type=\"text/javascript\" src=\"../script/ext-all.js\"></script>\n  <script type=\"text/javascript\" src=\"../script/locale/ext-lang-zh_CN.js\"></script>\n```\n注意导入顺序，这些文件都可以在extjs的源码包里找到。  \n2、首先我们先要创建一个空的树面板，此时页面上是神马都显示不出来的。\n``` javascript\n//创建Tree面板  \nvar tree = new Ext.tree.TreePanel({  \n //指定添加到的div  \n el:'tree-div',  \n}); \n```\n页面上应该有div的标签，因为我们写的树即将安插到这里。\n``` javascript\n<div id = \"tree-div\" ></div>\n```\n3、下面我们先创建一个根节点显示在页面上\n``` javascript\n//创建Tree面板  \nvar tree = new Ext.tree.TreePanel({  \n //指定添加到的div  \n el:'tree-div',  \n});  \nvar root = Ext.tree.TreeNode({text:'跟节点'});  \ntree.setRootNode(root);  \ntree.render();  \n```\n这样页面上就不会是一个空树了，应该显示的是一颗带有一个根节点的树。  \n4、最后我们按照上面的思路创建一个有层次的静态树。\n``` javascript\n//普通的静态树  \nvar tree = new Ext.tree.TreePanel({  \n el:'tree-div'  \n});  \n//创建根节点  \nvar root = new Ext.tree.TreeNode({text:'AllShengFen'});  \n//创建父节点  \nvar shengfen1 = new Ext.tree.TreeNode({text:'HeiLongJiang'});  \nvar shengfen2 = new Ext.tree.TreeNode({text:'LiaoNing'});  \nvar city1 = new Ext.tree.TreeNode({text:'harbin'});  \nvar city2 = new Ext.tree.TreeNode({text:'daqiang'});  \nvar city3 = new Ext.tree.TreeNode({text:'shenyang'});  \nvar city4 = new Ext.tree.TreeNode({text:'dalian'});  \n//将子节点添加到父节点中  \nshengfen1.appendChild(city1);  \nshengfen1.appendChild(city2);  \nshengfen2.appendChild(city3);  \nshengfen2.appendChild(city4);  \n//将子节点添加到父节点中  \nroot.appendChild(shengfen1);  \nroot.appendChild(shengfen2);  \n//将root节点设置为根节点  \ntree.setRootNode(root);  \n//使这棵树显示在div标签中  \ntree.render(); \n```\n这样一棵完整的树就应该显示在页面上了。  \n\n但是我们大多数用的都不是写死的静态树而是要根据不同数据生成不同的树，接下来我们就看看怎么读取服务器端的文件来生成ExtJS Tree。  \n1、创建一个data1.txt文件，内容是一个json字符串。\n``` javascript\n[  \n {text:'非叶子节点'},  \n {text:'叶子节点',leaf:true}  \n] \n```\n2、TreeLoader 导入数据的URL。我们需要一个类能够帮我们找到要加载的文件，这个类就是TreeLoader。\n``` javascript\n//创建Tree面板  \nvar tree = new Ext.tree.TreePanel({  \n //指定添加到的div  \n el:'tree-div',  \n //导入数据的URL  \n loader:new Ext.tree.TreeLoader({dataUrl:'../js/data1.txt'})  \n}); \n```\n3、但此时我们不能够再用Ext.tree.TreeNode来创建根节点了，用它创建根节点的话在页面上我们就只能看见跟节点。这是因为它不支持ajax，不能加载data.txt的数据，所以此时我们就用到了AsyncTreeNode了。\n``` javascript\n//创建根节点，使用AsyncTreeNode能够加载外部数据  \nvar root = new Ext.tree.AsyncTreeNode({text:'gen'});  \n//设置root为根节点  \ntree.setRootNode(root);  \n//将树显示在div标签上  \ntree.render();  \n//第一个true是自动展开所有字节点，第二个true是以动画效果展开树  \nroot.expand(true,true); \n```\n但此时我们发现，页面上的树开始无限的展开了。当我们将root.expand(true,true)删掉后，打开页面是不自动展开了，但是当我们点击展开的时候还是会无限的展开下去，这是因为AsyncTreeNode能够重新加载它下面的非叶子节点，我们加载的data1.txt里面的数据有一个节点是非叶子节点，所以AsyncTreeNode会再次的把它当做根节点，重新加载数据。所以我们应该给它一个所有节点的最后都是叶子节点的数据文件data2.txt。\n``` javascript\n[  \n  {text:'computer',children:[  \n    {text:'<a href=\"http://lib.csdn.net/base/17\" class='replace_word' title=\"Java EE知识库\" target='_blank' style='color:#df3434; font-weight:bold;'>Java</a>',leaf:true},  \n    {text:'c++',children:[  \n      {text:'thinking',leaf:true},  \n      {text:'yyyyy',leaf:true}  \n    ]},  \n  {text:'asp',leaf:true}   \n  ]},  \n  {text:'jsp',children:[  \n    {text:'dadf',leaf:true},  \n    {text:'ddddddd',leaf:true}  \n  ]}  \n]  \n```\n此时我们将加载的数据源改为data2.txt。\n``` javascript\n//创建Tree面板  \nvar tree = new Ext.tree.TreePanel({  \n //指定添加到的div  \n el:'tree-div',  \n //导入数据的URL  \n loader:new Ext.tree.TreeLoader({dataUrl:'../js/data1.txt'})  \n});\n```\n这时我们生成的树就不是无限展开的了。  \n今天就这些，下次我们再研究从servlet中获得Json数据来生成ExtJS树。\n","source":"_posts/Tree-1.md","raw":"---\ntitle: ExtJS初级教程之ExtJS Tree(一)\ndate: 2016-11-27 20:51:18\ntags: ExtJS\ncategories: javascript\n---\nExtJS是一款基于Ajax的web客户端框架，有着更加和漂亮友好的界面，今天起我就开始学习ExtJS了，下面我把我学习的过程与大家分享。<!--more-->  \n\n我先学习我最近用到ExtJS Tree。下面我们开始写我们的第一个静态树。  \n1、首先导入ExtJS提供的js和css文件。\n``` javascript\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"../script/resources/css/ext-all.css\" />\n  <script type=\"text/JavaScript\" src=\"../script/adapter/ext/ext-base.js\"></script>\n  <script type=\"text/javascript\" src=\"../script/ext-all.js\"></script>\n  <script type=\"text/javascript\" src=\"../script/locale/ext-lang-zh_CN.js\"></script>\n```\n注意导入顺序，这些文件都可以在extjs的源码包里找到。  \n2、首先我们先要创建一个空的树面板，此时页面上是神马都显示不出来的。\n``` javascript\n//创建Tree面板  \nvar tree = new Ext.tree.TreePanel({  \n //指定添加到的div  \n el:'tree-div',  \n}); \n```\n页面上应该有div的标签，因为我们写的树即将安插到这里。\n``` javascript\n<div id = \"tree-div\" ></div>\n```\n3、下面我们先创建一个根节点显示在页面上\n``` javascript\n//创建Tree面板  \nvar tree = new Ext.tree.TreePanel({  \n //指定添加到的div  \n el:'tree-div',  \n});  \nvar root = Ext.tree.TreeNode({text:'跟节点'});  \ntree.setRootNode(root);  \ntree.render();  \n```\n这样页面上就不会是一个空树了，应该显示的是一颗带有一个根节点的树。  \n4、最后我们按照上面的思路创建一个有层次的静态树。\n``` javascript\n//普通的静态树  \nvar tree = new Ext.tree.TreePanel({  \n el:'tree-div'  \n});  \n//创建根节点  \nvar root = new Ext.tree.TreeNode({text:'AllShengFen'});  \n//创建父节点  \nvar shengfen1 = new Ext.tree.TreeNode({text:'HeiLongJiang'});  \nvar shengfen2 = new Ext.tree.TreeNode({text:'LiaoNing'});  \nvar city1 = new Ext.tree.TreeNode({text:'harbin'});  \nvar city2 = new Ext.tree.TreeNode({text:'daqiang'});  \nvar city3 = new Ext.tree.TreeNode({text:'shenyang'});  \nvar city4 = new Ext.tree.TreeNode({text:'dalian'});  \n//将子节点添加到父节点中  \nshengfen1.appendChild(city1);  \nshengfen1.appendChild(city2);  \nshengfen2.appendChild(city3);  \nshengfen2.appendChild(city4);  \n//将子节点添加到父节点中  \nroot.appendChild(shengfen1);  \nroot.appendChild(shengfen2);  \n//将root节点设置为根节点  \ntree.setRootNode(root);  \n//使这棵树显示在div标签中  \ntree.render(); \n```\n这样一棵完整的树就应该显示在页面上了。  \n\n但是我们大多数用的都不是写死的静态树而是要根据不同数据生成不同的树，接下来我们就看看怎么读取服务器端的文件来生成ExtJS Tree。  \n1、创建一个data1.txt文件，内容是一个json字符串。\n``` javascript\n[  \n {text:'非叶子节点'},  \n {text:'叶子节点',leaf:true}  \n] \n```\n2、TreeLoader 导入数据的URL。我们需要一个类能够帮我们找到要加载的文件，这个类就是TreeLoader。\n``` javascript\n//创建Tree面板  \nvar tree = new Ext.tree.TreePanel({  \n //指定添加到的div  \n el:'tree-div',  \n //导入数据的URL  \n loader:new Ext.tree.TreeLoader({dataUrl:'../js/data1.txt'})  \n}); \n```\n3、但此时我们不能够再用Ext.tree.TreeNode来创建根节点了，用它创建根节点的话在页面上我们就只能看见跟节点。这是因为它不支持ajax，不能加载data.txt的数据，所以此时我们就用到了AsyncTreeNode了。\n``` javascript\n//创建根节点，使用AsyncTreeNode能够加载外部数据  \nvar root = new Ext.tree.AsyncTreeNode({text:'gen'});  \n//设置root为根节点  \ntree.setRootNode(root);  \n//将树显示在div标签上  \ntree.render();  \n//第一个true是自动展开所有字节点，第二个true是以动画效果展开树  \nroot.expand(true,true); \n```\n但此时我们发现，页面上的树开始无限的展开了。当我们将root.expand(true,true)删掉后，打开页面是不自动展开了，但是当我们点击展开的时候还是会无限的展开下去，这是因为AsyncTreeNode能够重新加载它下面的非叶子节点，我们加载的data1.txt里面的数据有一个节点是非叶子节点，所以AsyncTreeNode会再次的把它当做根节点，重新加载数据。所以我们应该给它一个所有节点的最后都是叶子节点的数据文件data2.txt。\n``` javascript\n[  \n  {text:'computer',children:[  \n    {text:'<a href=\"http://lib.csdn.net/base/17\" class='replace_word' title=\"Java EE知识库\" target='_blank' style='color:#df3434; font-weight:bold;'>Java</a>',leaf:true},  \n    {text:'c++',children:[  \n      {text:'thinking',leaf:true},  \n      {text:'yyyyy',leaf:true}  \n    ]},  \n  {text:'asp',leaf:true}   \n  ]},  \n  {text:'jsp',children:[  \n    {text:'dadf',leaf:true},  \n    {text:'ddddddd',leaf:true}  \n  ]}  \n]  \n```\n此时我们将加载的数据源改为data2.txt。\n``` javascript\n//创建Tree面板  \nvar tree = new Ext.tree.TreePanel({  \n //指定添加到的div  \n el:'tree-div',  \n //导入数据的URL  \n loader:new Ext.tree.TreeLoader({dataUrl:'../js/data1.txt'})  \n});\n```\n这时我们生成的树就不是无限展开的了。  \n今天就这些，下次我们再研究从servlet中获得Json数据来生成ExtJS树。\n","slug":"Tree-1","published":1,"updated":"2016-11-27T13:08:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw6kw3tz000fp5s6rsyflxea","content":"<p>ExtJS是一款基于Ajax的web客户端框架，有着更加和漂亮友好的界面，今天起我就开始学习ExtJS了，下面我把我学习的过程与大家分享。<a id=\"more\"></a>  </p>\n<p>我先学习我最近用到ExtJS Tree。下面我们开始写我们的第一个静态树。<br>1、首先导入ExtJS提供的js和css文件。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;link rel=<span class=\"string\">\"stylesheet\"</span> type=<span class=\"string\">\"text/css\"</span> href=<span class=\"string\">\"../script/resources/css/ext-all.css\"</span> /&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/JavaScript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../script/adapter/ext/ext-base.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></div><div class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"../script/ext-all.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></div><div class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"../script/locale/ext-lang-zh_CN.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></div></pre></td></tr></table></figure></p>\n<p>注意导入顺序，这些文件都可以在extjs的源码包里找到。<br>2、首先我们先要创建一个空的树面板，此时页面上是神马都显示不出来的。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//创建Tree面板  </span></div><div class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </div><div class=\"line\"> <span class=\"comment\">//指定添加到的div  </span></div><div class=\"line\"> el:<span class=\"string\">'tree-div'</span>,  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>页面上应该有div的标签，因为我们写的树即将安插到这里。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id = <span class=\"string\">\"tree-div\"</span> &gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div></pre></td></tr></table></figure></p>\n<p>3、下面我们先创建一个根节点显示在页面上<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//创建Tree面板  </span></div><div class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </div><div class=\"line\"> <span class=\"comment\">//指定添加到的div  </span></div><div class=\"line\"> el:<span class=\"string\">'tree-div'</span>,  </div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> root = Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'跟节点'</span>&#125;);  </div><div class=\"line\">tree.setRootNode(root);  </div><div class=\"line\">tree.render();</div></pre></td></tr></table></figure></p>\n<p>这样页面上就不会是一个空树了，应该显示的是一颗带有一个根节点的树。<br>4、最后我们按照上面的思路创建一个有层次的静态树。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//普通的静态树  </span></div><div class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </div><div class=\"line\"> <span class=\"attr\">el</span>:<span class=\"string\">'tree-div'</span>  </div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"comment\">//创建根节点  </span></div><div class=\"line\"><span class=\"keyword\">var</span> root = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'AllShengFen'</span>&#125;);  </div><div class=\"line\"><span class=\"comment\">//创建父节点  </span></div><div class=\"line\"><span class=\"keyword\">var</span> shengfen1 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'HeiLongJiang'</span>&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> shengfen2 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'LiaoNing'</span>&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> city1 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'harbin'</span>&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> city2 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'daqiang'</span>&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> city3 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'shenyang'</span>&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> city4 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'dalian'</span>&#125;);  </div><div class=\"line\"><span class=\"comment\">//将子节点添加到父节点中  </span></div><div class=\"line\">shengfen1.appendChild(city1);  </div><div class=\"line\">shengfen1.appendChild(city2);  </div><div class=\"line\">shengfen2.appendChild(city3);  </div><div class=\"line\">shengfen2.appendChild(city4);  </div><div class=\"line\"><span class=\"comment\">//将子节点添加到父节点中  </span></div><div class=\"line\">root.appendChild(shengfen1);  </div><div class=\"line\">root.appendChild(shengfen2);  </div><div class=\"line\"><span class=\"comment\">//将root节点设置为根节点  </span></div><div class=\"line\">tree.setRootNode(root);  </div><div class=\"line\"><span class=\"comment\">//使这棵树显示在div标签中  </span></div><div class=\"line\">tree.render();</div></pre></td></tr></table></figure></p>\n<p>这样一棵完整的树就应该显示在页面上了。  </p>\n<p>但是我们大多数用的都不是写死的静态树而是要根据不同数据生成不同的树，接下来我们就看看怎么读取服务器端的文件来生成ExtJS Tree。<br>1、创建一个data1.txt文件，内容是一个json字符串。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[  </div><div class=\"line\"> &#123;<span class=\"attr\">text</span>:<span class=\"string\">'非叶子节点'</span>&#125;,  </div><div class=\"line\"> &#123;<span class=\"attr\">text</span>:<span class=\"string\">'叶子节点'</span>,<span class=\"attr\">leaf</span>:<span class=\"literal\">true</span>&#125;  </div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<p>2、TreeLoader 导入数据的URL。我们需要一个类能够帮我们找到要加载的文件，这个类就是TreeLoader。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//创建Tree面板  </span></div><div class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </div><div class=\"line\"> <span class=\"comment\">//指定添加到的div  </span></div><div class=\"line\"> el:<span class=\"string\">'tree-div'</span>,  </div><div class=\"line\"> <span class=\"comment\">//导入数据的URL  </span></div><div class=\"line\"> loader:<span class=\"keyword\">new</span> Ext.tree.TreeLoader(&#123;<span class=\"attr\">dataUrl</span>:<span class=\"string\">'../js/data1.txt'</span>&#125;)  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>3、但此时我们不能够再用Ext.tree.TreeNode来创建根节点了，用它创建根节点的话在页面上我们就只能看见跟节点。这是因为它不支持ajax，不能加载data.txt的数据，所以此时我们就用到了AsyncTreeNode了。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//创建根节点，使用AsyncTreeNode能够加载外部数据  </span></div><div class=\"line\"><span class=\"keyword\">var</span> root = <span class=\"keyword\">new</span> Ext.tree.AsyncTreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'gen'</span>&#125;);  </div><div class=\"line\"><span class=\"comment\">//设置root为根节点  </span></div><div class=\"line\">tree.setRootNode(root);  </div><div class=\"line\"><span class=\"comment\">//将树显示在div标签上  </span></div><div class=\"line\">tree.render();  </div><div class=\"line\"><span class=\"comment\">//第一个true是自动展开所有字节点，第二个true是以动画效果展开树  </span></div><div class=\"line\">root.expand(<span class=\"literal\">true</span>,<span class=\"literal\">true</span>);</div></pre></td></tr></table></figure></p>\n<p>但此时我们发现，页面上的树开始无限的展开了。当我们将root.expand(true,true)删掉后，打开页面是不自动展开了，但是当我们点击展开的时候还是会无限的展开下去，这是因为AsyncTreeNode能够重新加载它下面的非叶子节点，我们加载的data1.txt里面的数据有一个节点是非叶子节点，所以AsyncTreeNode会再次的把它当做根节点，重新加载数据。所以我们应该给它一个所有节点的最后都是叶子节点的数据文件data2.txt。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">[  </div><div class=\"line\">  &#123;text:'computer',children:[  </div><div class=\"line\">    &#123;text:'&lt;a href=\"http://lib.csdn.net/base/17\" class='replace_word' title=\"Java EE知识库\" target='_blank' style='color:#df3434; font-weight:bold;'&gt;Java&lt;/a&gt;',leaf:true&#125;,  </div><div class=\"line\">    &#123;text:'c++',children:[  </div><div class=\"line\">      &#123;text:'thinking',leaf:true&#125;,  </div><div class=\"line\">      &#123;text:'yyyyy',leaf:true&#125;  </div><div class=\"line\">    ]&#125;,  </div><div class=\"line\">  &#123;text:'asp',leaf:true&#125;   </div><div class=\"line\">  ]&#125;,  </div><div class=\"line\">  &#123;text:'jsp',children:[  </div><div class=\"line\">    &#123;text:'dadf',leaf:true&#125;,  </div><div class=\"line\">    &#123;text:'ddddddd',leaf:true&#125;  </div><div class=\"line\">  ]&#125;  </div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<p>此时我们将加载的数据源改为data2.txt。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//创建Tree面板  </span></div><div class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </div><div class=\"line\"> <span class=\"comment\">//指定添加到的div  </span></div><div class=\"line\"> el:<span class=\"string\">'tree-div'</span>,  </div><div class=\"line\"> <span class=\"comment\">//导入数据的URL  </span></div><div class=\"line\"> loader:<span class=\"keyword\">new</span> Ext.tree.TreeLoader(&#123;<span class=\"attr\">dataUrl</span>:<span class=\"string\">'../js/data1.txt'</span>&#125;)  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>这时我们生成的树就不是无限展开的了。<br>今天就这些，下次我们再研究从servlet中获得Json数据来生成ExtJS树。</p>\n","excerpt":"<p>ExtJS是一款基于Ajax的web客户端框架，有着更加和漂亮友好的界面，今天起我就开始学习ExtJS了，下面我把我学习的过程与大家分享。","more":"</p>\n<p>我先学习我最近用到ExtJS Tree。下面我们开始写我们的第一个静态树。<br>1、首先导入ExtJS提供的js和css文件。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;link rel=<span class=\"string\">\"stylesheet\"</span> type=<span class=\"string\">\"text/css\"</span> href=<span class=\"string\">\"../script/resources/css/ext-all.css\"</span> /&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/JavaScript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../script/adapter/ext/ext-base.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></div><div class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"../script/ext-all.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></div><div class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"../script/locale/ext-lang-zh_CN.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></div></pre></td></tr></table></figure></p>\n<p>注意导入顺序，这些文件都可以在extjs的源码包里找到。<br>2、首先我们先要创建一个空的树面板，此时页面上是神马都显示不出来的。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//创建Tree面板  </span></div><div class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </div><div class=\"line\"> <span class=\"comment\">//指定添加到的div  </span></div><div class=\"line\"> el:<span class=\"string\">'tree-div'</span>,  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>页面上应该有div的标签，因为我们写的树即将安插到这里。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id = <span class=\"string\">\"tree-div\"</span> &gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div></pre></td></tr></table></figure></p>\n<p>3、下面我们先创建一个根节点显示在页面上<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//创建Tree面板  </span></div><div class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </div><div class=\"line\"> <span class=\"comment\">//指定添加到的div  </span></div><div class=\"line\"> el:<span class=\"string\">'tree-div'</span>,  </div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> root = Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'跟节点'</span>&#125;);  </div><div class=\"line\">tree.setRootNode(root);  </div><div class=\"line\">tree.render();</div></pre></td></tr></table></figure></p>\n<p>这样页面上就不会是一个空树了，应该显示的是一颗带有一个根节点的树。<br>4、最后我们按照上面的思路创建一个有层次的静态树。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//普通的静态树  </span></div><div class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </div><div class=\"line\"> <span class=\"attr\">el</span>:<span class=\"string\">'tree-div'</span>  </div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"comment\">//创建根节点  </span></div><div class=\"line\"><span class=\"keyword\">var</span> root = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'AllShengFen'</span>&#125;);  </div><div class=\"line\"><span class=\"comment\">//创建父节点  </span></div><div class=\"line\"><span class=\"keyword\">var</span> shengfen1 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'HeiLongJiang'</span>&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> shengfen2 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'LiaoNing'</span>&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> city1 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'harbin'</span>&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> city2 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'daqiang'</span>&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> city3 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'shenyang'</span>&#125;);  </div><div class=\"line\"><span class=\"keyword\">var</span> city4 = <span class=\"keyword\">new</span> Ext.tree.TreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'dalian'</span>&#125;);  </div><div class=\"line\"><span class=\"comment\">//将子节点添加到父节点中  </span></div><div class=\"line\">shengfen1.appendChild(city1);  </div><div class=\"line\">shengfen1.appendChild(city2);  </div><div class=\"line\">shengfen2.appendChild(city3);  </div><div class=\"line\">shengfen2.appendChild(city4);  </div><div class=\"line\"><span class=\"comment\">//将子节点添加到父节点中  </span></div><div class=\"line\">root.appendChild(shengfen1);  </div><div class=\"line\">root.appendChild(shengfen2);  </div><div class=\"line\"><span class=\"comment\">//将root节点设置为根节点  </span></div><div class=\"line\">tree.setRootNode(root);  </div><div class=\"line\"><span class=\"comment\">//使这棵树显示在div标签中  </span></div><div class=\"line\">tree.render();</div></pre></td></tr></table></figure></p>\n<p>这样一棵完整的树就应该显示在页面上了。  </p>\n<p>但是我们大多数用的都不是写死的静态树而是要根据不同数据生成不同的树，接下来我们就看看怎么读取服务器端的文件来生成ExtJS Tree。<br>1、创建一个data1.txt文件，内容是一个json字符串。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[  </div><div class=\"line\"> &#123;<span class=\"attr\">text</span>:<span class=\"string\">'非叶子节点'</span>&#125;,  </div><div class=\"line\"> &#123;<span class=\"attr\">text</span>:<span class=\"string\">'叶子节点'</span>,<span class=\"attr\">leaf</span>:<span class=\"literal\">true</span>&#125;  </div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<p>2、TreeLoader 导入数据的URL。我们需要一个类能够帮我们找到要加载的文件，这个类就是TreeLoader。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//创建Tree面板  </span></div><div class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </div><div class=\"line\"> <span class=\"comment\">//指定添加到的div  </span></div><div class=\"line\"> el:<span class=\"string\">'tree-div'</span>,  </div><div class=\"line\"> <span class=\"comment\">//导入数据的URL  </span></div><div class=\"line\"> loader:<span class=\"keyword\">new</span> Ext.tree.TreeLoader(&#123;<span class=\"attr\">dataUrl</span>:<span class=\"string\">'../js/data1.txt'</span>&#125;)  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>3、但此时我们不能够再用Ext.tree.TreeNode来创建根节点了，用它创建根节点的话在页面上我们就只能看见跟节点。这是因为它不支持ajax，不能加载data.txt的数据，所以此时我们就用到了AsyncTreeNode了。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//创建根节点，使用AsyncTreeNode能够加载外部数据  </span></div><div class=\"line\"><span class=\"keyword\">var</span> root = <span class=\"keyword\">new</span> Ext.tree.AsyncTreeNode(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'gen'</span>&#125;);  </div><div class=\"line\"><span class=\"comment\">//设置root为根节点  </span></div><div class=\"line\">tree.setRootNode(root);  </div><div class=\"line\"><span class=\"comment\">//将树显示在div标签上  </span></div><div class=\"line\">tree.render();  </div><div class=\"line\"><span class=\"comment\">//第一个true是自动展开所有字节点，第二个true是以动画效果展开树  </span></div><div class=\"line\">root.expand(<span class=\"literal\">true</span>,<span class=\"literal\">true</span>);</div></pre></td></tr></table></figure></p>\n<p>但此时我们发现，页面上的树开始无限的展开了。当我们将root.expand(true,true)删掉后，打开页面是不自动展开了，但是当我们点击展开的时候还是会无限的展开下去，这是因为AsyncTreeNode能够重新加载它下面的非叶子节点，我们加载的data1.txt里面的数据有一个节点是非叶子节点，所以AsyncTreeNode会再次的把它当做根节点，重新加载数据。所以我们应该给它一个所有节点的最后都是叶子节点的数据文件data2.txt。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">[  </div><div class=\"line\">  &#123;text:'computer',children:[  </div><div class=\"line\">    &#123;text:'&lt;a href=\"http://lib.csdn.net/base/17\" class='replace_word' title=\"Java EE知识库\" target='_blank' style='color:#df3434; font-weight:bold;'&gt;Java&lt;/a&gt;',leaf:true&#125;,  </div><div class=\"line\">    &#123;text:'c++',children:[  </div><div class=\"line\">      &#123;text:'thinking',leaf:true&#125;,  </div><div class=\"line\">      &#123;text:'yyyyy',leaf:true&#125;  </div><div class=\"line\">    ]&#125;,  </div><div class=\"line\">  &#123;text:'asp',leaf:true&#125;   </div><div class=\"line\">  ]&#125;,  </div><div class=\"line\">  &#123;text:'jsp',children:[  </div><div class=\"line\">    &#123;text:'dadf',leaf:true&#125;,  </div><div class=\"line\">    &#123;text:'ddddddd',leaf:true&#125;  </div><div class=\"line\">  ]&#125;  </div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<p>此时我们将加载的数据源改为data2.txt。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//创建Tree面板  </span></div><div class=\"line\"><span class=\"keyword\">var</span> tree = <span class=\"keyword\">new</span> Ext.tree.TreePanel(&#123;  </div><div class=\"line\"> <span class=\"comment\">//指定添加到的div  </span></div><div class=\"line\"> el:<span class=\"string\">'tree-div'</span>,  </div><div class=\"line\"> <span class=\"comment\">//导入数据的URL  </span></div><div class=\"line\"> loader:<span class=\"keyword\">new</span> Ext.tree.TreeLoader(&#123;<span class=\"attr\">dataUrl</span>:<span class=\"string\">'../js/data1.txt'</span>&#125;)  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>这时我们生成的树就不是无限展开的了。<br>今天就这些，下次我们再研究从servlet中获得Json数据来生成ExtJS树。</p>"},{"title":"WebService复杂类型数据传输-dom4j方式","date":"2016-11-27T11:39:57.000Z","_content":"WebService在传递数据的时候只能传递字符串，当我们返回一些简单的字符串时我们可以直接返回，但是当我们想返回比如List，Map等复杂类型的数据时拼接字符串就是个很麻烦的工作，这时我们就用到了dom4j这个工具。\n\n当我们从数据库中查询出很多个对象类型时，我们一般都存放在List中。像这种数据就很难用拼接字符串的形式进行传递。我的解决办法就是利用dom4j把它写成一个xml格式的字符串，然后在客户端再利用dom4j解释。\n<!--more-->\n假如我们从数据库中查询的是一个Student对象，该对象有name和agel两个属性，我们将大量的Student对象储存在List中。下面我们想利用dom4j把List数据变成如下格式的xml文件类型的字符串：  \n``` xml\n\t<?xml version=\"1.0\" encoding=\"UTF-8\"?>  \n    <root>  \n        <student>  \n            <name>张三</name>  \n            <age>26</age>  \n        </student>  \n        <student>  \n            <name>赵四</name>  \n            <age>34</age>  \n        </student>  \n    </root> \n```\nwebservice端Java代码如下：  \n``` java\nimport java.util.List;  \nimport org.dom4j.Document;  \nimport org.dom4j.DocumentHelper;  \nimport org.dom4j.Element;  \nimport org.dom4j.io.OutputFormat;  \nimport vo.UnitPO;  \nimport DAO.unitDao;  \npublic class Service02 {     \n    public String method(){  \n         \n        Document document = DocumentHelper.createDocument();  \n        Element root = document.addElement(\"root\");  \n         \n        Element stuElement = null;  \n        Element nameElement = null;  \n        Element ageElement = null;  \n         \n        //第一个student节点  \n        stuElement = root.addElement(\"student\");  \n        //添加两个子节点  \n        nameElement = stuElement.addElement(\"name\");  \n        ageElement = stuElement.addElement(\"age\");     \n        //向两个子节点中添加文本内容  \n        nameElement.addText(\"张三\");  \n        ageElement.addText(\"26\");  \n         \n        //同理第二个student节点  \n        stuElement = root.addElement(\"student\");         \n        nameElement = stuElement.addElement(\"name\");  \n        ageElement = stuElement.addElement(\"age\");     \n        nameElement.addText(\"赵四\");  \n        ageElement.addText(\"34\");  \n        try {  \n            OutputFormat format = OutputFormat.createPrettyPrint();  \n            // 设置XML文件的编码格式  \n            format.setEncoding(\"UTF-8\");  \n            return document.asXML();  \n        } catch (Exception e) {  \n            System.out.println(e.getMessage());  \n            return \"error\";  \n        }  \n    }  \n} \n```\n这样就将我们想传送的复杂数据变成了xml格式是字符串，下面在客户端就可以解释出我们想要的数据了。client端java代码如下：\n``` java\nimport java.io.StringReader;  \nimport java.util.List;  \nimport org.dom4j.Document;  \nimport org.dom4j.Element;  \nimport org.dom4j.io.SAXReader;  \nimport webservice.Service02Proxy;  \npublic class Test {  \n    public static void main(String[] args) {         \n        try{  \n            //创建代理类  \n            Service02Proxy proxy = new Service02Proxy();  \n            //接受传过来的XML字符串  \n            String str = proxy.method();  \n            //解释该字符串  \n            StringReader read = new StringReader(str);  \n            SAXReader reader = new SAXReader();  \n            Document doc = reader.read(read);   \n            Element root = doc.getRootElement();  \n            //该节点由多个student构成，所以返回值是List类型  \n            List list = root.elements(\"student\");   \n             \n            for(int i = 0;i < list.size();i++){  \n                 \n                Element student = (Element)list.get(i);  \n                Element name = student.element(\"name\");  \n                Element age = student.element(\"age\");  \n                 \n                //打印得到的数据  \n                System.out.println(name.getTextTrim()+\":\"+age.getTextTrim());  \n                 \n            }  \n     \n        }catch(Exception e){  \n             \n            e.printStackTrace();  \n             \n        }  \n    }  \n}\n```\n控制台输出为：\n> **张三:26\n赵四:34 **\n\n每种编程语言可能接受时用的类型不同，但方法大同小异。代码如有问题，欢迎给予评价。","source":"_posts/WebService复杂类型数据传输-dom4j方式.md","raw":"---\ntitle: WebService复杂类型数据传输-dom4j方式\ndate: 2016-11-27 19:39:57\ntags: ［WebService,java］\ncategories: java\n---\nWebService在传递数据的时候只能传递字符串，当我们返回一些简单的字符串时我们可以直接返回，但是当我们想返回比如List，Map等复杂类型的数据时拼接字符串就是个很麻烦的工作，这时我们就用到了dom4j这个工具。\n\n当我们从数据库中查询出很多个对象类型时，我们一般都存放在List中。像这种数据就很难用拼接字符串的形式进行传递。我的解决办法就是利用dom4j把它写成一个xml格式的字符串，然后在客户端再利用dom4j解释。\n<!--more-->\n假如我们从数据库中查询的是一个Student对象，该对象有name和agel两个属性，我们将大量的Student对象储存在List中。下面我们想利用dom4j把List数据变成如下格式的xml文件类型的字符串：  \n``` xml\n\t<?xml version=\"1.0\" encoding=\"UTF-8\"?>  \n    <root>  \n        <student>  \n            <name>张三</name>  \n            <age>26</age>  \n        </student>  \n        <student>  \n            <name>赵四</name>  \n            <age>34</age>  \n        </student>  \n    </root> \n```\nwebservice端Java代码如下：  \n``` java\nimport java.util.List;  \nimport org.dom4j.Document;  \nimport org.dom4j.DocumentHelper;  \nimport org.dom4j.Element;  \nimport org.dom4j.io.OutputFormat;  \nimport vo.UnitPO;  \nimport DAO.unitDao;  \npublic class Service02 {     \n    public String method(){  \n         \n        Document document = DocumentHelper.createDocument();  \n        Element root = document.addElement(\"root\");  \n         \n        Element stuElement = null;  \n        Element nameElement = null;  \n        Element ageElement = null;  \n         \n        //第一个student节点  \n        stuElement = root.addElement(\"student\");  \n        //添加两个子节点  \n        nameElement = stuElement.addElement(\"name\");  \n        ageElement = stuElement.addElement(\"age\");     \n        //向两个子节点中添加文本内容  \n        nameElement.addText(\"张三\");  \n        ageElement.addText(\"26\");  \n         \n        //同理第二个student节点  \n        stuElement = root.addElement(\"student\");         \n        nameElement = stuElement.addElement(\"name\");  \n        ageElement = stuElement.addElement(\"age\");     \n        nameElement.addText(\"赵四\");  \n        ageElement.addText(\"34\");  \n        try {  \n            OutputFormat format = OutputFormat.createPrettyPrint();  \n            // 设置XML文件的编码格式  \n            format.setEncoding(\"UTF-8\");  \n            return document.asXML();  \n        } catch (Exception e) {  \n            System.out.println(e.getMessage());  \n            return \"error\";  \n        }  \n    }  \n} \n```\n这样就将我们想传送的复杂数据变成了xml格式是字符串，下面在客户端就可以解释出我们想要的数据了。client端java代码如下：\n``` java\nimport java.io.StringReader;  \nimport java.util.List;  \nimport org.dom4j.Document;  \nimport org.dom4j.Element;  \nimport org.dom4j.io.SAXReader;  \nimport webservice.Service02Proxy;  \npublic class Test {  \n    public static void main(String[] args) {         \n        try{  \n            //创建代理类  \n            Service02Proxy proxy = new Service02Proxy();  \n            //接受传过来的XML字符串  \n            String str = proxy.method();  \n            //解释该字符串  \n            StringReader read = new StringReader(str);  \n            SAXReader reader = new SAXReader();  \n            Document doc = reader.read(read);   \n            Element root = doc.getRootElement();  \n            //该节点由多个student构成，所以返回值是List类型  \n            List list = root.elements(\"student\");   \n             \n            for(int i = 0;i < list.size();i++){  \n                 \n                Element student = (Element)list.get(i);  \n                Element name = student.element(\"name\");  \n                Element age = student.element(\"age\");  \n                 \n                //打印得到的数据  \n                System.out.println(name.getTextTrim()+\":\"+age.getTextTrim());  \n                 \n            }  \n     \n        }catch(Exception e){  \n             \n            e.printStackTrace();  \n             \n        }  \n    }  \n}\n```\n控制台输出为：\n> **张三:26\n赵四:34 **\n\n每种编程语言可能接受时用的类型不同，但方法大同小异。代码如有问题，欢迎给予评价。","slug":"WebService复杂类型数据传输-dom4j方式","published":1,"updated":"2016-11-27T12:12:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw6kw3u3000jp5s6qs2gd4rj","content":"<p>WebService在传递数据的时候只能传递字符串，当我们返回一些简单的字符串时我们可以直接返回，但是当我们想返回比如List，Map等复杂类型的数据时拼接字符串就是个很麻烦的工作，这时我们就用到了dom4j这个工具。</p>\n<p>当我们从数据库中查询出很多个对象类型时，我们一般都存放在List中。像这种数据就很难用拼接字符串的形式进行传递。我的解决办法就是利用dom4j把它写成一个xml格式的字符串，然后在客户端再利用dom4j解释。<br><a id=\"more\"></a><br>假如我们从数据库中查询的是一个Student对象，该对象有name和agel两个属性，我们将大量的Student对象储存在List中。下面我们想利用dom4j把List数据变成如下格式的xml文件类型的字符串：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;  </div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">root</span>&gt;</span>  </div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">student</span>&gt;</span>  </div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>张三<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>  </div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">age</span>&gt;</span>26<span class=\"tag\">&lt;/<span class=\"name\">age</span>&gt;</span>  </div><div class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">student</span>&gt;</span>  </div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">student</span>&gt;</span>  </div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>赵四<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>  </div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">age</span>&gt;</span>34<span class=\"tag\">&lt;/<span class=\"name\">age</span>&gt;</span>  </div><div class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">student</span>&gt;</span>  </div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>webservice端Java代码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.dom4j.Document;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.dom4j.DocumentHelper;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.dom4j.Element;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.dom4j.io.OutputFormat;  </div><div class=\"line\"><span class=\"keyword\">import</span> vo.UnitPO;  </div><div class=\"line\"><span class=\"keyword\">import</span> DAO.unitDao;  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Service02</span> </span>&#123;     </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">method</span><span class=\"params\">()</span></span>&#123;  </div><div class=\"line\">         </div><div class=\"line\">        Document document = DocumentHelper.createDocument();  </div><div class=\"line\">        Element root = document.addElement(<span class=\"string\">\"root\"</span>);  </div><div class=\"line\">         </div><div class=\"line\">        Element stuElement = <span class=\"keyword\">null</span>;  </div><div class=\"line\">        Element nameElement = <span class=\"keyword\">null</span>;  </div><div class=\"line\">        Element ageElement = <span class=\"keyword\">null</span>;  </div><div class=\"line\">         </div><div class=\"line\">        <span class=\"comment\">//第一个student节点  </span></div><div class=\"line\">        stuElement = root.addElement(<span class=\"string\">\"student\"</span>);  </div><div class=\"line\">        <span class=\"comment\">//添加两个子节点  </span></div><div class=\"line\">        nameElement = stuElement.addElement(<span class=\"string\">\"name\"</span>);  </div><div class=\"line\">        ageElement = stuElement.addElement(<span class=\"string\">\"age\"</span>);     </div><div class=\"line\">        <span class=\"comment\">//向两个子节点中添加文本内容  </span></div><div class=\"line\">        nameElement.addText(<span class=\"string\">\"张三\"</span>);  </div><div class=\"line\">        ageElement.addText(<span class=\"string\">\"26\"</span>);  </div><div class=\"line\">         </div><div class=\"line\">        <span class=\"comment\">//同理第二个student节点  </span></div><div class=\"line\">        stuElement = root.addElement(<span class=\"string\">\"student\"</span>);         </div><div class=\"line\">        nameElement = stuElement.addElement(<span class=\"string\">\"name\"</span>);  </div><div class=\"line\">        ageElement = stuElement.addElement(<span class=\"string\">\"age\"</span>);     </div><div class=\"line\">        nameElement.addText(<span class=\"string\">\"赵四\"</span>);  </div><div class=\"line\">        ageElement.addText(<span class=\"string\">\"34\"</span>);  </div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">            OutputFormat format = OutputFormat.createPrettyPrint();  </div><div class=\"line\">            <span class=\"comment\">// 设置XML文件的编码格式  </span></div><div class=\"line\">            format.setEncoding(<span class=\"string\">\"UTF-8\"</span>);  </div><div class=\"line\">            <span class=\"keyword\">return</span> document.asXML();  </div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;  </div><div class=\"line\">            System.out.println(e.getMessage());  </div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"error\"</span>;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这样就将我们想传送的复杂数据变成了xml格式是字符串，下面在客户端就可以解释出我们想要的数据了。client端java代码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.io.StringReader;  </div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.dom4j.Document;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.dom4j.Element;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.dom4j.io.SAXReader;  </div><div class=\"line\"><span class=\"keyword\">import</span> webservice.Service02Proxy;  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;         </div><div class=\"line\">        <span class=\"keyword\">try</span>&#123;  </div><div class=\"line\">            <span class=\"comment\">//创建代理类  </span></div><div class=\"line\">            Service02Proxy proxy = <span class=\"keyword\">new</span> Service02Proxy();  </div><div class=\"line\">            <span class=\"comment\">//接受传过来的XML字符串  </span></div><div class=\"line\">            String str = proxy.method();  </div><div class=\"line\">            <span class=\"comment\">//解释该字符串  </span></div><div class=\"line\">            StringReader read = <span class=\"keyword\">new</span> StringReader(str);  </div><div class=\"line\">            SAXReader reader = <span class=\"keyword\">new</span> SAXReader();  </div><div class=\"line\">            Document doc = reader.read(read);   </div><div class=\"line\">            Element root = doc.getRootElement();  </div><div class=\"line\">            <span class=\"comment\">//该节点由多个student构成，所以返回值是List类型  </span></div><div class=\"line\">            List list = root.elements(<span class=\"string\">\"student\"</span>);   </div><div class=\"line\">             </div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; list.size();i++)&#123;  </div><div class=\"line\">                 </div><div class=\"line\">                Element student = (Element)list.get(i);  </div><div class=\"line\">                Element name = student.element(<span class=\"string\">\"name\"</span>);  </div><div class=\"line\">                Element age = student.element(<span class=\"string\">\"age\"</span>);  </div><div class=\"line\">                 </div><div class=\"line\">                <span class=\"comment\">//打印得到的数据  </span></div><div class=\"line\">                System.out.println(name.getTextTrim()+<span class=\"string\">\":\"</span>+age.getTextTrim());  </div><div class=\"line\">                 </div><div class=\"line\">            &#125;  </div><div class=\"line\">     </div><div class=\"line\">        &#125;<span class=\"keyword\">catch</span>(Exception e)&#123;  </div><div class=\"line\">             </div><div class=\"line\">            e.printStackTrace();  </div><div class=\"line\">             </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>控制台输出为：</p>\n<blockquote>\n<p><strong>张三:26<br>赵四:34 </strong></p>\n</blockquote>\n<p>每种编程语言可能接受时用的类型不同，但方法大同小异。代码如有问题，欢迎给予评价。</p>\n","excerpt":"<p>WebService在传递数据的时候只能传递字符串，当我们返回一些简单的字符串时我们可以直接返回，但是当我们想返回比如List，Map等复杂类型的数据时拼接字符串就是个很麻烦的工作，这时我们就用到了dom4j这个工具。</p>\n<p>当我们从数据库中查询出很多个对象类型时，我们一般都存放在List中。像这种数据就很难用拼接字符串的形式进行传递。我的解决办法就是利用dom4j把它写成一个xml格式的字符串，然后在客户端再利用dom4j解释。<br>","more":"<br>假如我们从数据库中查询的是一个Student对象，该对象有name和agel两个属性，我们将大量的Student对象储存在List中。下面我们想利用dom4j把List数据变成如下格式的xml文件类型的字符串：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;  </div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">root</span>&gt;</span>  </div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">student</span>&gt;</span>  </div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>张三<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>  </div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">age</span>&gt;</span>26<span class=\"tag\">&lt;/<span class=\"name\">age</span>&gt;</span>  </div><div class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">student</span>&gt;</span>  </div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">student</span>&gt;</span>  </div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>赵四<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>  </div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">age</span>&gt;</span>34<span class=\"tag\">&lt;/<span class=\"name\">age</span>&gt;</span>  </div><div class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">student</span>&gt;</span>  </div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>webservice端Java代码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.dom4j.Document;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.dom4j.DocumentHelper;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.dom4j.Element;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.dom4j.io.OutputFormat;  </div><div class=\"line\"><span class=\"keyword\">import</span> vo.UnitPO;  </div><div class=\"line\"><span class=\"keyword\">import</span> DAO.unitDao;  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Service02</span> </span>&#123;     </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">method</span><span class=\"params\">()</span></span>&#123;  </div><div class=\"line\">         </div><div class=\"line\">        Document document = DocumentHelper.createDocument();  </div><div class=\"line\">        Element root = document.addElement(<span class=\"string\">\"root\"</span>);  </div><div class=\"line\">         </div><div class=\"line\">        Element stuElement = <span class=\"keyword\">null</span>;  </div><div class=\"line\">        Element nameElement = <span class=\"keyword\">null</span>;  </div><div class=\"line\">        Element ageElement = <span class=\"keyword\">null</span>;  </div><div class=\"line\">         </div><div class=\"line\">        <span class=\"comment\">//第一个student节点  </span></div><div class=\"line\">        stuElement = root.addElement(<span class=\"string\">\"student\"</span>);  </div><div class=\"line\">        <span class=\"comment\">//添加两个子节点  </span></div><div class=\"line\">        nameElement = stuElement.addElement(<span class=\"string\">\"name\"</span>);  </div><div class=\"line\">        ageElement = stuElement.addElement(<span class=\"string\">\"age\"</span>);     </div><div class=\"line\">        <span class=\"comment\">//向两个子节点中添加文本内容  </span></div><div class=\"line\">        nameElement.addText(<span class=\"string\">\"张三\"</span>);  </div><div class=\"line\">        ageElement.addText(<span class=\"string\">\"26\"</span>);  </div><div class=\"line\">         </div><div class=\"line\">        <span class=\"comment\">//同理第二个student节点  </span></div><div class=\"line\">        stuElement = root.addElement(<span class=\"string\">\"student\"</span>);         </div><div class=\"line\">        nameElement = stuElement.addElement(<span class=\"string\">\"name\"</span>);  </div><div class=\"line\">        ageElement = stuElement.addElement(<span class=\"string\">\"age\"</span>);     </div><div class=\"line\">        nameElement.addText(<span class=\"string\">\"赵四\"</span>);  </div><div class=\"line\">        ageElement.addText(<span class=\"string\">\"34\"</span>);  </div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">            OutputFormat format = OutputFormat.createPrettyPrint();  </div><div class=\"line\">            <span class=\"comment\">// 设置XML文件的编码格式  </span></div><div class=\"line\">            format.setEncoding(<span class=\"string\">\"UTF-8\"</span>);  </div><div class=\"line\">            <span class=\"keyword\">return</span> document.asXML();  </div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;  </div><div class=\"line\">            System.out.println(e.getMessage());  </div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"error\"</span>;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这样就将我们想传送的复杂数据变成了xml格式是字符串，下面在客户端就可以解释出我们想要的数据了。client端java代码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.io.StringReader;  </div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.dom4j.Document;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.dom4j.Element;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.dom4j.io.SAXReader;  </div><div class=\"line\"><span class=\"keyword\">import</span> webservice.Service02Proxy;  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;         </div><div class=\"line\">        <span class=\"keyword\">try</span>&#123;  </div><div class=\"line\">            <span class=\"comment\">//创建代理类  </span></div><div class=\"line\">            Service02Proxy proxy = <span class=\"keyword\">new</span> Service02Proxy();  </div><div class=\"line\">            <span class=\"comment\">//接受传过来的XML字符串  </span></div><div class=\"line\">            String str = proxy.method();  </div><div class=\"line\">            <span class=\"comment\">//解释该字符串  </span></div><div class=\"line\">            StringReader read = <span class=\"keyword\">new</span> StringReader(str);  </div><div class=\"line\">            SAXReader reader = <span class=\"keyword\">new</span> SAXReader();  </div><div class=\"line\">            Document doc = reader.read(read);   </div><div class=\"line\">            Element root = doc.getRootElement();  </div><div class=\"line\">            <span class=\"comment\">//该节点由多个student构成，所以返回值是List类型  </span></div><div class=\"line\">            List list = root.elements(<span class=\"string\">\"student\"</span>);   </div><div class=\"line\">             </div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; list.size();i++)&#123;  </div><div class=\"line\">                 </div><div class=\"line\">                Element student = (Element)list.get(i);  </div><div class=\"line\">                Element name = student.element(<span class=\"string\">\"name\"</span>);  </div><div class=\"line\">                Element age = student.element(<span class=\"string\">\"age\"</span>);  </div><div class=\"line\">                 </div><div class=\"line\">                <span class=\"comment\">//打印得到的数据  </span></div><div class=\"line\">                System.out.println(name.getTextTrim()+<span class=\"string\">\":\"</span>+age.getTextTrim());  </div><div class=\"line\">                 </div><div class=\"line\">            &#125;  </div><div class=\"line\">     </div><div class=\"line\">        &#125;<span class=\"keyword\">catch</span>(Exception e)&#123;  </div><div class=\"line\">             </div><div class=\"line\">            e.printStackTrace();  </div><div class=\"line\">             </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>控制台输出为：</p>\n<blockquote>\n<p><strong>张三:26<br>赵四:34 </strong></p>\n</blockquote>\n<p>每种编程语言可能接受时用的类型不同，但方法大同小异。代码如有问题，欢迎给予评价。</p>"},{"title":"设计模式在游戏开发中的应用之单例模式","date":"2016-12-01T15:07:14.000Z","_content":"# 单例模式\n## 通俗的定义\n是指在运行中只有一个实例对象存在。\n## 结构图如下\n![single](/images/design_3_single.png)\n<!--more-->\n## 游戏开发中的使用\n游戏开发中单例模式的使用也是非常普遍的，比如在Cocos2d-x中的Director就是一个单例。比如游戏中的很多工具类都是做成单例或者静态类的方式来使用。单例还有一种写法，很少有人使用，然而这种写法在做游戏开发时却很好用。比如，我们在需要分享时，往往都需要每个平台都有单独的功能和实现方式，很多时候我们都这么写：\n``` java\nclass ShareUtils {  \n    private _instance = new ShareUtils();  \n  \n    private ShareUtils() {  \n    }  \n  \n    public getInstance() {  \n        return _instance;  \n    }  \n      \n    public void shareToIOS () {  \n        //todo iOS share  \n    }  \n      \n    public void shareToAndroid () {  \n        //todo android share  \n    }  \n}  \n```\n然后再根据不同平台调用不同的函数。其实我们完全可以写的再优雅一些：\n``` java\nclass ShareUtils {  \n    private ShareUtils _instance = null;  \n  \n    private ShareUtils() {  \n    }  \n  \n    public getInstance() {  \n        if (_instance == null) {  \n            if (PLATFORM == IOS) {  \n                _instance = new IOSShare()  \n            } else if (PLATFORM == ANDROID) {  \n                _instance = new AndroidShare()  \n            }  \n        }  \n        return _instance;  \n    }  \n      \n    public void share();  \n}  \n  \nclass IOSShare extends ShareUtils {  \n    public void share() {  \n        //todo ios share  \n    }  \n}  \n  \nclass AndroidShare extends ShareUtils {  \n    public void share() {  \n        //todo android share  \n    }  \n}  \n```\n其实这里我们更重要的是要讨论一下单例模式的问题。\n## 单例模式的问题\n最大问题之一就是它本身是一个全局变量。全局变量会让人很难阅读和理解，当我们去查找一个别人写的代码中的bug时，如果这里没有使用全局变量的话，我们只要理解这个函数体内的代码和传递的参数就可以了。然而当这里充斥着全局变量的时候，性质就不一样了，你要全局搜索这个全局变量都在哪里引用了，做了什么修改，为什么这么修改，理解和修改的代价就会变得特别大。同时全局变量还增加了代码的耦合性，这也是个问题。在很多项目中我们都能看见这样的类：SoundManager,GameManager,DataUtils等等，各种各样的Manager和Utils，大多数时候它们很管用，但是当你要创建这么一个类的时候，你应该思考一下真的需要一个单例的类么？在《游戏编程模式》中有下面这个例子：\n``` java\nclass Bullet  \n{  \npublic:  \n  int getX() const { return x_; }  \n  int getY() const { return y_; }  \n  \n  void setX(int x) { x_ = x; }  \n  void setY(int y) { y_ = y; }  \n  \nprivate:  \n  int x_, y_;  \n};  \n  \nclass BulletManager  \n{  \npublic:  \n  Bullet* create(int x, int y)  \n  {  \n    Bullet* bullet = new Bullet();  \n    bullet->setX(x);  \n    bullet->setY(y);  \n  \n    return bullet;  \n  }  \n  \n  bool isOnScreen(Bullet& bullet)  \n  {  \n    return bullet.getX() >= 0 &&  \n           bullet.getX() < SCREEN_WIDTH &&  \n           bullet.getY() >= 0 &&  \n           bullet.getY() < SCREEN_HEIGHT;  \n  }  \n  \n  void move(Bullet& bullet)  \n  {  \n    bullet.setX(bullet.getX() + 5);  \n  }  \n}; \n```\n这里的BulletManager就是一个管理Bullet的单例类，看起来这里很合理，但是真的需要吗？答案是不需要：\n``` java\nclass Bullet  \n{  \npublic:  \n  Bullet(int x, int y) : x_(x), y_(y) {}  \n  \n  bool isOnScreen()  \n  {  \n    return x_ >= 0 && x_ < SCREEN_WIDTH &&  \n           y_ >= 0 && y_ < SCREEN_HEIGHT;  \n  }  \n  \n  void move() { x_ += 5; }  \n  \nprivate:  \n  int x_, y_;  \n};  \n```\n总之，单例是很方便，有时也很管用，但是要慎用，如果项目中充斥着大量的单例，那么这个项目肯定是难以维护的。","source":"_posts/design-single.md","raw":"---\ntitle: 设计模式在游戏开发中的应用之单例模式\ndate: 2016-12-01 23:07:14\ntags: 单例模式\ncategories: 设计模式\n---\n# 单例模式\n## 通俗的定义\n是指在运行中只有一个实例对象存在。\n## 结构图如下\n![single](/images/design_3_single.png)\n<!--more-->\n## 游戏开发中的使用\n游戏开发中单例模式的使用也是非常普遍的，比如在Cocos2d-x中的Director就是一个单例。比如游戏中的很多工具类都是做成单例或者静态类的方式来使用。单例还有一种写法，很少有人使用，然而这种写法在做游戏开发时却很好用。比如，我们在需要分享时，往往都需要每个平台都有单独的功能和实现方式，很多时候我们都这么写：\n``` java\nclass ShareUtils {  \n    private _instance = new ShareUtils();  \n  \n    private ShareUtils() {  \n    }  \n  \n    public getInstance() {  \n        return _instance;  \n    }  \n      \n    public void shareToIOS () {  \n        //todo iOS share  \n    }  \n      \n    public void shareToAndroid () {  \n        //todo android share  \n    }  \n}  \n```\n然后再根据不同平台调用不同的函数。其实我们完全可以写的再优雅一些：\n``` java\nclass ShareUtils {  \n    private ShareUtils _instance = null;  \n  \n    private ShareUtils() {  \n    }  \n  \n    public getInstance() {  \n        if (_instance == null) {  \n            if (PLATFORM == IOS) {  \n                _instance = new IOSShare()  \n            } else if (PLATFORM == ANDROID) {  \n                _instance = new AndroidShare()  \n            }  \n        }  \n        return _instance;  \n    }  \n      \n    public void share();  \n}  \n  \nclass IOSShare extends ShareUtils {  \n    public void share() {  \n        //todo ios share  \n    }  \n}  \n  \nclass AndroidShare extends ShareUtils {  \n    public void share() {  \n        //todo android share  \n    }  \n}  \n```\n其实这里我们更重要的是要讨论一下单例模式的问题。\n## 单例模式的问题\n最大问题之一就是它本身是一个全局变量。全局变量会让人很难阅读和理解，当我们去查找一个别人写的代码中的bug时，如果这里没有使用全局变量的话，我们只要理解这个函数体内的代码和传递的参数就可以了。然而当这里充斥着全局变量的时候，性质就不一样了，你要全局搜索这个全局变量都在哪里引用了，做了什么修改，为什么这么修改，理解和修改的代价就会变得特别大。同时全局变量还增加了代码的耦合性，这也是个问题。在很多项目中我们都能看见这样的类：SoundManager,GameManager,DataUtils等等，各种各样的Manager和Utils，大多数时候它们很管用，但是当你要创建这么一个类的时候，你应该思考一下真的需要一个单例的类么？在《游戏编程模式》中有下面这个例子：\n``` java\nclass Bullet  \n{  \npublic:  \n  int getX() const { return x_; }  \n  int getY() const { return y_; }  \n  \n  void setX(int x) { x_ = x; }  \n  void setY(int y) { y_ = y; }  \n  \nprivate:  \n  int x_, y_;  \n};  \n  \nclass BulletManager  \n{  \npublic:  \n  Bullet* create(int x, int y)  \n  {  \n    Bullet* bullet = new Bullet();  \n    bullet->setX(x);  \n    bullet->setY(y);  \n  \n    return bullet;  \n  }  \n  \n  bool isOnScreen(Bullet& bullet)  \n  {  \n    return bullet.getX() >= 0 &&  \n           bullet.getX() < SCREEN_WIDTH &&  \n           bullet.getY() >= 0 &&  \n           bullet.getY() < SCREEN_HEIGHT;  \n  }  \n  \n  void move(Bullet& bullet)  \n  {  \n    bullet.setX(bullet.getX() + 5);  \n  }  \n}; \n```\n这里的BulletManager就是一个管理Bullet的单例类，看起来这里很合理，但是真的需要吗？答案是不需要：\n``` java\nclass Bullet  \n{  \npublic:  \n  Bullet(int x, int y) : x_(x), y_(y) {}  \n  \n  bool isOnScreen()  \n  {  \n    return x_ >= 0 && x_ < SCREEN_WIDTH &&  \n           y_ >= 0 && y_ < SCREEN_HEIGHT;  \n  }  \n  \n  void move() { x_ += 5; }  \n  \nprivate:  \n  int x_, y_;  \n};  \n```\n总之，单例是很方便，有时也很管用，但是要慎用，如果项目中充斥着大量的单例，那么这个项目肯定是难以维护的。","slug":"design-single","published":1,"updated":"2016-12-01T15:20:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw6kw3u5000mp5s6pt6t7jx6","content":"<h1 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h1><h2 id=\"通俗的定义\"><a href=\"#通俗的定义\" class=\"headerlink\" title=\"通俗的定义\"></a>通俗的定义</h2><p>是指在运行中只有一个实例对象存在。</p>\n<h2 id=\"结构图如下\"><a href=\"#结构图如下\" class=\"headerlink\" title=\"结构图如下\"></a>结构图如下</h2><p><img src=\"/images/design_3_single.png\" alt=\"single\"><br><a id=\"more\"></a></p>\n<h2 id=\"游戏开发中的使用\"><a href=\"#游戏开发中的使用\" class=\"headerlink\" title=\"游戏开发中的使用\"></a>游戏开发中的使用</h2><p>游戏开发中单例模式的使用也是非常普遍的，比如在Cocos2d-x中的Director就是一个单例。比如游戏中的很多工具类都是做成单例或者静态类的方式来使用。单例还有一种写法，很少有人使用，然而这种写法在做游戏开发时却很好用。比如，我们在需要分享时，往往都需要每个平台都有单独的功能和实现方式，很多时候我们都这么写：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShareUtils</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">private</span> _instance = <span class=\"keyword\">new</span> ShareUtils();  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">ShareUtils</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span> _instance;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shareToIOS</span> <span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"comment\">//todo iOS share  </span></div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shareToAndroid</span> <span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"comment\">//todo android share  </span></div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然后再根据不同平台调用不同的函数。其实我们完全可以写的再优雅一些：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShareUtils</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">private</span> ShareUtils _instance = <span class=\"keyword\">null</span>;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">ShareUtils</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span> (_instance == <span class=\"keyword\">null</span>) &#123;  </div><div class=\"line\">            <span class=\"keyword\">if</span> (PLATFORM == IOS) &#123;  </div><div class=\"line\">                _instance = <span class=\"keyword\">new</span> IOSShare()  </div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (PLATFORM == ANDROID) &#123;  </div><div class=\"line\">                _instance = <span class=\"keyword\">new</span> AndroidShare()  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        <span class=\"keyword\">return</span> _instance;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">share</span><span class=\"params\">()</span></span>;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IOSShare</span> <span class=\"keyword\">extends</span> <span class=\"title\">ShareUtils</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">share</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"comment\">//todo ios share  </span></div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AndroidShare</span> <span class=\"keyword\">extends</span> <span class=\"title\">ShareUtils</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">share</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"comment\">//todo android share  </span></div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>其实这里我们更重要的是要讨论一下单例模式的问题。</p>\n<h2 id=\"单例模式的问题\"><a href=\"#单例模式的问题\" class=\"headerlink\" title=\"单例模式的问题\"></a>单例模式的问题</h2><p>最大问题之一就是它本身是一个全局变量。全局变量会让人很难阅读和理解，当我们去查找一个别人写的代码中的bug时，如果这里没有使用全局变量的话，我们只要理解这个函数体内的代码和传递的参数就可以了。然而当这里充斥着全局变量的时候，性质就不一样了，你要全局搜索这个全局变量都在哪里引用了，做了什么修改，为什么这么修改，理解和修改的代价就会变得特别大。同时全局变量还增加了代码的耦合性，这也是个问题。在很多项目中我们都能看见这样的类：SoundManager,GameManager,DataUtils等等，各种各样的Manager和Utils，大多数时候它们很管用，但是当你要创建这么一个类的时候，你应该思考一下真的需要一个单例的类么？在《游戏编程模式》中有下面这个例子：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bullet</span>  </span></div><div class=\"line\">&#123;  </div><div class=\"line\"><span class=\"keyword\">public</span>:  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getX</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123; <span class=\"keyword\">return</span> x_; &#125;  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getY</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123; <span class=\"keyword\">return</span> y_; &#125;  </div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setX</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123; x_ = x; &#125;  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setY</span><span class=\"params\">(<span class=\"keyword\">int</span> y)</span> </span>&#123; y_ = y; &#125;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">private</span>:  </div><div class=\"line\">  <span class=\"keyword\">int</span> x_, y_;  </div><div class=\"line\">&#125;;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BulletManager</span>  </span></div><div class=\"line\">&#123;  </div><div class=\"line\"><span class=\"keyword\">public</span>:  </div><div class=\"line\">  Bullet* create(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)  </div><div class=\"line\">  &#123;  </div><div class=\"line\">    Bullet* bullet = <span class=\"keyword\">new</span> Bullet();  </div><div class=\"line\">    bullet-&gt;setX(x);  </div><div class=\"line\">    bullet-&gt;setY(y);  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">return</span> bullet;  </div><div class=\"line\">  &#125;  </div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\">bool <span class=\"title\">isOnScreen</span><span class=\"params\">(Bullet&amp; bullet)</span>  </span></div><div class=\"line\">  &#123;  </div><div class=\"line\">    <span class=\"keyword\">return</span> bullet.getX() &gt;= <span class=\"number\">0</span> &amp;&amp;  </div><div class=\"line\">           bullet.getX() &lt; SCREEN_WIDTH &amp;&amp;  </div><div class=\"line\">           bullet.getY() &gt;= <span class=\"number\">0</span> &amp;&amp;  </div><div class=\"line\">           bullet.getY() &lt; SCREEN_HEIGHT;  </div><div class=\"line\">  &#125;  </div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">move</span><span class=\"params\">(Bullet&amp; bullet)</span>  </span></div><div class=\"line\">  &#123;  </div><div class=\"line\">    bullet.setX(bullet.getX() + <span class=\"number\">5</span>);  </div><div class=\"line\">  &#125;  </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>这里的BulletManager就是一个管理Bullet的单例类，看起来这里很合理，但是真的需要吗？答案是不需要：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bullet</span>  </span></div><div class=\"line\">&#123;  </div><div class=\"line\"><span class=\"keyword\">public</span>:  </div><div class=\"line\">  Bullet(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y) : x_(x), y_(y) &#123;&#125;  </div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\">bool <span class=\"title\">isOnScreen</span><span class=\"params\">()</span>  </span></div><div class=\"line\">  &#123;  </div><div class=\"line\">    <span class=\"keyword\">return</span> x_ &gt;= <span class=\"number\">0</span> &amp;&amp; x_ &lt; SCREEN_WIDTH &amp;&amp;  </div><div class=\"line\">           y_ &gt;= <span class=\"number\">0</span> &amp;&amp; y_ &lt; SCREEN_HEIGHT;  </div><div class=\"line\">  &#125;  </div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">move</span><span class=\"params\">()</span> </span>&#123; x_ += <span class=\"number\">5</span>; &#125;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">private</span>:  </div><div class=\"line\">  <span class=\"keyword\">int</span> x_, y_;  </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>总之，单例是很方便，有时也很管用，但是要慎用，如果项目中充斥着大量的单例，那么这个项目肯定是难以维护的。</p>\n","excerpt":"<h1 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h1><h2 id=\"通俗的定义\"><a href=\"#通俗的定义\" class=\"headerlink\" title=\"通俗的定义\"></a>通俗的定义</h2><p>是指在运行中只有一个实例对象存在。</p>\n<h2 id=\"结构图如下\"><a href=\"#结构图如下\" class=\"headerlink\" title=\"结构图如下\"></a>结构图如下</h2><p><img src=\"/images/design_3_single.png\" alt=\"single\"><br>","more":"</p>\n<h2 id=\"游戏开发中的使用\"><a href=\"#游戏开发中的使用\" class=\"headerlink\" title=\"游戏开发中的使用\"></a>游戏开发中的使用</h2><p>游戏开发中单例模式的使用也是非常普遍的，比如在Cocos2d-x中的Director就是一个单例。比如游戏中的很多工具类都是做成单例或者静态类的方式来使用。单例还有一种写法，很少有人使用，然而这种写法在做游戏开发时却很好用。比如，我们在需要分享时，往往都需要每个平台都有单独的功能和实现方式，很多时候我们都这么写：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShareUtils</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">private</span> _instance = <span class=\"keyword\">new</span> ShareUtils();  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">ShareUtils</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span> _instance;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shareToIOS</span> <span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"comment\">//todo iOS share  </span></div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shareToAndroid</span> <span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"comment\">//todo android share  </span></div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然后再根据不同平台调用不同的函数。其实我们完全可以写的再优雅一些：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShareUtils</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">private</span> ShareUtils _instance = <span class=\"keyword\">null</span>;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">ShareUtils</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span> (_instance == <span class=\"keyword\">null</span>) &#123;  </div><div class=\"line\">            <span class=\"keyword\">if</span> (PLATFORM == IOS) &#123;  </div><div class=\"line\">                _instance = <span class=\"keyword\">new</span> IOSShare()  </div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (PLATFORM == ANDROID) &#123;  </div><div class=\"line\">                _instance = <span class=\"keyword\">new</span> AndroidShare()  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        <span class=\"keyword\">return</span> _instance;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">share</span><span class=\"params\">()</span></span>;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IOSShare</span> <span class=\"keyword\">extends</span> <span class=\"title\">ShareUtils</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">share</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"comment\">//todo ios share  </span></div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AndroidShare</span> <span class=\"keyword\">extends</span> <span class=\"title\">ShareUtils</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">share</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"comment\">//todo android share  </span></div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>其实这里我们更重要的是要讨论一下单例模式的问题。</p>\n<h2 id=\"单例模式的问题\"><a href=\"#单例模式的问题\" class=\"headerlink\" title=\"单例模式的问题\"></a>单例模式的问题</h2><p>最大问题之一就是它本身是一个全局变量。全局变量会让人很难阅读和理解，当我们去查找一个别人写的代码中的bug时，如果这里没有使用全局变量的话，我们只要理解这个函数体内的代码和传递的参数就可以了。然而当这里充斥着全局变量的时候，性质就不一样了，你要全局搜索这个全局变量都在哪里引用了，做了什么修改，为什么这么修改，理解和修改的代价就会变得特别大。同时全局变量还增加了代码的耦合性，这也是个问题。在很多项目中我们都能看见这样的类：SoundManager,GameManager,DataUtils等等，各种各样的Manager和Utils，大多数时候它们很管用，但是当你要创建这么一个类的时候，你应该思考一下真的需要一个单例的类么？在《游戏编程模式》中有下面这个例子：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bullet</span>  </div><div class=\"line\"></span>&#123;  </div><div class=\"line\"><span class=\"keyword\">public</span>:  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getX</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123; <span class=\"keyword\">return</span> x_; &#125;  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getY</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123; <span class=\"keyword\">return</span> y_; &#125;  </div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setX</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123; x_ = x; &#125;  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setY</span><span class=\"params\">(<span class=\"keyword\">int</span> y)</span> </span>&#123; y_ = y; &#125;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">private</span>:  </div><div class=\"line\">  <span class=\"keyword\">int</span> x_, y_;  </div><div class=\"line\">&#125;;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BulletManager</span>  </div><div class=\"line\"></span>&#123;  </div><div class=\"line\"><span class=\"keyword\">public</span>:  </div><div class=\"line\">  Bullet* create(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)  </div><div class=\"line\">  &#123;  </div><div class=\"line\">    Bullet* bullet = <span class=\"keyword\">new</span> Bullet();  </div><div class=\"line\">    bullet-&gt;setX(x);  </div><div class=\"line\">    bullet-&gt;setY(y);  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">return</span> bullet;  </div><div class=\"line\">  &#125;  </div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\">bool <span class=\"title\">isOnScreen</span><span class=\"params\">(Bullet&amp; bullet)</span>  </div><div class=\"line\">  </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">return</span> bullet.getX() &gt;= <span class=\"number\">0</span> &amp;&amp;  </div><div class=\"line\">           bullet.getX() &lt; SCREEN_WIDTH &amp;&amp;  </div><div class=\"line\">           bullet.getY() &gt;= <span class=\"number\">0</span> &amp;&amp;  </div><div class=\"line\">           bullet.getY() &lt; SCREEN_HEIGHT;  </div><div class=\"line\">  &#125;  </div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">move</span><span class=\"params\">(Bullet&amp; bullet)</span>  </div><div class=\"line\">  </span>&#123;  </div><div class=\"line\">    bullet.setX(bullet.getX() + <span class=\"number\">5</span>);  </div><div class=\"line\">  &#125;  </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>这里的BulletManager就是一个管理Bullet的单例类，看起来这里很合理，但是真的需要吗？答案是不需要：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bullet</span>  </div><div class=\"line\"></span>&#123;  </div><div class=\"line\"><span class=\"keyword\">public</span>:  </div><div class=\"line\">  Bullet(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y) : x_(x), y_(y) &#123;&#125;  </div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\">bool <span class=\"title\">isOnScreen</span><span class=\"params\">()</span>  </div><div class=\"line\">  </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">return</span> x_ &gt;= <span class=\"number\">0</span> &amp;&amp; x_ &lt; SCREEN_WIDTH &amp;&amp;  </div><div class=\"line\">           y_ &gt;= <span class=\"number\">0</span> &amp;&amp; y_ &lt; SCREEN_HEIGHT;  </div><div class=\"line\">  &#125;  </div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">move</span><span class=\"params\">()</span> </span>&#123; x_ += <span class=\"number\">5</span>; &#125;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">private</span>:  </div><div class=\"line\">  <span class=\"keyword\">int</span> x_, y_;  </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>总之，单例是很方便，有时也很管用，但是要慎用，如果项目中充斥着大量的单例，那么这个项目肯定是难以维护的。</p>"},{"title":"第一篇文章","date":"2016-11-27T08:45:24.000Z","_content":"# 我在Hexo上的第一篇博客\n\n这是我在Hexo上的第一篇博客，后面我会将我之前在其它博客平台上写的博客全部迁移到这里，并坚持写新的博客，希望大家支持，谢谢！","source":"_posts/第一篇文章.md","raw":"---\ntitle: 第一篇文章\ndate: 2016-11-27 16:45:24\ntags:\n---\n# 我在Hexo上的第一篇博客\n\n这是我在Hexo上的第一篇博客，后面我会将我之前在其它博客平台上写的博客全部迁移到这里，并坚持写新的博客，希望大家支持，谢谢！","slug":"第一篇文章","published":1,"updated":"2016-11-27T11:24:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw6kw3ub000rp5s6lf8qsyfw","content":"<h1 id=\"我在Hexo上的第一篇博客\"><a href=\"#我在Hexo上的第一篇博客\" class=\"headerlink\" title=\"我在Hexo上的第一篇博客\"></a>我在Hexo上的第一篇博客</h1><p>这是我在Hexo上的第一篇博客，后面我会将我之前在其它博客平台上写的博客全部迁移到这里，并坚持写新的博客，希望大家支持，谢谢！</p>\n","excerpt":"","more":"<h1 id=\"我在Hexo上的第一篇博客\"><a href=\"#我在Hexo上的第一篇博客\" class=\"headerlink\" title=\"我在Hexo上的第一篇博客\"></a>我在Hexo上的第一篇博客</h1><p>这是我在Hexo上的第一篇博客，后面我会将我之前在其它博客平台上写的博客全部迁移到这里，并坚持写新的博客，希望大家支持，谢谢！</p>\n"},{"title":"设计模式在游戏开发中的应用之观察者模式","date":"2016-12-01T14:41:17.000Z","_content":"# 观察者模式\n## 通俗的定义\n触发事件的一方不关心谁来处理，处理事件的一方不关心事件是从哪里来的。观察者模式就是让观察者与被观察者彻底解耦。\n## 结构图如下\n![observer](/images/design_2_observer.png)\n<!--more-->\n## 游戏开发中的使用\n当我们设计一个成就系统的时候，往往要在各个系统都要增加判断，比如杀死某种怪物多少只，新手往往可能这么写：\n``` java\npublic static KILL_1009_COUNT = 0;  \nmain () {  \n    //killMonster是杀死一个怪物，返回杀死怪物的id  \n    int id = killMonster();  \n    //如果杀死的怪物是1009那么数量加一，超过100次达成成就  \n    if (id == \"1009\") {  \n        KILL_1009_COUNT++;  \n        if (KILL_1009_COUNT > 100) {  \n            print(\"达成成就！杀死1009怪物100次！\");  \n        }  \n    }  \n}  \n```\n如果这样写下去，后果将不堪设想：各个类直接将会超级耦合，成就判断将会蔓延到整个项目的每个角落！观察者模式就是为了解决这个问题而出现的。观察者模式让代码彻底解耦，还是上面的那个例子：\n``` java\nmain () {  \n    //killMonster是杀死一个怪物，返回杀死怪物的id  \n    int id = killMonster();  \n    //发送消息，杀死怪物，并将杀死的怪物id一起发送  \n    notify(EVENT_KILL_MONSTER, id);  \n}  \n```\n这样代码的各个功能就不用关心成就相关的逻辑，只是通知我做了这样一件事情就可以了。同样，游戏中这样的例子到处都是，比如增加经验时，我们发送增加经验的消息，接收消息的地方来处理到底升没升级，因为可以增加经验的地方有很多，这样我们就不用导出判断是否升级了。下面看一下观察者的实现：\n``` java\n//处理观察者与被观察者  \nclass Notification {  \n    //一个可变的观察者列表  \n    private List observerList = null;  \n    //该类是单例（后面我们会单独讲单例模式）  \n    private static Notification _instance = null;     \n    public static getInstance() {  \n        if (_instance == null) {  \n            _instance = new Notification();  \n            //初始化列表容器  \n            observerList = new ArrayList();  \n        }  \n        return _instance;  \n    }  \n    //添加观察者  \n    public void addObserver(Observer obs) {  \n        if (!observerList.isExistobs {  \n            observerList.add(obs);  \n        }  \n    }  \n    //删除观察者  \n    public void removeObserver(Observer obs) {  \n        observerList.remove(obs);  \n    }  \n      \n    //广播消息  \n    public void sendMsg(String event, ..) {  \n        for (Observer obs : observerList) {  \n            if (obs.event == event) {  \n                obs.onNotify(..);  \n            }  \n        }  \n    }  \n}  \n  \n//观察者基类  \nclass Observer {  \n    String event;  \n    //接收消息函数，event是消息类型，后面是参数  \n    void onNotify(..)  \n    //添加观察者  \n    void addObserver(String event) {  \n        event = event;  \n        Notification.getInstance().addObserver(this);  \n    }  \n}  \n  \n//杀怪成就观察者  \nclass AchievementObserver extends Observer {  \n    void onNotify(id) {  \n        if (id == 1009) {  \n            //处理杀1009怪的成就逻辑  \n        } else if (id == 1010) {  \n            //处理杀1010怪的成就逻辑  \n        }  \n    }  \n}  \n  \nmain () {  \n    //killMonster是杀死一个怪物，返回杀死怪物的id  \n    int id = killMonster();  \n    //发送消息，杀死怪物，并将杀死的怪物id一起发送  \n    Notification.getInstance().sendMsg(EVENT_KILL_MONSTER, id);  \n}\n```\n然后在写一个成就管理类来管理各种成就观察者，这样各个成就直接也可以解耦。\n## 其他问题\n- 引用销毁问题：这个问题容易造成内存泄漏，就是在这个观察者不再使用时，一定记得将其remove，否则这个观察者一直在引用着，不会被释放。\n- 同步异步问题：sendMsg这个函数中是在主线程按加入顺序进行发送的，在特殊情况下根据需要可以使用多线程来实现。\n- 其他应用：观察者模式在MVC这种结构下也经常使用，control来处理逻辑，通过观察者来相应UI事件。\n观察者模式的优点就是可以做到完全的解耦；缺点就是使用不当会让程序难以维护和调试。","source":"_posts/design-observer.md","raw":"---\ntitle: 设计模式在游戏开发中的应用之观察者模式\ndate: 2016-12-01 22:41:17\ntags: 观察者模式\ncategories: 设计模式\n---\n# 观察者模式\n## 通俗的定义\n触发事件的一方不关心谁来处理，处理事件的一方不关心事件是从哪里来的。观察者模式就是让观察者与被观察者彻底解耦。\n## 结构图如下\n![observer](/images/design_2_observer.png)\n<!--more-->\n## 游戏开发中的使用\n当我们设计一个成就系统的时候，往往要在各个系统都要增加判断，比如杀死某种怪物多少只，新手往往可能这么写：\n``` java\npublic static KILL_1009_COUNT = 0;  \nmain () {  \n    //killMonster是杀死一个怪物，返回杀死怪物的id  \n    int id = killMonster();  \n    //如果杀死的怪物是1009那么数量加一，超过100次达成成就  \n    if (id == \"1009\") {  \n        KILL_1009_COUNT++;  \n        if (KILL_1009_COUNT > 100) {  \n            print(\"达成成就！杀死1009怪物100次！\");  \n        }  \n    }  \n}  \n```\n如果这样写下去，后果将不堪设想：各个类直接将会超级耦合，成就判断将会蔓延到整个项目的每个角落！观察者模式就是为了解决这个问题而出现的。观察者模式让代码彻底解耦，还是上面的那个例子：\n``` java\nmain () {  \n    //killMonster是杀死一个怪物，返回杀死怪物的id  \n    int id = killMonster();  \n    //发送消息，杀死怪物，并将杀死的怪物id一起发送  \n    notify(EVENT_KILL_MONSTER, id);  \n}  \n```\n这样代码的各个功能就不用关心成就相关的逻辑，只是通知我做了这样一件事情就可以了。同样，游戏中这样的例子到处都是，比如增加经验时，我们发送增加经验的消息，接收消息的地方来处理到底升没升级，因为可以增加经验的地方有很多，这样我们就不用导出判断是否升级了。下面看一下观察者的实现：\n``` java\n//处理观察者与被观察者  \nclass Notification {  \n    //一个可变的观察者列表  \n    private List observerList = null;  \n    //该类是单例（后面我们会单独讲单例模式）  \n    private static Notification _instance = null;     \n    public static getInstance() {  \n        if (_instance == null) {  \n            _instance = new Notification();  \n            //初始化列表容器  \n            observerList = new ArrayList();  \n        }  \n        return _instance;  \n    }  \n    //添加观察者  \n    public void addObserver(Observer obs) {  \n        if (!observerList.isExistobs {  \n            observerList.add(obs);  \n        }  \n    }  \n    //删除观察者  \n    public void removeObserver(Observer obs) {  \n        observerList.remove(obs);  \n    }  \n      \n    //广播消息  \n    public void sendMsg(String event, ..) {  \n        for (Observer obs : observerList) {  \n            if (obs.event == event) {  \n                obs.onNotify(..);  \n            }  \n        }  \n    }  \n}  \n  \n//观察者基类  \nclass Observer {  \n    String event;  \n    //接收消息函数，event是消息类型，后面是参数  \n    void onNotify(..)  \n    //添加观察者  \n    void addObserver(String event) {  \n        event = event;  \n        Notification.getInstance().addObserver(this);  \n    }  \n}  \n  \n//杀怪成就观察者  \nclass AchievementObserver extends Observer {  \n    void onNotify(id) {  \n        if (id == 1009) {  \n            //处理杀1009怪的成就逻辑  \n        } else if (id == 1010) {  \n            //处理杀1010怪的成就逻辑  \n        }  \n    }  \n}  \n  \nmain () {  \n    //killMonster是杀死一个怪物，返回杀死怪物的id  \n    int id = killMonster();  \n    //发送消息，杀死怪物，并将杀死的怪物id一起发送  \n    Notification.getInstance().sendMsg(EVENT_KILL_MONSTER, id);  \n}\n```\n然后在写一个成就管理类来管理各种成就观察者，这样各个成就直接也可以解耦。\n## 其他问题\n- 引用销毁问题：这个问题容易造成内存泄漏，就是在这个观察者不再使用时，一定记得将其remove，否则这个观察者一直在引用着，不会被释放。\n- 同步异步问题：sendMsg这个函数中是在主线程按加入顺序进行发送的，在特殊情况下根据需要可以使用多线程来实现。\n- 其他应用：观察者模式在MVC这种结构下也经常使用，control来处理逻辑，通过观察者来相应UI事件。\n观察者模式的优点就是可以做到完全的解耦；缺点就是使用不当会让程序难以维护和调试。","slug":"design-observer","published":1,"updated":"2016-12-01T14:59:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw6kw3ud000up5s6jap02u2e","content":"<h1 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h1><h2 id=\"通俗的定义\"><a href=\"#通俗的定义\" class=\"headerlink\" title=\"通俗的定义\"></a>通俗的定义</h2><p>触发事件的一方不关心谁来处理，处理事件的一方不关心事件是从哪里来的。观察者模式就是让观察者与被观察者彻底解耦。</p>\n<h2 id=\"结构图如下\"><a href=\"#结构图如下\" class=\"headerlink\" title=\"结构图如下\"></a>结构图如下</h2><p><img src=\"/images/design_2_observer.png\" alt=\"observer\"><br><a id=\"more\"></a></p>\n<h2 id=\"游戏开发中的使用\"><a href=\"#游戏开发中的使用\" class=\"headerlink\" title=\"游戏开发中的使用\"></a>游戏开发中的使用</h2><p>当我们设计一个成就系统的时候，往往要在各个系统都要增加判断，比如杀死某种怪物多少只，新手往往可能这么写：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> KILL_1009_COUNT = <span class=\"number\">0</span>;  </div><div class=\"line\">main () &#123;  </div><div class=\"line\">    <span class=\"comment\">//killMonster是杀死一个怪物，返回杀死怪物的id  </span></div><div class=\"line\">    <span class=\"keyword\">int</span> id = killMonster();  </div><div class=\"line\">    <span class=\"comment\">//如果杀死的怪物是1009那么数量加一，超过100次达成成就  </span></div><div class=\"line\">    <span class=\"keyword\">if</span> (id == <span class=\"string\">\"1009\"</span>) &#123;  </div><div class=\"line\">        KILL_1009_COUNT++;  </div><div class=\"line\">        <span class=\"keyword\">if</span> (KILL_1009_COUNT &gt; <span class=\"number\">100</span>) &#123;  </div><div class=\"line\">            print(<span class=\"string\">\"达成成就！杀死1009怪物100次！\"</span>);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果这样写下去，后果将不堪设想：各个类直接将会超级耦合，成就判断将会蔓延到整个项目的每个角落！观察者模式就是为了解决这个问题而出现的。观察者模式让代码彻底解耦，还是上面的那个例子：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">main () &#123;  </div><div class=\"line\">    <span class=\"comment\">//killMonster是杀死一个怪物，返回杀死怪物的id  </span></div><div class=\"line\">    <span class=\"keyword\">int</span> id = killMonster();  </div><div class=\"line\">    <span class=\"comment\">//发送消息，杀死怪物，并将杀死的怪物id一起发送  </span></div><div class=\"line\">    notify(EVENT_KILL_MONSTER, id);  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这样代码的各个功能就不用关心成就相关的逻辑，只是通知我做了这样一件事情就可以了。同样，游戏中这样的例子到处都是，比如增加经验时，我们发送增加经验的消息，接收消息的地方来处理到底升没升级，因为可以增加经验的地方有很多，这样我们就不用导出判断是否升级了。下面看一下观察者的实现：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//处理观察者与被观察者  </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Notification</span> </span>&#123;  </div><div class=\"line\">    <span class=\"comment\">//一个可变的观察者列表  </span></div><div class=\"line\">    <span class=\"keyword\">private</span> List observerList = <span class=\"keyword\">null</span>;  </div><div class=\"line\">    <span class=\"comment\">//该类是单例（后面我们会单独讲单例模式）  </span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Notification _instance = <span class=\"keyword\">null</span>;     </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span> (_instance == <span class=\"keyword\">null</span>) &#123;  </div><div class=\"line\">            _instance = <span class=\"keyword\">new</span> Notification();  </div><div class=\"line\">            <span class=\"comment\">//初始化列表容器  </span></div><div class=\"line\">            observerList = <span class=\"keyword\">new</span> ArrayList();  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        <span class=\"keyword\">return</span> _instance;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"comment\">//添加观察者  </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addObserver</span><span class=\"params\">(Observer obs)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span> (!observerList.isExistobs &#123;  </div><div class=\"line\">            observerList.add(obs);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"comment\">//删除观察者  </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeObserver</span><span class=\"params\">(Observer obs)</span> </span>&#123;  </div><div class=\"line\">        observerList.remove(obs);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"comment\">//广播消息  </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sendMsg</span><span class=\"params\">(String event, ..)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">for</span> (Observer obs : observerList) &#123;  </div><div class=\"line\">            <span class=\"keyword\">if</span> (obs.event == event) &#123;  </div><div class=\"line\">                obs.onNotify(..);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//观察者基类  </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer</span> </span>&#123;  </div><div class=\"line\">    String event;  </div><div class=\"line\">    <span class=\"comment\">//接收消息函数，event是消息类型，后面是参数  </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onNotify</span><span class=\"params\">(..)</span>  </span></div><div class=\"line\">    <span class=\"comment\">//添加观察者  </span></div><div class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title\">addObserver</span><span class=\"params\">(String event)</span> &#123;  </div><div class=\"line\">        event = event;  </div><div class=\"line\">        Notification.getInstance().addObserver(<span class=\"keyword\">this</span>);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//杀怪成就观察者  </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AchievementObserver</span> <span class=\"keyword\">extends</span> <span class=\"title\">Observer</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onNotify</span><span class=\"params\">(id)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span> (id == <span class=\"number\">1009</span>) &#123;  </div><div class=\"line\">            <span class=\"comment\">//处理杀1009怪的成就逻辑  </span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (id == <span class=\"number\">1010</span>) &#123;  </div><div class=\"line\">            <span class=\"comment\">//处理杀1010怪的成就逻辑  </span></div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\">main () &#123;  </div><div class=\"line\">    <span class=\"comment\">//killMonster是杀死一个怪物，返回杀死怪物的id  </span></div><div class=\"line\">    <span class=\"keyword\">int</span> id = killMonster();  </div><div class=\"line\">    <span class=\"comment\">//发送消息，杀死怪物，并将杀死的怪物id一起发送  </span></div><div class=\"line\">    Notification.getInstance().sendMsg(EVENT_KILL_MONSTER, id);  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然后在写一个成就管理类来管理各种成就观察者，这样各个成就直接也可以解耦。</p>\n<h2 id=\"其他问题\"><a href=\"#其他问题\" class=\"headerlink\" title=\"其他问题\"></a>其他问题</h2><ul>\n<li>引用销毁问题：这个问题容易造成内存泄漏，就是在这个观察者不再使用时，一定记得将其remove，否则这个观察者一直在引用着，不会被释放。</li>\n<li>同步异步问题：sendMsg这个函数中是在主线程按加入顺序进行发送的，在特殊情况下根据需要可以使用多线程来实现。</li>\n<li>其他应用：观察者模式在MVC这种结构下也经常使用，control来处理逻辑，通过观察者来相应UI事件。<br>观察者模式的优点就是可以做到完全的解耦；缺点就是使用不当会让程序难以维护和调试。</li>\n</ul>\n","excerpt":"<h1 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h1><h2 id=\"通俗的定义\"><a href=\"#通俗的定义\" class=\"headerlink\" title=\"通俗的定义\"></a>通俗的定义</h2><p>触发事件的一方不关心谁来处理，处理事件的一方不关心事件是从哪里来的。观察者模式就是让观察者与被观察者彻底解耦。</p>\n<h2 id=\"结构图如下\"><a href=\"#结构图如下\" class=\"headerlink\" title=\"结构图如下\"></a>结构图如下</h2><p><img src=\"/images/design_2_observer.png\" alt=\"observer\"><br>","more":"</p>\n<h2 id=\"游戏开发中的使用\"><a href=\"#游戏开发中的使用\" class=\"headerlink\" title=\"游戏开发中的使用\"></a>游戏开发中的使用</h2><p>当我们设计一个成就系统的时候，往往要在各个系统都要增加判断，比如杀死某种怪物多少只，新手往往可能这么写：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> KILL_1009_COUNT = <span class=\"number\">0</span>;  </div><div class=\"line\">main () &#123;  </div><div class=\"line\">    <span class=\"comment\">//killMonster是杀死一个怪物，返回杀死怪物的id  </span></div><div class=\"line\">    <span class=\"keyword\">int</span> id = killMonster();  </div><div class=\"line\">    <span class=\"comment\">//如果杀死的怪物是1009那么数量加一，超过100次达成成就  </span></div><div class=\"line\">    <span class=\"keyword\">if</span> (id == <span class=\"string\">\"1009\"</span>) &#123;  </div><div class=\"line\">        KILL_1009_COUNT++;  </div><div class=\"line\">        <span class=\"keyword\">if</span> (KILL_1009_COUNT &gt; <span class=\"number\">100</span>) &#123;  </div><div class=\"line\">            print(<span class=\"string\">\"达成成就！杀死1009怪物100次！\"</span>);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果这样写下去，后果将不堪设想：各个类直接将会超级耦合，成就判断将会蔓延到整个项目的每个角落！观察者模式就是为了解决这个问题而出现的。观察者模式让代码彻底解耦，还是上面的那个例子：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">main () &#123;  </div><div class=\"line\">    <span class=\"comment\">//killMonster是杀死一个怪物，返回杀死怪物的id  </span></div><div class=\"line\">    <span class=\"keyword\">int</span> id = killMonster();  </div><div class=\"line\">    <span class=\"comment\">//发送消息，杀死怪物，并将杀死的怪物id一起发送  </span></div><div class=\"line\">    notify(EVENT_KILL_MONSTER, id);  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这样代码的各个功能就不用关心成就相关的逻辑，只是通知我做了这样一件事情就可以了。同样，游戏中这样的例子到处都是，比如增加经验时，我们发送增加经验的消息，接收消息的地方来处理到底升没升级，因为可以增加经验的地方有很多，这样我们就不用导出判断是否升级了。下面看一下观察者的实现：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//处理观察者与被观察者  </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Notification</span> </span>&#123;  </div><div class=\"line\">    <span class=\"comment\">//一个可变的观察者列表  </span></div><div class=\"line\">    <span class=\"keyword\">private</span> List observerList = <span class=\"keyword\">null</span>;  </div><div class=\"line\">    <span class=\"comment\">//该类是单例（后面我们会单独讲单例模式）  </span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Notification _instance = <span class=\"keyword\">null</span>;     </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span> (_instance == <span class=\"keyword\">null</span>) &#123;  </div><div class=\"line\">            _instance = <span class=\"keyword\">new</span> Notification();  </div><div class=\"line\">            <span class=\"comment\">//初始化列表容器  </span></div><div class=\"line\">            observerList = <span class=\"keyword\">new</span> ArrayList();  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        <span class=\"keyword\">return</span> _instance;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"comment\">//添加观察者  </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addObserver</span><span class=\"params\">(Observer obs)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span> (!observerList.isExistobs &#123;  </div><div class=\"line\">            observerList.add(obs);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"comment\">//删除观察者  </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeObserver</span><span class=\"params\">(Observer obs)</span> </span>&#123;  </div><div class=\"line\">        observerList.remove(obs);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"comment\">//广播消息  </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sendMsg</span><span class=\"params\">(String event, ..)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">for</span> (Observer obs : observerList) &#123;  </div><div class=\"line\">            <span class=\"keyword\">if</span> (obs.event == event) &#123;  </div><div class=\"line\">                obs.onNotify(..);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//观察者基类  </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer</span> </span>&#123;  </div><div class=\"line\">    String event;  </div><div class=\"line\">    <span class=\"comment\">//接收消息函数，event是消息类型，后面是参数  </span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onNotify</span><span class=\"params\">(..)</span>  </div><div class=\"line\">    <span class=\"comment\">//添加观察者  </span></div><div class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title\">addObserver</span><span class=\"params\">(String event)</span> </span>&#123;  </div><div class=\"line\">        event = event;  </div><div class=\"line\">        Notification.getInstance().addObserver(<span class=\"keyword\">this</span>);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//杀怪成就观察者  </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AchievementObserver</span> <span class=\"keyword\">extends</span> <span class=\"title\">Observer</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onNotify</span><span class=\"params\">(id)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span> (id == <span class=\"number\">1009</span>) &#123;  </div><div class=\"line\">            <span class=\"comment\">//处理杀1009怪的成就逻辑  </span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (id == <span class=\"number\">1010</span>) &#123;  </div><div class=\"line\">            <span class=\"comment\">//处理杀1010怪的成就逻辑  </span></div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\">main () &#123;  </div><div class=\"line\">    <span class=\"comment\">//killMonster是杀死一个怪物，返回杀死怪物的id  </span></div><div class=\"line\">    <span class=\"keyword\">int</span> id = killMonster();  </div><div class=\"line\">    <span class=\"comment\">//发送消息，杀死怪物，并将杀死的怪物id一起发送  </span></div><div class=\"line\">    Notification.getInstance().sendMsg(EVENT_KILL_MONSTER, id);  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然后在写一个成就管理类来管理各种成就观察者，这样各个成就直接也可以解耦。</p>\n<h2 id=\"其他问题\"><a href=\"#其他问题\" class=\"headerlink\" title=\"其他问题\"></a>其他问题</h2><ul>\n<li>引用销毁问题：这个问题容易造成内存泄漏，就是在这个观察者不再使用时，一定记得将其remove，否则这个观察者一直在引用着，不会被释放。</li>\n<li>同步异步问题：sendMsg这个函数中是在主线程按加入顺序进行发送的，在特殊情况下根据需要可以使用多线程来实现。</li>\n<li>其他应用：观察者模式在MVC这种结构下也经常使用，control来处理逻辑，通过观察者来相应UI事件。<br>观察者模式的优点就是可以做到完全的解耦；缺点就是使用不当会让程序难以维护和调试。</li>\n</ul>"}],"PostAsset":[],"PostCategory":[{"post_id":"ciw6kw3t00000p5s6hf0l8vbv","category_id":"ciw6kw3th0004p5s6xvubmj64","_id":"ciw6kw3ty000ep5s6xx2wrr9g"},{"post_id":"ciw6kw3tx000dp5s6pubedmw9","category_id":"ciw6kw3tw000ap5s6n3vegbk7","_id":"ciw6kw3u4000kp5s6yhiotjv3"},{"post_id":"ciw6kw3t90002p5s6emmsca72","category_id":"ciw6kw3tw000ap5s6n3vegbk7","_id":"ciw6kw3ua000pp5s6s81e7wex"},{"post_id":"ciw6kw3tz000fp5s6rsyflxea","category_id":"ciw6kw3tw000ap5s6n3vegbk7","_id":"ciw6kw3ud000sp5s6ddftdkkj"},{"post_id":"ciw6kw3u3000jp5s6qs2gd4rj","category_id":"ciw6kw3th0004p5s6xvubmj64","_id":"ciw6kw3uj000xp5s60ilh1bwl"},{"post_id":"ciw6kw3tn0006p5s6l5j9lx6p","category_id":"ciw6kw3tw000ap5s6n3vegbk7","_id":"ciw6kw3ul000zp5s6wmdm6tht"},{"post_id":"ciw6kw3tr0008p5s6c0r5bkfj","category_id":"ciw6kw3u6000np5s6czhnpd6p","_id":"ciw6kw3um0012p5s6msjz9dn1"},{"post_id":"ciw6kw3ud000up5s6jap02u2e","category_id":"ciw6kw3u6000np5s6czhnpd6p","_id":"ciw6kw3up0014p5s62yg4tgbz"},{"post_id":"ciw6kw3tv0009p5s678luii9x","category_id":"ciw6kw3tw000ap5s6n3vegbk7","_id":"ciw6kw3uq0015p5s6jj1c4enf"},{"post_id":"ciw6kw3u5000mp5s6pt6t7jx6","category_id":"ciw6kw3u6000np5s6czhnpd6p","_id":"ciw6kw3ut0018p5s6kbd8wwcm"}],"PostTag":[{"post_id":"ciw6kw3t00000p5s6hf0l8vbv","tag_id":"ciw6kw3tl0005p5s6hmzdkboc","_id":"ciw6kw3tx000cp5s6ze2vb0ff"},{"post_id":"ciw6kw3tx000dp5s6pubedmw9","tag_id":"ciw6kw3tw000bp5s6wov52xbo","_id":"ciw6kw3u2000ip5s6l19lgaaz"},{"post_id":"ciw6kw3t90002p5s6emmsca72","tag_id":"ciw6kw3tw000bp5s6wov52xbo","_id":"ciw6kw3u4000lp5s6vmz1loj9"},{"post_id":"ciw6kw3tz000fp5s6rsyflxea","tag_id":"ciw6kw3tw000bp5s6wov52xbo","_id":"ciw6kw3ua000qp5s6be3ezx8r"},{"post_id":"ciw6kw3tn0006p5s6l5j9lx6p","tag_id":"ciw6kw3tw000bp5s6wov52xbo","_id":"ciw6kw3ud000tp5s602lw243b"},{"post_id":"ciw6kw3tr0008p5s6c0r5bkfj","tag_id":"ciw6kw3u8000op5s6py3x6105","_id":"ciw6kw3ul000yp5s6r5hoxkdj"},{"post_id":"ciw6kw3tv0009p5s678luii9x","tag_id":"ciw6kw3tw000bp5s6wov52xbo","_id":"ciw6kw3un0013p5s6vhth01vf"},{"post_id":"ciw6kw3u3000jp5s6qs2gd4rj","tag_id":"ciw6kw3um0011p5s6szpuax65","_id":"ciw6kw3ur0017p5s6kcyrx23c"},{"post_id":"ciw6kw3u5000mp5s6pt6t7jx6","tag_id":"ciw6kw3uq0016p5s60wfvo5bp","_id":"ciw6kw3uv001ap5s6i74i0xiq"},{"post_id":"ciw6kw3ud000up5s6jap02u2e","tag_id":"ciw6kw3ut0019p5s6m8n6024k","_id":"ciw6kw3ux001bp5s6xf0pchuw"}],"Tag":[{"name":"多线程","_id":"ciw6kw3tl0005p5s6hmzdkboc"},{"name":"ExtJS","_id":"ciw6kw3tw000bp5s6wov52xbo"},{"name":"命令模式","_id":"ciw6kw3u8000op5s6py3x6105"},{"name":"［WebService,java］","_id":"ciw6kw3um0011p5s6szpuax65"},{"name":"单例模式","_id":"ciw6kw3uq0016p5s60wfvo5bp"},{"name":"观察者模式","_id":"ciw6kw3ut0019p5s6m8n6024k"}]}}